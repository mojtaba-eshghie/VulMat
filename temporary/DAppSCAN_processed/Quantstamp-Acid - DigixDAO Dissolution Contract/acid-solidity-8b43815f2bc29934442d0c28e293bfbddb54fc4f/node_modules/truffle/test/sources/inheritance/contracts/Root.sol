// File: truffle/test/sources/inheritance/contracts/LeafC.sol

pragma solidity ^0.5.0;

contract LeafC {
  uint leafC;
}

// File: truffle/test/sources/inheritance/contracts/LeafA.sol

pragma solidity ^0.5.0;

contract LeafA is LeafC {
  uint leafA;
}

// File: truffle/test/sources/inheritance/contracts/LeafB.sol

pragma solidity ^0.5.0;

contract LeafB is LeafC {
  uint leafB;
}

// File: truffle/test/sources/inheritance/contracts/Branch.sol

pragma solidity ^0.5.0;


contract Branch is LeafA, LeafB {
  uint branch;
}

// File: truffle/test/sources/inheritance/contracts/LibraryA.sol

pragma solidity ^0.5.0;


library LibraryA {

  function add(uint a, uint b) public pure returns (uint) {
    return a + b;
  }
}

// File: truffle/test/sources/inheritance/contracts/Root.sol

pragma solidity ^0.5.0;




contract Root is Branch {
  uint root;

  function addToRoot(uint a, uint b) public {
    root = LibraryA.add(a, b);
  }
}
