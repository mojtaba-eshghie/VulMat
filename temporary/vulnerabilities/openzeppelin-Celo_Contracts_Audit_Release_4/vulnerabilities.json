{
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries/LinkedLibrary1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary1.get (LinkedLibrary1.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.field += 1;\n",
                    "message": "LinkedLibrary1.increase (LinkedLibrary1.sol#14-16) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries/LinkedLibrary3.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (LinkedLibrary3.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 2;\n",
                    "message": "LinkedLibrary3.increase (LinkedLibrary3.sol#14-19) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries/TestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary1.get (TestContract.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.field += 1;\n",
                    "message": "LinkedLibrary1.increase (TestContract.sol#14-16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (TestContract.sol#28-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 2;\n",
                    "message": "LinkedLibrary3.increase (TestContract.sol#32-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.s.get();\n",
                    "message": "LinkedLibrary2.get (TestContract.sol#51-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.s.increase();\n",
                    "message": "LinkedLibrary2.increase (TestContract.sol#55-57) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  LinkedLibrary1.Struct s1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  LinkedLibrary2.Struct s2;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries/LinkedLibrary2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (LinkedLibrary2.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 2;\n",
                    "message": "LinkedLibrary3.increase (LinkedLibrary2.sol#14-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.s.get();\n",
                    "message": "LinkedLibrary2.get (LinkedLibrary2.sol#33-35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.s.increase();\n",
                    "message": "LinkedLibrary2.increase (LinkedLibrary2.sol#37-39) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original/MethodsRemovedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MethodsRemovedContract.sol:\n\t- pragma solidity^0.5.13 (MethodsRemovedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original/ImplementationChangeContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ImplementationChangeContract.sol:\n\t- pragma solidity^0.5.13 (ImplementationChangeContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original/MethodsAddedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MethodsAddedContract.sol:\n\t- pragma solidity^0.5.13 (MethodsAddedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original/UnmodifiedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in UnmodifiedContract.sol:\n\t- pragma solidity^0.5.13 (UnmodifiedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original/MethodsModifiedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function someMethod4(uint256 s) public payable returns (uint256) {\n\n    return s + 1;\n",
                    "message": "Contract locking ether found in MethodsModifiedContract.sol:\n\tContract MethodsModifiedContract has payable functions:\n\t - someMethod4 (MethodsModifiedContract.sol#23-25)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "  function someMethod3(uint256 s, string memory arg) public returns (uint256, string memory) {\n\n    string memory res = string(abi.encodePacked(arg, a));\n\n    a = arg;\n\n    return (s + 1, res);\n",
                    "message": "MethodsModifiedContract.someMethod3 (MethodsModifiedContract.sol#17-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function someMethod4(uint256 s) public payable returns (uint256) {\n\n    return s + 1;\n",
                    "message": "MethodsModifiedContract.someMethod4 (MethodsModifiedContract.sol#23-25) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MethodsModifiedContract.sol:\n\t- pragma solidity^0.5.13 (MethodsModifiedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MethodsModifiedContract {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function someMethod3(uint256 s, string memory arg) public returns (uint256, string memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string a = \"value\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original_modified/MethodsRemovedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": "MethodsRemovedContract.i should be constant (MethodsRemovedContract.sol#6)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MethodsRemovedContract.sol:\n\t- pragma solidity^0.5.13 (MethodsRemovedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original_modified/NewContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in NewContract.sol:\n\t- pragma solidity^0.5.13 (NewContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original_modified/ImplementationChangeContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ImplementationChangeContract.sol:\n\t- pragma solidity^0.5.13 (ImplementationChangeContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original_modified/MethodsAddedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "  function newMethod2(uint256 p) public payable returns (uint256) {\n\n    return i + 2 + p;\n",
                    "message": "Contract locking ether found in MethodsAddedContract.sol:\n\tContract MethodsAddedContract has payable functions:\n\t - newMethod2 (MethodsAddedContract.sol#20-22)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "  function newMethod2(uint256 p) public payable returns (uint256) {\n\n    return i + 2 + p;\n",
                    "message": "MethodsAddedContract.newMethod2 (MethodsAddedContract.sol#20-22) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MethodsAddedContract.sol:\n\t- pragma solidity^0.5.13 (MethodsAddedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MethodsAddedContract {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original_modified/UnmodifiedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in UnmodifiedContract.sol:\n\t- pragma solidity^0.5.13 (UnmodifiedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_big_original_modified/MethodsModifiedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "  function someMethod1(uint256 u) public {\n\n    i = u;\n",
                    "message": "MethodsModifiedContract.someMethod1 (MethodsModifiedContract.sol#9-11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function someMethod3(uint256 s, string memory arg)\n\n    public\n\n    returns (uint256, string memory, uint256)\n\n  {\n\n    string memory res = string(abi.encodePacked(arg, a));\n\n    a = arg;\n\n    return (s + 1, res, i);\n",
                    "message": "MethodsModifiedContract.someMethod3 (MethodsModifiedContract.sol#17-24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "  function someMethod4(uint256 s) public returns (uint256) {\n\n    i = s;\n\n    return s + 1;\n",
                    "message": "MethodsModifiedContract.someMethod4 (MethodsModifiedContract.sol#26-29) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MethodsModifiedContract.sol:\n\t- pragma solidity^0.5.13 (MethodsModifiedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (uint256, string memory, uint256)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string a = \"value\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 i = 3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_appended/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_appended/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange_in_parent/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange_in_parent/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_appended_in_parent/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_appended_in_parent/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_fixed_to_dynamic_array/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_original_copy/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_original_copy/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange_in_struct/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange_in_struct/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_original_complex/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_dynamic_to_fixed_array/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_contract/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_contract/LinkedLibrary1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary1.get (LinkedLibrary1.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.field += 1;\n",
                    "message": "LinkedLibrary1.increase (LinkedLibrary1.sol#14-16) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_contract/LinkedLibrary3.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (LinkedLibrary3.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 2;\n",
                    "message": "LinkedLibrary3.increase (LinkedLibrary3.sol#14-19) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_contract/TestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary1.get (TestContract.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.field += 1;\n",
                    "message": "LinkedLibrary1.increase (TestContract.sol#14-16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (TestContract.sol#28-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 2;\n",
                    "message": "LinkedLibrary3.increase (TestContract.sol#32-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.s.get();\n",
                    "message": "LinkedLibrary2.get (TestContract.sol#51-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.s.increase();\n",
                    "message": "LinkedLibrary2.increase (TestContract.sol#55-57) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  LinkedLibrary1.Struct s1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  LinkedLibrary2.Struct s2;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_contract/LinkedLibrary2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (LinkedLibrary2.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 2;\n",
                    "message": "LinkedLibrary3.increase (LinkedLibrary2.sol#14-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.s.get();\n",
                    "message": "LinkedLibrary2.get (LinkedLibrary2.sol#33-35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.s.increase();\n",
                    "message": "LinkedLibrary2.increase (LinkedLibrary2.sol#37-39) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_longer_fixed_array/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_versioned/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_versioned/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_metadata_changed/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_metadata_changed/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed_from_parent/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed_from_parent/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_internal_mapping_source_changed/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed_from_struct/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed_from_struct/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed_from_library_struct/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_removed_from_library_struct/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted_in_library_struct/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted_in_library_struct/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted_constant/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted_constant/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_mapping_target_changed/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange_in_library_struct/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_typechange_in_library_struct/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_shorter_fixed_array/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted_in_struct/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_inserted_in_struct/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_added_methods_and_contracts/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_added_methods_and_contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_lib/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_lib/LinkedLibrary1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary1.get (LinkedLibrary1.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.field += 1;\n",
                    "message": "LinkedLibrary1.increase (LinkedLibrary1.sol#14-16) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_lib/LinkedLibrary3.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (LinkedLibrary3.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 3;\n",
                    "message": "LinkedLibrary3.increase (LinkedLibrary3.sol#14-19) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_lib/TestContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary1.get (TestContract.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.field += 1;\n",
                    "message": "LinkedLibrary1.increase (TestContract.sol#14-16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (TestContract.sol#28-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 3;\n",
                    "message": "LinkedLibrary3.increase (TestContract.sol#32-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.s.get();\n",
                    "message": "LinkedLibrary2.get (TestContract.sol#51-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.s.increase();\n",
                    "message": "LinkedLibrary2.increase (TestContract.sol#55-57) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  LinkedLibrary1.Struct s1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  LinkedLibrary2.Struct s2;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_linked_libraries_upgraded_lib/LinkedLibrary2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.field;\n",
                    "message": "LinkedLibrary3.get (LinkedLibrary2.sol#10-12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    if (s.field == 0) {\n\n      s.field = 1;\n\n    }\n\n    s.field *= 3;\n",
                    "message": "LinkedLibrary3.increase (LinkedLibrary2.sol#14-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "  function get(Struct storage s) public view returns (uint256) {\n\n    return s.s.get();\n",
                    "message": "LinkedLibrary2.get (LinkedLibrary2.sol#33-35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function increase(Struct storage s) public {\n\n    s.s.increase();\n",
                    "message": "LinkedLibrary2.increase (LinkedLibrary2.sol#37-39) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_mapping_source_changed/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_original/TestLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestLibrary.sol:\n\t- pragma solidity^0.5.13 (TestLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/test/resources/compatibility/contracts_original/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/specs/harnesses/IRegistryExtended.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IRegistryExtended.sol:\n\t- pragma solidity^0.5.13 (IRegistryExtended.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isValidating(address) external returns (bool);\n",
                    "message": "Parameter '' of IRegistryExtended.isValidating (IRegistryExtended.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVoterFromAccount(address) external returns (address);\n",
                    "message": "Parameter '' of IRegistryExtended.getVoterFromAccount (IRegistryExtended.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAccountWeight(address) external returns (uint256);\n",
                    "message": "Parameter '' of IRegistryExtended.getAccountWeight (IRegistryExtended.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.5.13 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public last_completed_migration; // solhint-disable var-name-mixedcase\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/identity/test/IdentityProxyTest.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function payMe() external payable {\n\n    amountLastPaid = msg.value;\n",
                    "message": "Contract locking ether found in IdentityProxyTest.sol:\n\tContract IdentityProxyTest has payable functions:\n\t - payMe (IdentityProxyTest.sol#14-16)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IdentityProxyTest.sol:\n\t- pragma solidity^0.5.13 (IdentityProxyTest.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setX(uint256 _x) external {\n",
                    "message": "Parameter '_x' of IdentityProxyTest.setX (IdentityProxyTest.sol#18) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract IdentityProxyTest {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/identity/interfaces/IAttestations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_44"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IAttestations.sol:\n\t- pragma solidity^0.5.13 (IAttestations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function request(bytes32, uint256, address) external;\n",
                    "message": "Parameter '' of IAttestations.request (IAttestations.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function request(bytes32, uint256, address) external;\n",
                    "message": "Parameter '_scope_0' of IAttestations.request (IAttestations.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function request(bytes32, uint256, address) external;\n",
                    "message": "Parameter '_scope_1' of IAttestations.request (IAttestations.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function selectIssuers(bytes32) external;\n",
                    "message": "Parameter '' of IAttestations.selectIssuers (IAttestations.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function complete(bytes32, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IAttestations.complete (IAttestations.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revoke(bytes32, uint256) external;\n",
                    "message": "Parameter '' of IAttestations.revoke (IAttestations.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revoke(bytes32, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IAttestations.revoke (IAttestations.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(address) external;\n",
                    "message": "Parameter '' of IAttestations.withdraw (IAttestations.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
                    "message": "Parameter '' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
                    "message": "Parameter '_scope_0' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
                    "message": "Parameter '_scope_1' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
                    "message": "Parameter '_scope_2' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approveTransfer(bytes32, uint256, address, address, bool) external;\n",
                    "message": "Parameter '_scope_3' of IAttestations.approveTransfer (IAttestations.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\n",
                    "message": "Parameter '' of IAttestations.getUnselectedRequest (IAttestations.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\n",
                    "message": "Parameter '_scope_0' of IAttestations.getUnselectedRequest (IAttestations.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\n",
                    "message": "Parameter '' of IAttestations.getAttestationIssuers (IAttestations.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationIssuers(bytes32, address) external view returns (address[] memory);\n",
                    "message": "Parameter '_scope_0' of IAttestations.getAttestationIssuers (IAttestations.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\n",
                    "message": "Parameter '' of IAttestations.getAttestationStats (IAttestations.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\n",
                    "message": "Parameter '_scope_0' of IAttestations.getAttestationStats (IAttestations.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function batchGetAttestationStats(bytes32[] calldata)\n",
                    "message": "Parameter '' of IAttestations.batchGetAttestationStats (IAttestations.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationState(bytes32, address, address)\n",
                    "message": "Parameter '' of IAttestations.getAttestationState (IAttestations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationState(bytes32, address, address)\n",
                    "message": "Parameter '_scope_0' of IAttestations.getAttestationState (IAttestations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationState(bytes32, address, address)\n",
                    "message": "Parameter '_scope_1' of IAttestations.getAttestationState (IAttestations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCompletableAttestations(bytes32, address)\n",
                    "message": "Parameter '' of IAttestations.getCompletableAttestations (IAttestations.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCompletableAttestations(bytes32, address)\n",
                    "message": "Parameter '_scope_0' of IAttestations.getCompletableAttestations (IAttestations.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationRequestFee(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IAttestations.getAttestationRequestFee (IAttestations.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_0' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_1' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_2' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validateAttestationCode(bytes32, address, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_3' of IAttestations.validateAttestationCode (IAttestations.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function lookupAccountsForIdentifier(bytes32) external view returns (address[] memory);\n",
                    "message": "Parameter '' of IAttestations.lookupAccountsForIdentifier (IAttestations.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function requireNAttestationsRequested(bytes32, address, uint32) external view;\n",
                    "message": "Parameter '' of IAttestations.requireNAttestationsRequested (IAttestations.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function requireNAttestationsRequested(bytes32, address, uint32) external view;\n",
                    "message": "Parameter '_scope_0' of IAttestations.requireNAttestationsRequested (IAttestations.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function requireNAttestationsRequested(bytes32, address, uint32) external view;\n",
                    "message": "Parameter '_scope_1' of IAttestations.requireNAttestationsRequested (IAttestations.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAttestationRequestFee(address, uint256) external;\n",
                    "message": "Parameter '' of IAttestations.setAttestationRequestFee (IAttestations.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAttestationRequestFee(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IAttestations.setAttestationRequestFee (IAttestations.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAttestationExpiryBlocks(uint256) external;\n",
                    "message": "Parameter '' of IAttestations.setAttestationExpiryBlocks (IAttestations.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setSelectIssuersWaitBlocks(uint256) external;\n",
                    "message": "Parameter '' of IAttestations.setSelectIssuersWaitBlocks (IAttestations.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMaxAttestations(uint256) external;\n",
                    "message": "Parameter '' of IAttestations.setMaxAttestations (IAttestations.sol#42) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUnselectedRequest(bytes32, address) external view returns (uint32, uint32, address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationStats(bytes32, address) external view returns (uint32, uint32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (uint256[] memory, address[] memory, uint64[] memory, uint64[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (uint8, uint32, address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (uint32[] memory, address[] memory, uint256[] memory, bytes memory);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/identity/interfaces/IEscrow.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IEscrow.sol:\n\t- pragma solidity^0.5.13 (IEscrow.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/identity/interfaces/IRandom.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IRandom.sol:\n\t- pragma solidity^0.5.13 (IRandom.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revealAndCommit(bytes32, bytes32, address) external;\n",
                    "message": "Parameter '' of IRandom.revealAndCommit (IRandom.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revealAndCommit(bytes32, bytes32, address) external;\n",
                    "message": "Parameter '_scope_0' of IRandom.revealAndCommit (IRandom.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revealAndCommit(bytes32, bytes32, address) external;\n",
                    "message": "Parameter '_scope_1' of IRandom.revealAndCommit (IRandom.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getBlockRandomness(uint256) external view returns (bytes32);\n",
                    "message": "Parameter '' of IRandom.getBlockRandomness (IRandom.sol#9) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/Initializable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!initialized, \"contract already initialized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Initializable.sol:\n\t- pragma solidity^0.5.13 (Initializable.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/CalledByVm.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender == address(0), \"Only VM can call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in CalledByVm.sol:\n\t- pragma solidity^0.5.13 (CalledByVm.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/ExtractFunctionSignature.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ExtractFunctionSignature.sol:\n\t- pragma solidity^0.5.13 (ExtractFunctionSignature.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/InitializableV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(bool testingDeployment) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!testingDeployment) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _initialize();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!initialized, \"contract already initialized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in InitializableV2.sol:\n\t- pragma solidity^0.5.13 (InitializableV2.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "  function _initialize() private {\n\n    initialized = true;\n",
                    "message": "Function 'InitializableV2._initialize' (InitializableV2.sol#20-22) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/Create2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function deploy(bytes32 salt, bytes memory initCode) internal returns (address) {\n\n    address deployedAddress;\n\n    assembly {\n\n      deployedAddress := create2(0, add(initCode, 32), mload(initCode), salt)\n\n      if iszero(extcodesize(deployedAddress)) {\n\n        revert(0, 0)\n\n      }\n\n    }\n\n    return deployedAddress;\n",
                    "message": "Create2.deploy uses assembly (Create2.sol#17-26)\n\t- Create2.sol#19-24\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in Create2.sol:\n\t- pragma solidity^0.5.13 (Create2.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, initCodeHash))))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/FixidityLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x <= maxNewFixed(), \"can't create fixidity number larger than maxNewFixed()\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(z >= x.value, \"add overflow detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x.value >= y.value, \"substraction underflow detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x1 != 0) require(x1y1 / x1 == y1, \"overflow x1y1 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \"overflow x1y1 * fixed1 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x2 != 0) require(x2y1 / x2 == y1, \"overflow x2y1 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x1 != 0) require(x1y2 / x1 == y2, \"overflow x1y2 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x2 != 0) require(x2y2 / x2 == y2, \"overflow x2y2 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x.value != 0, \"can't call reciprocal(0)\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(y.value != 0, \"can't divide by 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(X / FIXED1_UINT == x.value, \"overflow at divide\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x <= maxNewFixed(), \"can't create fixidity number larger than maxNewFixed()\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in FixidityLib.sol:\n\t- pragma solidity^0.5.13 (FixidityLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/test/GetSetV1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in GetSetV1.sol:\n\t- pragma solidity^0.5.13 (GetSetV1.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(uint256 _x, string calldata _y) external {\n",
                    "message": "Parameter '_x' of GetSetV1.set (GetSetV1.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(uint256 _x, string calldata _y) external {\n",
                    "message": "Parameter '_y' of GetSetV1.set (GetSetV1.sol#13) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function get() external view returns (uint256, string memory) {\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/test/GetSetV0.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in GetSetV0.sol:\n\t- pragma solidity^0.5.13 (GetSetV0.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(uint256 _x) external {\n",
                    "message": "Parameter '_x' of GetSetV0.set (GetSetV0.sol#12) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/test/ExtractFunctionSignatureTest.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "  function extractFunctionSignature(bytes memory input) public pure returns (bytes4) {\n\n    return ExtractFunctionSignature.extractFunctionSignature(input);\n",
                    "message": "ExtractFunctionSignatureTest.extractFunctionSignature (ExtractFunctionSignatureTest.sol#25-27) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ExtractFunctionSignatureTest.sol:\n\t- pragma solidity^0.5.13 (ExtractFunctionSignatureTest.sol#3): it allows old versions\n\t- pragma solidity^0.5.13 (ExtractFunctionSignatureTest.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/test/HasInitializer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!initialized, \"contract already initialized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in HasInitializer.sol:\n\t- pragma solidity^0.5.13 (HasInitializer.sol#3): it allows old versions\n\t- pragma solidity^0.5.13 (HasInitializer.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize(uint256 _x) external initializer {\n",
                    "message": "Parameter '_x' of HasInitializer.initialize (HasInitializer.sol#22) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/test/MsgSenderCheck.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr == msg.sender, \"address was not msg.sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MsgSenderCheck.sol:\n\t- pragma solidity^0.5.13 (MsgSenderCheck.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/test/MockGoldToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MockGoldToken.sol:\n\t- pragma solidity^0.5.13 (MockGoldToken.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) external pure returns (bool) {\n",
                    "message": "Parameter '' of MockGoldToken.transfer (MockGoldToken.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) external pure returns (bool) {\n",
                    "message": "Parameter '_scope_0' of MockGoldToken.transfer (MockGoldToken.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) external pure returns (bool) {\n",
                    "message": "Parameter '' of MockGoldToken.transferFrom (MockGoldToken.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) external pure returns (bool) {\n",
                    "message": "Parameter '_scope_0' of MockGoldToken.transferFrom (MockGoldToken.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) external pure returns (bool) {\n",
                    "message": "Parameter '_scope_1' of MockGoldToken.transferFrom (MockGoldToken.sol#22) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) external pure returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint256) external pure returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/test/FixidityTest.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x <= maxNewFixed(), \"can't create fixidity number larger than maxNewFixed()\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(z >= x.value, \"add overflow detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x.value >= y.value, \"substraction underflow detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x1 != 0) require(x1y1 / x1 == y1, \"overflow x1y1 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x1y1 != 0) require(fixed_x1y1 / x1y1 == FIXED1_UINT, \"overflow x1y1 * fixed1 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x2 != 0) require(x2y1 / x2 == y1, \"overflow x2y1 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x1 != 0) require(x1y2 / x1 == y2, \"overflow x1y2 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (x2 != 0) require(x2y2 / x2 == y2, \"overflow x2y2 detected\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x.value != 0, \"can't call reciprocal(0)\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(y.value != 0, \"can't divide by 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(X / FIXED1_UINT == x.value, \"overflow at divide\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(x <= maxNewFixed(), \"can't create fixidity number larger than maxNewFixed()\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in FixidityTest.sol:\n\t- pragma solidity^0.5.13 (FixidityTest.sol#3): it allows old versions\n\t- pragma solidity^0.5.13 (FixidityTest.sol#297): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return Fraction((x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return Fraction(x.value - (x.value / FIXED1_UINT) * FIXED1_UINT); // Can't overflow\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private constant FIXED1_UINT = 1000000000000000000000000;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/libraries/ReentrancyGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // The counter starts at one to prevent changing it from zero to a non-zero\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    // value, which is a more expensive operation.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardCounter = 1;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(localCounter == _guardCounter, \"reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ReentrancyGuard.sol:\n\t- pragma solidity^0.5.13 (ReentrancyGuard.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _guardCounter;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/IFeeCurrencyWhitelist.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IFeeCurrencyWhitelist.sol:\n\t- pragma solidity^0.5.13 (IFeeCurrencyWhitelist.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToken(address) external;\n",
                    "message": "Parameter '' of IFeeCurrencyWhitelist.addToken (IFeeCurrencyWhitelist.sol#6) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/IAccounts.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_54"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IAccounts.sol:\n\t- pragma solidity^0.5.13 (IAccounts.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isAccount(address) external view returns (bool);\n",
                    "message": "Parameter '' of IAccounts.isAccount (IAccounts.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function voteSignerToAccount(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.voteSignerToAccount (IAccounts.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validatorSignerToAccount(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.validatorSignerToAccount (IAccounts.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function attestationSignerToAccount(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.attestationSignerToAccount (IAccounts.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function signerToAccount(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.signerToAccount (IAccounts.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAttestationSigner(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.getAttestationSigner (IAccounts.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getValidatorSigner(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.getValidatorSigner (IAccounts.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVoteSigner(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.getVoteSigner (IAccounts.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hasAuthorizedVoteSigner(address) external view returns (bool);\n",
                    "message": "Parameter '' of IAccounts.hasAuthorizedVoteSigner (IAccounts.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hasAuthorizedValidatorSigner(address) external view returns (bool);\n",
                    "message": "Parameter '' of IAccounts.hasAuthorizedValidatorSigner (IAccounts.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hasAuthorizedAttestationSigner(address) external view returns (bool);\n",
                    "message": "Parameter '' of IAccounts.hasAuthorizedAttestationSigner (IAccounts.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountDataEncryptionKey(bytes calldata) external;\n",
                    "message": "Parameter '' of IAccounts.setAccountDataEncryptionKey (IAccounts.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMetadataURL(string calldata) external;\n",
                    "message": "Parameter '' of IAccounts.setMetadataURL (IAccounts.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setName(string calldata) external;\n",
                    "message": "Parameter '' of IAccounts.setName (IAccounts.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IAccounts.setWalletAddress (IAccounts.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_3' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_4' of IAccounts.setAccount (IAccounts.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getDataEncryptionKey(address) external view returns (bytes memory);\n",
                    "message": "Parameter '' of IAccounts.getDataEncryptionKey (IAccounts.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWalletAddress(address) external view returns (address);\n",
                    "message": "Parameter '' of IAccounts.getWalletAddress (IAccounts.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMetadataURL(address) external view returns (string memory);\n",
                    "message": "Parameter '' of IAccounts.getMetadataURL (IAccounts.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function batchGetMetadataURL(address[] calldata)\n",
                    "message": "Parameter '' of IAccounts.batchGetMetadataURL (IAccounts.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getName(address) external view returns (string memory);\n",
                    "message": "Parameter '' of IAccounts.getName (IAccounts.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IAccounts.authorizeVoteSigner (IAccounts.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IAccounts.authorizeValidatorSigner (IAccounts.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
                    "message": "Parameter '' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
                    "message": "Parameter '_scope_0' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
                    "message": "Parameter '_scope_1' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
                    "message": "Parameter '_scope_2' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSignerWithPublicKey(address, uint8, bytes32, bytes32, bytes calldata)\n",
                    "message": "Parameter '_scope_3' of IAccounts.authorizeValidatorSignerWithPublicKey (IAccounts.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address,\n",
                    "message": "Parameter '' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8,\n",
                    "message": "Parameter '_scope_0' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32,\n",
                    "message": "Parameter '_scope_1' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32,\n",
                    "message": "Parameter '_scope_2' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata,\n",
                    "message": "Parameter '_scope_3' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata,\n",
                    "message": "Parameter '_scope_4' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata\n",
                    "message": "Parameter '_scope_5' of IAccounts.authorizeValidatorSignerWithKeys (IAccounts.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IAccounts.authorizeAttestationSigner (IAccounts.sol#46) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (uint256[] memory, bytes memory);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/IFreezer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IFreezer.sol:\n\t- pragma solidity^0.5.13 (IFreezer.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isFrozen(address) external view returns (bool);\n",
                    "message": "Parameter '' of IFreezer.isFrozen (IFreezer.sol#6) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/IMetaTransactionWalletDeployer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deploy(address, address, bytes calldata) external;\n",
                    "message": "Parameter '' of IMetaTransactionWalletDeployer.deploy (IMetaTransactionWalletDeployer.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deploy(address, address, bytes calldata) external;\n",
                    "message": "Parameter '_scope_0' of IMetaTransactionWalletDeployer.deploy (IMetaTransactionWalletDeployer.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deploy(address, address, bytes calldata) external;\n",
                    "message": "Parameter '_scope_1' of IMetaTransactionWalletDeployer.deploy (IMetaTransactionWalletDeployer.sol#6) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/IRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IRegistry.sol:\n\t- pragma solidity^0.5.13 (IRegistry.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAddressFor(string calldata, address) external;\n",
                    "message": "Parameter '' of IRegistry.setAddressFor (IRegistry.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAddressFor(string calldata, address) external;\n",
                    "message": "Parameter '_scope_0' of IRegistry.setAddressFor (IRegistry.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAddressForOrDie(bytes32) external view returns (address);\n",
                    "message": "Parameter '' of IRegistry.getAddressForOrDie (IRegistry.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAddressFor(bytes32) external view returns (address);\n",
                    "message": "Parameter '' of IRegistry.getAddressFor (IRegistry.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOneOf(bytes32[] calldata, address) external view returns (bool);\n",
                    "message": "Parameter '' of IRegistry.isOneOf (IRegistry.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOneOf(bytes32[] calldata, address) external view returns (bool);\n",
                    "message": "Parameter '_scope_0' of IRegistry.isOneOf (IRegistry.sol#9) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/ICeloToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ICeloToken.sol:\n\t- pragma solidity^0.5.13 (ICeloToken.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferWithComment(address, uint256, string calldata) external returns (bool);\n",
                    "message": "Parameter '' of ICeloToken.transferWithComment (ICeloToken.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferWithComment(address, uint256, string calldata) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of ICeloToken.transferWithComment (ICeloToken.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferWithComment(address, uint256, string calldata) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of ICeloToken.transferWithComment (ICeloToken.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/ICeloVersionedContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ICeloVersionedContract.sol:\n\t- pragma solidity^0.5.13 (ICeloVersionedContract.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionNumber() external pure returns (uint256, uint256, uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/common/interfaces/IMetaTransactionWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_26"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IMetaTransactionWallet.sol:\n\t- pragma solidity^0.5.13 (IMetaTransactionWallet.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeMetaTransaction(address, uint256, bytes calldata, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '' of IMetaTransactionWallet.executeMetaTransaction (IMetaTransactionWallet.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeMetaTransaction(address, uint256, bytes calldata, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_0' of IMetaTransactionWallet.executeMetaTransaction (IMetaTransactionWallet.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeMetaTransaction(address, uint256, bytes calldata, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_1' of IMetaTransactionWallet.executeMetaTransaction (IMetaTransactionWallet.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeMetaTransaction(address, uint256, bytes calldata, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_2' of IMetaTransactionWallet.executeMetaTransaction (IMetaTransactionWallet.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeMetaTransaction(address, uint256, bytes calldata, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_3' of IMetaTransactionWallet.executeMetaTransaction (IMetaTransactionWallet.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeMetaTransaction(address, uint256, bytes calldata, uint8, bytes32, bytes32)\n",
                    "message": "Parameter '_scope_4' of IMetaTransactionWallet.executeMetaTransaction (IMetaTransactionWallet.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeTransaction(address, uint256, bytes calldata) external returns (bytes memory);\n",
                    "message": "Parameter '' of IMetaTransactionWallet.executeTransaction (IMetaTransactionWallet.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeTransaction(address, uint256, bytes calldata) external returns (bytes memory);\n",
                    "message": "Parameter '_scope_0' of IMetaTransactionWallet.executeTransaction (IMetaTransactionWallet.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeTransaction(address, uint256, bytes calldata) external returns (bytes memory);\n",
                    "message": "Parameter '_scope_1' of IMetaTransactionWallet.executeTransaction (IMetaTransactionWallet.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata,\n",
                    "message": "Parameter '' of IMetaTransactionWallet.executeTransactions (IMetaTransactionWallet.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] calldata,\n",
                    "message": "Parameter '_scope_0' of IMetaTransactionWallet.executeTransactions (IMetaTransactionWallet.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata,\n",
                    "message": "Parameter '_scope_1' of IMetaTransactionWallet.executeTransactions (IMetaTransactionWallet.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] calldata\n",
                    "message": "Parameter '_scope_2' of IMetaTransactionWallet.executeTransactions (IMetaTransactionWallet.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMetaTransactionDigest(address, uint256, bytes calldata, uint256)\n",
                    "message": "Parameter '' of IMetaTransactionWallet.getMetaTransactionDigest (IMetaTransactionWallet.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMetaTransactionDigest(address, uint256, bytes calldata, uint256)\n",
                    "message": "Parameter '_scope_0' of IMetaTransactionWallet.getMetaTransactionDigest (IMetaTransactionWallet.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMetaTransactionDigest(address, uint256, bytes calldata, uint256)\n",
                    "message": "Parameter '_scope_1' of IMetaTransactionWallet.getMetaTransactionDigest (IMetaTransactionWallet.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMetaTransactionDigest(address, uint256, bytes calldata, uint256)\n",
                    "message": "Parameter '_scope_2' of IMetaTransactionWallet.getMetaTransactionDigest (IMetaTransactionWallet.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address,\n",
                    "message": "Parameter '' of IMetaTransactionWallet.getMetaTransactionSigner (IMetaTransactionWallet.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256,\n",
                    "message": "Parameter '_scope_0' of IMetaTransactionWallet.getMetaTransactionSigner (IMetaTransactionWallet.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata,\n",
                    "message": "Parameter '_scope_1' of IMetaTransactionWallet.getMetaTransactionSigner (IMetaTransactionWallet.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256,\n",
                    "message": "Parameter '_scope_2' of IMetaTransactionWallet.getMetaTransactionSigner (IMetaTransactionWallet.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8,\n",
                    "message": "Parameter '_scope_3' of IMetaTransactionWallet.getMetaTransactionSigner (IMetaTransactionWallet.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32,\n",
                    "message": "Parameter '_scope_4' of IMetaTransactionWallet.getMetaTransactionSigner (IMetaTransactionWallet.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32\n",
                    "message": "Parameter '_scope_5' of IMetaTransactionWallet.getMetaTransactionSigner (IMetaTransactionWallet.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setSigner(address) external;\n",
                    "message": "Parameter '' of IMetaTransactionWallet.setSigner (IMetaTransactionWallet.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (bytes memory, uint256[] memory);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/stability/test/MockSortedOracles.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function isOldestReportExpired(address token) public view returns (bool, address) {\n\n    return (expired[token], token);\n",
                    "message": "MockSortedOracles.isOldestReportExpired (MockSortedOracles.sol#37-39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 43,
                    "vulnerability_code": "  function setOldestReportExpired(address token) public {\n\n    expired[token] = true;\n",
                    "message": "MockSortedOracles.setOldestReportExpired (MockSortedOracles.sol#41-43) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MockSortedOracles.sol:\n\t- pragma solidity^0.5.13 (MockSortedOracles.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public constant DENOMINATOR = 0x10000000000000000;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function medianRate(address token) external view returns (uint256, uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOldestReportExpired(address token) public view returns (bool, address) {\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/stability/interfaces/IReserve.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IReserve.sol:\n\t- pragma solidity^0.5.13 (IReserve.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTobinTaxStalenessThreshold(uint256) external;\n",
                    "message": "Parameter '' of IReserve.setTobinTaxStalenessThreshold (IReserve.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToken(address) external returns (bool);\n",
                    "message": "Parameter '' of IReserve.addToken (IReserve.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeToken(address, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IReserve.removeToken (IReserve.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeToken(address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IReserve.removeToken (IReserve.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferGold(address payable, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IReserve.transferGold (IReserve.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferGold(address payable, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IReserve.transferGold (IReserve.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferExchangeGold(address payable, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IReserve.transferExchangeGold (IReserve.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferExchangeGold(address payable, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IReserve.transferExchangeGold (IReserve.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addExchangeSpender(address) external;\n",
                    "message": "Parameter '' of IReserve.addExchangeSpender (IReserve.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeExchangeSpender(address, uint256) external;\n",
                    "message": "Parameter '' of IReserve.removeExchangeSpender (IReserve.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeExchangeSpender(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IReserve.removeExchangeSpender (IReserve.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addSpender(address) external;\n",
                    "message": "Parameter '' of IReserve.addSpender (IReserve.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeSpender(address) external;\n",
                    "message": "Parameter '' of IReserve.removeSpender (IReserve.sol#19) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getOrComputeTobinTax() external returns (uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/stability/interfaces/IStableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IStableToken.sol:\n\t- pragma solidity^0.5.13 (IStableToken.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IStableToken.mint (IStableToken.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IStableToken.mint (IStableToken.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burn(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IStableToken.burn (IStableToken.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setInflationParameters(uint256, uint256) external;\n",
                    "message": "Parameter '' of IStableToken.setInflationParameters (IStableToken.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setInflationParameters(uint256, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IStableToken.setInflationParameters (IStableToken.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function valueToUnits(uint256) external view returns (uint256);\n",
                    "message": "Parameter '' of IStableToken.valueToUnits (IStableToken.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unitsToValue(uint256) external view returns (uint256);\n",
                    "message": "Parameter '' of IStableToken.unitsToValue (IStableToken.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IStableToken.balanceOf (IStableToken.sol#18) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInflationParameters() external view returns (uint256, uint256, uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/stability/interfaces/IExchange.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IExchange.sol:\n\t- pragma solidity^0.5.13 (IExchange.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '' of IExchange.buy (IExchange.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IExchange.buy (IExchange.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '_scope_1' of IExchange.buy (IExchange.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sell(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '' of IExchange.sell (IExchange.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sell(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IExchange.sell (IExchange.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sell(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '_scope_1' of IExchange.sell (IExchange.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exchange(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '' of IExchange.exchange (IExchange.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exchange(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IExchange.exchange (IExchange.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exchange(uint256, uint256, bool) external returns (uint256);\n",
                    "message": "Parameter '_scope_1' of IExchange.exchange (IExchange.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setUpdateFrequency(uint256) external;\n",
                    "message": "Parameter '' of IExchange.setUpdateFrequency (IExchange.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getBuyTokenAmount(uint256, bool) external view returns (uint256);\n",
                    "message": "Parameter '' of IExchange.getBuyTokenAmount (IExchange.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getBuyTokenAmount(uint256, bool) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IExchange.getBuyTokenAmount (IExchange.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSellTokenAmount(uint256, bool) external view returns (uint256);\n",
                    "message": "Parameter '' of IExchange.getSellTokenAmount (IExchange.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSellTokenAmount(uint256, bool) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IExchange.getSellTokenAmount (IExchange.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\n",
                    "message": "Parameter '' of IExchange.getBuyAndSellBuckets (IExchange.sol#12) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/stability/interfaces/ISortedOracles.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ISortedOracles.sol:\n\t- pragma solidity^0.5.13 (ISortedOracles.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addOracle(address, address) external;\n",
                    "message": "Parameter '' of ISortedOracles.addOracle (ISortedOracles.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addOracle(address, address) external;\n",
                    "message": "Parameter '_scope_0' of ISortedOracles.addOracle (ISortedOracles.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeOracle(address, address, uint256) external;\n",
                    "message": "Parameter '' of ISortedOracles.removeOracle (ISortedOracles.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeOracle(address, address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of ISortedOracles.removeOracle (ISortedOracles.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeOracle(address, address, uint256) external;\n",
                    "message": "Parameter '_scope_1' of ISortedOracles.removeOracle (ISortedOracles.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function report(address, uint256, address, address) external;\n",
                    "message": "Parameter '' of ISortedOracles.report (ISortedOracles.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function report(address, uint256, address, address) external;\n",
                    "message": "Parameter '_scope_0' of ISortedOracles.report (ISortedOracles.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function report(address, uint256, address, address) external;\n",
                    "message": "Parameter '_scope_1' of ISortedOracles.report (ISortedOracles.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function report(address, uint256, address, address) external;\n",
                    "message": "Parameter '_scope_2' of ISortedOracles.report (ISortedOracles.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeExpiredReports(address, uint256) external;\n",
                    "message": "Parameter '' of ISortedOracles.removeExpiredReports (ISortedOracles.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeExpiredReports(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of ISortedOracles.removeExpiredReports (ISortedOracles.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function numRates(address) external view returns (uint256);\n",
                    "message": "Parameter '' of ISortedOracles.numRates (ISortedOracles.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function medianRate(address) external view returns (uint256, uint256);\n",
                    "message": "Parameter '' of ISortedOracles.medianRate (ISortedOracles.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function numTimestamps(address) external view returns (uint256);\n",
                    "message": "Parameter '' of ISortedOracles.numTimestamps (ISortedOracles.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function medianTimestamp(address) external view returns (uint256);\n",
                    "message": "Parameter '' of ISortedOracles.medianTimestamp (ISortedOracles.sol#14) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOldestReportExpired(address token) external view returns (bool, address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function medianRate(address) external view returns (uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/test/MockGovernance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function() external payable {} // solhint-disable no-empty-blocks\n",
                    "message": "Contract locking ether found in MockGovernance.sol:\n\tContract MockGovernance has payable functions:\n\t - fallback (MockGovernance.sol#19)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MockGovernance.sol:\n\t- pragma solidity^0.5.13 (MockGovernance.sol#3): it allows old versions\n\t- pragma solidity^0.5.13 (MockGovernance.sol#11): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVoting(address) external view returns (bool);\n",
                    "message": "Parameter '' of IGovernance.isVoting (MockGovernance.sol#6) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MockGovernance is IGovernance {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/test/TestTransactions.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in TestTransactions.sol:\n\t- pragma solidity^0.5.13 (TestTransactions.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/test/MockElection.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "basic-arithmetic-underflow",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    this.setActiveVotes(this.getActiveVotes() - value);\n",
                    "message": "Possible arithmetic underflow"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in MockElection.sol:\n\t- pragma solidity^0.5.13 (MockElection.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function markGroupEligible(address account, address, address) external {\n",
                    "message": "Parameter '' of MockElection.markGroupEligible (MockElection.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function markGroupEligible(address account, address, address) external {\n",
                    "message": "Parameter '_scope_0' of MockElection.markGroupEligible (MockElection.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTotalVotesByAccount(address) external view returns (uint256) {\n",
                    "message": "Parameter '' of MockElection.getTotalVotesByAccount (MockElection.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setElectedValidators(address[] calldata _electedValidators) external {\n",
                    "message": "Parameter '_electedValidators' of MockElection.setElectedValidators (MockElection.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
                    "message": "Parameter '' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
                    "message": "Parameter '_scope_0' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
                    "message": "Parameter '_scope_1' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool) {\n",
                    "message": "Parameter '_scope_2' of MockElection.vote (MockElection.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function activate(address) external returns (bool) {\n",
                    "message": "Parameter '' of MockElection.activate (MockElection.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_0' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_1' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_2' of MockElection.revokeAllActive (MockElection.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_0' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_1' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_2' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_3' of MockElection.revokeActive (MockElection.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_0' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_1' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_2' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool) {\n",
                    "message": "Parameter '_scope_3' of MockElection.revokePending (MockElection.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address,\n",
                    "message": "Parameter '' of MockElection.forceDecrementVotes (MockElection.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata,\n",
                    "message": "Parameter '_scope_0' of MockElection.forceDecrementVotes (MockElection.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata,\n",
                    "message": "Parameter '_scope_1' of MockElection.forceDecrementVotes (MockElection.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] calldata\n",
                    "message": "Parameter '_scope_2' of MockElection.forceDecrementVotes (MockElection.sol#76) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 active;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 total;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/interfaces/IReleaseGold.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_60"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "interface IReleaseGold {\n\n  function transfer(address, uint256) external;\n\n  function unlockGold(uint256) external;\n\n  function withdrawLockedGold(uint256) external;\n\n  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n\n  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n\n  function authorizeValidatorSignerWithPublicKey(\n\n    address payable,\n\n    uint8,\n\n    bytes32,\n\n    bytes32,\n\n    bytes calldata\n\n  ) external;\n\n  function authorizeValidatorSignerWithKeys(\n\n    address payable,\n\n    uint8,\n\n    bytes32,\n\n    bytes32,\n\n    bytes calldata,\n\n    bytes calldata,\n\n    bytes calldata\n\n  ) external;\n\n  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n\n  function revokeActive(address, uint256, address, address, uint256) external;\n\n  function revokePending(address, uint256, address, address, uint256) external;\n\n\n\n  // view functions\n\n  function getTotalBalance() external view returns (uint256);\n\n  function getRemainingTotalBalance() external view returns (uint256);\n\n  function getRemainingUnlockedBalance() external view returns (uint256);\n\n  function getRemainingLockedBalance() external view returns (uint256);\n\n  function getCurrentReleasedTotalAmount() external view returns (uint256);\n\n  function isRevoked() external view returns (bool);\n\n\n\n  // only beneficiary\n\n  function setCanExpire(bool) external;\n\n  function withdraw(uint256) external;\n\n  function lockGold(uint256) external;\n\n  function relockGold(uint256, uint256) external;\n\n  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n\n  function createAccount() external;\n\n  function setAccountName(string calldata) external;\n\n  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n\n  function setAccountDataEncryptionKey(bytes calldata) external;\n\n  function setAccountMetadataURL(string calldata) external;\n\n\n\n  // only owner\n\n  function setBeneficiary(address payable) external;\n\n\n\n  // only release owner\n\n  function setLiquidityProvision() external;\n\n  function setMaxDistribution(uint256) external;\n\n  function refundAndFinalize() external;\n\n  function revoke() external;\n\n  function expire() external;\n",
                    "message": "IReleaseGold (IReleaseGold.sol#5-60) has incorrect ERC20 function interface(s):\n\t-transfer (IReleaseGold.sol#6)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IReleaseGold.sol:\n\t- pragma solidity^0.5.13 (IReleaseGold.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.transfer (IReleaseGold.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.transfer (IReleaseGold.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unlockGold(uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.unlockGold (IReleaseGold.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawLockedGold(uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.withdrawLockedGold (IReleaseGold.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeVoteSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.authorizeVoteSigner (IReleaseGold.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeValidatorSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.authorizeValidatorSigner (IReleaseGold.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address payable,\n",
                    "message": "Parameter '' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8,\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32,\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32,\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata\n",
                    "message": "Parameter '_scope_3' of IReleaseGold.authorizeValidatorSignerWithPublicKey (IReleaseGold.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address payable,\n",
                    "message": "Parameter '' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8,\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32,\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32,\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata,\n",
                    "message": "Parameter '_scope_3' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata,\n",
                    "message": "Parameter '_scope_4' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata\n",
                    "message": "Parameter '_scope_5' of IReleaseGold.authorizeValidatorSignerWithKeys (IReleaseGold.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorizeAttestationSigner(address payable, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.authorizeAttestationSigner (IReleaseGold.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_3' of IReleaseGold.revokeActive (IReleaseGold.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external;\n",
                    "message": "Parameter '_scope_3' of IReleaseGold.revokePending (IReleaseGold.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCanExpire(bool) external;\n",
                    "message": "Parameter '' of IReleaseGold.setCanExpire (IReleaseGold.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.withdraw (IReleaseGold.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function lockGold(uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.lockGold (IReleaseGold.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function relockGold(uint256, uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.relockGold (IReleaseGold.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function relockGold(uint256, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.relockGold (IReleaseGold.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_3' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccount(string calldata, bytes calldata, address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_4' of IReleaseGold.setAccount (IReleaseGold.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountName(string calldata) external;\n",
                    "message": "Parameter '' of IReleaseGold.setAccountName (IReleaseGold.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_0' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_1' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountWalletAddress(address, uint8, bytes32, bytes32) external;\n",
                    "message": "Parameter '_scope_2' of IReleaseGold.setAccountWalletAddress (IReleaseGold.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountDataEncryptionKey(bytes calldata) external;\n",
                    "message": "Parameter '' of IReleaseGold.setAccountDataEncryptionKey (IReleaseGold.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAccountMetadataURL(string calldata) external;\n",
                    "message": "Parameter '' of IReleaseGold.setAccountMetadataURL (IReleaseGold.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBeneficiary(address payable) external;\n",
                    "message": "Parameter '' of IReleaseGold.setBeneficiary (IReleaseGold.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMaxDistribution(uint256) external;\n",
                    "message": "Parameter '' of IReleaseGold.setMaxDistribution (IReleaseGold.sol#56) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/interfaces/IElection.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_61"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IElection.sol:\n\t- pragma solidity^0.5.13 (IElection.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\n",
                    "message": "Parameter '' of IElection.electNValidatorSigners (IElection.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function electNValidatorSigners(uint256, uint256) external view returns (address[] memory);\n",
                    "message": "Parameter '_scope_0' of IElection.electNValidatorSigners (IElection.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool);\n",
                    "message": "Parameter '' of IElection.vote (IElection.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IElection.vote (IElection.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IElection.vote (IElection.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(address, uint256, address, address) external returns (bool);\n",
                    "message": "Parameter '_scope_2' of IElection.vote (IElection.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function activate(address) external returns (bool);\n",
                    "message": "Parameter '' of IElection.activate (IElection.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IElection.revokeActive (IElection.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IElection.revokeActive (IElection.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IElection.revokeActive (IElection.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_2' of IElection.revokeActive (IElection.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeActive(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_3' of IElection.revokeActive (IElection.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IElection.revokeAllActive (IElection.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IElection.revokeAllActive (IElection.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IElection.revokeAllActive (IElection.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokeAllActive(address, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_2' of IElection.revokeAllActive (IElection.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IElection.revokePending (IElection.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IElection.revokePending (IElection.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IElection.revokePending (IElection.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_2' of IElection.revokePending (IElection.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revokePending(address, uint256, address, address, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_3' of IElection.revokePending (IElection.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function markGroupIneligible(address) external;\n",
                    "message": "Parameter '' of IElection.markGroupIneligible (IElection.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function markGroupEligible(address, address, address) external;\n",
                    "message": "Parameter '' of IElection.markGroupEligible (IElection.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function markGroupEligible(address, address, address) external;\n",
                    "message": "Parameter '_scope_0' of IElection.markGroupEligible (IElection.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function markGroupEligible(address, address, address) external;\n",
                    "message": "Parameter '_scope_1' of IElection.markGroupEligible (IElection.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address,\n",
                    "message": "Parameter '' of IElection.forceDecrementVotes (IElection.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256,\n",
                    "message": "Parameter '_scope_0' of IElection.forceDecrementVotes (IElection.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata,\n",
                    "message": "Parameter '_scope_1' of IElection.forceDecrementVotes (IElection.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata,\n",
                    "message": "Parameter '_scope_2' of IElection.forceDecrementVotes (IElection.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] calldata\n",
                    "message": "Parameter '_scope_3' of IElection.forceDecrementVotes (IElection.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getNumVotesReceivable(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getNumVotesReceivable (IElection.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTotalVotesByAccount(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getTotalVotesByAccount (IElection.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getPendingVotesForGroupByAccount (IElection.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPendingVotesForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IElection.getPendingVotesForGroupByAccount (IElection.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getActiveVotesForGroupByAccount (IElection.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getActiveVotesForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IElection.getActiveVotesForGroupByAccount (IElection.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getTotalVotesForGroupByAccount (IElection.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTotalVotesForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IElection.getTotalVotesForGroupByAccount (IElection.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getActiveVoteUnitsForGroupByAccount (IElection.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getActiveVoteUnitsForGroupByAccount(address, address) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IElection.getActiveVoteUnitsForGroupByAccount (IElection.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTotalVotesForGroup(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getTotalVotesForGroup (IElection.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getActiveVotesForGroup(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getActiveVotesForGroup (IElection.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPendingVotesForGroup(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IElection.getPendingVotesForGroup (IElection.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGroupEligibility(address) external view returns (bool);\n",
                    "message": "Parameter '' of IElection.getGroupEligibility (IElection.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGroupEpochRewards(address, uint256, uint256[] calldata)\n",
                    "message": "Parameter '' of IElection.getGroupEpochRewards (IElection.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGroupEpochRewards(address, uint256, uint256[] calldata)\n",
                    "message": "Parameter '_scope_0' of IElection.getGroupEpochRewards (IElection.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGroupEpochRewards(address, uint256, uint256[] calldata)\n",
                    "message": "Parameter '_scope_1' of IElection.getGroupEpochRewards (IElection.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGroupsVotedForByAccount(address) external view returns (address[] memory);\n",
                    "message": "Parameter '' of IElection.getGroupsVotedForByAccount (IElection.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canReceiveVotes(address, uint256) external view returns (bool);\n",
                    "message": "Parameter '' of IElection.canReceiveVotes (IElection.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canReceiveVotes(address, uint256) external view returns (bool);\n",
                    "message": "Parameter '_scope_0' of IElection.canReceiveVotes (IElection.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hasActivatablePendingVotes(address, address) external view returns (bool);\n",
                    "message": "Parameter '' of IElection.hasActivatablePendingVotes (IElection.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hasActivatablePendingVotes(address, address) external view returns (bool);\n",
                    "message": "Parameter '_scope_0' of IElection.hasActivatablePendingVotes (IElection.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setElectableValidators(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IElection.setElectableValidators (IElection.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setElectableValidators(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IElection.setElectableValidators (IElection.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMaxNumGroupsVotedFor(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IElection.setMaxNumGroupsVotedFor (IElection.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setElectabilityThreshold(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IElection.setElectabilityThreshold (IElection.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeEpochRewards(address, uint256, address, address) external;\n",
                    "message": "Parameter '' of IElection.distributeEpochRewards (IElection.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeEpochRewards(address, uint256, address, address) external;\n",
                    "message": "Parameter '_scope_0' of IElection.distributeEpochRewards (IElection.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeEpochRewards(address, uint256, address, address) external;\n",
                    "message": "Parameter '_scope_1' of IElection.distributeEpochRewards (IElection.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeEpochRewards(address, uint256, address, address) external;\n",
                    "message": "Parameter '_scope_2' of IElection.distributeEpochRewards (IElection.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getElectableValidators() external view returns (uint256, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (address[] memory, uint256[] memory);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/interfaces/IValidators.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_61"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IValidators.sol:\n\t- pragma solidity^0.5.13 (IValidators.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '' of IValidators.registerValidator (IValidators.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '_scope_0' of IValidators.registerValidator (IValidators.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerValidator(bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '_scope_1' of IValidators.registerValidator (IValidators.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deregisterValidator(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.deregisterValidator (IValidators.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function affiliate(address) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.affiliate (IValidators.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.updateBlsPublicKey (IValidators.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateBlsPublicKey(bytes calldata, bytes calldata) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IValidators.updateBlsPublicKey (IValidators.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerValidatorGroup(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.registerValidatorGroup (IValidators.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deregisterValidatorGroup(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.deregisterValidatorGroup (IValidators.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMember(address) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.addMember (IValidators.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addFirstMember(address, address, address) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.addFirstMember (IValidators.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addFirstMember(address, address, address) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IValidators.addFirstMember (IValidators.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addFirstMember(address, address, address) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IValidators.addFirstMember (IValidators.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeMember(address) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.removeMember (IValidators.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reorderMember(address, address, address) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.reorderMember (IValidators.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reorderMember(address, address, address) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IValidators.reorderMember (IValidators.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reorderMember(address, address, address) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IValidators.reorderMember (IValidators.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setNextCommissionUpdate(uint256) external;\n",
                    "message": "Parameter '' of IValidators.setNextCommissionUpdate (IValidators.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCommissionUpdateDelay(uint256) external;\n",
                    "message": "Parameter '' of IValidators.setCommissionUpdateDelay (IValidators.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMaxGroupSize(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.setMaxGroupSize (IValidators.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMembershipHistoryLength(uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.setMembershipHistoryLength (IValidators.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.setValidatorScoreParameters (IValidators.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setValidatorScoreParameters(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IValidators.setValidatorScoreParameters (IValidators.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.setGroupLockedGoldRequirements (IValidators.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setGroupLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IValidators.setGroupLockedGoldRequirements (IValidators.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.setValidatorLockedGoldRequirements (IValidators.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setValidatorLockedGoldRequirements(uint256, uint256) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IValidators.setValidatorLockedGoldRequirements (IValidators.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setSlashingMultiplierResetPeriod(uint256) external;\n",
                    "message": "Parameter '' of IValidators.setSlashingMultiplierResetPeriod (IValidators.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMembershipHistory(address)\n",
                    "message": "Parameter '' of IValidators.getMembershipHistory (IValidators.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateEpochScore(uint256) external view returns (uint256);\n",
                    "message": "Parameter '' of IValidators.calculateEpochScore (IValidators.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateGroupEpochScore(uint256[] calldata) external view returns (uint256);\n",
                    "message": "Parameter '' of IValidators.calculateGroupEpochScore (IValidators.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAccountLockedGoldRequirement(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IValidators.getAccountLockedGoldRequirement (IValidators.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function meetsAccountLockedGoldRequirements(address) external view returns (bool);\n",
                    "message": "Parameter '' of IValidators.meetsAccountLockedGoldRequirements (IValidators.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getValidatorBlsPublicKeyFromSigner(address) external view returns (bytes memory);\n",
                    "message": "Parameter '' of IValidators.getValidatorBlsPublicKeyFromSigner (IValidators.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getValidatorGroup(address)\n",
                    "message": "Parameter '' of IValidators.getValidatorGroup (IValidators.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGroupNumMembers(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IValidators.getGroupNumMembers (IValidators.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\n",
                    "message": "Parameter '' of IValidators.getTopGroupValidators (IValidators.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTopGroupValidators(address, uint256) external view returns (address[] memory);\n",
                    "message": "Parameter '_scope_0' of IValidators.getTopGroupValidators (IValidators.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\n",
                    "message": "Parameter '' of IValidators.groupMembershipInEpoch (IValidators.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\n",
                    "message": "Parameter '_scope_0' of IValidators.groupMembershipInEpoch (IValidators.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function groupMembershipInEpoch(address, uint256, uint256) external view returns (address);\n",
                    "message": "Parameter '_scope_1' of IValidators.groupMembershipInEpoch (IValidators.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\n",
                    "message": "Parameter '' of IValidators.updateEcdsaPublicKey (IValidators.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IValidators.updateEcdsaPublicKey (IValidators.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateEcdsaPublicKey(address, address, bytes calldata) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IValidators.updateEcdsaPublicKey (IValidators.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '_scope_0' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '_scope_1' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '_scope_2' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePublicKeys(address, address, bytes calldata, bytes calldata, bytes calldata)\n",
                    "message": "Parameter '_scope_3' of IValidators.updatePublicKeys (IValidators.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isValidatorGroup(address) external view returns (bool);\n",
                    "message": "Parameter '' of IValidators.isValidatorGroup (IValidators.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isValidator(address) external view returns (bool);\n",
                    "message": "Parameter '' of IValidators.isValidator (IValidators.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getValidatorGroupSlashingMultiplier(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IValidators.getValidatorGroupSlashingMultiplier (IValidators.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMembershipInLastEpoch(address) external view returns (address);\n",
                    "message": "Parameter '' of IValidators.getMembershipInLastEpoch (IValidators.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getMembershipInLastEpochFromSigner(address) external view returns (address);\n",
                    "message": "Parameter '' of IValidators.getMembershipInLastEpochFromSigner (IValidators.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateValidatorScoreFromSigner(address, uint256) external;\n",
                    "message": "Parameter '' of IValidators.updateValidatorScoreFromSigner (IValidators.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateValidatorScoreFromSigner(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IValidators.updateValidatorScoreFromSigner (IValidators.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\n",
                    "message": "Parameter '' of IValidators.distributeEpochPaymentsFromSigner (IValidators.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeEpochPaymentsFromSigner(address, uint256) external returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IValidators.distributeEpochPaymentsFromSigner (IValidators.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function forceDeaffiliateIfValidator(address) external;\n",
                    "message": "Parameter '' of IValidators.forceDeaffiliateIfValidator (IValidators.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function halveSlashingMultiplier(address) external;\n",
                    "message": "Parameter '' of IValidators.halveSlashingMultiplier (IValidators.sol#84) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getValidatorScoreParameters() external view returns (uint256, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (uint256[] memory, address[] memory, uint256, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (bytes memory, bytes memory, address, uint256, address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (address[] memory, uint256, uint256, uint256, uint256[] memory, uint256, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getValidatorLockedGoldRequirements() external view returns (uint256, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getGroupLockedGoldRequirements() external view returns (uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/interfaces/IGovernance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in IGovernance.sol:\n\t- pragma solidity^0.5.13 (IGovernance.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVoting(address) external view returns (bool);\n",
                    "message": "Parameter '' of IGovernance.isVoting (IGovernance.sol#6) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                }
            ]
        }
    },
    "celo-monorepo-f64b4c5b5228ecbf41e3e7cfdbb8c0e9a983eea2/packages/protocol/contracts/governance/interfaces/ILockedGold.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": "Detected issues with version pragma in ILockedGold.sol:\n\t- pragma solidity^0.5.13 (ILockedGold.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function incrementNonvotingAccountBalance(address, uint256) external;\n",
                    "message": "Parameter '' of ILockedGold.incrementNonvotingAccountBalance (ILockedGold.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function incrementNonvotingAccountBalance(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of ILockedGold.incrementNonvotingAccountBalance (ILockedGold.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrementNonvotingAccountBalance(address, uint256) external;\n",
                    "message": "Parameter '' of ILockedGold.decrementNonvotingAccountBalance (ILockedGold.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrementNonvotingAccountBalance(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of ILockedGold.decrementNonvotingAccountBalance (ILockedGold.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAccountTotalLockedGold(address) external view returns (uint256);\n",
                    "message": "Parameter '' of ILockedGold.getAccountTotalLockedGold (ILockedGold.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getPendingWithdrawals(address)\n",
                    "message": "Parameter '' of ILockedGold.getPendingWithdrawals (ILockedGold.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTotalPendingWithdrawals(address) external view returns (uint256);\n",
                    "message": "Parameter '' of ILockedGold.getTotalPendingWithdrawals (ILockedGold.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unlock(uint256) external;\n",
                    "message": "Parameter '' of ILockedGold.unlock (ILockedGold.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function relock(uint256, uint256) external;\n",
                    "message": "Parameter '' of ILockedGold.relock (ILockedGold.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function relock(uint256, uint256) external;\n",
                    "message": "Parameter '_scope_0' of ILockedGold.relock (ILockedGold.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256) external;\n",
                    "message": "Parameter '' of ILockedGold.withdraw (ILockedGold.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isSlasher(address) external view returns (bool);\n",
                    "message": "Parameter '' of ILockedGold.isSlasher (ILockedGold.sol#28) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.13;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (uint256[] memory, uint256[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function slash(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata lessers,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata greaters,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata greaters,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] calldata indices\n",
                    "message": null
                }
            ]
        }
    }
}