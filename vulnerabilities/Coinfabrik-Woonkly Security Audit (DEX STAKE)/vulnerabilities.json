{
    "STAKESmartContractPreRelease-main/IInvestiable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": "Detected issues with version pragma in IInvestiable.sol:\n\t- pragma solidity^0.6.6 (IInvestiable.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function FreezeExist(address account) external  view  returns(bool);\n",
                    "message": "Function 'IInvestable.FreezeExist' (IInvestiable.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function FreezeIndexExist(uint256 index) external  view  returns(bool);\n",
                    "message": "Function 'IInvestable.FreezeIndexExist' (IInvestiable.sol#39) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFreeze(address account) external  view  returns( uint256 , uint256 , uint256 );\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFreezeByIndex(uint256 index) external  view  returns( uint256 , uint256 , uint256 );\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAllFreeze() external  view  returns(uint256[] memory, address[] memory ,uint256[] memory , uint256[] memory , uint256[] memory );\n",
                    "message": null
                }
            ]
        }
    },
    "STAKESmartContractPreRelease-main/IWStaked.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": "Detected issues with version pragma in IWStaked.sol:\n\t- pragma solidity^0.6.6 (IWStaked.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NotifyAddStake(address account, uint256 amount) external returns(bool);\n",
                    "message": "Function 'IWStaked.NotifyAddStake' (IWStaked.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NotifyWithdrawFunds(address account, uint256 amount) external returns(uint256);\n",
                    "message": "Function 'IWStaked.NotifyWithdrawFunds' (IWStaked.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NotifyActiveChanged(bool activeStatus)  external returns(bool);\n",
                    "message": "Function 'IWStaked.NotifyActiveChanged' (IWStaked.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function StakeExist(address account) external  view  returns (bool) ;\n",
                    "message": "Function 'IWStaked.StakeExist' (IWStaked.sol#38) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStake(address account) external  view  returns( uint256 ,bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStakeByIndex(uint256 index) external  view   returns(address, uint256,bool,uint8) ;\n",
                    "message": null
                }
            ]
        }
    },
    "STAKESmartContractPreRelease-main/utils/Utils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        len++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": "Detected issues with version pragma in Utils.sol:\n\t- pragma solidity^0.6.6 (Utils.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": " function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n",
                    "message": "Parameter '_i' of Utils.uint2str (Utils.sol#17) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.6;\n",
                    "message": null
                }
            ]
        }
    }
}