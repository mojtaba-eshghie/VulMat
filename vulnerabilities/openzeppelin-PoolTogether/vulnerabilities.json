{
    "pooltogether-pool-contracts-78ac6863f4616269f7d04a0ddd1d60bdfc454937/contracts/UniformRandomNumber.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in UniformRandomNumber.sol:\n\t- pragma solidity0.5.12 (UniformRandomNumber.sol#21): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n",
                    "message": "Parameter '_entropy' of UniformRandomNumber.uniform (UniformRandomNumber.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n",
                    "message": "Parameter '_upperBound' of UniformRandomNumber.uniform (UniformRandomNumber.sol#33) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (true) {\n",
                    "message": null
                }
            ]
        }
    },
    "pooltogether-pool-contracts-78ac6863f4616269f7d04a0ddd1d60bdfc454937/contracts/test/ExposedUniformRandomNumber.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Different versions of Solidity is used in ExposedUniformRandomNumber.sol:\n\t- Version used: ['0.5.12', '^0.5.12']\n\t- ExposedUniformRandomNumber.sol#21 declares pragma solidity0.5.12\n\t- ExposedUniformRandomNumber.sol#69 declares pragma solidity^0.5.12\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) public pure returns (uint256) {\n\n    return UniformRandomNumber.uniform(_entropy, _upperBound);\n",
                    "message": "ExposedUniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#72-74) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in ExposedUniformRandomNumber.sol:\n\t- pragma solidity0.5.12 (ExposedUniformRandomNumber.sol#21): it allows old versions\n\t- pragma solidity^0.5.12 (ExposedUniformRandomNumber.sol#69): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n",
                    "message": "Parameter '_entropy' of UniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) internal pure returns (uint256) {\n",
                    "message": "Parameter '_upperBound' of UniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) public pure returns (uint256) {\n",
                    "message": "Parameter '_entropy' of ExposedUniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function uniform(uint256 _entropy, uint256 _upperBound) public pure returns (uint256) {\n",
                    "message": "Parameter '_upperBound' of ExposedUniformRandomNumber.uniform (ExposedUniformRandomNumber.sol#72) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": null
                }
            ]
        }
    },
    "pooltogether-pool-contracts-78ac6863f4616269f7d04a0ddd1d60bdfc454937/contracts/test/maker/MockJoinLike.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _gem,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dai\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    gem = _gem;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    dai = _dai;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": "Detected issues with version pragma in MockJoinLike.sol:\n\t- pragma solidity^0.5.12 (MockJoinLike.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _gem,\n",
                    "message": "Parameter '_gem' of MockJoinLike. (MockJoinLike.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dai\n",
                    "message": "Parameter '_dai' of MockJoinLike. (MockJoinLike.sol#13) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.12;\n",
                    "message": null
                }
            ]
        }
    },
    "pooltogether-pool-contracts-78ac6863f4616269f7d04a0ddd1d60bdfc454937/contracts/compound/ICErc20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public underlying;\n",
                    "message": "ICErc20.underlying should be constant (ICErc20.sol#24)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in ICErc20.sol:\n\t- pragma solidity0.5.12 (ICErc20.sol#21): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    }
}