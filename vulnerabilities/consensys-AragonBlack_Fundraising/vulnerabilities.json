{
    "fundraising-5ad1332955bab9d36cfad345ae92b7ad7dc0bdbe/shared/test-helpers/contracts/ForceSendETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "fundraising-5ad1332955bab9d36cfad345ae92b7ad7dc0bdbe/shared/interfaces/contracts/IAragonFundraisingController.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function collateralsToBeClaimed(address _collateral) public view returns (uint256);\n",
                    "message": "IAragonFundraisingController.collateralsToBeClaimed (IAragonFundraisingController.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who, address _token) public view returns (uint256);\n",
                    "message": "IAragonFundraisingController.balanceOf (IAragonFundraisingController.sol#9) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "fundraising-5ad1332955bab9d36cfad345ae92b7ad7dc0bdbe/apps/bancor-formula/contracts/interfaces/IBancorFormula.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public view returns (uint256);\n",
                    "message": "IBancorFormula.calculatePurchaseReturn (IBancorFormula.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calculateSaleReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public view returns (uint256);\n",
                    "message": "IBancorFormula.calculateSaleReturn (IBancorFormula.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calculateCrossConnectorReturn(uint256 _fromConnectorBalance, uint32 _fromConnectorWeight, uint256 _toConnectorBalance, uint32 _toConnectorWeight, uint256 _amount) public view returns (uint256);\n",
                    "message": "IBancorFormula.calculateCrossConnectorReturn (IBancorFormula.sol#11) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "fundraising-5ad1332955bab9d36cfad345ae92b7ad7dc0bdbe/apps/bancor-formula/contracts/utility/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_x' of SafeMath.add (SafeMath.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_y' of SafeMath.add (SafeMath.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_x' of SafeMath.sub (SafeMath.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_y' of SafeMath.sub (SafeMath.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_x' of SafeMath.mul (SafeMath.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_y' of SafeMath.mul (SafeMath.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_x' of SafeMath.div (SafeMath.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n",
                    "message": "Parameter '_y' of SafeMath.div (SafeMath.sol#62) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "fundraising-5ad1332955bab9d36cfad345ae92b7ad7dc0bdbe/apps/bancor-formula/contracts/utility/Utils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    }
}