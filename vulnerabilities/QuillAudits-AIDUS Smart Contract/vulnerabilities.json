{
    "Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ERC20Frozenable is ERC20Burnable, ERC20Mintable, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _addMinter(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor()\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ERC20Detailed(\"AIDUS TOKEN\", \"AIDUS\", 18)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 supply = 10000000000;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 initialSupply = supply * uint(10) ** decimals();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _mint(msg.sender, initialSupply);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_frozenAccount[target] != freeze, \"Same as current\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_frozenAccount[from], \"error - frozen\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_frozenAccount[to], \"error - frozen\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_39"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.name (local variable @ Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#547) shadows:\n\t- ERC20Detailed.name (function @ Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#556-558)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.symbol (local variable @ Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#547) shadows:\n\t- ERC20Detailed.symbol (function @ Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#563-565)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol, uint8 decimals) public {\n",
                    "message": "ERC20Detailed.constructor.decimals (local variable @ Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#547) shadows:\n\t- ERC20Detailed.decimals (function @ Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#570-572)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
                    "message": "Ownable.owner (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#31-33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#56-59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 67,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#65-67) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 235,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
                    "message": "ERC20.transfer (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#232-235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transfer (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": 252,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = value;\n\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n",
                    "message": "ERC20.approve (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#246-252) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) external returns (bool);\n",
                    "message": "IERC20.approve (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n        _transfer(from, to, value);\n\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n\n        return true;\n",
                    "message": "ERC20.transferFrom (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#262-267) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) external returns (bool);\n",
                    "message": "IERC20.transferFrom (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#95) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "ERC20.totalSupply (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#204-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "ERC20.balanceOf (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#213-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 225,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowed[owner][spender];\n",
                    "message": "ERC20.allowance (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#223-225) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20.allowance (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.increaseAllowance (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#279-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n        require(spender != address(0));\n\n\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n        return true;\n",
                    "message": "ERC20.decreaseAllowance (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#297-303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": 379,
                    "vulnerability_code": "    function burn(uint256 value) public {\n\n        _burn(msg.sender, value);\n",
                    "message": "ERC20Burnable.burn (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#377-379) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 388,
                    "vulnerability_code": "    function burnFrom(address from, uint256 value) public {\n\n        _burnFrom(from, value);\n",
                    "message": "ERC20Burnable.burnFrom (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#386-388) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": 462,
                    "vulnerability_code": "    function addMinter(address account) public onlyMinter {\n\n        _addMinter(account);\n",
                    "message": "MinterRole.addMinter (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#460-462) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": 466,
                    "vulnerability_code": "    function renounceMinter() public {\n\n        _removeMinter(msg.sender);\n",
                    "message": "MinterRole.renounceMinter (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#464-466) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n\n        _mint(to, value);\n\n        return true;\n",
                    "message": "ERC20Mintable.mint (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#496-499) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": 515,
                    "vulnerability_code": "    function frozenAccount(address _address) public view returns(bool isFrozen) {\n\n        return _frozenAccount[_address];\n",
                    "message": "ERC20Frozenable.frozenAccount (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#513-515) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": 521,
                    "vulnerability_code": "    function freezeAccount(address target, bool freeze)  public onlyOwner {\n\n        require(_frozenAccount[target] != freeze, \"Same as current\");\n\n        _frozenAccount[target] = freeze;\n\n        emit FrozenFunds(target, freeze);\n",
                    "message": "ERC20Frozenable.freezeAccount (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#517-521) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 558,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "ERC20Detailed.name (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#556-558) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 565,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "ERC20Detailed.symbol (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#563-565) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol:\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#7): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#82): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#108): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#176): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#365): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#393): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#436): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#481): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#504): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#533): it allows old versions\n\t- pragma solidity^0.5.0 (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#577): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 77,
                    "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0));\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#73-77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 317,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0));\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'ERC20._transfer' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#311-317) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "    function _mint(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.add(value);\n\n        _balances[account] = _balances[account].add(value);\n\n        emit Transfer(address(0), account, value);\n",
                    "message": "Function 'ERC20._mint' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#326-332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 346,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n        require(account != address(0));\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n        _balances[account] = _balances[account].sub(value);\n\n        emit Transfer(account, address(0), value);\n",
                    "message": "Function 'ERC20._burn' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#340-346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": 360,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 value) internal {\n\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n\n        _burn(account, value);\n\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n",
                    "message": "Function 'ERC20._burnFrom' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#356-360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "    function _addMinter(address account) internal {\n\n        _minters.add(account);\n\n        emit MinterAdded(account);\n",
                    "message": "Function 'MinterRole._addMinter' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#468-471) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "    function _removeMinter(address account) internal {\n\n        _minters.remove(account);\n\n        emit MinterRemoved(account);\n",
                    "message": "Function 'MinterRole._removeMinter' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#473-476) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(!_frozenAccount[from], \"error - frozen\");\n\n        require(!_frozenAccount[to], \"error - frozen\");\n\n        super._transfer(from, to, value);\n",
                    "message": "Function 'ERC20Frozenable._transfer' (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#523-527) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frozenAccount(address _address) public view returns(bool isFrozen) {\n",
                    "message": "Parameter '_address' of ERC20Frozenable.frozenAccount (Etherscan-0xa957045A12D270e2eE0dcA9A3340c340e05d4670.sol#513) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Roles.Role private _minters;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => bool) private _frozenAccount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    }
}