{
    "polymath-core-dev-3.1.0/contracts/Pausable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!paused, \"Already paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(paused, \"Not paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in Pausable.sol:\n\t- pragma solidity0.5.8 (Pausable.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "    function _pause() internal whenNotPaused {\n\n        paused = true;\n\n        /*solium-disable-next-line security/no-block-members*/\n\n        emit Pause(msg.sender);\n",
                    "message": "Function 'Pausable._pause' (Pausable.sol#33-37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function _unpause() internal whenPaused {\n\n        paused = false;\n\n        /*solium-disable-next-line security/no-block-members*/\n\n        emit Unpause(msg.sender);\n",
                    "message": "Function 'Pausable._unpause' (Pausable.sol#42-46) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Sender must be owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function setCompleted(uint _completed) public restricted {\n\n        lastCompletedMigration = _completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "    function upgrade(address _newAddress) public restricted {\n\n        Migrations upgraded = Migrations(_newAddress);\n\n        upgraded.setCompleted(lastCompletedMigration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#23-26) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity0.5.8 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCompleted(uint _completed) public restricted {\n",
                    "message": "Parameter '_completed' of Migrations.setCompleted (Migrations.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upgrade(address _newAddress) public restricted {\n",
                    "message": "Parameter '_newAddress' of Migrations.upgrade (Migrations.sol#23) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/STRGetter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1015,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                b1 = bytes1(uint8(b1) - 32);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1016,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1054,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < 32; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1058,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                charCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1062,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < charCount; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_122"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ STRGetter.sol#251) shadows:\n\t- ISecurityToken.owner (function @ STRGetter.sol#974)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ STRGetter.sol#252) shadows:\n\t- ISecurityToken.owner (function @ STRGetter.sol#974)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 1479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (,,, isArchived,,) = ISecurityToken(_token).getModule(permissionManagers[j]);\n",
                    "message": "STRGetter._delegateInToken has external calls inside a loop:\n\t- (None,None,None,isArchived,None,None) = ISecurityToken(_token).getModule(permissionManagers[j]) (STRGetter.sol#1479)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 1481,
                    "vulnerability_to_line": 1483,
                    "vulnerability_code": "                if (IPermissionManager(permissionManagers[j]).checkDelegate(_delegate)) {\n\n                    return true;\n",
                    "message": "STRGetter._delegateInToken has external calls inside a loop:\n\t- IPermissionManager(permissionManagers[j]).checkDelegate(_delegate) (STRGetter.sol#1481-1483)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n\n        return uintArrayStorage[_key];\n",
                    "message": "EternalStorage.getArrayUint (STRGetter.sol#174-176) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n\n        return bytes32Storage[_variable];\n",
                    "message": "EternalStorage.getBytes32Value (STRGetter.sol#228-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n\n        return bytesStorage[_variable];\n",
                    "message": "EternalStorage.getBytesValue (STRGetter.sol#232-234) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1549,
                    "vulnerability_to_line": 1551,
                    "vulnerability_code": "    function getSTFactoryAddress() public view returns(address) {\n\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", getUintValue(Encoder.getKey(\"latestVersion\"))));\n",
                    "message": "STRGetter.getSTFactoryAddress (STRGetter.sol#1549-1551) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1557,
                    "vulnerability_to_line": 1559,
                    "vulnerability_code": "    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) public view returns(address) {\n\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", _protocolVersion));\n",
                    "message": "STRGetter.getSTFactoryAddressOfVersion (STRGetter.sol#1557-1559) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1564,
                    "vulnerability_to_line": 1566,
                    "vulnerability_code": "    function getLatestProtocolVersion() public view returns(uint8[] memory) {\n\n        return VersionUtils.unpack(uint24(getUintValue(Encoder.getKey(\"latestVersion\"))));\n",
                    "message": "STRGetter.getLatestProtocolVersion (STRGetter.sol#1564-1566) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1572,
                    "vulnerability_to_line": 1574,
                    "vulnerability_code": "    function getIsFeeInPoly() public view returns(bool) {\n\n        return getBoolValue(IS_FEE_IN_POLY);\n",
                    "message": "STRGetter.getIsFeeInPoly (STRGetter.sol#1572-1574) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1580,
                    "vulnerability_to_line": 1582,
                    "vulnerability_code": "    function getExpiryLimit() public view returns(uint256) {\n\n        return getUintValue(EXPIRYLIMIT);\n",
                    "message": "STRGetter.getExpiryLimit (STRGetter.sol#1580-1582) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in STRGetter.sol:\n\t- pragma solidity0.5.8 (STRGetter.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#240): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1000): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1084): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1115): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1143): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1223): it allows old versions\n\t- pragma solidity0.5.8 (STRGetter.sol#1333): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (STRGetter.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (STRGetter.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayAddress (STRGetter.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayAddress (STRGetter.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayBytes32 (STRGetter.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayBytes32 (STRGetter.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayUint (STRGetter.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayUint (STRGetter.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayString (STRGetter.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayString (STRGetter.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (STRGetter.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (STRGetter.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (STRGetter.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (STRGetter.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayAddress (STRGetter.sol#166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayBytes32 (STRGetter.sol#170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayUint (STRGetter.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (STRGetter.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (STRGetter.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (STRGetter.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUintValue(bytes32 _variable) public view returns(uint256) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getUintValue (STRGetter.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolValue(bytes32 _variable) public view returns(bool) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBoolValue (STRGetter.sol#216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStringValue(bytes32 _variable) public view returns(string memory) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getStringValue (STRGetter.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressValue(bytes32 _variable) public view returns(address) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getAddressValue (STRGetter.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBytes32Value (STRGetter.sol#228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBytesValue (STRGetter.sol#232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1010,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upper(string memory _base) internal pure returns(string memory) {\n",
                    "message": "Parameter '_base' of Util.upper (STRGetter.sol#1010) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1027,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stringToBytes32(string memory _source) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_source' of Util.stringToBytes32 (STRGetter.sol#1027) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_b' of Util.bytesToBytes32 (STRGetter.sol#1037) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_offset' of Util.bytesToBytes32 (STRGetter.sol#1037) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1050,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytes32ToString(bytes32 _source) internal pure returns(string memory) {\n",
                    "message": "Parameter '_source' of Util.bytes32ToString (STRGetter.sol#1050) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSig(bytes memory _data) internal pure returns(bytes4 sig) {\n",
                    "message": "Parameter '_data' of Util.getSig (STRGetter.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1087,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key' of Encoder.getKey (STRGetter.sol#1087) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1091) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1091) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1095) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1095) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (STRGetter.sol#1107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (STRGetter.sol#1107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_current' of VersionUtils.lessThanOrEqual (STRGetter.sol#1151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_new' of VersionUtils.lessThanOrEqual (STRGetter.sol#1151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_current' of VersionUtils.greaterThanOrEqual (STRGetter.sol#1163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_new' of VersionUtils.greaterThanOrEqual (STRGetter.sol#1163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_major' of VersionUtils.pack (STRGetter.sol#1181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_minor' of VersionUtils.pack (STRGetter.sol#1181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_patch' of VersionUtils.pack (STRGetter.sol#1181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpack(uint24 _packedVersion) internal pure returns(uint8[] memory) {\n",
                    "message": "Parameter '_packedVersion' of VersionUtils.unpack (STRGetter.sol#1189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_a' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_b' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_c' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_d' of VersionUtils.packKYC (STRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
                    "message": "Parameter '_packedVersion' of VersionUtils.unpackKYC (STRGetter.sol#1213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickersByOwner(address _owner) external view returns(bytes32[] memory) {\n",
                    "message": "Parameter '_owner' of STRGetter.getTickersByOwner (STRGetter.sol#1353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": 1381,
                    "vulnerability_code": "    function _ownerInTicker(bytes32 _ticker) internal view returns (bool) {\n\n        string memory ticker = Util.bytes32ToString(_ticker);\n\n        /*solium-disable-next-line security/no-block-members*/\n\n        if (getUintValue(Encoder.getKey(\"registeredTickers_expiryDate\", ticker)) >= now || getBoolValue(Encoder.getKey(\"registeredTickers_status\", ticker))) {\n\n            return true;\n\n        }\n\n        return false;\n",
                    "message": "Function 'STRGetter._ownerInTicker' (STRGetter.sol#1374-1381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInTicker(bytes32 _ticker) internal view returns (bool) {\n",
                    "message": "Parameter '_ticker' of STRGetter._ownerInTicker (STRGetter.sol#1374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokensByOwner(address _owner) external view returns(address[] memory) {\n",
                    "message": "Parameter '_owner' of STRGetter.getTokensByOwner (STRGetter.sol#1388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": 1434,
                    "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n\n        // Loop over all active users, then all associated tickers of those users\n\n        // This ensures we find tokens, even if their owner has been modified\n\n        address[] memory activeUsers = getArrayAddress(Encoder.getKey(\"activeUsers\"));\n\n        bytes32[] memory tickers;\n\n        uint256 count = 0;\n\n        uint256 i = 0;\n\n        uint256 j = 0;\n\n        for (i = 0; i < activeUsers.length; i++) {\n\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n\n            for (j = 0; j < tickers.length; j++) {\n\n                if (address(0) != _ownerInToken(tickers[j], _allTokens, _owner)) {\n\n                    count++;\n\n                }\n\n            }\n\n        }\n\n        address[] memory result = new address[](count);\n\n        count = 0;\n\n        address token;\n\n        for (i = 0; i < activeUsers.length; i++) {\n\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n\n            for (j = 0; j < tickers.length; j++) {\n\n                token = _ownerInToken(tickers[j], _allTokens, _owner);\n\n                if (address(0) != token) {\n\n                    result[count] = token;\n\n                    count++;\n\n                }\n\n            }\n\n        }\n\n        return result;\n",
                    "message": "Function 'STRGetter._getTokens' (STRGetter.sol#1404-1434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n",
                    "message": "Parameter '_allTokens' of STRGetter._getTokens (STRGetter.sol#1404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n",
                    "message": "Parameter '_owner' of STRGetter._getTokens (STRGetter.sol#1404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": 1444,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n\n        address token = getAddressValue(Encoder.getKey(\"tickerToSecurityToken\", Util.bytes32ToString(_ticker)));\n\n        if (token != address(0)) {\n\n            if (_allTokens || IOwnable(token).owner() == _owner) {\n\n                return token;\n\n            }\n\n        }\n\n        return address(0);\n",
                    "message": "Function 'STRGetter._ownerInToken' (STRGetter.sol#1436-1444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
                    "message": "Parameter '_ticker' of STRGetter._ownerInToken (STRGetter.sol#1436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
                    "message": "Parameter '_allTokens' of STRGetter._ownerInToken (STRGetter.sol#1436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
                    "message": "Parameter '_owner' of STRGetter._ownerInToken (STRGetter.sol#1436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokensByDelegate(address _delegate) external view returns(address[] memory) {\n",
                    "message": "Parameter '_delegate' of STRGetter.getTokensByDelegate (STRGetter.sol#1451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": 1487,
                    "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n\n        uint256 j = 0;\n\n        address[] memory permissionManagers;\n\n        bool isArchived;\n\n        permissionManagers = ISecurityToken(_token).getModulesByType(1);\n\n        for (j = 0; j < permissionManagers.length; j++) {\n\n            (,,, isArchived,,) = ISecurityToken(_token).getModule(permissionManagers[j]);\n\n            if (!isArchived) {\n\n                if (IPermissionManager(permissionManagers[j]).checkDelegate(_delegate)) {\n\n                    return true;\n\n                }\n\n            }\n\n        }\n\n        return false;\n",
                    "message": "Function 'STRGetter._delegateInToken' (STRGetter.sol#1473-1487) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n",
                    "message": "Parameter '_token' of STRGetter._delegateInToken (STRGetter.sol#1473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n",
                    "message": "Parameter '_delegate' of STRGetter._delegateInToken (STRGetter.sol#1473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerDetails(string calldata _ticker) external view returns (address, uint256, uint256, string memory, bool) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getTickerDetails (STRGetter.sol#1498) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSecurityTokenAddress(string calldata _ticker) external view returns (address) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getSecurityTokenAddress (STRGetter.sol#1524) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSecurityTokenData(address _securityToken) external view returns (string memory, address, string memory, uint256) {\n",
                    "message": "Parameter '_securityToken' of STRGetter.getSecurityTokenData (STRGetter.sol#1537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) public view returns(address) {\n",
                    "message": "Parameter '_protocolVersion' of STRGetter.getSTFactoryAddressOfVersion (STRGetter.sol#1557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerStatus(string memory _ticker) public view returns(bool) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getTickerStatus (STRGetter.sol#1589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerOwner(string memory _ticker) public view returns(address) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getTickerOwner (STRGetter.sol#1598) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => int256) internal intStorage;\n",
                    "message": "EternalStorage.intStorage (STRGetter.sol#12) is never used in STRGetter\nSTRGetter.STLAUNCHFEE (STRGetter.sol#1344) is never used in STRGetter\nSTRGetter.TICKERREGFEE (STRGetter.sol#1345) is never used in STRGetter\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          sig |= bytes4(_data[i] & 0xFF) >> (i * 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return _getTokens(true, address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (address(0), uint256(0), uint256(0), \"\", false);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAllModulesAndPermsFromTypes(address _delegate, uint8[] calldata _types) external view returns(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerDetails(string calldata _ticker) external view returns (address, uint256, uint256, string memory, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSecurityTokenData(address _securityToken) external view returns (string memory, address, string memory, uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changePermissionMulti(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 950,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _modules,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _perms,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _perms,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool[] calldata _valids\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant STLAUNCHFEE = 0xd677304bb45536bb7fdfa6b9e47a3c58fe413f9e8f01474b0a4b9c6e0275baf2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant TICKERREGFEE = 0x2fcc69711628630fb5a42566c68bd1092bc4aa26826736293969fddcd11cb2d2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EXPIRYLIMIT = 0x604268e9a73dfd777dcecb8a614493dd65c638bad2f5e7d709d378bd2fb0baee;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant IS_FEE_IN_POLY = 0x7152e5426955da44af11ecd67fec5e2a3ba747be974678842afa9394b9a075b6; //keccak256(\"IS_FEE_IN_POLY\")\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/mocks/MockSTRGetter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1015,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                b1 = bytes1(uint8(b1) - 32);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1016,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1054,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < 32; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1058,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                charCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1062,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < charCount; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_121"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ MockSTRGetter.sol#251) shadows:\n\t- ISecurityToken.owner (function @ MockSTRGetter.sol#974)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ MockSTRGetter.sol#252) shadows:\n\t- ISecurityToken.owner (function @ MockSTRGetter.sol#974)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n\n        return uintArrayStorage[_key];\n",
                    "message": "EternalStorage.getArrayUint (MockSTRGetter.sol#174-176) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n\n        return bytes32Storage[_variable];\n",
                    "message": "EternalStorage.getBytes32Value (MockSTRGetter.sol#228-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n\n        return bytesStorage[_variable];\n",
                    "message": "EternalStorage.getBytesValue (MockSTRGetter.sol#232-234) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1549,
                    "vulnerability_to_line": 1551,
                    "vulnerability_code": "    function getSTFactoryAddress() public view returns(address) {\n\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", getUintValue(Encoder.getKey(\"latestVersion\"))));\n",
                    "message": "STRGetter.getSTFactoryAddress (MockSTRGetter.sol#1549-1551) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1557,
                    "vulnerability_to_line": 1559,
                    "vulnerability_code": "    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) public view returns(address) {\n\n        return getAddressValue(Encoder.getKey(\"protocolVersionST\", _protocolVersion));\n",
                    "message": "STRGetter.getSTFactoryAddressOfVersion (MockSTRGetter.sol#1557-1559) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1564,
                    "vulnerability_to_line": 1566,
                    "vulnerability_code": "    function getLatestProtocolVersion() public view returns(uint8[] memory) {\n\n        return VersionUtils.unpack(uint24(getUintValue(Encoder.getKey(\"latestVersion\"))));\n",
                    "message": "STRGetter.getLatestProtocolVersion (MockSTRGetter.sol#1564-1566) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1572,
                    "vulnerability_to_line": 1574,
                    "vulnerability_code": "    function getIsFeeInPoly() public view returns(bool) {\n\n        return getBoolValue(IS_FEE_IN_POLY);\n",
                    "message": "STRGetter.getIsFeeInPoly (MockSTRGetter.sol#1572-1574) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1580,
                    "vulnerability_to_line": 1582,
                    "vulnerability_code": "    function getExpiryLimit() public view returns(uint256) {\n\n        return getUintValue(EXPIRYLIMIT);\n",
                    "message": "STRGetter.getExpiryLimit (MockSTRGetter.sol#1580-1582) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1615,
                    "vulnerability_to_line": 1617,
                    "vulnerability_code": "    function newFunction() public pure returns (uint256) {\n\n        return 99;\n",
                    "message": "MockSTRGetter.newFunction (MockSTRGetter.sol#1615-1617) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in MockSTRGetter.sol:\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#240): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#1000): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#1084): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#1115): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#1143): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#1223): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#1333): it allows old versions\n\t- pragma solidity0.5.8 (MockSTRGetter.sol#1606): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (MockSTRGetter.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (MockSTRGetter.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (MockSTRGetter.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (MockSTRGetter.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (MockSTRGetter.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (MockSTRGetter.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (MockSTRGetter.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (MockSTRGetter.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (MockSTRGetter.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (MockSTRGetter.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (MockSTRGetter.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (MockSTRGetter.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayAddress (MockSTRGetter.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayAddress (MockSTRGetter.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayBytes32 (MockSTRGetter.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayBytes32 (MockSTRGetter.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayUint (MockSTRGetter.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayUint (MockSTRGetter.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayString (MockSTRGetter.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayString (MockSTRGetter.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (MockSTRGetter.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (MockSTRGetter.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (MockSTRGetter.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (MockSTRGetter.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (MockSTRGetter.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (MockSTRGetter.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (MockSTRGetter.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (MockSTRGetter.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (MockSTRGetter.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (MockSTRGetter.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (MockSTRGetter.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (MockSTRGetter.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (MockSTRGetter.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (MockSTRGetter.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (MockSTRGetter.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (MockSTRGetter.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayAddress (MockSTRGetter.sol#166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayBytes32 (MockSTRGetter.sol#170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayUint (MockSTRGetter.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (MockSTRGetter.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUintValue(bytes32 _variable) public view returns(uint256) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getUintValue (MockSTRGetter.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolValue(bytes32 _variable) public view returns(bool) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBoolValue (MockSTRGetter.sol#216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStringValue(bytes32 _variable) public view returns(string memory) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getStringValue (MockSTRGetter.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressValue(bytes32 _variable) public view returns(address) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getAddressValue (MockSTRGetter.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBytes32Value (MockSTRGetter.sol#228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBytesValue (MockSTRGetter.sol#232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1010,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upper(string memory _base) internal pure returns(string memory) {\n",
                    "message": "Parameter '_base' of Util.upper (MockSTRGetter.sol#1010) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1027,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stringToBytes32(string memory _source) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_source' of Util.stringToBytes32 (MockSTRGetter.sol#1027) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_b' of Util.bytesToBytes32 (MockSTRGetter.sol#1037) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_offset' of Util.bytesToBytes32 (MockSTRGetter.sol#1037) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1050,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytes32ToString(bytes32 _source) internal pure returns(string memory) {\n",
                    "message": "Parameter '_source' of Util.bytes32ToString (MockSTRGetter.sol#1050) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSig(bytes memory _data) internal pure returns(bytes4 sig) {\n",
                    "message": "Parameter '_data' of Util.getSig (MockSTRGetter.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1087,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key' of Encoder.getKey (MockSTRGetter.sol#1087) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (MockSTRGetter.sol#1091) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (MockSTRGetter.sol#1091) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (MockSTRGetter.sol#1095) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (MockSTRGetter.sol#1095) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (MockSTRGetter.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (MockSTRGetter.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (MockSTRGetter.sol#1103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (MockSTRGetter.sol#1103) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (MockSTRGetter.sol#1107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (MockSTRGetter.sol#1107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_current' of VersionUtils.lessThanOrEqual (MockSTRGetter.sol#1151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_new' of VersionUtils.lessThanOrEqual (MockSTRGetter.sol#1151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_current' of VersionUtils.greaterThanOrEqual (MockSTRGetter.sol#1163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_new' of VersionUtils.greaterThanOrEqual (MockSTRGetter.sol#1163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_major' of VersionUtils.pack (MockSTRGetter.sol#1181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_minor' of VersionUtils.pack (MockSTRGetter.sol#1181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_patch' of VersionUtils.pack (MockSTRGetter.sol#1181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpack(uint24 _packedVersion) internal pure returns(uint8[] memory) {\n",
                    "message": "Parameter '_packedVersion' of VersionUtils.unpack (MockSTRGetter.sol#1189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_a' of VersionUtils.packKYC (MockSTRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_b' of VersionUtils.packKYC (MockSTRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_c' of VersionUtils.packKYC (MockSTRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_d' of VersionUtils.packKYC (MockSTRGetter.sol#1201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
                    "message": "Parameter '_packedVersion' of VersionUtils.unpackKYC (MockSTRGetter.sol#1213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickersByOwner(address _owner) external view returns(bytes32[] memory) {\n",
                    "message": "Parameter '_owner' of STRGetter.getTickersByOwner (MockSTRGetter.sol#1353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": 1381,
                    "vulnerability_code": "    function _ownerInTicker(bytes32 _ticker) internal view returns (bool) {\n\n        string memory ticker = Util.bytes32ToString(_ticker);\n\n        /*solium-disable-next-line security/no-block-members*/\n\n        if (getUintValue(Encoder.getKey(\"registeredTickers_expiryDate\", ticker)) >= now || getBoolValue(Encoder.getKey(\"registeredTickers_status\", ticker))) {\n\n            return true;\n\n        }\n\n        return false;\n",
                    "message": "Function 'STRGetter._ownerInTicker' (MockSTRGetter.sol#1374-1381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInTicker(bytes32 _ticker) internal view returns (bool) {\n",
                    "message": "Parameter '_ticker' of STRGetter._ownerInTicker (MockSTRGetter.sol#1374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokensByOwner(address _owner) external view returns(address[] memory) {\n",
                    "message": "Parameter '_owner' of STRGetter.getTokensByOwner (MockSTRGetter.sol#1388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": 1434,
                    "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n\n        // Loop over all active users, then all associated tickers of those users\n\n        // This ensures we find tokens, even if their owner has been modified\n\n        address[] memory activeUsers = getArrayAddress(Encoder.getKey(\"activeUsers\"));\n\n        bytes32[] memory tickers;\n\n        uint256 count = 0;\n\n        uint256 i = 0;\n\n        uint256 j = 0;\n\n        for (i = 0; i < activeUsers.length; i++) {\n\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n\n            for (j = 0; j < tickers.length; j++) {\n\n                if (address(0) != _ownerInToken(tickers[j], _allTokens, _owner)) {\n\n                    count++;\n\n                }\n\n            }\n\n        }\n\n        address[] memory result = new address[](count);\n\n        count = 0;\n\n        address token;\n\n        for (i = 0; i < activeUsers.length; i++) {\n\n            tickers = getArrayBytes32(Encoder.getKey(\"userToTickers\", activeUsers[i]));\n\n            for (j = 0; j < tickers.length; j++) {\n\n                token = _ownerInToken(tickers[j], _allTokens, _owner);\n\n                if (address(0) != token) {\n\n                    result[count] = token;\n\n                    count++;\n\n                }\n\n            }\n\n        }\n\n        return result;\n",
                    "message": "Function 'STRGetter._getTokens' (MockSTRGetter.sol#1404-1434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n",
                    "message": "Parameter '_allTokens' of STRGetter._getTokens (MockSTRGetter.sol#1404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _getTokens(bool _allTokens, address _owner) internal view returns(address[] memory) {\n",
                    "message": "Parameter '_owner' of STRGetter._getTokens (MockSTRGetter.sol#1404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": 1444,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n\n        address token = getAddressValue(Encoder.getKey(\"tickerToSecurityToken\", Util.bytes32ToString(_ticker)));\n\n        if (token != address(0)) {\n\n            if (_allTokens || IOwnable(token).owner() == _owner) {\n\n                return token;\n\n            }\n\n        }\n\n        return address(0);\n",
                    "message": "Function 'STRGetter._ownerInToken' (MockSTRGetter.sol#1436-1444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
                    "message": "Parameter '_ticker' of STRGetter._ownerInToken (MockSTRGetter.sol#1436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
                    "message": "Parameter '_allTokens' of STRGetter._ownerInToken (MockSTRGetter.sol#1436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _ownerInToken(bytes32 _ticker, bool _allTokens, address _owner) internal view returns(address) {\n",
                    "message": "Parameter '_owner' of STRGetter._ownerInToken (MockSTRGetter.sol#1436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokensByDelegate(address _delegate) external view returns(address[] memory) {\n",
                    "message": "Parameter '_delegate' of STRGetter.getTokensByDelegate (MockSTRGetter.sol#1451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": 1487,
                    "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n\n        uint256 j = 0;\n\n        address[] memory permissionManagers;\n\n        bool isArchived;\n\n        permissionManagers = ISecurityToken(_token).getModulesByType(1);\n\n        for (j = 0; j < permissionManagers.length; j++) {\n\n            (,,, isArchived,,) = ISecurityToken(_token).getModule(permissionManagers[j]);\n\n            if (!isArchived) {\n\n                if (IPermissionManager(permissionManagers[j]).checkDelegate(_delegate)) {\n\n                    return true;\n\n                }\n\n            }\n\n        }\n\n        return false;\n",
                    "message": "Function 'STRGetter._delegateInToken' (MockSTRGetter.sol#1473-1487) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n",
                    "message": "Parameter '_token' of STRGetter._delegateInToken (MockSTRGetter.sol#1473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _delegateInToken(address _token, address _delegate) internal view returns(bool) {\n",
                    "message": "Parameter '_delegate' of STRGetter._delegateInToken (MockSTRGetter.sol#1473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerDetails(string calldata _ticker) external view returns (address, uint256, uint256, string memory, bool) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getTickerDetails (MockSTRGetter.sol#1498) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSecurityTokenAddress(string calldata _ticker) external view returns (address) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getSecurityTokenAddress (MockSTRGetter.sol#1524) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSecurityTokenData(address _securityToken) external view returns (string memory, address, string memory, uint256) {\n",
                    "message": "Parameter '_securityToken' of STRGetter.getSecurityTokenData (MockSTRGetter.sol#1537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSTFactoryAddressOfVersion(uint256 _protocolVersion) public view returns(address) {\n",
                    "message": "Parameter '_protocolVersion' of STRGetter.getSTFactoryAddressOfVersion (MockSTRGetter.sol#1557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerStatus(string memory _ticker) public view returns(bool) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getTickerStatus (MockSTRGetter.sol#1589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerOwner(string memory _ticker) public view returns(address) {\n",
                    "message": "Parameter '_ticker' of STRGetter.getTickerOwner (MockSTRGetter.sol#1598) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => int256) internal intStorage;\n",
                    "message": "EternalStorage.intStorage (MockSTRGetter.sol#12) is never used in MockSTRGetter\nSTRGetter.STLAUNCHFEE (MockSTRGetter.sol#1344) is never used in MockSTRGetter\nSTRGetter.TICKERREGFEE (MockSTRGetter.sol#1345) is never used in MockSTRGetter\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          sig |= bytes4(_data[i] & 0xFF) >> (i * 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return _getTokens(true, address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (address(0), uint256(0), uint256(0), \"\", false);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tickers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < activeUsers.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (j = 0; j < tickers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < permissionManagers.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAllModulesAndPermsFromTypes(address _delegate, uint8[] calldata _types) external view returns(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerDetails(string calldata _ticker) external view returns (address, uint256, uint256, string memory, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSecurityTokenData(address _securityToken) external view returns (string memory, address, string memory, uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changePermissionMulti(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 810,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 950,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _modules,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _perms,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _perms,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool[] calldata _valids\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant STLAUNCHFEE = 0xd677304bb45536bb7fdfa6b9e47a3c58fe413f9e8f01474b0a4b9c6e0275baf2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant TICKERREGFEE = 0x2fcc69711628630fb5a42566c68bd1092bc4aa26826736293969fddcd11cb2d2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant EXPIRYLIMIT = 0x604268e9a73dfd777dcecb8a614493dd65c638bad2f5e7d709d378bd2fb0baee;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant IS_FEE_IN_POLY = 0x7152e5426955da44af11ecd67fec5e2a3ba747be974678842afa9394b9a075b6; //keccak256(\"IS_FEE_IN_POLY\")\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/mocks/MockOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _currency, bytes32 _currencySymbol, bytes32 _denominatedCurrency, uint256 _price) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        currency = _currency;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        currencySymbol = _currencySymbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        denominatedCurrency = _denominatedCurrency;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        price = _price;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in MockOracle.sol:\n\t- pragma solidity0.5.8 (MockOracle.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (MockOracle.sol#30): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _currency, bytes32 _currencySymbol, bytes32 _denominatedCurrency, uint256 _price) public {\n",
                    "message": "Parameter '_currency' of MockOracle. (MockOracle.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _currency, bytes32 _currencySymbol, bytes32 _denominatedCurrency, uint256 _price) public {\n",
                    "message": "Parameter '_currencySymbol' of MockOracle. (MockOracle.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _currency, bytes32 _currencySymbol, bytes32 _denominatedCurrency, uint256 _price) public {\n",
                    "message": "Parameter '_denominatedCurrency' of MockOracle. (MockOracle.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _currency, bytes32 _currencySymbol, bytes32 _denominatedCurrency, uint256 _price) public {\n",
                    "message": "Parameter '_price' of MockOracle. (MockOracle.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changePrice(uint256 _price) external {\n",
                    "message": "Parameter '_price' of MockOracle.changePrice (MockOracle.sol#45) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/mocks/FunctionSigClash1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in FunctionSigClash1.sol:\n\t- pragma solidity0.5.8 (FunctionSigClash1.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 8,
                    "vulnerability_code": "contract functionSigClash1 {\n\n    // function clash550254402() public {\n\n    // }\n",
                    "message": "Contract 'functionSigClash1' (FunctionSigClash1.sol#5-8) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/mocks/FunctionSigClash2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in FunctionSigClash2.sol:\n\t- pragma solidity0.5.8 (FunctionSigClash2.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 8,
                    "vulnerability_code": "contract functionSigClash2 {\n\n    // function proxyOwner() public {\n\n    // }\n",
                    "message": "Contract 'functionSigClash2' (FunctionSigClash2.sol#5-8) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/mocks/Dummy/DummySTOStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public cap;\n",
                    "message": "DummySTOStorage.cap should be constant (DummySTOStorage.sol#12)\nDummySTOStorage.investorCount should be constant (DummySTOStorage.sol#10)\nDummySTOStorage.someString should be constant (DummySTOStorage.sol#13)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in DummySTOStorage.sol:\n\t- pragma solidity0.5.8 (DummySTOStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/proxy/Proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function() external payable {\n\n        _fallback();\n",
                    "message": "Contract locking ether found in Proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (Proxy.sol#47-49)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        /*solium-disable-next-line security/no-inline-assembly*/\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
                    "message": "Proxy._delegate uses assembly (Proxy.sol#28-45)\n\t- Proxy.sol#30-44\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in Proxy.sol:\n\t- pragma solidity0.5.8 (Proxy.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal view returns(address);\n",
                    "message": "Function 'Proxy._implementation' (Proxy.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    function _fallback() internal {\n\n        _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (Proxy.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        /*solium-disable-next-line security/no-inline-assembly*/\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
                    "message": "Function 'Proxy._delegate' (Proxy.sol#28-45) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/libraries/Encoder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in Encoder.sol:\n\t- pragma solidity0.5.8 (Encoder.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key' of Encoder.getKey (Encoder.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (Encoder.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, address _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (Encoder.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (Encoder.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, string memory _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (Encoder.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (Encoder.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, uint256 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (Encoder.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (Encoder.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bytes32 _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (Encoder.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key1' of Encoder.getKey (Encoder.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKey(string memory _key1, bool _key2) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_key2' of Encoder.getKey (Encoder.sol#26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/libraries/VersionUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in VersionUtils.sol:\n\t- pragma solidity0.5.8 (VersionUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_current' of VersionUtils.lessThanOrEqual (VersionUtils.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function lessThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_new' of VersionUtils.lessThanOrEqual (VersionUtils.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_current' of VersionUtils.greaterThanOrEqual (VersionUtils.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function greaterThanOrEqual(uint8[] memory _current, uint8[] memory _new) internal pure returns(bool) {\n",
                    "message": "Parameter '_new' of VersionUtils.greaterThanOrEqual (VersionUtils.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_major' of VersionUtils.pack (VersionUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_minor' of VersionUtils.pack (VersionUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint8 _major, uint8 _minor, uint8 _patch) internal pure returns(uint24) {\n",
                    "message": "Parameter '_patch' of VersionUtils.pack (VersionUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpack(uint24 _packedVersion) internal pure returns(uint8[] memory) {\n",
                    "message": "Parameter '_packedVersion' of VersionUtils.unpack (VersionUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_a' of VersionUtils.packKYC (VersionUtils.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_b' of VersionUtils.packKYC (VersionUtils.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_c' of VersionUtils.packKYC (VersionUtils.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function packKYC(uint64 _a, uint64 _b, uint64 _c, uint8 _d) internal pure returns(uint256) {\n",
                    "message": "Parameter '_d' of VersionUtils.packKYC (VersionUtils.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
                    "message": "Parameter '_packedVersion' of VersionUtils.unpackKYC (VersionUtils.sol#73) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _current.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unpackKYC(uint256 _packedVersion) internal pure returns(uint64 canSendAfter, uint64 canReceiveAfter, uint64 expiryTime, uint8 added) {\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/libraries/StatusCodes.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in StatusCodes.sol:\n\t- pragma solidity0.5.8 (StatusCodes.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function code(Status _status) internal pure returns (byte) {\n",
                    "message": "Parameter '_status' of StatusCodes.code (StatusCodes.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return byte(uint8(0x50) + (uint8(_status)));\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/libraries/BokkyPooBahsDateTimeLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (year >= 1970 && month > 0 && month <= 12) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint daysInMonth = _getDaysInMonth(year, month);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (day > 0 && day <= daysInMonth) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                valid = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (day > 0 && day <= daysInMonth) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                valid = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (hour < 24 && minute < 60 && second < 60) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                valid = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in BokkyPooBahsDateTimeLibrary.sol:\n\t- pragma solidity0.5.8 (BokkyPooBahsDateTimeLibrary.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\n\n        require(year >= 1970);\n\n        int _year = int(year);\n\n        int _month = int(month);\n\n        int _day = int(day);\n\n\n\n        int __days = _day\n\n          - 32075\n\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n\n          - OFFSET19700101;\n\n\n\n        _days = uint(__days);\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._daysFromDate' (BokkyPooBahsDateTimeLibrary.sol#58-72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n\n        int __days = int(_days);\n\n\n\n        int L = __days + 68569 + OFFSET19700101;\n\n        int N = 4 * L / 146097;\n\n        L = L - (146097 * N + 3) / 4;\n\n        int _year = 4000 * (L + 1) / 1461001;\n\n        L = L - 1461 * _year / 4 + 31;\n\n        int _month = 80 * L / 2447;\n\n        int _day = L - 2447 * _month / 80;\n\n        L = _month / 11;\n\n        _month = _month + 2 - 12 * L;\n\n        _year = 100 * (N - 49) + _year + L;\n\n\n\n        year = uint(_year);\n\n        month = uint(_month);\n\n        day = uint(_day);\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._daysToDate' (BokkyPooBahsDateTimeLibrary.sol#91-108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n",
                    "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary._daysToDate (BokkyPooBahsDateTimeLibrary.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\n\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._isLeapYear' (BokkyPooBahsDateTimeLibrary.sol#150-152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\n\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\n            daysInMonth = 31;\n\n        } else if (month != 2) {\n\n            daysInMonth = 30;\n\n        } else {\n\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n\n        }\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._getDaysInMonth' (BokkyPooBahsDateTimeLibrary.sol#166-174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_years' of BokkyPooBahsDateTimeLibrary.addYears (BokkyPooBahsDateTimeLibrary.sol#208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_months' of BokkyPooBahsDateTimeLibrary.addMonths (BokkyPooBahsDateTimeLibrary.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary.addDays (BokkyPooBahsDateTimeLibrary.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_hours' of BokkyPooBahsDateTimeLibrary.addHours (BokkyPooBahsDateTimeLibrary.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_minutes' of BokkyPooBahsDateTimeLibrary.addMinutes (BokkyPooBahsDateTimeLibrary.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_seconds' of BokkyPooBahsDateTimeLibrary.addSeconds (BokkyPooBahsDateTimeLibrary.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_years' of BokkyPooBahsDateTimeLibrary.subYears (BokkyPooBahsDateTimeLibrary.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_months' of BokkyPooBahsDateTimeLibrary.subMonths (BokkyPooBahsDateTimeLibrary.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary.subDays (BokkyPooBahsDateTimeLibrary.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_hours' of BokkyPooBahsDateTimeLibrary.subHours (BokkyPooBahsDateTimeLibrary.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_minutes' of BokkyPooBahsDateTimeLibrary.subMinutes (BokkyPooBahsDateTimeLibrary.sol#289) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_seconds' of BokkyPooBahsDateTimeLibrary.subSeconds (BokkyPooBahsDateTimeLibrary.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_MON = 1;\n",
                    "message": "BokkyPooBahsDateTimeLibrary.DOW_MON (BokkyPooBahsDateTimeLibrary.sol#37) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_TUE (BokkyPooBahsDateTimeLibrary.sol#38) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_WED (BokkyPooBahsDateTimeLibrary.sol#39) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_THU (BokkyPooBahsDateTimeLibrary.sol#40) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_SUN (BokkyPooBahsDateTimeLibrary.sol#43) is never used in BokkyPooBahsDateTimeLibrary\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant SECONDS_PER_HOUR = 60 * 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant SECONDS_PER_MINUTE = 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int constant OFFSET19700101 = 2440588;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_MON = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_TUE = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_WED = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_THU = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_FRI = 5;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_SAT = 6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_SUN = 7;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/libraries/Util.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                b1 = bytes1(uint8(b1) - 32);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < 32; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                charCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (j = 0; j < charCount; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < len; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in Util.sol:\n\t- pragma solidity0.5.8 (Util.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upper(string memory _base) internal pure returns(string memory) {\n",
                    "message": "Parameter '_base' of Util.upper (Util.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stringToBytes32(string memory _source) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_source' of Util.stringToBytes32 (Util.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_b' of Util.bytesToBytes32 (Util.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytesToBytes32(bytes memory _b, uint _offset) internal pure returns(bytes32) {\n",
                    "message": "Parameter '_offset' of Util.bytesToBytes32 (Util.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bytes32ToString(bytes32 _source) internal pure returns(string memory) {\n",
                    "message": "Parameter '_source' of Util.bytes32ToString (Util.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSig(bytes memory _data) internal pure returns(bytes4 sig) {\n",
                    "message": "Parameter '_data' of Util.getSig (Util.sol#76) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (b1 >= 0x61 && b1 <= 0x7A) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            result |= bytes32(_b[_offset + i] & 0xFF) >> (i * 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          sig |= bytes4(_data[i] & 0xFF) >> (i * 8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _baseBytes.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _b.length; i++) {\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/storage/EternalStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_index < array.length, \"Index should less than length of the array\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_68"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n\n        return addressArrayStorage[_key];\n",
                    "message": "EternalStorage.getArrayAddress (EternalStorage.sol#166-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": 172,
                    "vulnerability_code": "    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n\n        return bytes32ArrayStorage[_key];\n",
                    "message": "EternalStorage.getArrayBytes32 (EternalStorage.sol#170-172) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n\n        return uintArrayStorage[_key];\n",
                    "message": "EternalStorage.getArrayUint (EternalStorage.sol#174-176) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function getUintValue(bytes32 _variable) public view returns(uint256) {\n\n        return uintStorage[_variable];\n",
                    "message": "EternalStorage.getUintValue (EternalStorage.sol#212-214) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 218,
                    "vulnerability_code": "    function getBoolValue(bytes32 _variable) public view returns(bool) {\n\n        return boolStorage[_variable];\n",
                    "message": "EternalStorage.getBoolValue (EternalStorage.sol#216-218) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": 222,
                    "vulnerability_code": "    function getStringValue(bytes32 _variable) public view returns(string memory) {\n\n        return stringStorage[_variable];\n",
                    "message": "EternalStorage.getStringValue (EternalStorage.sol#220-222) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 226,
                    "vulnerability_code": "    function getAddressValue(bytes32 _variable) public view returns(address) {\n\n        return addressStorage[_variable];\n",
                    "message": "EternalStorage.getAddressValue (EternalStorage.sol#224-226) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n\n        return bytes32Storage[_variable];\n",
                    "message": "EternalStorage.getBytes32Value (EternalStorage.sol#228-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n\n        return bytesStorage[_variable];\n",
                    "message": "EternalStorage.getBytesValue (EternalStorage.sol#232-234) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in EternalStorage.sol:\n\t- pragma solidity0.5.8 (EternalStorage.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bool _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.set (EternalStorage.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function set(bytes32 _key, bytes memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.set (EternalStorage.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayAddress (EternalStorage.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayAddress(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayAddress (EternalStorage.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayBytes32 (EternalStorage.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayBytes32(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayBytes32 (EternalStorage.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayUint (EternalStorage.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayUint(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayUint (EternalStorage.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.deleteArrayString (EternalStorage.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteArrayString(bytes32 _key, uint256 _index) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.deleteArrayString (EternalStorage.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.pushArray (EternalStorage.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pushArray(bytes32 _key, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.pushArray (EternalStorage.sol#129) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, address[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, uint256[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, bytes32[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArray (EternalStorage.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArray(bytes32 _key, string[] memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArray (EternalStorage.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayAddress(bytes32 _key) public view returns(address[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayAddress (EternalStorage.sol#166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayBytes32(bytes32 _key) public view returns(bytes32[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayBytes32 (EternalStorage.sol#170) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getArrayUint(bytes32 _key) public view returns(uint[] memory) {\n",
                    "message": "Parameter '_key' of EternalStorage.getArrayUint (EternalStorage.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, address _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, bytes32 _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_key' of EternalStorage.setArrayIndexValue (EternalStorage.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_index' of EternalStorage.setArrayIndexValue (EternalStorage.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setArrayIndexValue(bytes32 _key, uint256 _index, string memory _value) internal {\n",
                    "message": "Parameter '_value' of EternalStorage.setArrayIndexValue (EternalStorage.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUintValue(bytes32 _variable) public view returns(uint256) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getUintValue (EternalStorage.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolValue(bytes32 _variable) public view returns(bool) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBoolValue (EternalStorage.sol#216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStringValue(bytes32 _variable) public view returns(string memory) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getStringValue (EternalStorage.sol#220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressValue(bytes32 _variable) public view returns(address) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getAddressValue (EternalStorage.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32Value(bytes32 _variable) public view returns(bytes32) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBytes32Value (EternalStorage.sol#228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytesValue(bytes32 _variable) public view returns(bytes memory) {\n",
                    "message": "Parameter '_variable' of EternalStorage.getBytesValue (EternalStorage.sol#232) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => int256) internal intStorage;\n",
                    "message": "EternalStorage.intStorage (EternalStorage.sol#12) is never used in EternalStorage\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        array.length = array.length - 1;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/storage/modules/Checkpoint/Voting/VotingCheckpointStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in VotingCheckpointStorage.sol:\n\t- pragma solidity0.5.8 (VotingCheckpointStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) defaultExemptIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] defaultExemptedVoters;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/storage/modules/Checkpoint/Dividend/DividendCheckpointStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public EXCLUDED_ADDRESS_LIMIT = 150;\n",
                    "message": "DividendCheckpointStorage.EXCLUDED_ADDRESS_LIMIT should be constant (DividendCheckpointStorage.sol#13)\nDividendCheckpointStorage.wallet should be constant (DividendCheckpointStorage.sol#12)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in DividendCheckpointStorage.sol:\n\t- pragma solidity0.5.8 (DividendCheckpointStorage.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public EXCLUDED_ADDRESS_LIMIT = 150;\n",
                    "message": "Variable 'DividendCheckpointStorage.EXCLUDED_ADDRESS_LIMIT' (DividendCheckpointStorage.sol#13) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/storage/modules/STO/ISTOStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public endTime;\n",
                    "message": "ISTOStorage.endTime should be constant (ISTOStorage.sol#16)\nISTOStorage.investorCount should be constant (ISTOStorage.sol#20)\nISTOStorage.isFinalized should be constant (ISTOStorage.sol#28)\nISTOStorage.pausedTime should be constant (ISTOStorage.sol#18)\nISTOStorage.preMintAllowed should be constant (ISTOStorage.sol#26)\nISTOStorage.startTime should be constant (ISTOStorage.sol#14)\nISTOStorage.totalTokensSold should be constant (ISTOStorage.sol#24)\nISTOStorage.wallet should be constant (ISTOStorage.sol#22)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ISTOStorage.sol:\n\t- pragma solidity0.5.8 (ISTOStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/storage/modules/STO/STOStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public endTime;\n",
                    "message": "STOStorage.endTime should be constant (STOStorage.sol#18)\nSTOStorage.investorCount should be constant (STOStorage.sol#22)\nSTOStorage.isFinalized should be constant (STOStorage.sol#30)\nSTOStorage.pausedTime should be constant (STOStorage.sol#20)\nSTOStorage.preMintAllowed should be constant (STOStorage.sol#28)\nSTOStorage.startTime should be constant (STOStorage.sol#16)\nSTOStorage.totalTokensSold should be constant (STOStorage.sol#26)\nSTOStorage.treasuryWallet should be constant (STOStorage.sol#32)\nSTOStorage.wallet should be constant (STOStorage.sol#24)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in STOStorage.sol:\n\t- pragma solidity0.5.8 (STOStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/datastore/DataStoreFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _securityToken,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _implementation\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 856,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 858,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0) && _securityToken != address(0),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Address should not be 0x\"\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        securityToken = ISecurityToken(_securityToken);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 882,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 883,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0), \"Address should not be 0x\");\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        implementation = _implementation;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 885,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 858,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0) && _securityToken != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Address should not be 0x\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 883,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0), \"Address should not be 0x\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 858,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0) && _securityToken != address(0),\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Address should not be 0x\"\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function() external payable {\n\n        _fallback();\n",
                    "message": "Contract locking ether found in DataStoreFactory.sol:\n\tContract DataStoreProxy has payable functions:\n\t - fallback (DataStoreFactory.sol#47-49)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ DataStoreFactory.sol#65) shadows:\n\t- ISecurityToken.owner (function @ DataStoreFactory.sol#788)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ DataStoreFactory.sol#66) shadows:\n\t- ISecurityToken.owner (function @ DataStoreFactory.sol#788)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _implementation\n",
                    "message": "DataStoreProxy.constructor._implementation (local variable @ DataStoreFactory.sol#854) shadows:\n\t- DataStoreProxy._implementation (function @ DataStoreFactory.sol#868-870)\n\t- Proxy._implementation (function @ DataStoreFactory.sol#14)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        /*solium-disable-next-line security/no-inline-assembly*/\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
                    "message": "Proxy._delegate uses assembly (DataStoreFactory.sol#28-45)\n\t- DataStoreFactory.sol#30-44\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 887,
                    "vulnerability_to_line": 890,
                    "vulnerability_code": "    function generateDataStore(address _securityToken) public returns (address) {\n\n        DataStoreProxy dsProxy = new DataStoreProxy(_securityToken, implementation);\n\n        return address(dsProxy);\n",
                    "message": "DataStoreFactory.generateDataStore (DataStoreFactory.sol#887-890) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in DataStoreFactory.sol:\n\t- pragma solidity0.5.8 (DataStoreFactory.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreFactory.sol#54): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreFactory.sol#814): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreFactory.sol#839): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreFactory.sol#876): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal view returns(address);\n",
                    "message": "Function 'Proxy._implementation' (DataStoreFactory.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    function _fallback() internal {\n\n        _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (DataStoreFactory.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        /*solium-disable-next-line security/no-inline-assembly*/\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
                    "message": "Function 'Proxy._delegate' (DataStoreFactory.sol#28-45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "Variable 'DataStoreStorage.__implementation' (DataStoreFactory.sol#818) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "    function _implementation() internal view returns(address) {\n\n        return __implementation;\n",
                    "message": "Function 'DataStoreProxy._implementation' (DataStoreFactory.sol#868-870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _securityToken,\n",
                    "message": "Parameter '_securityToken' of DataStoreProxy. (DataStoreFactory.sol#853) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _implementation\n",
                    "message": "Parameter '_implementation' of DataStoreProxy. (DataStoreFactory.sol#854) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 882,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public {\n",
                    "message": "Parameter '_implementation' of DataStoreFactory. (DataStoreFactory.sol#882) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 887,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateDataStore(address _securityToken) public returns (address) {\n",
                    "message": "Parameter '_securityToken' of DataStoreFactory.generateDataStore (DataStoreFactory.sol#887) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (bytes32 => uint256) internal uintData;\n",
                    "message": "DataStoreStorage.uintData (DataStoreFactory.sol#822) is never used in DataStoreProxy\nDataStoreStorage.bytes32Data (DataStoreFactory.sol#823) is never used in DataStoreProxy\nDataStoreStorage.addressData (DataStoreFactory.sol#824) is never used in DataStoreProxy\nDataStoreStorage.stringData (DataStoreFactory.sol#825) is never used in DataStoreProxy\nDataStoreStorage.bytesData (DataStoreFactory.sol#826) is never used in DataStoreProxy\nDataStoreStorage.boolData (DataStoreFactory.sol#827) is never used in DataStoreProxy\nDataStoreStorage.uintArrayData (DataStoreFactory.sol#828) is never used in DataStoreProxy\nDataStoreStorage.bytes32ArrayData (DataStoreFactory.sol#829) is never used in DataStoreProxy\nDataStoreStorage.addressArrayData (DataStoreFactory.sol#830) is never used in DataStoreProxy\nDataStoreStorage.boolArrayData (DataStoreFactory.sol#831) is never used in DataStoreProxy\nDataStoreStorage.DATA_KEY (DataStoreFactory.sol#833) is never used in DataStoreProxy\nDataStoreStorage.MANAGEDATA (DataStoreFactory.sol#834) is never used in DataStoreProxy\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/datastore/DataStoreProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _securityToken,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _implementation\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    )\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 856,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 858,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0) && _securityToken != address(0),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Address should not be 0x\"\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        securityToken = ISecurityToken(_securityToken);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 858,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0) && _securityToken != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Address should not be 0x\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 858,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_implementation != address(0) && _securityToken != address(0),\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Address should not be 0x\"\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function() external payable {\n\n        _fallback();\n",
                    "message": "Contract locking ether found in DataStoreProxy.sol:\n\tContract DataStoreProxy has payable functions:\n\t - fallback (DataStoreProxy.sol#47-49)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ DataStoreProxy.sol#65) shadows:\n\t- ISecurityToken.owner (function @ DataStoreProxy.sol#788)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ DataStoreProxy.sol#66) shadows:\n\t- ISecurityToken.owner (function @ DataStoreProxy.sol#788)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _implementation\n",
                    "message": "DataStoreProxy.constructor._implementation (local variable @ DataStoreProxy.sol#854) shadows:\n\t- DataStoreProxy._implementation (function @ DataStoreProxy.sol#868-870)\n\t- Proxy._implementation (function @ DataStoreProxy.sol#14)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        /*solium-disable-next-line security/no-inline-assembly*/\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
                    "message": "Proxy._delegate uses assembly (DataStoreProxy.sol#28-45)\n\t- DataStoreProxy.sol#30-44\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in DataStoreProxy.sol:\n\t- pragma solidity0.5.8 (DataStoreProxy.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreProxy.sol#54): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreProxy.sol#814): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreProxy.sol#839): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal view returns(address);\n",
                    "message": "Function 'Proxy._implementation' (DataStoreProxy.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    function _fallback() internal {\n\n        _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (DataStoreProxy.sol#20-22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        /*solium-disable-next-line security/no-inline-assembly*/\n\n        assembly {\n\n            // Copy msg.data. We take full control of memory in this inline assembly\n\n            // block because it will not return to Solidity code. We overwrite the\n\n            // Solidity scratch pad at memory position 0.\n\n            calldatacopy(0, 0, calldatasize)\n\n            // Call the implementation.\n\n            // out and outsize are 0 because we don't know the size yet.\n\n            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n\n            // Copy the returned data.\n\n            returndatacopy(0, 0, returndatasize)\n\n            switch result\n\n            // delegatecall returns 0 on error.\n\n            case 0 { revert(0, returndatasize) }\n\n            default { return(0, returndatasize) }\n\n        }\n",
                    "message": "Function 'Proxy._delegate' (DataStoreProxy.sol#28-45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "Variable 'DataStoreStorage.__implementation' (DataStoreProxy.sol#818) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "    function _implementation() internal view returns(address) {\n\n        return __implementation;\n",
                    "message": "Function 'DataStoreProxy._implementation' (DataStoreProxy.sol#868-870) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _securityToken,\n",
                    "message": "Parameter '_securityToken' of DataStoreProxy. (DataStoreProxy.sol#853) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _implementation\n",
                    "message": "Parameter '_implementation' of DataStoreProxy. (DataStoreProxy.sol#854) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (bytes32 => uint256) internal uintData;\n",
                    "message": "DataStoreStorage.uintData (DataStoreProxy.sol#822) is never used in DataStoreProxy\nDataStoreStorage.bytes32Data (DataStoreProxy.sol#823) is never used in DataStoreProxy\nDataStoreStorage.addressData (DataStoreProxy.sol#824) is never used in DataStoreProxy\nDataStoreStorage.stringData (DataStoreProxy.sol#825) is never used in DataStoreProxy\nDataStoreStorage.bytesData (DataStoreProxy.sol#826) is never used in DataStoreProxy\nDataStoreStorage.boolData (DataStoreProxy.sol#827) is never used in DataStoreProxy\nDataStoreStorage.uintArrayData (DataStoreProxy.sol#828) is never used in DataStoreProxy\nDataStoreStorage.bytes32ArrayData (DataStoreProxy.sol#829) is never used in DataStoreProxy\nDataStoreStorage.addressArrayData (DataStoreProxy.sol#830) is never used in DataStoreProxy\nDataStoreStorage.boolArrayData (DataStoreProxy.sol#831) is never used in DataStoreProxy\nDataStoreStorage.DATA_KEY (DataStoreProxy.sol#833) is never used in DataStoreProxy\nDataStoreStorage.MANAGEDATA (DataStoreProxy.sol#834) is never used in DataStoreProxy\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/datastore/DataStore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == address(securityToken) ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == IOwnable(address(securityToken)).owner() ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            securityToken.checkPermission(msg.sender, address(this), MANAGEDATA) ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            securityToken.isModule(msg.sender, DATA_KEY),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Unauthorized\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_key != bytes32(0), \"bad key\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_keyLength == _dataLength, \"bad length\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == IOwnable(address(securityToken)).owner(), \"Unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_securityToken != address(0), \"Invalid address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(uintArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(bytes32ArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(addressArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(boolArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uintArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32ArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        addressArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        boolArrayData[_key].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_194"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getAddressArrayElements (DataStore.sol#1284) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getBoolArrayElements (DataStore.sol#1296) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getUint256ArrayElements (DataStore.sol#1260) is a local variable never initialiazed\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": "i in DataStore.getBytes32ArrayElements (DataStore.sol#1272) is a local variable never initialiazed\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ DataStore.sol#14) shadows:\n\t- ISecurityToken.owner (function @ DataStore.sol#737)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ DataStore.sol#15) shadows:\n\t- ISecurityToken.owner (function @ DataStore.sol#737)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": 1107,
                    "vulnerability_code": "    function deleteAddress(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteAddress(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteAddress (DataStore.sol#1104-1107):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1105)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1106)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": 1112,
                    "vulnerability_code": "    function deleteBool(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteBool(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteBool (DataStore.sol#1109-1112):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1110)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1111)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": 1102,
                    "vulnerability_code": "    function deleteBytes32(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteBytes32(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteBytes32 (DataStore.sol#1099-1102):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1100)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1101)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1094,
                    "vulnerability_to_line": 1097,
                    "vulnerability_code": "    function deleteUint256(bytes32 _key, uint256 _index) external {\n\n        _isAuthorized();\n\n        _deleteUint(_key, _index);\n",
                    "message": "Reentrancy in DataStore.deleteUint256 (DataStore.sol#1094-1097):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1095)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1096)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1078,
                    "vulnerability_to_line": 1081,
                    "vulnerability_code": "    function insertAddress(bytes32 _key, address _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertAddress (DataStore.sol#1078-1081):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1079)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1080)\n\t- addressData (DataStore.sol#1080)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": 1171,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertAddressMulti (DataStore.sol#1166-1171):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1167)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1169)\n\t- addressData (DataStore.sol#1169)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1083,
                    "vulnerability_to_line": 1086,
                    "vulnerability_code": "    function insertBool(bytes32 _key, bool _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertBool (DataStore.sol#1083-1086):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1084)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1085)\n\t- boolData (DataStore.sol#1085)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": 1178,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertBoolMulti (DataStore.sol#1173-1178):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1174)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1176)\n\t- boolData (DataStore.sol#1176)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "    function insertBytes32(bytes32 _key, bytes32 _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertBytes32 (DataStore.sol#1073-1076):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1074)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1075)\n\t- bytes32Data (DataStore.sol#1075)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": 1164,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertBytes32Multi (DataStore.sol#1159-1164):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1160)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1162)\n\t- bytes32Data (DataStore.sol#1162)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": 1071,
                    "vulnerability_code": "    function insertUint256(bytes32 _key, uint256 _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, true);\n",
                    "message": "Reentrancy in DataStore.insertUint256 (DataStore.sol#1068-1071):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1069)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1070)\n\t- uintData (DataStore.sol#1070)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": 1157,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "Reentrancy in DataStore.insertUint256Multi (DataStore.sol#1152-1157):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1153)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1155)\n\t- uintData (DataStore.sol#1155)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1018,
                    "vulnerability_to_line": 1021,
                    "vulnerability_code": "    function setAddress(bytes32 _key, address _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, false);\n",
                    "message": "Reentrancy in DataStore.setAddress (DataStore.sol#1018-1021):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1019)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1020)\n\t- addressData (DataStore.sol#1020)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1053,
                    "vulnerability_to_line": 1056,
                    "vulnerability_code": "    function setAddressArray(bytes32 _key, address[] calldata _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data);\n",
                    "message": "Reentrancy in DataStore.setAddressArray (DataStore.sol#1053-1056):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1054)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1055)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": 1138,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "Reentrancy in DataStore.setAddressMulti (DataStore.sol#1133-1138):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1134)\n\tState variables written after the call(s):\n\t- addressArrayData (DataStore.sol#1136)\n\t- addressData (DataStore.sol#1136)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": 1026,
                    "vulnerability_code": "    function setBool(bytes32 _key, bool _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, false);\n",
                    "message": "Reentrancy in DataStore.setBool (DataStore.sol#1023-1026):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1024)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1025)\n\t- boolData (DataStore.sol#1025)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1058,
                    "vulnerability_to_line": 1061,
                    "vulnerability_code": "    function setBoolArray(bytes32 _key, bool[] calldata _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data);\n",
                    "message": "Reentrancy in DataStore.setBoolArray (DataStore.sol#1058-1061):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1059)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1060)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1145,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "Reentrancy in DataStore.setBoolMulti (DataStore.sol#1140-1145):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1141)\n\tState variables written after the call(s):\n\t- boolArrayData (DataStore.sol#1143)\n\t- boolData (DataStore.sol#1143)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": 1036,
                    "vulnerability_code": "    function setBytes(bytes32 _key, bytes calldata _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data);\n",
                    "message": "Reentrancy in DataStore.setBytes (DataStore.sol#1033-1036):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1034)\n\tState variables written after the call(s):\n\t- bytesData (DataStore.sol#1035)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": 1016,
                    "vulnerability_code": "    function setBytes32(bytes32 _key, bytes32 _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, false);\n",
                    "message": "Reentrancy in DataStore.setBytes32 (DataStore.sol#1013-1016):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1014)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1015)\n\t- bytes32Data (DataStore.sol#1015)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": 1051,
                    "vulnerability_code": "    function setBytes32Array(bytes32 _key, bytes32[] calldata _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data);\n",
                    "message": "Reentrancy in DataStore.setBytes32Array (DataStore.sol#1048-1051):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1049)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1050)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": 1131,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "Reentrancy in DataStore.setBytes32Multi (DataStore.sol#1126-1131):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1127)\n\tState variables written after the call(s):\n\t- bytes32ArrayData (DataStore.sol#1129)\n\t- bytes32Data (DataStore.sol#1129)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": 1031,
                    "vulnerability_code": "    function setString(bytes32 _key, string calldata _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data);\n",
                    "message": "Reentrancy in DataStore.setString (DataStore.sol#1028-1031):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1029)\n\tState variables written after the call(s):\n\t- stringData (DataStore.sol#1030)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": 1011,
                    "vulnerability_code": "    function setUint256(bytes32 _key, uint256 _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data, false);\n",
                    "message": "Reentrancy in DataStore.setUint256 (DataStore.sol#1008-1011):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1009)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1010)\n\t- uintData (DataStore.sol#1010)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1043,
                    "vulnerability_to_line": 1046,
                    "vulnerability_code": "    function setUint256Array(bytes32 _key, uint256[] calldata _data) external {\n\n        _isAuthorized();\n\n        _setData(_key, _data);\n",
                    "message": "Reentrancy in DataStore.setUint256Array (DataStore.sol#1043-1046):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1044)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1045)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": 1124,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "Reentrancy in DataStore.setUint256Multi (DataStore.sol#1119-1124):\n\tExternal calls:\n\t- _isAuthorized() (DataStore.sol#1120)\n\tState variables written after the call(s):\n\t- uintArrayData (DataStore.sol#1122)\n\t- uintData (DataStore.sol#1122)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "DataStoreStorage.__implementation should be constant (DataStore.sol#934)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": 1124,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setUint256Multi (DataStore.sol#1119-1124) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 862,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\n",
                    "message": "IDataStore.setUint256Multi (DataStore.sol#862) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": 1131,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setBytes32Multi (DataStore.sol#1126-1131) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\n",
                    "message": "IDataStore.setBytes32Multi (DataStore.sol#864) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": 1138,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setAddressMulti (DataStore.sol#1133-1138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\n",
                    "message": "IDataStore.setAddressMulti (DataStore.sol#866) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": 1145,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], false);\n\n        }\n",
                    "message": "DataStore.setBoolMulti (DataStore.sol#1140-1145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\n",
                    "message": "IDataStore.setBoolMulti (DataStore.sol#868) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] calldata _keys, uint256[] calldata _data) external;\n",
                    "message": "IDataStore.insertUint256Multi (DataStore.sol#875) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": 1157,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertUint256Multi (DataStore.sol#1152-1157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": 1164,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertBytes32Multi (DataStore.sol#1159-1164) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] calldata _keys, bytes32[] calldata _data) external;\n",
                    "message": "IDataStore.insertBytes32Multi (DataStore.sol#877) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] calldata _keys, address[] calldata _data) external;\n",
                    "message": "IDataStore.insertAddressMulti (DataStore.sol#879) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": 1171,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertAddressMulti (DataStore.sol#1166-1171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": 1178,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n\n        _isAuthorized();\n\n        for (uint256 i = 0; i < _keys.length; i++) {\n\n            _setData(_keys[i], _data[i], true);\n\n        }\n",
                    "message": "DataStore.insertBoolMulti (DataStore.sol#1173-1178) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] calldata _keys, bool[] calldata _data) external;\n",
                    "message": "IDataStore.insertBoolMulti (DataStore.sol#881) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": 1262,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n\n        uint256 size = uintArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new uint256[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = uintArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getUint256ArrayElements (DataStore.sol#1252-1262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(uint256[] memory);\n",
                    "message": "IDataStore.getUint256ArrayElements (DataStore.sol#919) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": 1274,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n\n        uint256 size = bytes32ArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new bytes32[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = bytes32ArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getBytes32ArrayElements (DataStore.sol#1264-1274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bytes32[] memory);\n",
                    "message": "IDataStore.getBytes32ArrayElements (DataStore.sol#921) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": 1286,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n\n        uint256 size = addressArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new address[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = addressArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getAddressArrayElements (DataStore.sol#1276-1286) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 923,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(address[] memory);\n",
                    "message": "IDataStore.getAddressArrayElements (DataStore.sol#923) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 925,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) external view returns(bool[] memory);\n",
                    "message": "IDataStore.getBoolArrayElements (DataStore.sol#925) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": 1298,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n\n        uint256 size = boolArrayData[_key].length;\n\n        if (_endIndex >= size) {\n\n            size = size - _startIndex;\n\n        } else {\n\n            size = _endIndex - _startIndex + 1;\n\n        }\n\n        array = new bool[](size);\n\n        for(uint256 i; i < size; i++)\n\n            array[i] = boolArrayData[_key][i + _startIndex];\n",
                    "message": "DataStore.getBoolArrayElements (DataStore.sol#1288-1298) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in DataStore.sol:\n\t- pragma solidity0.5.8 (DataStore.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#763): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#791): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#930): it allows old versions\n\t- pragma solidity0.5.8 (DataStore.sol#955): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "Variable 'DataStoreStorage.__implementation' (DataStore.sol#934) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSecurityToken(address _securityToken) external onlyOwner {\n",
                    "message": "Parameter '_securityToken' of DataStore.setSecurityToken (DataStore.sol#997) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setUint256 (DataStore.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setUint256 (DataStore.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBytes32 (DataStore.sol#1013) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBytes32 (DataStore.sol#1013) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1018,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setAddress (DataStore.sol#1018) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1018,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setAddress (DataStore.sol#1018) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setString(bytes32 _key, string calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setString (DataStore.sol#1028) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1028,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setString(bytes32 _key, string calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setString (DataStore.sol#1028) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes(bytes32 _key, bytes calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBytes (DataStore.sol#1033) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes(bytes32 _key, bytes calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBytes (DataStore.sol#1033) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBool (DataStore.sol#1023) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBool (DataStore.sol#1023) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1043,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Array(bytes32 _key, uint256[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setUint256Array (DataStore.sol#1043) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1043,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Array(bytes32 _key, uint256[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setUint256Array (DataStore.sol#1043) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Array(bytes32 _key, bytes32[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBytes32Array (DataStore.sol#1048) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Array(bytes32 _key, bytes32[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBytes32Array (DataStore.sol#1048) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1053,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressArray(bytes32 _key, address[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setAddressArray (DataStore.sol#1053) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1053,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressArray(bytes32 _key, address[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setAddressArray (DataStore.sol#1053) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1058,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolArray(bytes32 _key, bool[] calldata _data) external {\n",
                    "message": "Parameter '_key' of DataStore.setBoolArray (DataStore.sol#1058) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1058,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolArray(bytes32 _key, bool[] calldata _data) external {\n",
                    "message": "Parameter '_data' of DataStore.setBoolArray (DataStore.sol#1058) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertUint256 (DataStore.sol#1068) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256(bytes32 _key, uint256 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertUint256 (DataStore.sol#1068) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertBytes32 (DataStore.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32(bytes32 _key, bytes32 _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertBytes32 (DataStore.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1078,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertAddress (DataStore.sol#1078) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1078,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddress(bytes32 _key, address _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertAddress (DataStore.sol#1078) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1083,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_key' of DataStore.insertBool (DataStore.sol#1083) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1083,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBool(bytes32 _key, bool _data) external {\n",
                    "message": "Parameter '_data' of DataStore.insertBool (DataStore.sol#1083) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1094,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteUint256(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteUint256 (DataStore.sol#1094) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1094,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteUint256(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteUint256 (DataStore.sol#1094) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBytes32(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteBytes32 (DataStore.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBytes32(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteBytes32 (DataStore.sol#1099) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteAddress(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteAddress (DataStore.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteAddress(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteAddress (DataStore.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBool(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_key' of DataStore.deleteBool (DataStore.sol#1109) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deleteBool(bytes32 _key, uint256 _index) external {\n",
                    "message": "Parameter '_index' of DataStore.deleteBool (DataStore.sol#1109) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setUint256Multi (DataStore.sol#1119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setUint256Multi (DataStore.sol#1119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setBytes32Multi (DataStore.sol#1126) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setBytes32Multi (DataStore.sol#1126) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setAddressMulti (DataStore.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setAddressMulti (DataStore.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.setBoolMulti (DataStore.sol#1140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.setBoolMulti (DataStore.sol#1140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertUint256Multi (DataStore.sol#1152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertUint256Multi(bytes32[] memory _keys, uint256[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertUint256Multi (DataStore.sol#1152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertBytes32Multi (DataStore.sol#1159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBytes32Multi(bytes32[] memory _keys, bytes32[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertBytes32Multi (DataStore.sol#1159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertAddressMulti (DataStore.sol#1166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertAddressMulti(bytes32[] memory _keys, address[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertAddressMulti (DataStore.sol#1166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_keys' of DataStore.insertBoolMulti (DataStore.sol#1173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function insertBoolMulti(bytes32[] memory _keys, bool[] memory _data) public validArrayLength(_keys.length, _data.length) {\n",
                    "message": "Parameter '_data' of DataStore.insertBoolMulti (DataStore.sol#1173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256 (DataStore.sol#1180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32(bytes32 _key) external view returns(bytes32) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32 (DataStore.sol#1184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddress(bytes32 _key) external view returns(address) {\n",
                    "message": "Parameter '_key' of DataStore.getAddress (DataStore.sol#1188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getString(bytes32 _key) external view returns(string memory) {\n",
                    "message": "Parameter '_key' of DataStore.getString (DataStore.sol#1192) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes(bytes32 _key) external view returns(bytes memory) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes (DataStore.sol#1196) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBool(bytes32 _key) external view returns(bool) {\n",
                    "message": "Parameter '_key' of DataStore.getBool (DataStore.sol#1200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256Array(bytes32 _key) external view returns(uint256[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256Array (DataStore.sol#1204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32Array(bytes32 _key) external view returns(bytes32[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32Array (DataStore.sol#1208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArray(bytes32 _key) external view returns(address[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArray (DataStore.sol#1212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArray(bytes32 _key) external view returns(bool[] memory) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArray (DataStore.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256ArrayLength (DataStore.sol#1220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32ArrayLength (DataStore.sol#1224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArrayLength (DataStore.sol#1228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayLength(bytes32 _key) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArrayLength (DataStore.sol#1232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElement(bytes32 _key, uint256 _index) external view returns(uint256) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256ArrayElement (DataStore.sol#1236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElement(bytes32 _key, uint256 _index) external view returns(uint256) {\n",
                    "message": "Parameter '_index' of DataStore.getUint256ArrayElement (DataStore.sol#1236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElement(bytes32 _key, uint256 _index) external view returns(bytes32) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32ArrayElement (DataStore.sol#1240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElement(bytes32 _key, uint256 _index) external view returns(bytes32) {\n",
                    "message": "Parameter '_index' of DataStore.getBytes32ArrayElement (DataStore.sol#1240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElement(bytes32 _key, uint256 _index) external view returns(address) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArrayElement (DataStore.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElement(bytes32 _key, uint256 _index) external view returns(address) {\n",
                    "message": "Parameter '_index' of DataStore.getAddressArrayElement (DataStore.sol#1244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElement(bytes32 _key, uint256 _index) external view returns(bool) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArrayElement (DataStore.sol#1248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElement(bytes32 _key, uint256 _index) external view returns(bool) {\n",
                    "message": "Parameter '_index' of DataStore.getBoolArrayElement (DataStore.sol#1248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getUint256ArrayElements (DataStore.sol#1252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getUint256ArrayElements (DataStore.sol#1252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUint256ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(uint256[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getUint256ArrayElements (DataStore.sol#1252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getBytes32ArrayElements (DataStore.sol#1264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getBytes32ArrayElements (DataStore.sol#1264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBytes32ArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bytes32[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getBytes32ArrayElements (DataStore.sol#1264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getAddressArrayElements (DataStore.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getAddressArrayElements (DataStore.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddressArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(address[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getAddressArrayElements (DataStore.sol#1276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n",
                    "message": "Parameter '_key' of DataStore.getBoolArrayElements (DataStore.sol#1288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n",
                    "message": "Parameter '_startIndex' of DataStore.getBoolArrayElements (DataStore.sol#1288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBoolArrayElements(bytes32 _key, uint256 _startIndex, uint256 _endIndex) public view returns(bool[] memory array) {\n",
                    "message": "Parameter '_endIndex' of DataStore.getBoolArrayElements (DataStore.sol#1288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": 976,
                    "vulnerability_code": "    function _isAuthorized() internal view {\n\n        require(msg.sender == address(securityToken) ||\n\n            msg.sender == IOwnable(address(securityToken)).owner() ||\n\n            securityToken.checkPermission(msg.sender, address(this), MANAGEDATA) ||\n\n            securityToken.isModule(msg.sender, DATA_KEY),\n\n            \"Unauthorized\"\n\n        );\n",
                    "message": "Function 'DataStore._isAuthorized' (DataStore.sol#969-976) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": 1305,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            uintArrayData[_key].push(_data);\n\n        else\n\n            uintData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1300-1305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": 1312,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            bytes32ArrayData[_key].push(_data);\n\n        else\n\n            bytes32Data[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1307-1312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32 _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1307) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": 1319,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            addressArrayData[_key].push(_data);\n\n        else\n\n            addressData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1314-1319) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": 1326,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n\n        if (_insert)\n\n            boolArrayData[_key].push(_data);\n\n        else\n\n            boolData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1321-1326) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool _data, bool _insert) internal validKey(_key) {\n",
                    "message": "Parameter '_insert' of DataStore._setData (DataStore.sol#1321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1328,
                    "vulnerability_to_line": 1330,
                    "vulnerability_code": "    function _setData(bytes32 _key, string memory _data) internal validKey(_key) {\n\n        stringData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1328-1330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, string memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, string memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": 1334,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes memory _data) internal validKey(_key) {\n\n        bytesData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1332-1334) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": 1338,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256[] memory _data) internal validKey(_key) {\n\n        uintArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1336-1338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, uint256[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1340,
                    "vulnerability_to_line": 1342,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32[] memory _data) internal validKey(_key) {\n\n        bytes32ArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1340-1342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1340) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bytes32[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1340) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": 1346,
                    "vulnerability_code": "    function _setData(bytes32 _key, address[] memory _data) internal validKey(_key) {\n\n        addressArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1344-1346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, address[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": 1350,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool[] memory _data) internal validKey(_key) {\n\n        boolArrayData[_key] = _data;\n",
                    "message": "Function 'DataStore._setData' (DataStore.sol#1348-1350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._setData (DataStore.sol#1348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setData(bytes32 _key, bool[] memory _data) internal validKey(_key) {\n",
                    "message": "Parameter '_data' of DataStore._setData (DataStore.sol#1348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": 1356,
                    "vulnerability_code": "    function _deleteUint(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(uintArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        uintArrayData[_key][_index] = uintArrayData[_key][uintArrayData[_key].length - 1];\n\n        uintArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteUint' (DataStore.sol#1352-1356) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteUint(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteUint (DataStore.sol#1352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteUint(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteUint (DataStore.sol#1352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": 1362,
                    "vulnerability_code": "    function _deleteBytes32(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(bytes32ArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        bytes32ArrayData[_key][_index] = bytes32ArrayData[_key][bytes32ArrayData[_key].length - 1];\n\n        bytes32ArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteBytes32' (DataStore.sol#1358-1362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBytes32(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteBytes32 (DataStore.sol#1358) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBytes32(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteBytes32 (DataStore.sol#1358) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": 1368,
                    "vulnerability_code": "    function _deleteAddress(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(addressArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        addressArrayData[_key][_index] = addressArrayData[_key][addressArrayData[_key].length - 1];\n\n        addressArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteAddress' (DataStore.sol#1364-1368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteAddress(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteAddress (DataStore.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteAddress(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteAddress (DataStore.sol#1364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1370,
                    "vulnerability_to_line": 1374,
                    "vulnerability_code": "    function _deleteBool(bytes32 _key, uint256 _index) internal validKey(_key) {\n\n        require(boolArrayData[_key].length > _index, \"Invalid Index\"); //Also prevents undeflow\n\n        boolArrayData[_key][_index] = boolArrayData[_key][boolArrayData[_key].length - 1];\n\n        boolArrayData[_key].length--;\n",
                    "message": "Function 'DataStore._deleteBool' (DataStore.sol#1370-1374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBool(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_key' of DataStore._deleteBool (DataStore.sol#1370) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _deleteBool(bytes32 _key, uint256 _index) internal validKey(_key) {\n",
                    "message": "Parameter '_index' of DataStore._deleteBool (DataStore.sol#1370) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "DataStoreStorage.__implementation (DataStore.sol#934) is never used in DataStore\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uintArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32ArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        addressArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        boolArrayData[_key].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _keys.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i; i < size; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSecurityToken(address _securityToken) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/datastore/DataStoreStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ DataStoreStorage.sol#14) shadows:\n\t- ISecurityToken.owner (function @ DataStoreStorage.sol#737)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ DataStoreStorage.sol#15) shadows:\n\t- ISecurityToken.owner (function @ DataStoreStorage.sol#737)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "DataStoreStorage.__implementation should be constant (DataStoreStorage.sol#767)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in DataStoreStorage.sol:\n\t- pragma solidity0.5.8 (DataStoreStorage.sol#3): it allows old versions\n\t- pragma solidity0.5.8 (DataStoreStorage.sol#763): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal __implementation;\n",
                    "message": "Variable 'DataStoreStorage.__implementation' (DataStoreStorage.sol#767) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/external/IMedianizer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IMedianizer.sol:\n\t- pragma solidity0.5.8 (IMedianizer.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function poke(bytes32) external;\n",
                    "message": "Parameter '' of IMedianizer.poke (IMedianizer.sol#29) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() external view returns(bytes32, bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function compute() external view returns(bytes32, bool);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Burn/IBurn.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IBurn.sol:\n\t- pragma solidity0.5.8 (IBurn.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Checkpoint/ICheckpoint.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ICheckpoint.sol:\n\t- pragma solidity0.5.8 (ICheckpoint.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Checkpoint/Voting/APLCR/AdvancedPLCRVotingCheckpointStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": "Detected issues with version pragma in AdvancedPLCRVotingCheckpointStorage.sol:\n\t- pragma solidity^0.5.8 (AdvancedPLCRVotingCheckpointStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Ballot[] ballots;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Checkpoint/Voting/Transparent/WeightedVoteCheckpointStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in WeightedVoteCheckpointStorage.sol:\n\t- pragma solidity0.5.8 (WeightedVoteCheckpointStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Ballot[] ballots;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Checkpoint/Voting/PLCR/PLCRVotingCheckpointStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in PLCRVotingCheckpointStorage.sol:\n\t- pragma solidity0.5.8 (PLCRVotingCheckpointStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Ballot[] ballots;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Checkpoint/Dividend/ERC20/ERC20DividendCheckpointStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ERC20DividendCheckpointStorage.sol:\n\t- pragma solidity0.5.8 (ERC20DividendCheckpointStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Checkpoint/Automation/ScheduleCheckpointStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ScheduleCheckpointStorage.sol:\n\t- pragma solidity0.5.8 (ScheduleCheckpointStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 constant OPERATOR = \"OPERATOR\";\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/BTM/BlacklistTransferManagerStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in BlacklistTransferManagerStorage.sol:\n\t- pragma solidity0.5.8 (BlacklistTransferManagerStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => bytes32[]) investorToBlacklist;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => address[]) blacklistToInvestor;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(bytes32 => uint256)) investorToIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => mapping(address => uint256)) blacklistToIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32[] allBlacklists;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/LTM/LockUpTransferManagerStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in LockUpTransferManagerStorage.sol:\n\t- pragma solidity0.5.8 (LockUpTransferManagerStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32[] lockupArray;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/PTM/PercentageTransferManagerStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowPrimaryIssuance = true;\n",
                    "message": "PercentageTransferManagerStorage.allowPrimaryIssuance should be constant (PercentageTransferManagerStorage.sol#14)\nPercentageTransferManagerStorage.maxHolderPercentage should be constant (PercentageTransferManagerStorage.sol#11)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in PercentageTransferManagerStorage.sol:\n\t- pragma solidity0.5.8 (PercentageTransferManagerStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/RPTM/RestrictedPartialSaleTMStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": "Detected issues with version pragma in RestrictedPartialSaleTMStorage.sol:\n\t- pragma solidity^0.5.8 (RestrictedPartialSaleTMStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] exemptAddresses;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) exemptIndex;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/CTM/CountTransferManagerStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public maxHolderCount;\n",
                    "message": "CountTransferManagerStorage.maxHolderCount should be constant (CountTransferManagerStorage.sol#11)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in CountTransferManagerStorage.sol:\n\t- pragma solidity0.5.8 (CountTransferManagerStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/GTM/GeneralTransferManagerStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public issuanceAddress;\n",
                    "message": "GeneralTransferManagerStorage.issuanceAddress should be constant (GeneralTransferManagerStorage.sol#21)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in GeneralTransferManagerStorage.sol:\n\t- pragma solidity0.5.8 (GeneralTransferManagerStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/VRTM/VolumeRestrictionTMStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in VolumeRestrictionTMStorage.sol:\n\t- pragma solidity0.5.8 (VolumeRestrictionTMStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => TypeOfPeriod) holderToRestrictionType;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    IndividualRestrictions individualRestrictions;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    GlobalRestrictions globalRestrictions;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    BucketData bucketData;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Exemptions exemptions;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/TransferManager/MATM/ManualApprovalTransferManagerStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ManualApprovalTransferManagerStorage.sol:\n\t- pragma solidity0.5.8 (ManualApprovalTransferManagerStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/PermissionManager/GeneralPermissionManagerStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in GeneralPermissionManagerStorage.sol:\n\t- pragma solidity0.5.8 (GeneralPermissionManagerStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/PermissionManager/IPermissionManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IPermissionManager.sol:\n\t- pragma solidity0.5.8 (IPermissionManager.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAllModulesAndPermsFromTypes(address _delegate, uint8[] calldata _types) external view returns(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changePermissionMulti(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata _modules,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _perms,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32[] calldata _perms,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool[] calldata _valids\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/Wallet/VestingEscrowWalletStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address internal treasuryWallet;\n",
                    "message": "VestingEscrowWalletStorage.treasuryWallet should be constant (VestingEscrowWalletStorage.sol#33)\nVestingEscrowWalletStorage.unassignedTokens should be constant (VestingEscrowWalletStorage.sol#31)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in VestingEscrowWalletStorage.sol:\n\t- pragma solidity0.5.8 (VestingEscrowWalletStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/STO/Capped/CappedSTOStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowBeneficialInvestments = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowBeneficialInvestments = false;\n",
                    "message": "CappedSTOStorage.allowBeneficialInvestments should be constant (CappedSTOStorage.sol#11)\nCappedSTOStorage.cap should be constant (CappedSTOStorage.sol#17)\nCappedSTOStorage.rate should be constant (CappedSTOStorage.sol#14)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in CappedSTOStorage.sol:\n\t- pragma solidity0.5.8 (CappedSTOStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/STO/PreSale/PreSaleSTOStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in PreSaleSTOStorage.sol:\n\t- pragma solidity0.5.8 (PreSaleSTOStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/modules/STO/Issuance/IssuanceStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": "Detected issues with version pragma in IssuanceStorage.sol:\n\t- pragma solidity^0.5.8 (IssuanceStorage.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.8;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/tokens/OZStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": "OZStorage._balances (OZStorage.sol#12) is never initialized. It is used in:\n\t- balanceOf (OZStorage.sol#25-27)\n"
                },
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": "OZStorage._allowed (OZStorage.sol#14) is never initialized. It is used in:\n\t- _allowance (OZStorage.sol#29-31)\n"
                },
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": "OZStorage._totalSupply (OZStorage.sol#16) is never initialized. It is used in:\n\t- totalSupply (OZStorage.sol#21-23)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _guardCounter;\n",
                    "message": "OZStorage._guardCounter should be constant (OZStorage.sol#19)\nOZStorage._totalSupply should be constant (OZStorage.sol#16)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in OZStorage.sol:\n\t- pragma solidity0.5.8 (OZStorage.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _investor) internal view returns(uint256) {\n",
                    "message": "Parameter '_investor' of OZStorage.balanceOf (OZStorage.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 31,
                    "vulnerability_code": "    function _allowance(address owner, address spender) internal view returns(uint256) {\n\n        return _allowed[owner][spender];\n",
                    "message": "Function 'OZStorage._allowance' (OZStorage.sol#29-31) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _guardCounter;\n",
                    "message": "OZStorage._guardCounter (OZStorage.sol#19) is never used in OZStorage\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _guardCounter;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IOwnable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IOwnable.sol:\n\t- pragma solidity0.5.8 (IOwnable.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IDataStore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IDataStore.sol:\n\t- pragma solidity0.5.8 (IDataStore.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/ISTFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ISTFactory.sol:\n\t- pragma solidity0.5.8 (ISTFactory.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deployToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setLogicContract(string calldata _version, address _logicContract, bytes calldata _initializationData, bytes calldata _upgradeData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _symbol,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _decimals,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _issuer,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _divisible,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _treasuryWallet //In v2.x this is the Polymath Registry\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns(address tokenAddress);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setLogicContract(string calldata _version, address _logicContract, bytes calldata _initializationData, bytes calldata _upgradeData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setLogicContract(string calldata _version, address _logicContract, bytes calldata _initializationData, bytes calldata _upgradeData) external;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IFeatureRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IFeatureRegistry.sol:\n\t- pragma solidity0.5.8 (IFeatureRegistry.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/ISecurityToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address owner) external view returns(uint256);\n",
                    "message": "ISecurityToken.balanceOf.owner (local variable @ ISecurityToken.sol#14) shadows:\n\t- ISecurityToken.owner (function @ ISecurityToken.sol#737)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns(uint256);\n",
                    "message": "ISecurityToken.allowance.owner (local variable @ ISecurityToken.sol#15) shadows:\n\t- ISecurityToken.owner (function @ ISecurityToken.sol#737)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ISecurityToken.sol:\n\t- pragma solidity0.5.8 (ISecurityToken.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (byte statusCode, bytes32 reasonCode, bytes32 partition);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte statusCode, bytes32 reasonCode);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDocument(bytes32 _name) external view returns (string memory documentUri, bytes32 documentHash, uint256 documentTime);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getModule(address _module) external view returns (bytes32 moduleName, address moduleAddress, address factoryAddress, bool isArchived, uint8[] memory moduleTypes, bytes32 moduleLabel);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModuleWithLabel(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _maxCost,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _budget,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _label,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _archived\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addModule(address _moduleFactory, bytes calldata _data, uint256 _maxCost, uint256 _budget, bool _archived) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (bytes32 partition);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/ISTO.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ISTO.sol:\n\t- pragma solidity0.5.8 (ISTO.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IPoly.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IPoly.sol:\n\t- pragma solidity0.5.8 (IPoly.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/ISecurityTokenRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerOwner(string calldata _ticker) external view returns(address owner);\n",
                    "message": "ISecurityTokenRegistry.getTickerOwner.owner (local variable @ ISecurityTokenRegistry.sol#452) shadows:\n\t- ISecurityTokenRegistry.owner (function @ ISecurityTokenRegistry.sol#480)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ISecurityTokenRegistry.sol:\n\t- pragma solidity0.5.8 (ISecurityTokenRegistry.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSecurityTokenData(address _securityToken) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTickerDetails(string calldata _ticker) external view returns(address tickerOwner, uint256 tickerRegistration, uint256 tickerExpiry, string memory tokenName, bool tickerStatus);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFees(bytes32 _feeType) external returns (uint256 usdFee, uint256 polyFee);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateSecurityToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function generateNewSecurityToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function refreshSecurityToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function modifySecurityToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function modifyExistingSecurityToken(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function modifyExistingTicker(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function registerTicker(address _owner, string calldata _ticker, string calldata _tokenName) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function modifyTicker(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _ticker,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _divisible\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _ticker,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _divisible,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _treasuryWallet,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _protocolVersion\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _ticker,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _divisible,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _treasuryWallet\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        external returns (address securityToken);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _ticker,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _securityToken,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _deployedAt\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _deployedAt\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _ticker,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _registrationDate,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _expiryDate,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _status\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function registerTicker(address _owner, string calldata _ticker, string calldata _tokenName) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function registerTicker(address _owner, string calldata _ticker, string calldata _tokenName) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _ticker,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenName,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata _tokenName,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _registrationDate,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _expiryDate,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool _status\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IOracle.sol:\n\t- pragma solidity0.5.8 (IOracle.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IVoting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IVoting.sol:\n\t- pragma solidity0.5.8 (IVoting.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IModuleFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IModuleFactory.sol:\n\t- pragma solidity0.5.8 (IModuleFactory.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IModuleRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IModuleRegistry.sol:\n\t- pragma solidity0.5.8 (IModuleRegistry.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFactoryDetails(address _factoryAddress) external view returns(bool isVerified, address factoryOwner, address[] memory usingTokens);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTagsByTypeAndToken(uint8 _moduleType, address _securityToken) external view returns(bytes32[] memory tags, address[] memory factories);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTagsByType(uint8 _moduleType) external view returns(bytes32[] memory tags, address[] memory factories);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IModule.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IModule.sol:\n\t- pragma solidity0.5.8 (IModule.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/ITransferManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ITransferManager.sol:\n\t- pragma solidity0.5.8 (ITransferManager.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifyTransfer(address _from, address _to, uint256 _amount, bytes calldata _data) external view returns(Result result, bytes32 partition);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IPolymathRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IPolymathRegistry.sol:\n\t- pragma solidity0.5.8 (IPolymathRegistry.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/ICheckPermission.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ICheckPermission.sol:\n\t- pragma solidity0.5.8 (ICheckPermission.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/IUpgradableTokenFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IUpgradableTokenFactory.sol:\n\t- pragma solidity0.5.8 (IUpgradableTokenFactory.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/ITreasuryModule.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in ITreasuryModule.sol:\n\t- pragma solidity0.5.8 (ITreasuryModule.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/token/IERC1644.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IERC1644.sol:\n\t- pragma solidity0.5.8 (IERC1644.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/token/IERC1643.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IERC1643.sol:\n\t- pragma solidity0.5.8 (IERC1643.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDocument(bytes32 _name, string calldata _uri, bytes32 _documentHash) external;\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/token/IERC1594.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IERC1594.sol:\n\t- pragma solidity0.5.8 (IERC1594.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (byte, bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (byte, bytes32);\n",
                    "message": null
                }
            ]
        }
    },
    "polymath-core-dev-3.1.0/contracts/interfaces/token/IERC1410.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.8;\n",
                    "message": "Detected issues with version pragma in IERC1410.sol:\n\t- pragma solidity0.5.8 (IERC1410.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canTransferByPartition(address _from, address _to, bytes32 _partition, uint256 _value, bytes calldata _data) external view returns (byte, bytes32, bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external returns (bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external returns (bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external returns (bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorTransferByPartition(bytes32 _partition, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external returns (bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function operatorRedeemByPartition(bytes32 _partition, address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\n",
                    "message": null
                }
            ]
        }
    }
}