{
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/types/contracts/Types.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Different versions of Solidity is used in Types.sol:\n\t- Version used: ['0.5.12', 'ABIEncoderV2']\n\t- Types.sol#19 declares pragma solidity0.5.12\n\t- Types.sol#20 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in Types.sol:\n\t- pragma solidity0.5.12 (Types.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function hashDomain(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata version,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address verifyingContract\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external pure returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return keccak256(abi.encode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return keccak256(abi.encode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      keccak256(name),\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      keccak256(version),\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      verifyingContract\n",
                    "message": null
                }
            ]
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/delegate-factory/contracts/interfaces/IDelegateFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in IDelegateFactory.sol:\n\t- pragma solidity0.5.12 (IDelegateFactory.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/index/contracts/Imports.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in Imports.sol:\n\t- pragma solidity0.5.12 (Imports.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/tokens/contracts/WETH9.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[src][msg.sender] >= wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowance[src][msg.sender] -= wad;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8  public decimals = 18;\n",
                    "message": "WETH9.decimals should be constant (WETH9.sol#24)\nWETH9.name should be constant (WETH9.sol#22)\nWETH9.symbol should be constant (WETH9.sol#23)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "    function withdraw(uint wad) public {\n\n        require(balanceOf[msg.sender] >= wad);\n\n        balanceOf[msg.sender] -= wad;\n\n        msg.sender.transfer(wad);\n\n        emit Withdrawal(msg.sender, wad);\n",
                    "message": "WETH9.withdraw (WETH9.sol#43-48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return address(this).balance;\n",
                    "message": "WETH9.totalSupply (WETH9.sol#50-52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function approve(address guy, uint wad) public returns (bool) {\n\n        allowance[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n",
                    "message": "WETH9.approve (WETH9.sol#54-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool) {\n\n        return transferFrom(msg.sender, dst, wad);\n",
                    "message": "WETH9.transfer (WETH9.sol#60-62) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in WETH9.sol:\n\t- pragma solidity0.5.12 (WETH9.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/tokens/contracts/KittyCore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 1321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _nftAddress, uint256 _cut) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_cut <= 10000);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ownerCut = _cut;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ERC721 candidateContract = ERC721(_nftAddress);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        nonFungibleContract = candidateContract;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _nftAddr, uint256 _cut) public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ClockAuction(_nftAddr, _cut) {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _nftAddr, uint256 _cut) public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1598,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ClockAuction(_nftAddr, _cut) {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // Starts paused.\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1910,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        paused = true;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // the creator of the contract is the initial CEO\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ceoAddress = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // the creator of the contract is also the initial COO\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        cooAddress = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1917,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1655,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            sum += lastGen0SalePrices[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < 5; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownershipTokenCount[_from]--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        pregnantKitties--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ownershipTokenCount[_to]++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 674,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (catId = 1; catId <= totalCats; catId++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 677,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    resultIndex++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 942,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        pregnantKitties++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            gen0SaleCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < 5; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        promoCreatedCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        gen0CreatedCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_47"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": 1055,
                    "vulnerability_code": "    function giveBirth(uint256 _matronId)\n\n        external\n\n        whenNotPaused\n\n        returns(uint256)\n\n    {\n\n        // Grab a reference to the matron in storage.\n\n        Kitty storage matron = kitties[_matronId];\n\n\n\n        // Check that the matron is a valid cat.\n\n        require(matron.birthTime != 0);\n\n\n\n        // Check that the matron is pregnant, and that its time has come!\n\n        require(_isReadyToGiveBirth(matron));\n\n\n\n        // Grab a reference to the sire in storage.\n\n        uint256 sireId = matron.siringWithId;\n\n        Kitty storage sire = kitties[sireId];\n\n\n\n        // Determine the higher generation number of the two parents\n\n        uint16 parentGen = matron.generation;\n\n        if (sire.generation > matron.generation) {\n\n            parentGen = sire.generation;\n\n        }\n\n\n\n        // Call the sooper-sekret gene mixing operation.\n\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\n\n\n\n        // Make the new kitten!\n\n        address owner = kittyIndexToOwner[_matronId];\n\n        uint256 kittenId = _createKitty(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n\n\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n\n        // set is what marks a matron as being pregnant.)\n\n        delete matron.siringWithId;\n\n\n\n        // Every time a kitty gives birth counter is decremented.\n\n        pregnantKitties--;\n\n\n\n        // Send the balance fee to the person who made birth happen.\n\n        msg.sender.transfer(autoBirthFee);\n\n\n\n        // return the new kitten's ID\n\n        return kittenId;\n",
                    "message": "KittyBreeding.giveBirth (KittyCore.sol#1012-1055) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(autoBirthFee) (KittyCore.sol#1051)\n"
                },
                {
                    "name": "reentrancy-eth",
                    "vulnerability_from_line": 1761,
                    "vulnerability_to_line": 1781,
                    "vulnerability_code": "    function bidOnSiringAuction(\n\n        uint256 _sireId,\n\n        uint256 _matronId\n\n    )\n\n        external\n\n        payable\n\n        whenNotPaused\n\n    {\n\n        // Auction contract checks input sizes\n\n        require(_owns(msg.sender, _matronId));\n\n        require(isReadyToBreed(_matronId));\n\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n\n\n        // Define the current price of the auction.\n\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n\n        require(msg.value >= currentPrice + autoBirthFee);\n\n\n\n        // Siring auction will throw if the bid fails.\n\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n\n        _breedWith(uint32(_matronId), uint32(_sireId));\n",
                    "message": "Reentrancy in KittyAuction.bidOnSiringAuction (KittyCore.sol#1761-1781):\n\tExternal calls:\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (KittyCore.sol#1775)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (KittyCore.sol#1779)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (KittyCore.sol#1779)\n\tState variables written after the call(s):\n\t- kitties (KittyCore.sol#1780)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": 705,
                    "vulnerability_code": "    function _memcpy(uint _dest, uint _src, uint _len) private view {\n\n        // Copy word-length chunks while possible\n\n        for(; _len >= 32; _len -= 32) {\n\n            assembly {\n\n                mstore(_dest, mload(_src))\n\n            }\n\n            _dest += 32;\n\n            _src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint256 mask = 256 ** (32 - _len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(_src), not(mask))\n\n            let destpart := and(mload(_dest), mask)\n\n            mstore(_dest, or(destpart, srcpart))\n\n        }\n",
                    "message": "KittyOwnership._memcpy (KittyCore.sol#688-705) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "contract ERC721 {\n\n    // Required methods\n\n    function totalSupply() public view returns (uint256 total);\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n\n    function approve(address _to, uint256 _tokenId) external;\n\n    function transfer(address _to, uint256 _tokenId) external;\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n\n\n    // Events\n\n    event Transfer(address from, address to, uint256 tokenId);\n\n    event Approval(address owner, address approved, uint256 tokenId);\n\n\n\n    // Optional\n\n    // function name() public view returns (string name);\n\n    // function symbol() public view returns (string symbol);\n\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n",
                    "message": "ERC721 (KittyCore.sol#55-76) has incorrect ERC20 function interface(s):\n\t-approve (KittyCore.sol#60)\n\t-transfer (KittyCore.sol#61)\n\t-transferFrom (KittyCore.sol#62)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 720,
                    "vulnerability_code": "contract KittyOwnership is KittyBase, ERC721 {\n\n\n\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n\n    string public constant name = \"CryptoKitties\";\n\n    string public constant symbol = \"CK\";\n\n\n\n    // The contract that will return kitty metadata\n\n    ERC721Metadata public erc721Metadata;\n\n\n\n    bytes4 constant InterfaceSignature_ERC165 =\n\n        bytes4(keccak256('supportsInterface(bytes4)'));\n\n\n\n    bytes4 constant InterfaceSignature_ERC721 =\n\n        bytes4(keccak256('name()')) ^\n\n        bytes4(keccak256('symbol()')) ^\n\n        bytes4(keccak256('totalSupply()')) ^\n\n        bytes4(keccak256('balanceOf(address)')) ^\n\n        bytes4(keccak256('ownerOf(uint256)')) ^\n\n        bytes4(keccak256('approve(address,uint256)')) ^\n\n        bytes4(keccak256('transfer(address,uint256)')) ^\n\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n\n    ///  ERC-165 (obviously!) and ERC-721.\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n\n    {\n\n        // DEBUG ONLY\n\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n\n    }\n\n\n\n    /// @dev Set the address of the sibling contract that tracks metadata.\n\n    ///  CEO only.\n\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\n\n        erc721Metadata = ERC721Metadata(_contractAddress);\n\n    }\n\n\n\n    // Internal utility functions: These functions all assume that their input arguments\n\n    // are valid. We leave it to public methods to sanitize their inputs and follow\n\n    // the required logic.\n\n\n\n    /// @dev Checks if a given address is the current owner of a particular Kitty.\n\n    /// @param _claimant the address we are validating against.\n\n    /// @param _tokenId kitten id, only valid when > 0\n\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n\n        return kittyIndexToOwner[_tokenId] == _claimant;\n\n    }\n\n\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Kitty.\n\n    /// @param _claimant the address we are confirming kitten is approved for.\n\n    /// @param _tokenId kitten id, only valid when > 0\n\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n\n        return kittyIndexToApproved[_tokenId] == _claimant;\n\n    }\n\n\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n\n    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and\n\n    ///  there is no value in spamming the log with Approval events in that case.\n\n    function _approve(uint256 _tokenId, address _approved) internal {\n\n        kittyIndexToApproved[_tokenId] = _approved;\n\n    }\n\n\n\n    /// @notice Returns the number of Kitties owned by a specific address.\n\n    /// @param _owner The owner address to check.\n\n    /// @dev Required for ERC-721 compliance\n\n    function balanceOf(address _owner) public view returns (uint256 count) {\n\n        return ownershipTokenCount[_owner];\n\n    }\n\n\n\n    /// @notice Transfers a Kitty to another address. If transferring to a smart\n\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n\n    ///  CryptoKitties specifically) or your Kitty may be lost forever. Seriously.\n\n    /// @param _to The address of the recipient, can be a user or contract.\n\n    /// @param _tokenId The ID of the Kitty to transfer.\n\n    /// @dev Required for ERC-721 compliance.\n\n    function transfer(\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n\n        external\n\n        whenNotPaused\n\n    {\n\n        // Safety check to prevent against an unexpected 0x0 default.\n\n        require(_to != address(0));\n\n        // Disallow transfers to this contract to prevent accidental misuse.\n\n        // The contract should never own any kitties (except very briefly\n\n        // after a gen0 cat is created and before it goes on auction).\n\n        require(_to != address(this));\n\n        // Disallow transfers to the auction contracts to prevent accidental\n\n        // misuse. Auction contracts should only take ownership of kitties\n\n        // through the allow + transferFrom flow.\n\n        require(_to != address(saleAuction));\n\n        require(_to != address(siringAuction));\n\n\n\n        // You can only send your own cat.\n\n        require(_owns(msg.sender, _tokenId));\n\n\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n\n        _transfer(msg.sender, _to, _tokenId);\n\n    }\n\n\n\n    /// @notice Grant another address the right to transfer a specific Kitty via\n\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n\n    ///  clear all approvals.\n\n    /// @param _tokenId The ID of the Kitty that can be transferred if this call succeeds.\n\n    /// @dev Required for ERC-721 compliance.\n\n    function approve(\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n\n        external\n\n        whenNotPaused\n\n    {\n\n        // Only an owner can grant transfer approval.\n\n        require(_owns(msg.sender, _tokenId));\n\n\n\n        // Register the approval (replacing any previous approval).\n\n        _approve(_tokenId, _to);\n\n\n\n        // Emit approval event.\n\n        emit Approval(msg.sender, _to, _tokenId);\n\n    }\n\n\n\n    /// @notice Transfer a Kitty owned by another address, for which the calling address\n\n    ///  has previously been granted transfer approval by the owner.\n\n    /// @param _from The address that owns the Kitty to be transfered.\n\n    /// @param _to The address that should take ownership of the Kitty. Can be any address,\n\n    ///  including the caller.\n\n    /// @param _tokenId The ID of the Kitty to be transferred.\n\n    /// @dev Required for ERC-721 compliance.\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _tokenId\n\n    )\n\n        external\n\n        whenNotPaused\n\n    {\n\n        // Safety check to prevent against an unexpected 0x0 default.\n\n        require(_to != address(0));\n\n        // Disallow transfers to this contract to prevent accidental misuse.\n\n        // The contract should never own any kitties (except very briefly\n\n        // after a gen0 cat is created and before it goes on auction).\n\n        require(_to != address(this));\n\n        // Check for approval and valid ownership\n\n        require(_approvedFor(msg.sender, _tokenId));\n\n        require(_owns(_from, _tokenId));\n\n\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n\n        _transfer(_from, _to, _tokenId);\n\n    }\n\n\n\n    /// @notice Returns the total number of Kitties currently in existence.\n\n    /// @dev Required for ERC-721 compliance.\n\n    function totalSupply() public view returns (uint) {\n\n        return kitties.length - 1;\n\n    }\n\n\n\n    /// @notice Returns the address currently assigned ownership of a given Kitty.\n\n    /// @dev Required for ERC-721 compliance.\n\n    function ownerOf(uint256 _tokenId)\n\n        external\n\n        view\n\n        returns (address owner)\n\n    {\n\n        owner = kittyIndexToOwner[_tokenId];\n\n\n\n        require(owner != address(0));\n\n    }\n\n\n\n    /// @notice Returns a list of all Kitty IDs assigned to an address.\n\n    /// @param _owner The owner whose Kitties we are interested in.\n\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n\n    ///  expensive (it walks the entire Kitty array looking for cats belonging to owner),\n\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n\n    ///  not contract-to-contract calls.\n\n    function tokensOfOwner(address _owner) external view returns(uint256[] memory ownerTokens) {\n\n        uint256 tokenCount = balanceOf(_owner);\n\n\n\n        if (tokenCount == 0) {\n\n            // Return an empty array\n\n            return new uint256[](0);\n\n        } else {\n\n            uint256[] memory result = new uint256[](tokenCount);\n\n            uint256 totalCats = totalSupply();\n\n            uint256 resultIndex = 0;\n\n\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n\n            // sequentially up to the totalCat count.\n\n            uint256 catId;\n\n\n\n            for (catId = 1; catId <= totalCats; catId++) {\n\n                if (kittyIndexToOwner[catId] == _owner) {\n\n                    result[resultIndex] = catId;\n\n                    resultIndex++;\n\n                }\n\n            }\n\n\n\n            return result;\n\n        }\n\n    }\n\n\n\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)\n\n    ///  This method is licenced under the Apache License.\n\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\n\n        // Copy word-length chunks while possible\n\n        for(; _len >= 32; _len -= 32) {\n\n            assembly {\n\n                mstore(_dest, mload(_src))\n\n            }\n\n            _dest += 32;\n\n            _src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint256 mask = 256 ** (32 - _len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(_src), not(mask))\n\n            let destpart := and(mload(_dest), mask)\n\n            mstore(_dest, or(destpart, srcpart))\n\n        }\n\n    }\n\n\n\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)\n\n    ///  This method is licenced under the Apache License.\n\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n\n    function _toString(bytes32[4] storage _rawBytes, uint256 _stringLength) private view returns (string memory) {\n\n        return 'string return';\n\n    }\n\n\n\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\n\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\n\n    /// @param _tokenId The ID number of the Kitty whose metadata should be returned.\n\n    function tokenMetadata(uint256 _tokenId, string calldata _preferredTransport) external view returns (string memory infoUrl) {\n\n        return 'infoUrl';\n\n    }\n",
                    "message": "KittyOwnership (KittyCore.sol#476-720) has incorrect ERC20 function interface(s):\n\t-approve (KittyCore.sol#589-604)\n\t-transfer (KittyCore.sol#557-581)\n\t-transferFrom (KittyCore.sol#613-633)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": 1650,
                    "vulnerability_code": "    function bid(uint256 _tokenId)\n\n        external\n\n        payable\n\n    {\n\n        // _bid verifies token ID size\n\n        address seller = tokenIdToAuction[_tokenId].seller;\n\n        uint256 price = _bid(_tokenId, msg.value);\n\n        _transfer(msg.sender, _tokenId);\n\n\n\n        // If not a gen0 auction, exit\n\n        if (seller == address(nonFungibleContract)) {\n\n            // Track gen0 sale prices\n\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n\n            gen0SaleCount++;\n\n        }\n",
                    "message": "SaleClockAuction.bid (KittyCore.sol#1635-1650) uses a dangerous strict equality:\n\t- seller == address(nonFungibleContract)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1824,
                    "vulnerability_to_line": 1839,
                    "vulnerability_code": "    function createGen0Auction(uint256 _genes) external onlyCOO {\n\n        require(gen0CreatedCount < GEN0_CREATION_LIMIT);\n\n\n\n        uint256 kittyId = _createKitty(0, 0, 0, _genes, address(this));\n\n        _approve(kittyId, address(saleAuction));\n\n\n\n        saleAuction.createAuction(\n\n            kittyId,\n\n            _computeNextGen0Price(),\n\n            0,\n\n            GEN0_AUCTION_DURATION,\n\n            address(this)\n\n        );\n\n\n\n        gen0CreatedCount++;\n",
                    "message": "Reentrancy in KittyMinting.createGen0Auction (KittyCore.sol#1824-1839):\n\tExternal calls:\n\t- saleAuction.createAuction(kittyId,_computeNextGen0Price(),0,GEN0_AUCTION_DURATION,address(this)) (KittyCore.sol#1830-1836)\n\tState variables written after the call(s):\n\t- gen0CreatedCount (KittyCore.sol#1838)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": 1055,
                    "vulnerability_code": "    function giveBirth(uint256 _matronId)\n\n        external\n\n        whenNotPaused\n\n        returns(uint256)\n\n    {\n\n        // Grab a reference to the matron in storage.\n\n        Kitty storage matron = kitties[_matronId];\n\n\n\n        // Check that the matron is a valid cat.\n\n        require(matron.birthTime != 0);\n\n\n\n        // Check that the matron is pregnant, and that its time has come!\n\n        require(_isReadyToGiveBirth(matron));\n\n\n\n        // Grab a reference to the sire in storage.\n\n        uint256 sireId = matron.siringWithId;\n\n        Kitty storage sire = kitties[sireId];\n\n\n\n        // Determine the higher generation number of the two parents\n\n        uint16 parentGen = matron.generation;\n\n        if (sire.generation > matron.generation) {\n\n            parentGen = sire.generation;\n\n        }\n\n\n\n        // Call the sooper-sekret gene mixing operation.\n\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\n\n\n\n        // Make the new kitten!\n\n        address owner = kittyIndexToOwner[_matronId];\n\n        uint256 kittenId = _createKitty(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n\n\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n\n        // set is what marks a matron as being pregnant.)\n\n        delete matron.siringWithId;\n\n\n\n        // Every time a kitty gives birth counter is decremented.\n\n        pregnantKitties--;\n\n\n\n        // Send the balance fee to the person who made birth happen.\n\n        msg.sender.transfer(autoBirthFee);\n\n\n\n        // return the new kitten's ID\n\n        return kittenId;\n",
                    "message": "Reentrancy in KittyBreeding.giveBirth (KittyCore.sol#1012-1055):\n\tExternal calls:\n\t- childGenes = geneScience.mixGenes(matron.genes,sire.genes,matron.cooldownEndBlock - 1) (KittyCore.sol#1037)\n\tState variables written after the call(s):\n\t- kitties (KittyCore.sol#1041)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": 1650,
                    "vulnerability_code": "    function bid(uint256 _tokenId)\n\n        external\n\n        payable\n\n    {\n\n        // _bid verifies token ID size\n\n        address seller = tokenIdToAuction[_tokenId].seller;\n\n        uint256 price = _bid(_tokenId, msg.value);\n\n        _transfer(msg.sender, _tokenId);\n\n\n\n        // If not a gen0 auction, exit\n\n        if (seller == address(nonFungibleContract)) {\n\n            // Track gen0 sale prices\n\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n\n            gen0SaleCount++;\n\n        }\n",
                    "message": "Reentrancy in SaleClockAuction.bid (KittyCore.sol#1635-1650):\n\tExternal calls:\n\t- _transfer(msg.sender,_tokenId) (KittyCore.sol#1642)\n\tExternal calls sending eth:\n\t- price = _bid(_tokenId,msg.value) (KittyCore.sol#1641)\n\tState variables written after the call(s):\n\t- gen0SaleCount (KittyCore.sol#1648)\n\t- lastGen0SalePrices (KittyCore.sol#1647)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1761,
                    "vulnerability_to_line": 1781,
                    "vulnerability_code": "    function bidOnSiringAuction(\n\n        uint256 _sireId,\n\n        uint256 _matronId\n\n    )\n\n        external\n\n        payable\n\n        whenNotPaused\n\n    {\n\n        // Auction contract checks input sizes\n\n        require(_owns(msg.sender, _matronId));\n\n        require(isReadyToBreed(_matronId));\n\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n\n\n        // Define the current price of the auction.\n\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n\n        require(msg.value >= currentPrice + autoBirthFee);\n\n\n\n        // Siring auction will throw if the bid fails.\n\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n\n        _breedWith(uint32(_matronId), uint32(_sireId));\n",
                    "message": "Reentrancy in KittyAuction.bidOnSiringAuction (KittyCore.sol#1761-1781):\n\tExternal calls:\n\t- currentPrice = siringAuction.getCurrentPrice(_sireId) (KittyCore.sol#1775)\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (KittyCore.sol#1779)\n\tExternal calls sending eth:\n\t- siringAuction.bid.value(msg.value - autoBirthFee)(_sireId) (KittyCore.sol#1779)\n\tState variables written after the call(s):\n\t- pregnantKitties (KittyCore.sol#1780)\n\t- sireAllowedToAddress (KittyCore.sol#1780)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1375,
                    "vulnerability_to_line": 1382,
                    "vulnerability_code": "    constructor(address _nftAddress, uint256 _cut) public {\n\n        require(_cut <= 10000);\n\n        ownerCut = _cut;\n\n\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n\n        nonFungibleContract = candidateContract;\n",
                    "message": "Reentrancy in ClockAuction.constructor (KittyCore.sol#1375-1382):\n\tExternal calls:\n\t- require(bool)(candidateContract.supportsInterface(InterfaceSignature_ERC721)) (KittyCore.sol#1380)\n\tState variables written after the call(s):\n\t- nonFungibleContract (KittyCore.sol#1381)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1406,
                    "vulnerability_to_line": 1432,
                    "vulnerability_code": "    function createAuction(\n\n        uint256 _tokenId,\n\n        uint256 _startingPrice,\n\n        uint256 _endingPrice,\n\n        uint256 _duration,\n\n        address _seller\n\n    )\n\n        external\n\n        whenNotPaused\n\n    {\n\n        // Sanity check that no inputs overflow how many bits we've allocated\n\n        // to store them in the auction struct.\n\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n\n        require(_duration == uint256(uint64(_duration)));\n\n\n\n        require(_owns(msg.sender, _tokenId));\n\n        _escrow(msg.sender, _tokenId);\n\n        Auction memory auction = Auction(\n\n            _seller,\n\n            uint128(_startingPrice),\n\n            uint128(_endingPrice),\n\n            uint64(_duration),\n\n            uint64(now)\n\n        );\n\n        _addAuction(_tokenId, auction);\n",
                    "message": "Reentrancy in ClockAuction.createAuction (KittyCore.sol#1406-1432):\n\tExternal calls:\n\t- require(bool)(_owns(msg.sender,_tokenId)) (KittyCore.sol#1422)\n\t- _escrow(msg.sender,_tokenId) (KittyCore.sol#1423)\n\tState variables written after the call(s):\n\t- tokenIdToAuction (KittyCore.sol#1431)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1534,
                    "vulnerability_to_line": 1559,
                    "vulnerability_code": "    function createAuction(\n\n        uint256 _tokenId,\n\n        uint256 _startingPrice,\n\n        uint256 _endingPrice,\n\n        uint256 _duration,\n\n        address _seller\n\n    )\n\n        external\n\n    {\n\n        // Sanity check that no inputs overflow how many bits we've allocated\n\n        // to store them in the auction struct.\n\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n\n        require(_duration == uint256(uint64(_duration)));\n\n\n\n        require(msg.sender == address(nonFungibleContract));\n\n        _escrow(_seller, _tokenId);\n\n        Auction memory auction = Auction(\n\n            _seller,\n\n            uint128(_startingPrice),\n\n            uint128(_endingPrice),\n\n            uint64(_duration),\n\n            uint64(now)\n\n        );\n\n        _addAuction(_tokenId, auction);\n",
                    "message": "Reentrancy in SiringClockAuction.createAuction (KittyCore.sol#1534-1559):\n\tExternal calls:\n\t- _escrow(_seller,_tokenId) (KittyCore.sol#1550)\n\tState variables written after the call(s):\n\t- tokenIdToAuction (KittyCore.sol#1558)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1606,
                    "vulnerability_to_line": 1631,
                    "vulnerability_code": "    function createAuction(\n\n        uint256 _tokenId,\n\n        uint256 _startingPrice,\n\n        uint256 _endingPrice,\n\n        uint256 _duration,\n\n        address _seller\n\n    )\n\n        external\n\n    {\n\n        // Sanity check that no inputs overflow how many bits we've allocated\n\n        // to store them in the auction struct.\n\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n\n        require(_duration == uint256(uint64(_duration)));\n\n\n\n        require(msg.sender == address(nonFungibleContract));\n\n        _escrow(_seller, _tokenId);\n\n        Auction memory auction = Auction(\n\n            _seller,\n\n            uint128(_startingPrice),\n\n            uint128(_endingPrice),\n\n            uint64(_duration),\n\n            uint64(now)\n\n        );\n\n        _addAuction(_tokenId, auction);\n",
                    "message": "Reentrancy in SaleClockAuction.createAuction (KittyCore.sol#1606-1631):\n\tExternal calls:\n\t- _escrow(_seller,_tokenId) (KittyCore.sol#1622)\n\tState variables written after the call(s):\n\t- tokenIdToAuction (KittyCore.sol#1630)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": 1055,
                    "vulnerability_code": "    function giveBirth(uint256 _matronId)\n\n        external\n\n        whenNotPaused\n\n        returns(uint256)\n\n    {\n\n        // Grab a reference to the matron in storage.\n\n        Kitty storage matron = kitties[_matronId];\n\n\n\n        // Check that the matron is a valid cat.\n\n        require(matron.birthTime != 0);\n\n\n\n        // Check that the matron is pregnant, and that its time has come!\n\n        require(_isReadyToGiveBirth(matron));\n\n\n\n        // Grab a reference to the sire in storage.\n\n        uint256 sireId = matron.siringWithId;\n\n        Kitty storage sire = kitties[sireId];\n\n\n\n        // Determine the higher generation number of the two parents\n\n        uint16 parentGen = matron.generation;\n\n        if (sire.generation > matron.generation) {\n\n            parentGen = sire.generation;\n\n        }\n\n\n\n        // Call the sooper-sekret gene mixing operation.\n\n        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);\n\n\n\n        // Make the new kitten!\n\n        address owner = kittyIndexToOwner[_matronId];\n\n        uint256 kittenId = _createKitty(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n\n\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n\n        // set is what marks a matron as being pregnant.)\n\n        delete matron.siringWithId;\n\n\n\n        // Every time a kitty gives birth counter is decremented.\n\n        pregnantKitties--;\n\n\n\n        // Send the balance fee to the person who made birth happen.\n\n        msg.sender.transfer(autoBirthFee);\n\n\n\n        // return the new kitten's ID\n\n        return kittenId;\n",
                    "message": "Reentrancy in KittyBreeding.giveBirth (KittyCore.sol#1012-1055):\n\tExternal calls:\n\t- childGenes = geneScience.mixGenes(matron.genes,sire.genes,matron.cooldownEndBlock - 1) (KittyCore.sol#1037)\n\tState variables written after the call(s):\n\t- kittyIndexToApproved (KittyCore.sol#1041)\n\t- kittyIndexToOwner (KittyCore.sol#1041)\n\t- ownershipTokenCount (KittyCore.sol#1041)\n\t- pregnantKitties (KittyCore.sol#1048)\n\t- sireAllowedToAddress (KittyCore.sol#1041)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": 755,
                    "vulnerability_code": "    function setGeneScienceAddress(address _address) external onlyCEO {\n\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n\n\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n\n        require(candidateContract.isGeneScience());\n\n\n\n        // Set the new contract address\n\n        geneScience = candidateContract;\n",
                    "message": "Reentrancy in KittyBreeding.setGeneScienceAddress (KittyCore.sol#747-755):\n\tExternal calls:\n\t- require(bool)(candidateContract.isGeneScience()) (KittyCore.sol#751)\n\tState variables written after the call(s):\n\t- geneScience (KittyCore.sol#754)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1675,
                    "vulnerability_to_line": 1683,
                    "vulnerability_code": "    function setSaleAuctionAddress(address _address) external onlyCEO {\n\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n\n\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n\n        require(candidateContract.isSaleClockAuction());\n\n\n\n        // Set the new contract address\n\n        saleAuction = candidateContract;\n",
                    "message": "Reentrancy in KittyAuction.setSaleAuctionAddress (KittyCore.sol#1675-1683):\n\tExternal calls:\n\t- require(bool)(candidateContract.isSaleClockAuction()) (KittyCore.sol#1679)\n\tState variables written after the call(s):\n\t- saleAuction (KittyCore.sol#1682)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1687,
                    "vulnerability_to_line": 1695,
                    "vulnerability_code": "    function setSiringAuctionAddress(address _address) external onlyCEO {\n\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n\n\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n\n        require(candidateContract.isSiringClockAuction());\n\n\n\n        // Set the new contract address\n\n        siringAuction = candidateContract;\n",
                    "message": "Reentrancy in KittyAuction.setSiringAuctionAddress (KittyCore.sol#1687-1695):\n\tExternal calls:\n\t- require(bool)(candidateContract.isSiringClockAuction()) (KittyCore.sol#1691)\n\tState variables written after the call(s):\n\t- siringAuction (KittyCore.sol#1694)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": 705,
                    "vulnerability_code": "    function _memcpy(uint _dest, uint _src, uint _len) private view {\n\n        // Copy word-length chunks while possible\n\n        for(; _len >= 32; _len -= 32) {\n\n            assembly {\n\n                mstore(_dest, mload(_src))\n\n            }\n\n            _dest += 32;\n\n            _src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint256 mask = 256 ** (32 - _len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(_src), not(mask))\n\n            let destpart := and(mload(_dest), mask)\n\n            mstore(_dest, or(destpart, srcpart))\n\n        }\n",
                    "message": "KittyOwnership._memcpy uses assembly (KittyCore.sol#688-705)\n\t- KittyCore.sol#691-693\n\t- KittyCore.sol#700-704\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 1590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public isSaleClockAuction = true;\n",
                    "message": "SaleClockAuction.isSaleClockAuction should be constant (KittyCore.sol#1590)\nSiringClockAuction.isSiringClockAuction should be constant (KittyCore.sol#1521)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    if (newOwner != address(0)) {\n\n      owner = newOwner;\n\n    }\n",
                    "message": "Ownable.transferOwnership (KittyCore.sol#43-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isGeneScience() public pure returns (bool);\n",
                    "message": "GeneScienceInterface.isGeneScience (KittyCore.sol#93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);\n",
                    "message": "GeneScienceInterface.mixGenes (KittyCore.sol#99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": 468,
                    "vulnerability_code": "    function getMetadata(uint256 _tokenId, string memory value) public view returns (bytes32[4] memory buffer, uint256 count) {\n\n        if (_tokenId == 1) {\n\n            buffer[0] = \"Hello World! :D\";\n\n            count = 15;\n\n        } else if (_tokenId == 2) {\n\n            buffer[0] = \"I would definitely choose a medi\";\n\n            buffer[1] = \"um length string.\";\n\n            count = 49;\n\n        } else if (_tokenId == 3) {\n\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n\n            buffer[2] = \" tristique vestibulum id, libero\";\n\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n\n            count = 128;\n\n        }\n",
                    "message": "ERC721Metadata.getMetadata (KittyCore.sol#453-468) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": 515,
                    "vulnerability_code": "    function setMetadataAddress(address _contractAddress) public onlyCEO {\n\n        erc721Metadata = ERC721Metadata(_contractAddress);\n",
                    "message": "KittyOwnership.setMetadataAddress (KittyCore.sol#513-515) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1343,
                    "vulnerability_to_line": 1347,
                    "vulnerability_code": "  function pause() public onlyOwner whenNotPaused returns (bool) {\n\n    paused = true;\n\n    emit Pause();\n\n    return true;\n",
                    "message": "Pausable.pause (KittyCore.sol#1343-1347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": 1356,
                    "vulnerability_code": "  function unpause() public onlyOwner whenPaused returns (bool) {\n\n    paused = false;\n\n    emit Unpause();\n\n    return true;\n",
                    "message": "Pausable.unpause (KittyCore.sol#1352-1356) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in KittyCore.sol:\n\t- pragma solidity0.5.12 (KittyCore.sol#9): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCEO(address _newCEO) external onlyCEO {\n",
                    "message": "Parameter '_newCEO' of KittyAccessControl.setCEO (KittyCore.sol#169) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCFO(address _newCFO) external onlyCEO {\n",
                    "message": "Parameter '_newCFO' of KittyAccessControl.setCFO (KittyCore.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCOO(address _newCOO) external onlyCEO {\n",
                    "message": "Parameter '_newCOO' of KittyAccessControl.setCOO (KittyCore.sol#185) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n\n        // Since the number of kittens is capped to 2^32 we can't overflow this\n\n        ownershipTokenCount[_to]++;\n\n        // transfer ownership\n\n        kittyIndexToOwner[_tokenId] = _to;\n\n        // When creating new kittens _from is 0x0, but we can't account that address.\n\n        if (_from != address(0)) {\n\n            ownershipTokenCount[_from]--;\n\n            // once the kitten is transferred also clear sire allowances\n\n            delete sireAllowedToAddress[_tokenId];\n\n            // clear any previously approved ownership exchange\n\n            delete kittyIndexToApproved[_tokenId];\n\n        }\n\n        // Emit the transfer event.\n\n        emit Transfer(_from, _to, _tokenId);\n",
                    "message": "Function 'KittyBase._transfer' (KittyCore.sol#356-371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_from' of KittyBase._transfer (KittyCore.sol#356) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_to' of KittyBase._transfer (KittyCore.sol#356) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of KittyBase._transfer (KittyCore.sol#356) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": 436,
                    "vulnerability_code": "    function _createKitty(\n\n        uint256 _matronId,\n\n        uint256 _sireId,\n\n        uint256 _generation,\n\n        uint256 _genes,\n\n        address _owner\n\n    )\n\n        internal\n\n        returns (uint)\n\n    {\n\n        // These requires are not strictly necessary, our calling code should make\n\n        // sure that these conditions are never broken. However! _createKitty() is already\n\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\n\n        // to ensure our data structures are always valid.\n\n        require(_matronId == uint256(uint32(_matronId)));\n\n        require(_sireId == uint256(uint32(_sireId)));\n\n        require(_generation == uint256(uint16(_generation)));\n\n\n\n        // New kitty starts with the same cooldown as parent gen/2\n\n        uint16 cooldownIndex = uint16(_generation / 2);\n\n        if (cooldownIndex > 13) {\n\n            cooldownIndex = 13;\n\n        }\n\n\n\n        Kitty memory _kitty = Kitty({\n\n            genes: _genes,\n\n            birthTime: uint64(now),\n\n            cooldownEndBlock: 0,\n\n            matronId: uint32(_matronId),\n\n            sireId: uint32(_sireId),\n\n            siringWithId: 0,\n\n            cooldownIndex: cooldownIndex,\n\n            generation: uint16(_generation)\n\n        });\n\n        uint256 newKittenId = kitties.push(_kitty) - 1;\n\n\n\n        // It's probably never going to happen, 4 billion cats is A LOT, but\n\n        // let's just be 100% sure we never let this happen.\n\n        require(newKittenId == uint256(uint32(newKittenId)));\n\n\n\n        // emit the birth event\n\n        emit Birth(\n\n            _owner,\n\n            newKittenId,\n\n            uint256(_kitty.matronId),\n\n            uint256(_kitty.sireId),\n\n            _kitty.genes\n\n        );\n\n\n\n        // This will assign ownership, and also emit the Transfer event as\n\n        // per ERC721 draft\n\n        _transfer(address(0), _owner, newKittenId);\n\n\n\n        return newKittenId;\n",
                    "message": "Function 'KittyBase._createKitty' (KittyCore.sol#382-436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _matronId,\n",
                    "message": "Parameter '_matronId' of KittyBase._createKitty (KittyCore.sol#383) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _sireId,\n",
                    "message": "Parameter '_sireId' of KittyBase._createKitty (KittyCore.sol#384) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _generation,\n",
                    "message": "Parameter '_generation' of KittyBase._createKitty (KittyCore.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _genes,\n",
                    "message": "Parameter '_genes' of KittyBase._createKitty (KittyCore.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner\n",
                    "message": "Parameter '_owner' of KittyBase._createKitty (KittyCore.sol#387) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMetadata(uint256 _tokenId, string memory value) public view returns (bytes32[4] memory buffer, uint256 count) {\n",
                    "message": "Parameter '_tokenId' of ERC721Metadata.getMetadata (KittyCore.sol#453) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256 count) {\n",
                    "message": "Parameter '_owner' of KittyOwnership.balanceOf (KittyCore.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerOf(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of KittyOwnership.ownerOf (KittyCore.sol#643) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of KittyOwnership.approve (KittyCore.sol#590) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId\n",
                    "message": "Parameter '_tokenId' of KittyOwnership.approve (KittyCore.sol#591) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of KittyOwnership.transfer (KittyCore.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId\n",
                    "message": "Parameter '_tokenId' of KittyOwnership.transfer (KittyCore.sol#559) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of KittyOwnership.transferFrom (KittyCore.sol#614) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of KittyOwnership.transferFrom (KittyCore.sol#615) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId\n",
                    "message": "Parameter '_tokenId' of KittyOwnership.transferFrom (KittyCore.sol#616) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n",
                    "message": "Parameter '_interfaceID' of KittyOwnership.supportsInterface (KittyCore.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMetadataAddress(address _contractAddress) public onlyCEO {\n",
                    "message": "Parameter '_contractAddress' of KittyOwnership.setMetadataAddress (KittyCore.sol#513) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": 526,
                    "vulnerability_code": "    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n\n        return kittyIndexToOwner[_tokenId] == _claimant;\n",
                    "message": "Function 'KittyOwnership._owns' (KittyCore.sol#524-526) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_claimant' of KittyOwnership._owns (KittyCore.sol#524) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_tokenId' of KittyOwnership._owns (KittyCore.sol#524) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 533,
                    "vulnerability_code": "    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n\n        return kittyIndexToApproved[_tokenId] == _claimant;\n",
                    "message": "Function 'KittyOwnership._approvedFor' (KittyCore.sol#531-533) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_claimant' of KittyOwnership._approvedFor (KittyCore.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_tokenId' of KittyOwnership._approvedFor (KittyCore.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": 542,
                    "vulnerability_code": "    function _approve(uint256 _tokenId, address _approved) internal {\n\n        kittyIndexToApproved[_tokenId] = _approved;\n",
                    "message": "Function 'KittyOwnership._approve' (KittyCore.sol#540-542) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _approve(uint256 _tokenId, address _approved) internal {\n",
                    "message": "Parameter '_tokenId' of KittyOwnership._approve (KittyCore.sol#540) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 540,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _approve(uint256 _tokenId, address _approved) internal {\n",
                    "message": "Parameter '_approved' of KittyOwnership._approve (KittyCore.sol#540) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokensOfOwner(address _owner) external view returns(uint256[] memory ownerTokens) {\n",
                    "message": "Parameter '_owner' of KittyOwnership.tokensOfOwner (KittyCore.sol#659) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": 705,
                    "vulnerability_code": "    function _memcpy(uint _dest, uint _src, uint _len) private view {\n\n        // Copy word-length chunks while possible\n\n        for(; _len >= 32; _len -= 32) {\n\n            assembly {\n\n                mstore(_dest, mload(_src))\n\n            }\n\n            _dest += 32;\n\n            _src += 32;\n\n        }\n\n\n\n        // Copy remaining bytes\n\n        uint256 mask = 256 ** (32 - _len) - 1;\n\n        assembly {\n\n            let srcpart := and(mload(_src), not(mask))\n\n            let destpart := and(mload(_dest), mask)\n\n            mstore(_dest, or(destpart, srcpart))\n\n        }\n",
                    "message": "Function 'KittyOwnership._memcpy' (KittyCore.sol#688-705) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _memcpy(uint _dest, uint _src, uint _len) private view {\n",
                    "message": "Parameter '_dest' of KittyOwnership._memcpy (KittyCore.sol#688) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _memcpy(uint _dest, uint _src, uint _len) private view {\n",
                    "message": "Parameter '_src' of KittyOwnership._memcpy (KittyCore.sol#688) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _memcpy(uint _dest, uint _src, uint _len) private view {\n",
                    "message": "Parameter '_len' of KittyOwnership._memcpy (KittyCore.sol#688) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": 712,
                    "vulnerability_code": "    function _toString(bytes32[4] storage _rawBytes, uint256 _stringLength) private view returns (string memory) {\n\n        return 'string return';\n",
                    "message": "Function 'KittyOwnership._toString' (KittyCore.sol#710-712) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": 486,
                    "vulnerability_code": "    bytes4 constant InterfaceSignature_ERC165 =\n",
                    "message": "Constant 'KittyOwnership.InterfaceSignature_ERC165' (KittyCore.sol#485-486) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": 498,
                    "vulnerability_code": "    bytes4 constant InterfaceSignature_ERC721 =\n\n        bytes4(keccak256('name()')) ^\n\n        bytes4(keccak256('symbol()')) ^\n\n        bytes4(keccak256('totalSupply()')) ^\n\n        bytes4(keccak256('balanceOf(address)')) ^\n\n        bytes4(keccak256('ownerOf(uint256)')) ^\n\n        bytes4(keccak256('approve(address,uint256)')) ^\n\n        bytes4(keccak256('transfer(address,uint256)')) ^\n\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n",
                    "message": "Constant 'KittyOwnership.InterfaceSignature_ERC721' (KittyCore.sol#488-498) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGeneScienceAddress(address _address) external onlyCEO {\n",
                    "message": "Parameter '_address' of KittyBreeding.setGeneScienceAddress (KittyCore.sol#747) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 760,
                    "vulnerability_to_line": 765,
                    "vulnerability_code": "    function _isReadyToBreed(Kitty memory _kit) internal view returns (bool) {\n\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\n\n        // the cat has a pending birth; there can be some period of time between the end\n\n        // of the pregnacy timer and the birth event.\n\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\n",
                    "message": "Function 'KittyBreeding._isReadyToBreed' (KittyCore.sol#760-765) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 760,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isReadyToBreed(Kitty memory _kit) internal view returns (bool) {\n",
                    "message": "Parameter '_kit' of KittyBreeding._isReadyToBreed (KittyCore.sol#760) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 770,
                    "vulnerability_to_line": 777,
                    "vulnerability_code": "    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\n\n        address matronOwner = kittyIndexToOwner[_matronId];\n\n        address sireOwner = kittyIndexToOwner[_sireId];\n\n\n\n        // Siring is okay if they have same owner, or if the matron's owner was given\n\n        // permission to breed with this sire.\n\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n",
                    "message": "Function 'KittyBreeding._isSiringPermitted' (KittyCore.sol#770-777) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 770,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\n",
                    "message": "Parameter '_sireId' of KittyBreeding._isSiringPermitted (KittyCore.sol#770) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 770,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {\n",
                    "message": "Parameter '_matronId' of KittyBreeding._isSiringPermitted (KittyCore.sol#770) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": 792,
                    "vulnerability_code": "    function _triggerCooldown(Kitty storage _kitten) internal {\n\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\n\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex]/secondsPerBlock) + block.number);\n\n\n\n        // Increment the breeding count, clamping it at 13, which is the length of the\n\n        // cooldowns array. We could check the array size dynamically, but hard-coding\n\n        // this as a constant saves gas. Yay, Solidity!\n\n        if (_kitten.cooldownIndex < 13) {\n\n            _kitten.cooldownIndex += 1;\n\n        }\n",
                    "message": "Function 'KittyBreeding._triggerCooldown' (KittyCore.sol#782-792) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _triggerCooldown(Kitty storage _kitten) internal {\n",
                    "message": "Parameter '_kitten' of KittyBreeding._triggerCooldown (KittyCore.sol#782) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveSiring(address _addr, uint256 _sireId)\n",
                    "message": "Parameter '_addr' of KittyBreeding.approveSiring (KittyCore.sol#798) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveSiring(address _addr, uint256 _sireId)\n",
                    "message": "Parameter '_sireId' of KittyBreeding.approveSiring (KittyCore.sol#798) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": 817,
                    "vulnerability_code": "    function _isReadyToGiveBirth(Kitty memory _matron) private view returns (bool) {\n\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n",
                    "message": "Function 'KittyBreeding._isReadyToGiveBirth' (KittyCore.sol#815-817) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isReadyToGiveBirth(Kitty memory _matron) private view returns (bool) {\n",
                    "message": "Parameter '_matron' of KittyBreeding._isReadyToGiveBirth (KittyCore.sol#815) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isReadyToBreed(uint256 _kittyId)\n",
                    "message": "Parameter '_kittyId' of KittyBreeding.isReadyToBreed (KittyCore.sol#822) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 834,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isPregnant(uint256 _kittyId)\n",
                    "message": "Parameter '_kittyId' of KittyBreeding.isPregnant (KittyCore.sol#834) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": 889,
                    "vulnerability_code": "    function _isValidMatingPair(\n\n        Kitty storage _matron,\n\n        uint256 _matronId,\n\n        Kitty storage _sire,\n\n        uint256 _sireId\n\n    )\n\n        private\n\n        view\n\n        returns(bool)\n\n    {\n\n        // A Kitty can't breed with itself!\n\n        if (_matronId == _sireId) {\n\n            return false;\n\n        }\n\n\n\n        // Kitties can't breed with their parents.\n\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n\n            return false;\n\n        }\n\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n\n            return false;\n\n        }\n\n\n\n        // We can short circuit the sibling check (below) if either cat is\n\n        // gen zero (has a matron ID of zero).\n\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n\n            return true;\n\n        }\n\n\n\n        // Kitties can't breed with full or half siblings.\n\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n\n            return false;\n\n        }\n\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n\n            return false;\n\n        }\n\n\n\n        // Everything seems cool! Let's get DTF.\n\n        return true;\n",
                    "message": "Function 'KittyBreeding._isValidMatingPair' (KittyCore.sol#850-889) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Kitty storage _matron,\n",
                    "message": "Parameter '_matron' of KittyBreeding._isValidMatingPair (KittyCore.sol#851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _matronId,\n",
                    "message": "Parameter '_matronId' of KittyBreeding._isValidMatingPair (KittyCore.sol#852) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        Kitty storage _sire,\n",
                    "message": "Parameter '_sire' of KittyBreeding._isValidMatingPair (KittyCore.sol#853) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _sireId\n",
                    "message": "Parameter '_sireId' of KittyBreeding._isValidMatingPair (KittyCore.sol#854) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": 901,
                    "vulnerability_code": "    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n\n        internal\n\n        view\n\n        returns (bool)\n\n    {\n\n        Kitty storage matron = kitties[_matronId];\n\n        Kitty storage sire = kitties[_sireId];\n\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n",
                    "message": "Function 'KittyBreeding._canBreedWithViaAuction' (KittyCore.sol#893-901) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n",
                    "message": "Parameter '_matronId' of KittyBreeding._canBreedWithViaAuction (KittyCore.sol#893) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n",
                    "message": "Parameter '_sireId' of KittyBreeding._canBreedWithViaAuction (KittyCore.sol#893) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canBreedWith(uint256 _matronId, uint256 _sireId)\n",
                    "message": "Parameter '_matronId' of KittyBreeding.canBreedWith (KittyCore.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function canBreedWith(uint256 _matronId, uint256 _sireId)\n",
                    "message": "Parameter '_sireId' of KittyBreeding.canBreedWith (KittyCore.sol#909) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 924,
                    "vulnerability_to_line": 946,
                    "vulnerability_code": "    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\n\n        // Grab a reference to the Kitties from storage.\n\n        Kitty storage sire = kitties[_sireId];\n\n        Kitty storage matron = kitties[_matronId];\n\n\n\n        // Mark the matron as pregnant, keeping track of who the sire is.\n\n        matron.siringWithId = uint32(_sireId);\n\n\n\n        // Trigger the cooldown for both parents.\n\n        _triggerCooldown(sire);\n\n        _triggerCooldown(matron);\n\n\n\n        // Clear siring permission for both parents. This may not be strictly necessary\n\n        // but it's likely to avoid confusion!\n\n        delete sireAllowedToAddress[_matronId];\n\n        delete sireAllowedToAddress[_sireId];\n\n\n\n        // Every time a kitty gets pregnant, counter is incremented.\n\n        pregnantKitties++;\n\n\n\n        // Emit the pregnancy event.\n\n        emit Pregnant(kittyIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n",
                    "message": "Function 'KittyBreeding._breedWith' (KittyCore.sol#924-946) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 924,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\n",
                    "message": "Parameter '_matronId' of KittyBreeding._breedWith (KittyCore.sol#924) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 924,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _breedWith(uint256 _matronId, uint256 _sireId) internal {\n",
                    "message": "Parameter '_sireId' of KittyBreeding._breedWith (KittyCore.sol#924) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n",
                    "message": "Parameter '_matronId' of KittyBreeding.breedWithAuto (KittyCore.sol#953) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n",
                    "message": "Parameter '_sireId' of KittyBreeding.breedWithAuto (KittyCore.sol#953) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1012,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function giveBirth(uint256 _matronId)\n",
                    "message": "Parameter '_matronId' of KittyBreeding.giveBirth (KittyCore.sol#1012) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": 1106,
                    "vulnerability_code": "    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n",
                    "message": "Function 'ClockAuctionBase._owns' (KittyCore.sol#1104-1106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_claimant' of ClockAuctionBase._owns (KittyCore.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n",
                    "message": "Parameter '_tokenId' of ClockAuctionBase._owns (KittyCore.sol#1104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1112,
                    "vulnerability_to_line": 1115,
                    "vulnerability_code": "    function _escrow(address _owner, uint256 _tokenId) internal {\n\n        // it will throw if transfer fails\n\n        nonFungibleContract.transferFrom(_owner, address(this), _tokenId);\n",
                    "message": "Function 'ClockAuctionBase._escrow' (KittyCore.sol#1112-1115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _escrow(address _owner, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_owner' of ClockAuctionBase._escrow (KittyCore.sol#1112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _escrow(address _owner, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ClockAuctionBase._escrow (KittyCore.sol#1112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": 1124,
                    "vulnerability_code": "    function _transfer(address _receiver, uint256 _tokenId) internal {\n\n        // it will throw if transfer fails\n\n        nonFungibleContract.transfer(_receiver, _tokenId);\n",
                    "message": "Function 'ClockAuctionBase._transfer' (KittyCore.sol#1121-1124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transfer(address _receiver, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_receiver' of ClockAuctionBase._transfer (KittyCore.sol#1121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transfer(address _receiver, uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ClockAuctionBase._transfer (KittyCore.sol#1121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1130,
                    "vulnerability_to_line": 1143,
                    "vulnerability_code": "    function _addAuction(uint256 _tokenId, Auction memory _auction) internal {\n\n        // Require that all auctions have a duration of\n\n        // at least one minute. (Keeps our math from getting hairy!)\n\n        require(_auction.duration >= 1 minutes);\n\n\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n\n\n        emit AuctionCreated(\n\n            uint256(_tokenId),\n\n            uint256(_auction.startingPrice),\n\n            uint256(_auction.endingPrice),\n\n            uint256(_auction.duration)\n\n        );\n",
                    "message": "Function 'ClockAuctionBase._addAuction' (KittyCore.sol#1130-1143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAuction(uint256 _tokenId, Auction memory _auction) internal {\n",
                    "message": "Parameter '_tokenId' of ClockAuctionBase._addAuction (KittyCore.sol#1130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _addAuction(uint256 _tokenId, Auction memory _auction) internal {\n",
                    "message": "Parameter '_auction' of ClockAuctionBase._addAuction (KittyCore.sol#1130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1146,
                    "vulnerability_to_line": 1150,
                    "vulnerability_code": "    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n\n        _removeAuction(_tokenId);\n\n        _transfer(_seller, _tokenId);\n\n        emit AuctionCancelled(_tokenId);\n",
                    "message": "Function 'ClockAuctionBase._cancelAuction' (KittyCore.sol#1146-1150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n",
                    "message": "Parameter '_tokenId' of ClockAuctionBase._cancelAuction (KittyCore.sol#1146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n",
                    "message": "Parameter '_seller' of ClockAuctionBase._cancelAuction (KittyCore.sol#1146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": 1213,
                    "vulnerability_code": "    function _bid(uint256 _tokenId, uint256 _bidAmount)\n\n        internal\n\n        returns (uint256)\n\n    {\n\n        // Get a reference to the auction struct\n\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n\n\n        // Explicitly check that this auction is currently live.\n\n        // (Because of how Ethereum mappings work, we can't just count\n\n        // on the lookup above failing. An invalid _tokenId will just\n\n        // return an auction object that is all zeros.)\n\n        require(_isOnAuction(auction));\n\n\n\n        // Check that the bid is greater than or equal to the current price\n\n        uint256 price = _currentPrice(auction);\n\n        require(_bidAmount >= price);\n\n\n\n        // Grab a reference to the seller before the auction struct\n\n        // gets deleted.\n\n        address seller = auction.seller;\n\n\n\n        // The bid is good! Remove the auction before sending the fees\n\n        // to the sender so we can't have a reentrancy attack.\n\n        _removeAuction(_tokenId);\n\n\n\n        // Transfer proceeds to seller (if there are any!)\n\n        if (price > 0) {\n\n            // Calculate the auctioneer's cut.\n\n            // (NOTE: _computeCut() is guaranteed to return a\n\n            // value <= price, so this subtraction can't go negative.)\n\n            uint256 auctioneerCut = _computeCut(price);\n\n            uint256 sellerProceeds = price - auctioneerCut;\n\n\n\n            // NOTE: Doing a transfer() in the middle of a complex\n\n            // method like this is generally discouraged because of\n\n            // reentrancy attacks and DoS attacks if the seller is\n\n            // a contract with an invalid fallback function. We explicitly\n\n            // guard against reentrancy attacks by removing the auction\n\n            // before calling transfer(), and the only thing the seller\n\n            // can DoS is the sale of their own asset! (And if it's an\n\n            // accident, they can call cancelAuction(). )\n\n            //seller.transfer(sellerProceeds);\n\n        }\n\n\n\n        // Calculate any excess funds included with the bid. If the excess\n\n        // is anything worth worrying about, transfer it back to bidder.\n\n        // NOTE: We checked above that the bid amount is greater than or\n\n        // equal to the price so this cannot underflow.\n\n        uint256 bidExcess = _bidAmount - price;\n\n\n\n        // Return the funds. Similar to the previous transfer, this is\n\n        // not susceptible to a re-entry attack because the auction is\n\n        // removed before any transfers occur.\n\n        msg.sender.transfer(bidExcess);\n\n\n\n        // Tell the world!\n\n        emit AuctionSuccessful(_tokenId, price, msg.sender);\n\n\n\n        return price;\n",
                    "message": "Function 'ClockAuctionBase._bid' (KittyCore.sol#1154-1213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _bid(uint256 _tokenId, uint256 _bidAmount)\n",
                    "message": "Parameter '_tokenId' of ClockAuctionBase._bid (KittyCore.sol#1154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _bid(uint256 _tokenId, uint256 _bidAmount)\n",
                    "message": "Parameter '_bidAmount' of ClockAuctionBase._bid (KittyCore.sol#1154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": 1219,
                    "vulnerability_code": "    function _removeAuction(uint256 _tokenId) internal {\n\n        delete tokenIdToAuction[_tokenId];\n",
                    "message": "Function 'ClockAuctionBase._removeAuction' (KittyCore.sol#1217-1219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _removeAuction(uint256 _tokenId) internal {\n",
                    "message": "Parameter '_tokenId' of ClockAuctionBase._removeAuction (KittyCore.sol#1217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1223,
                    "vulnerability_to_line": 1225,
                    "vulnerability_code": "    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n\n        return (_auction.startedAt > 0);\n",
                    "message": "Function 'ClockAuctionBase._isOnAuction' (KittyCore.sol#1223-1225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n",
                    "message": "Parameter '_auction' of ClockAuctionBase._isOnAuction (KittyCore.sol#1223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1231,
                    "vulnerability_to_line": 1251,
                    "vulnerability_code": "    function _currentPrice(Auction storage _auction)\n\n        internal\n\n        view\n\n        returns (uint256)\n\n    {\n\n        uint256 secondsPassed = 0;\n\n\n\n        // A bit of insurance against negative values (or wraparound).\n\n        // Probably not necessary (since Ethereum guarnatees that the\n\n        // now variable doesn't ever go backwards).\n\n        if (now > _auction.startedAt) {\n\n            secondsPassed = now - _auction.startedAt;\n\n        }\n\n\n\n        return _computeCurrentPrice(\n\n            _auction.startingPrice,\n\n            _auction.endingPrice,\n\n            _auction.duration,\n\n            secondsPassed\n\n        );\n",
                    "message": "Function 'ClockAuctionBase._currentPrice' (KittyCore.sol#1231-1251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _currentPrice(Auction storage _auction)\n",
                    "message": "Parameter '_auction' of ClockAuctionBase._currentPrice (KittyCore.sol#1231) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1257,
                    "vulnerability_to_line": 1292,
                    "vulnerability_code": "    function _computeCurrentPrice(\n\n        uint256 _startingPrice,\n\n        uint256 _endingPrice,\n\n        uint256 _duration,\n\n        uint256 _secondsPassed\n\n    )\n\n        internal\n\n        pure\n\n        returns (uint256)\n\n    {\n\n        // NOTE: We don't use SafeMath (or similar) in this function because\n\n        //  all of our public functions carefully cap the maximum values for\n\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n\n        //  also known to be non-zero (see the require() statement in\n\n        //  _addAuction())\n\n        if (_secondsPassed >= _duration) {\n\n            // We've reached the end of the dynamic pricing portion\n\n            // of the auction, just return the end price.\n\n            return _endingPrice;\n\n        } else {\n\n            // Starting price can be higher than ending price (and often is!), so\n\n            // this delta can be negative.\n\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n\n            // will always fit within 256-bits.\n\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n\n            // less that _startingPrice. Thus, this result will always end up positive.\n\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n\n\n            return uint256(currentPrice);\n\n        }\n",
                    "message": "Function 'ClockAuctionBase._computeCurrentPrice' (KittyCore.sol#1257-1292) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startingPrice,\n",
                    "message": "Parameter '_startingPrice' of ClockAuctionBase._computeCurrentPrice (KittyCore.sol#1258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endingPrice,\n",
                    "message": "Parameter '_endingPrice' of ClockAuctionBase._computeCurrentPrice (KittyCore.sol#1259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration,\n",
                    "message": "Parameter '_duration' of ClockAuctionBase._computeCurrentPrice (KittyCore.sol#1260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _secondsPassed\n",
                    "message": "Parameter '_secondsPassed' of ClockAuctionBase._computeCurrentPrice (KittyCore.sol#1261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": 1303,
                    "vulnerability_code": "    function _computeCut(uint256 _price) internal view returns (uint256) {\n\n        // NOTE: We don't use SafeMath (or similar) in this function because\n\n        //  all of our entry functions carefully cap the maximum values for\n\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n\n        //  statement in the ClockAuction constructor). The result of this\n\n        //  function is always guaranteed to be <= _price.\n\n        return _price * ownerCut / 10000;\n",
                    "message": "Function 'ClockAuctionBase._computeCut' (KittyCore.sol#1296-1303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _computeCut(uint256 _price) internal view returns (uint256) {\n",
                    "message": "Parameter '_price' of ClockAuctionBase._computeCut (KittyCore.sol#1296) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _nftAddress, uint256 _cut) public {\n",
                    "message": "Parameter '_nftAddress' of ClockAuction. (KittyCore.sol#1375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _nftAddress, uint256 _cut) public {\n",
                    "message": "Parameter '_cut' of ClockAuction. (KittyCore.sol#1375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of ClockAuction.createAuction (KittyCore.sol#1407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startingPrice,\n",
                    "message": "Parameter '_startingPrice' of ClockAuction.createAuction (KittyCore.sol#1408) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endingPrice,\n",
                    "message": "Parameter '_endingPrice' of ClockAuction.createAuction (KittyCore.sol#1409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration,\n",
                    "message": "Parameter '_duration' of ClockAuction.createAuction (KittyCore.sol#1410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _seller\n",
                    "message": "Parameter '_seller' of ClockAuction.createAuction (KittyCore.sol#1411) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bid(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of ClockAuction.bid (KittyCore.sol#1437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cancelAuction(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of ClockAuction.cancelAuction (KittyCore.sol#1452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cancelAuctionWhenPaused(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of ClockAuction.cancelAuctionWhenPaused (KittyCore.sol#1466) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAuction(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of ClockAuction.getAuction (KittyCore.sol#1478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrentPrice(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of ClockAuction.getCurrentPrice (KittyCore.sol#1502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n",
                    "message": "Constant 'ClockAuction.InterfaceSignature_ERC721' (KittyCore.sol#1367) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of SiringClockAuction.createAuction (KittyCore.sol#1535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startingPrice,\n",
                    "message": "Parameter '_startingPrice' of SiringClockAuction.createAuction (KittyCore.sol#1536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endingPrice,\n",
                    "message": "Parameter '_endingPrice' of SiringClockAuction.createAuction (KittyCore.sol#1537) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration,\n",
                    "message": "Parameter '_duration' of SiringClockAuction.createAuction (KittyCore.sol#1538) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _seller\n",
                    "message": "Parameter '_seller' of SiringClockAuction.createAuction (KittyCore.sol#1539) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bid(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of SiringClockAuction.bid (KittyCore.sol#1565) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokenId,\n",
                    "message": "Parameter '_tokenId' of SaleClockAuction.createAuction (KittyCore.sol#1607) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startingPrice,\n",
                    "message": "Parameter '_startingPrice' of SaleClockAuction.createAuction (KittyCore.sol#1608) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endingPrice,\n",
                    "message": "Parameter '_endingPrice' of SaleClockAuction.createAuction (KittyCore.sol#1609) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration,\n",
                    "message": "Parameter '_duration' of SaleClockAuction.createAuction (KittyCore.sol#1610) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _seller\n",
                    "message": "Parameter '_seller' of SaleClockAuction.createAuction (KittyCore.sol#1611) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bid(uint256 _tokenId)\n",
                    "message": "Parameter '_tokenId' of SaleClockAuction.bid (KittyCore.sol#1635) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1675,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSaleAuctionAddress(address _address) external onlyCEO {\n",
                    "message": "Parameter '_address' of KittyAuction.setSaleAuctionAddress (KittyCore.sol#1675) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSiringAuctionAddress(address _address) external onlyCEO {\n",
                    "message": "Parameter '_address' of KittyAuction.setSiringAuctionAddress (KittyCore.sol#1687) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _kittyId,\n",
                    "message": "Parameter '_kittyId' of KittyAuction.createSaleAuction (KittyCore.sol#1700) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startingPrice,\n",
                    "message": "Parameter '_startingPrice' of KittyAuction.createSaleAuction (KittyCore.sol#1701) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endingPrice,\n",
                    "message": "Parameter '_endingPrice' of KittyAuction.createSaleAuction (KittyCore.sol#1702) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1703,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration\n",
                    "message": "Parameter '_duration' of KittyAuction.createSaleAuction (KittyCore.sol#1703) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _kittyId,\n",
                    "message": "Parameter '_kittyId' of KittyAuction.createSiringAuction (KittyCore.sol#1732) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _startingPrice,\n",
                    "message": "Parameter '_startingPrice' of KittyAuction.createSiringAuction (KittyCore.sol#1733) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _endingPrice,\n",
                    "message": "Parameter '_endingPrice' of KittyAuction.createSiringAuction (KittyCore.sol#1734) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1735,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _duration\n",
                    "message": "Parameter '_duration' of KittyAuction.createSiringAuction (KittyCore.sol#1735) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1762,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _sireId,\n",
                    "message": "Parameter '_sireId' of KittyAuction.bidOnSiringAuction (KittyCore.sol#1762) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _matronId\n",
                    "message": "Parameter '_matronId' of KittyAuction.bidOnSiringAuction (KittyCore.sol#1763) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createPromoKitty(uint256 _genes, address _owner) external onlyCOO {\n",
                    "message": "Parameter '_genes' of KittyMinting.createPromoKitty (KittyCore.sol#1811) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createPromoKitty(uint256 _genes, address _owner) external onlyCOO {\n",
                    "message": "Parameter '_owner' of KittyMinting.createPromoKitty (KittyCore.sol#1811) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1824,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createGen0Auction(uint256 _genes) external onlyCOO {\n",
                    "message": "Parameter '_genes' of KittyMinting.createGen0Auction (KittyCore.sol#1824) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1843,
                    "vulnerability_to_line": 1857,
                    "vulnerability_code": "    function _computeNextGen0Price() internal view returns (uint256) {\n\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n\n\n\n        // Sanity check to ensure we don't overflow arithmetic\n\n        require(avePrice == uint256(uint128(avePrice)));\n\n\n\n        uint256 nextPrice = avePrice + (avePrice / 2);\n\n\n\n        // We never auction for less than starting price\n\n        if (nextPrice < GEN0_STARTING_PRICE) {\n\n            nextPrice = GEN0_STARTING_PRICE;\n\n        }\n\n\n\n        return nextPrice;\n",
                    "message": "Function 'KittyMinting._computeNextGen0Price' (KittyCore.sol#1843-1857) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1928,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n",
                    "message": "Parameter '_v2Address' of KittyCore.setNewAddress (KittyCore.sol#1928) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getKitty(uint256 _id)\n",
                    "message": "Parameter '_id' of KittyCore.getKitty (KittyCore.sol#1946) is not in mixedCase\n"
                },
                {
                    "name": "erc20-indexed",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "contract ERC721 {\n\n    // Required methods\n\n    function totalSupply() public view returns (uint256 total);\n\n    function balanceOf(address _owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n\n    function approve(address _to, uint256 _tokenId) external;\n\n    function transfer(address _to, uint256 _tokenId) external;\n\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n\n\n    // Events\n\n    event Transfer(address from, address to, uint256 tokenId);\n\n    event Approval(address owner, address approved, uint256 tokenId);\n\n\n\n    // Optional\n\n    // function name() public view returns (string name);\n\n    // function symbol() public view returns (string symbol);\n\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n",
                    "message": "ERC721 (KittyCore.sol#55-76) does not mark important ERC20 parameters as 'indexed':\n\t-Transfer (KittyCore.sol#65) does not index parameter 'from'\n\t-Transfer (KittyCore.sol#65) does not index parameter 'to'\n\t-Approval (KittyCore.sol#66) does not index parameter 'owner'\n\t-Approval (KittyCore.sol#66) does not index parameter 'approved'\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _transfer(address(0), _owner, newKittenId);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _createKitty(0, 0, 0, uint256(-1), address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ClockAuction is Pausable, ClockAuctionBase {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract SiringClockAuction is ClockAuction {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract SaleClockAuction is ClockAuction {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 1864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract KittyCore is KittyMinting {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _memcpy(uint _dest, uint _src, uint _len) private view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMetadata(uint256 _tokenId, string memory value) public view returns (bytes32[4] memory buffer, uint256 count) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    Kitty[] kitties;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) ownershipTokenCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InterfaceSignature_ERC165 =\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InterfaceSignature_ERC721 =\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => Auction) tokenIdToAuction;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n",
                    "message": null
                }
            ]
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/tokens/contracts/interfaces/IWETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in IWETH.sol:\n\t- pragma solidity0.5.12 (IWETH.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdraw(uint256) external;\n",
                    "message": "Parameter '' of IWETH.withdraw (IWETH.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/tokens/contracts/interfaces/INRERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "interface INRERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Doesn't returns a boolean value.\n\n     *\n\n     * Emits a `Transfer` event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when `approve` or `transferFrom` are called.\n\n     */\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * Returns a boolean value indicating whether the operation succeeded.\n\n     *\n\n     * > Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an `Approval` event.\n\n     */\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Doesn't return a boolean value.\n\n     *\n\n     * Emits a `Transfer` event.\n\n     */\n\n    function transferFrom(address sender, address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to `approve`. `value` is the new allowance.\n\n     */\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n",
                    "message": "INRERC20 (INRERC20.sol#10-79) has incorrect ERC20 function interface(s):\n\t-transfer (INRERC20.sol#28)\n\t-transferFrom (INRERC20.sol#64)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in INRERC20.sol:\n\t- pragma solidity^0.5.0 (INRERC20.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/indexer/contracts/interfaces/IIndexer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in IIndexer.sol:\n\t- pragma solidity0.5.12 (IIndexer.sol#19): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexes(address, address) external returns (address);\n",
                    "message": "Parameter '' of IIndexer.indexes (IIndexer.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function indexes(address, address) external returns (address);\n",
                    "message": "Parameter '_scope_0' of IIndexer.indexes (IIndexer.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function tokenBlacklist(address) external returns (bool);\n",
                    "message": "Parameter '' of IIndexer.tokenBlacklist (IIndexer.sol#52) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external view returns (\n",
                    "message": null
                }
            ]
        }
    },
    "airswap-protocols-b87d292aaf6e28ede564b7ea28ece39219994607/source/indexer/contracts/interfaces/ILocatorWhitelist.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in ILocatorWhitelist.sol:\n\t- pragma solidity0.5.12 (ILocatorWhitelist.sol#19): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "airswap-protocols-ac62b7109974d9069ff6bc153bc9660acc4e144f/source/swap/contracts/interfaces/ISwap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                }
            ]
        }
    },
    "airswap-protocols-ac62b7109974d9069ff6bc153bc9660acc4e144f/source/staking/contracts/interfaces/IStaking.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                }
            ]
        }
    },
    "airswap-protocols-ac62b7109974d9069ff6bc153bc9660acc4e144f/source/pool/contracts/interfaces/IPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                }
            ]
        }
    }
}