{
    "yinsure.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IERC721Receiver(to).onERC721Received.selector,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _msgSender(),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            from,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            tokenId,\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _data\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  Ownable,\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal { }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_INTERFACE_ID_ERC165);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_INTERFACE_ID_ERC721);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interface to conform to ERC721Enumerable via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 408,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // register the supported interfaces to conform to ERC721 via ERC165\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // solhint-disable-previous-line no-empty-blocks\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address msgSender = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msgSender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _notEntered = true;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _masterAddress, uint _distributorFeePercentage) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    distributorFeePercentage = _distributorFeePercentage;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    coverAPI.setMasterAddress(_masterAddress);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC721: balance query for the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != owner, \"ERC721: approval to current owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"ERC721: approve caller is not owner nor approved for all\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != _msgSender(), \"ERC721: approve to caller\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != address(0), \"ERC721: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_exists(tokenId), \"ERC721: token already minted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != address(0), \"ERC721: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(), \"Ownable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(msg.value == requiredValue, \"Incorrect value sent\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(erc20.transferFrom(msg.sender, address(this), requiredValue), \"Transfer failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 940,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimDenied),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 941,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"Can submit another claim only if the previous one was denied.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 943,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(tokens[tokenId].expirationTimestamp > block.timestamp, \"Token is expired\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 958,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(tokens[tokenId].claimInProgress, \"No claim is in progress\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 963,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted), \"Claim is not accepted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(coverAPI.payoutIsCompleted(tokens[tokenId].coverId), \"Claim accepted but payout not completed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(erc20.transfer(msg.sender, sumAssured), \"Transfer failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1003,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(withdrawableTokens[ethCurrency] >= _amount, \"Not enough ETH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(withdrawableTokens[_currency] >= _amount, \"Not enough tokens\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1017,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(erc20.transfer(_recipient, _amount), \"Transfer failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1029,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_isApprovedOrOwner(msg.sender, tokenId), \"Not approved or owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC721: balance query for the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != owner, \"ERC721: approval to current owner\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"ERC721: approve caller is not owner nor approved for all\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != address(0), \"ERC721: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 940,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimDenied),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 941,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"Can submit another claim only if the previous one was denied.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(coverAPI.payoutIsCompleted(tokens[tokenId].coverId), \"Claim accepted but payout not completed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                },
                {
                    "name": "erc721-reentrancy",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "ERC721 onERC721Received() reentrancy"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_92"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": 983,
                    "vulnerability_code": "  function _sendAssuredSum(\n\n    bytes4 coverCurrency,\n\n    uint sumAssured\n\n    )\n\n    internal\n\n  {\n\n    if (coverCurrency == ethCurrency) {\n\n      msg.sender.transfer(sumAssured);\n\n    } else {\n\n      IERC20 erc20 = IERC20(coverAPI.getCurrencyAssetAddress(coverCurrency));\n\n      require(erc20.transfer(msg.sender, sumAssured), \"Transfer failed\");\n\n    }\n",
                    "message": "Distributor._sendAssuredSum (yinsure.sol#971-983) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(sumAssured) (yinsure.sol#978)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": 1006,
                    "vulnerability_code": "  function withdrawEther(address payable _recipient, uint256 _amount)\n\n    external\n\n    onlyOwner\n\n    nonReentrant\n\n  {\n\n    require(withdrawableTokens[ethCurrency] >= _amount, \"Not enough ETH\");\n\n    withdrawableTokens[ethCurrency] = withdrawableTokens[ethCurrency].sub(_amount);\n\n    _recipient.transfer(_amount);\n",
                    "message": "Distributor.withdrawEther (yinsure.sol#998-1006) sends eth to arbitrary user\n\tDangerous calls:\n\t- _recipient.transfer(_amount) (yinsure.sol#1005)\n"
                },
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Counters.Counter) private _ownedTokensCount;\n",
                    "message": "ERC721._ownedTokensCount (yinsure.sol#158) is never initialized. It is used in:\n\t- balanceOf (yinsure.sol#166-170)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
                    "message": "Address.isContract (yinsure.sol#95-101) is declared view but contains assembly code\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "contract IERC721 is IERC165 {\n\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n\n    function transferFrom(address from, address to, uint256 tokenId) public;\n\n    function approve(address to, uint256 tokenId) public;\n\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n\n\n    function setApprovalForAll(address operator, bool _approved) public;\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n",
                    "message": "IERC721 (yinsure.sol#22-38) has incorrect ERC20 function interface(s):\n\t-transferFrom (yinsure.sol#29)\n\t-approve (yinsure.sol#30)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "contract ERC721 is Context, ERC165, IERC721 {\n\n    using SafeMath for uint256;\n\n    using Address for address;\n\n    using Counters for Counters.Counter;\n\n\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    mapping (uint256 => address) private _tokenOwner;\n\n    mapping (uint256 => address) private _tokenApprovals;\n\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n\n\n    constructor () public {\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n\n        _registerInterface(_INTERFACE_ID_ERC721);\n\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n\n\n        return _ownedTokensCount[owner].current();\n\n    }\n\n    function ownerOf(uint256 tokenId) public view returns (address) {\n\n        address owner = _tokenOwner[tokenId];\n\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n\n\n        return owner;\n\n    }\n\n    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner, \"ERC721: approval to current owner\");\n\n\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n\n            \"ERC721: approve caller is not owner nor approved for all\"\n\n        );\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n\n    }\n\n    function getApproved(uint256 tokenId) public view returns (address) {\n\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n\n\n        return _tokenApprovals[tokenId];\n\n    }\n\n    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != _msgSender(), \"ERC721: approve to caller\");\n\n\n\n        _operatorApprovals[_msgSender()][to] = approved;\n\n        emit ApprovalForAll(_msgSender(), to, approved);\n\n    }\n\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n\n        return _operatorApprovals[owner][operator];\n\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n\n        //solhint-disable-next-line max-line-length\n\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n\n\n        _transferFrom(from, to, tokenId);\n\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        safeTransferFrom(from, to, tokenId, \"\");\n\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _safeTransferFrom(from, to, tokenId, _data);\n\n    }\n\n    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n\n        _transferFrom(from, to, tokenId);\n\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n\n    }\n\n    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n\n        address owner = ownerOf(tokenId);\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n\n    }\n\n    function _safeMint(address to, uint256 tokenId) internal {\n\n        _safeMint(to, tokenId, \"\");\n\n    }\n\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n\n        _mint(to, tokenId);\n\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n\n    }\n\n    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0), \"ERC721: mint to the zero address\");\n\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to].increment();\n\n\n\n        emit Transfer(address(0), to, tokenId);\n\n    }\n\n    function _burn(address owner, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n\n\n        _clearApproval(tokenId);\n\n\n\n        _ownedTokensCount[owner].decrement();\n\n        _tokenOwner[tokenId] = address(0);\n\n\n\n        emit Transfer(owner, address(0), tokenId);\n\n    }\n\n    function _burn(uint256 tokenId) internal {\n\n        _burn(ownerOf(tokenId), tokenId);\n\n    }\n\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n\n\n        _clearApproval(tokenId);\n\n\n\n        _ownedTokensCount[from].decrement();\n\n        _ownedTokensCount[to].increment();\n\n\n\n        _tokenOwner[tokenId] = to;\n\n\n\n        emit Transfer(from, to, tokenId);\n\n    }\n\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n\n        internal returns (bool)\n\n    {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n\n            IERC721Receiver(to).onERC721Received.selector,\n\n            _msgSender(),\n\n            from,\n\n            tokenId,\n\n            _data\n\n        ));\n\n        if (!success) {\n\n            if (returndata.length > 0) {\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n\n            }\n\n        } else {\n\n            bytes4 retval = abi.decode(returndata, (bytes4));\n\n            return (retval == _ERC721_RECEIVED);\n\n        }\n\n    }\n\n    function _clearApproval(uint256 tokenId) private {\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n\n    }\n",
                    "message": "ERC721 (yinsure.sol#150-304) has incorrect ERC20 function interface(s):\n\t-transferFrom (yinsure.sol#202-207)\n\t-approve (yinsure.sol#177-187)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": 969,
                    "vulnerability_code": "  function redeemClaim(\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    onlyTokenApprovedOrOwner(tokenId)\n\n    nonReentrant\n\n  {\n\n    require(tokens[tokenId].claimInProgress, \"No claim is in progress\");\n\n    uint8 coverStatus;\n\n    uint sumAssured;\n\n    (, coverStatus, sumAssured, , ) = coverAPI.getCover(tokens[tokenId].coverId);\n\n\n\n    require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted), \"Claim is not accepted\");\n\n    require(coverAPI.payoutIsCompleted(tokens[tokenId].coverId), \"Claim accepted but payout not completed\");\n\n\n\n    _burn(tokenId);\n\n    _sendAssuredSum(tokens[tokenId].coverCurrency, sumAssured);\n\n    emit ClaimRedeemed(msg.sender, sumAssured, tokens[tokenId].coverCurrency);\n",
                    "message": "Distributor.redeemClaim (yinsure.sol#951-969) uses a dangerous strict equality:\n\t- require(bool,string)(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted),Claim is not accepted)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": 969,
                    "vulnerability_code": "  function redeemClaim(\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    onlyTokenApprovedOrOwner(tokenId)\n\n    nonReentrant\n\n  {\n\n    require(tokens[tokenId].claimInProgress, \"No claim is in progress\");\n\n    uint8 coverStatus;\n\n    uint sumAssured;\n\n    (, coverStatus, sumAssured, , ) = coverAPI.getCover(tokens[tokenId].coverId);\n\n\n\n    require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted), \"Claim is not accepted\");\n\n    require(coverAPI.payoutIsCompleted(tokens[tokenId].coverId), \"Claim accepted but payout not completed\");\n\n\n\n    _burn(tokenId);\n\n    _sendAssuredSum(tokens[tokenId].coverCurrency, sumAssured);\n\n    emit ClaimRedeemed(msg.sender, sumAssured, tokens[tokenId].coverCurrency);\n",
                    "message": "Distributor.redeemClaim (yinsure.sol#951-969) uses a dangerous strict equality:\n\t- require(bool,string)(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted),Claim is not accepted)\nDistributor.submitClaim (yinsure.sol#930-949) uses a dangerous strict equality:\n\t- require(bool,string)(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimDenied),Can submit another claim only if the previous one was denied.)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 783,
                    "vulnerability_code": "    function buyCover(\n\n        Data storage data,\n\n        address coveredContractAddress,\n\n        bytes4 coverCurrency,\n\n        uint[] memory coverDetails,\n\n        uint16 coverPeriod,\n\n        uint8 _v,\n\n        bytes32 _r,\n\n        bytes32 _s\n\n    ) internal returns (uint coverId) {\n\n\n\n        uint coverPrice = coverDetails[1];\n\n        Pool1 pool1 = Pool1(data.nxMaster.getLatestAddress(\"P1\"));\n\n        if (coverCurrency == \"ETH\") {\n\n            pool1.makeCoverBegin.value(coverPrice)(coveredContractAddress, coverCurrency, coverDetails, coverPeriod, _v, _r, _s);\n\n        } else {\n\n            address payable pool1Address = address(uint160(address(pool1)));\n\n            PoolData poolData = PoolData(data.nxMaster.getLatestAddress(\"PD\"));\n\n            IERC20 erc20 = IERC20(poolData.getCurrencyAssetAddress(coverCurrency));\n\n            erc20.approve(pool1Address, coverPrice);\n\n            pool1.makeCoverUsingCA(coveredContractAddress, coverCurrency, coverDetails, coverPeriod, _v, _r, _s);\n\n        }\n\n\n\n        QuotationData quotationData = QuotationData(data.nxMaster.getLatestAddress(\"QD\"));\n\n        // *assumes* the newly created claim is appended at the end of the list covers\n\n        coverId = quotationData.getCoverLength().sub(1);\n",
                    "message": "NexusMutualCover.buyCover (yinsure.sol#757-783) does not use the value returned by external calls:\n\t-erc20.approve(pool1Address,coverPrice) (yinsure.sol#776)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": 818,
                    "vulnerability_code": "    function sellNXMTokens(Data storage data, uint amount) internal returns (uint ethValue) {\n\n        address payable pool1Address = data.nxMaster.getLatestAddress(\"P1\");\n\n        Pool1 p1 = Pool1(pool1Address);\n\n\n\n        NXMToken nxmToken = NXMToken(data.nxMaster.tokenAddress());\n\n\n\n        ethValue = p1.getWei(amount);\n\n        nxmToken.approve(pool1Address, amount);\n\n        p1.sellNXMTokens(amount);\n",
                    "message": "NexusMutualCover.sellNXMTokens (yinsure.sol#809-818) does not use the value returned by external calls:\n\t-nxmToken.approve(pool1Address,amount) (yinsure.sol#816)\n\t-p1.sellNXMTokens(amount) (yinsure.sol#817)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 990,
                    "vulnerability_to_line": 996,
                    "vulnerability_code": "  function nxmTokenApprove(address _spender, uint256 _value)\n\n  public\n\n  onlyOwner\n\n  {\n\n    IERC20 nxmToken = IERC20(coverAPI.getTokenAddress());\n\n    nxmToken.approve(_spender, _value);\n",
                    "message": "Distributor.nxmTokenApprove (yinsure.sol#990-996) does not use the value returned by external calls:\n\t-nxmToken.approve(_spender,_value) (yinsure.sol#995)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.name (local variable @ yinsure.sol#405) shadows:\n\t- ERC721Metadata.name (function @ yinsure.sol#412-414)\n\t- IERC721Metadata.name (function @ yinsure.sol#393)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public {\n",
                    "message": "ERC721Metadata.constructor.symbol (local variable @ yinsure.sol#405) shadows:\n\t- ERC721Metadata.symbol (function @ yinsure.sol#415-417)\n\t- IERC721Metadata.symbol (function @ yinsure.sol#394)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setBaseURI(string memory baseURI) internal {\n",
                    "message": "ERC721Metadata._setBaseURI.baseURI (local variable @ yinsure.sol#435) shadows:\n\t- ERC721Metadata.baseURI (function @ yinsure.sol#438-440)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n",
                    "message": "ERC721Full.constructor.name (local variable @ yinsure.sol#452) shadows:\n\t- ERC721Metadata.name (function @ yinsure.sol#412-414)\n\t- IERC721Metadata.name (function @ yinsure.sol#393)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {\n",
                    "message": "ERC721Full.constructor.symbol (local variable @ yinsure.sol#452) shadows:\n\t- ERC721Metadata.symbol (function @ yinsure.sol#415-417)\n\t- IERC721Metadata.symbol (function @ yinsure.sol#394)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": 928,
                    "vulnerability_code": "  function buyCover(\n\n        address coveredContractAddress,\n\n        bytes4 coverCurrency,\n\n        uint[] calldata coverDetails,\n\n        uint16 coverPeriod,\n\n        uint8 _v,\n\n        bytes32 _r,\n\n        bytes32 _s\n\n  )\n\n     external\n\n     payable\n\n  {\n\n\n\n    uint coverPrice = coverDetails[1];\n\n    uint requiredValue = distributorFeePercentage.mul(coverPrice).div(100).add(coverPrice);\n\n    if (coverCurrency == \"ETH\") {\n\n      require(msg.value == requiredValue, \"Incorrect value sent\");\n\n    } else {\n\n      IERC20 erc20 = IERC20(coverAPI.getCurrencyAssetAddress(coverCurrency));\n\n      require(erc20.transferFrom(msg.sender, address(this), requiredValue), \"Transfer failed\");\n\n    }\n\n\n\n    uint coverId = coverAPI.buyCover(coveredContractAddress, coverCurrency, coverDetails, coverPeriod, _v, _r, _s);\n\n    withdrawableTokens[coverCurrency] = withdrawableTokens[coverCurrency].add(requiredValue.sub(coverPrice));\n\n\n\n    // mint token\n\n    // SWC-Integer Overflow and Underflow: L913\n\n    uint256 nextTokenId = issuedTokensCount++;\n\n    // SWC-Integer Overflow and Underflow: L914\n\n    uint expirationTimestamp = block.timestamp + coverAPI.getLockTokenTimeAfterCoverExpiry() + coverPeriod * 1 days;\n\n    tokens[nextTokenId] = Token(expirationTimestamp,\n\n      coverCurrency,\n\n      coverDetails[0],\n\n      coverDetails[1],\n\n      coverDetails[2],\n\n      coverDetails[3],\n\n      coverDetails[4],\n\n      coverId, false, 0);\n\n    _mint(msg.sender, nextTokenId);\n",
                    "message": "Reentrancy in Distributor.buyCover (yinsure.sol#889-928):\n\tExternal calls:\n\t- require(bool,string)(erc20.transferFrom(msg.sender,address(this),requiredValue),Transfer failed) (yinsure.sol#908)\n\tState variables written after the call(s):\n\t- _allTokens (yinsure.sol#927)\n\t- _allTokensIndex (yinsure.sol#927)\n\t- _ownedTokens (yinsure.sol#927)\n\t- _ownedTokensIndex (yinsure.sol#927)\n\t- _tokenOwner (yinsure.sol#927)\n\t- issuedTokensCount (yinsure.sol#916)\n\t- tokens (yinsure.sol#919-926)\n\t- withdrawableTokens (yinsure.sol#912)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 930,
                    "vulnerability_to_line": 949,
                    "vulnerability_code": "  function submitClaim(\n\n    uint256 tokenId\n\n  )\n\n    external\n\n    onlyTokenApprovedOrOwner(tokenId)\n\n  {\n\n\n\n    if (tokens[tokenId].claimInProgress) {\n\n      uint8 coverStatus;\n\n      (, coverStatus, , , ) = coverAPI.getCover(tokens[tokenId].coverId);\n\n      require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimDenied),\n\n        \"Can submit another claim only if the previous one was denied.\");\n\n    }\n\n    require(tokens[tokenId].expirationTimestamp > block.timestamp, \"Token is expired\");\n\n\n\n    uint claimId = coverAPI.submitClaim(tokens[tokenId].coverId);\n\n\n\n    tokens[tokenId].claimInProgress = true;\n\n    tokens[tokenId].claimId = claimId;\n",
                    "message": "Distributor.submitClaim (yinsure.sol#930-949) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(tokens[tokenId].expirationTimestamp > block.timestamp,Token is expired) (yinsure.sol#943)\n\t- require(bool,string)(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimDenied),Can submit another claim only if the previous one was denied.) (yinsure.sol#940-941)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": 969,
                    "vulnerability_code": "  function redeemClaim(\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    onlyTokenApprovedOrOwner(tokenId)\n\n    nonReentrant\n\n  {\n\n    require(tokens[tokenId].claimInProgress, \"No claim is in progress\");\n\n    uint8 coverStatus;\n\n    uint sumAssured;\n\n    (, coverStatus, sumAssured, , ) = coverAPI.getCover(tokens[tokenId].coverId);\n\n\n\n    require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted), \"Claim is not accepted\");\n\n    require(coverAPI.payoutIsCompleted(tokens[tokenId].coverId), \"Claim accepted but payout not completed\");\n\n\n\n    _burn(tokenId);\n\n    _sendAssuredSum(tokens[tokenId].coverCurrency, sumAssured);\n\n    emit ClaimRedeemed(msg.sender, sumAssured, tokens[tokenId].coverCurrency);\n",
                    "message": "Distributor.redeemClaim (yinsure.sol#951-969) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(tokens[tokenId].claimInProgress,No claim is in progress) (yinsure.sol#958)\n\t- require(bool,string)(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted),Claim is not accepted) (yinsure.sol#963)\n\t- require(bool,string)(coverAPI.payoutIsCompleted(tokens[tokenId].coverId),Claim accepted but payout not completed) (yinsure.sol#964)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": 983,
                    "vulnerability_code": "  function _sendAssuredSum(\n\n    bytes4 coverCurrency,\n\n    uint sumAssured\n\n    )\n\n    internal\n\n  {\n\n    if (coverCurrency == ethCurrency) {\n\n      msg.sender.transfer(sumAssured);\n\n    } else {\n\n      IERC20 erc20 = IERC20(coverAPI.getCurrencyAssetAddress(coverCurrency));\n\n      require(erc20.transfer(msg.sender, sumAssured), \"Transfer failed\");\n\n    }\n",
                    "message": "Distributor._sendAssuredSum (yinsure.sol#971-983) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(erc20.transfer(msg.sender,sumAssured),Transfer failed) (yinsure.sol#981)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n\n        bytes32 codehash;\n\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // solhint-disable-next-line no-inline-assembly\n\n        assembly { codehash := extcodehash(account) }\n\n        return (codehash != accountHash && codehash != 0x0);\n",
                    "message": "Address.isContract uses assembly (yinsure.sol#95-101)\n\t- yinsure.sol#99\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n\n        internal returns (bool)\n\n    {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n\n            IERC721Receiver(to).onERC721Received.selector,\n\n            _msgSender(),\n\n            from,\n\n            tokenId,\n\n            _data\n\n        ));\n\n        if (!success) {\n\n            if (returndata.length > 0) {\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n\n            }\n\n        } else {\n\n            bytes4 retval = abi.decode(returndata, (bytes4));\n\n            return (retval == _ERC721_RECEIVED);\n\n        }\n",
                    "message": "ERC721._checkOnERC721Received uses assembly (yinsure.sol#270-298)\n\t- yinsure.sol#287-290\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public owner;\n",
                    "message": "INXMMaster.owner should be constant (yinsure.sol#548)\nINXMMaster.pauseTime should be constant (yinsure.sol#549)\nINXMMaster.tokenAddress should be constant (yinsure.sol#547)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.safeTransferFrom (yinsure.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n\n        safeTransferFrom(from, to, tokenId, \"\");\n",
                    "message": "ERC721.safeTransferFrom (yinsure.sol#208-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 tokenId) public {\n\n        //solhint-disable-next-line max-line-length\n\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n\n\n        _transferFrom(from, to, tokenId);\n",
                    "message": "ERC721.transferFrom (yinsure.sol#202-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 tokenId) public;\n",
                    "message": "IERC721.transferFrom (yinsure.sol#29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public;\n",
                    "message": "IERC721.approve (yinsure.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 187,
                    "vulnerability_code": "    function approve(address to, uint256 tokenId) public {\n\n        address owner = ownerOf(tokenId);\n\n        require(to != owner, \"ERC721: approval to current owner\");\n\n\n\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n\n            \"ERC721: approve caller is not owner nor approved for all\"\n\n        );\n\n\n\n        _tokenApprovals[tokenId] = to;\n\n        emit Approval(owner, to, tokenId);\n",
                    "message": "ERC721.approve (yinsure.sol#177-187) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "    function setApprovalForAll(address to, bool approved) public {\n\n        require(to != _msgSender(), \"ERC721: approve to caller\");\n\n\n\n        _operatorApprovals[_msgSender()][to] = approved;\n\n        emit ApprovalForAll(_msgSender(), to, approved);\n",
                    "message": "ERC721.setApprovalForAll (yinsure.sol#193-198) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setApprovalForAll(address operator, bool _approved) public;\n",
                    "message": "IERC721.setApprovalForAll (yinsure.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n",
                    "message": "IERC721Receiver.onERC721Received (yinsure.sol#41-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\n\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n\n        return _ownedTokens[owner][index];\n",
                    "message": "ERC721Enumerable.tokenOfOwnerByIndex (yinsure.sol#324-327) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\n",
                    "message": "IERC721Enumerable.tokenOfOwnerByIndex (yinsure.sol#308) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256);\n",
                    "message": "IERC721Enumerable.tokenByIndex (yinsure.sol#310) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "    function tokenByIndex(uint256 index) public view returns (uint256) {\n\n        require(index < totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n\n        return _allTokens[index];\n",
                    "message": "ERC721Enumerable.tokenByIndex (yinsure.sol#331-334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": 479,
                    "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
                    "message": "Ownable.owner (yinsure.sol#477-479) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": 490,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (yinsure.sol#487-490) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": 493,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (yinsure.sol#491-493) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 951,
                    "vulnerability_to_line": 969,
                    "vulnerability_code": "  function redeemClaim(\n\n    uint256 tokenId\n\n  )\n\n    public\n\n    onlyTokenApprovedOrOwner(tokenId)\n\n    nonReentrant\n\n  {\n\n    require(tokens[tokenId].claimInProgress, \"No claim is in progress\");\n\n    uint8 coverStatus;\n\n    uint sumAssured;\n\n    (, coverStatus, sumAssured, , ) = coverAPI.getCover(tokens[tokenId].coverId);\n\n\n\n    require(coverStatus == uint8(NexusMutualCover.CoverStatus.ClaimAccepted), \"Claim is not accepted\");\n\n    require(coverAPI.payoutIsCompleted(tokens[tokenId].coverId), \"Claim accepted but payout not completed\");\n\n\n\n    _burn(tokenId);\n\n    _sendAssuredSum(tokens[tokenId].coverCurrency, sumAssured);\n\n    emit ClaimRedeemed(msg.sender, sumAssured, tokens[tokenId].coverCurrency);\n",
                    "message": "Distributor.redeemClaim (yinsure.sol#951-969) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 990,
                    "vulnerability_to_line": 996,
                    "vulnerability_code": "  function nxmTokenApprove(address _spender, uint256 _value)\n\n  public\n\n  onlyOwner\n\n  {\n\n    IERC20 nxmToken = IERC20(coverAPI.getTokenAddress());\n\n    nxmToken.approve(_spender, _value);\n",
                    "message": "Distributor.nxmTokenApprove (yinsure.sol#990-996) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in yinsure.sol:\n\t- pragma solidity^0.5.0 (yinsure.sol#3): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 111,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\n\n        // solhint-disable-next-line avoid-call-value\n\n        (bool success, ) = recipient.call.value(amount)(\"\");\n\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Low level call in Address.sendValue (yinsure.sol#105-111):\n\t-(success) = recipient.call.value(amount)() yinsure.sol#109\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n\n        internal returns (bool)\n\n    {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n\n            IERC721Receiver(to).onERC721Received.selector,\n\n            _msgSender(),\n\n            from,\n\n            tokenId,\n\n            _data\n\n        ));\n\n        if (!success) {\n\n            if (returndata.length > 0) {\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n\n            }\n\n        } else {\n\n            bytes4 retval = abi.decode(returndata, (bytes4));\n\n            return (retval == _ERC721_RECEIVED);\n\n        }\n",
                    "message": "Low level call in ERC721._checkOnERC721Received (yinsure.sol#270-298):\n\t-(success,returndata) = to.call(abi.encodeWithSelector(IERC721Receiver(to).onERC721Received.selector,_msgSender(),from,tokenId,_data)) yinsure.sol#277-283\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "    function _msgSender() internal view returns (address payable) {\n\n        return msg.sender;\n",
                    "message": "Function 'Context._msgSender' (yinsure.sol#8-10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "    function _msgData() internal view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'Context._msgData' (yinsure.sol#11-14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "    function _registerInterface(bytes4 interfaceId) internal {\n\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n\n        _supportedInterfaces[interfaceId] = true;\n",
                    "message": "Function 'ERC165._registerInterface' (yinsure.sol#144-147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n",
                    "message": "Parameter '_data' of ERC721.safeTransferFrom (yinsure.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 218,
                    "vulnerability_code": "    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n\n        _transferFrom(from, to, tokenId);\n\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Function 'ERC721._safeTransferFrom' (yinsure.sol#215-218) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {\n",
                    "message": "Parameter '_data' of ERC721._safeTransferFrom (yinsure.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 222,
                    "vulnerability_code": "    function _exists(uint256 tokenId) internal view returns (bool) {\n\n        address owner = _tokenOwner[tokenId];\n\n        return owner != address(0);\n",
                    "message": "Function 'ERC721._exists' (yinsure.sol#219-222) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 227,
                    "vulnerability_code": "    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n\n        address owner = ownerOf(tokenId);\n\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n",
                    "message": "Function 'ERC721._isApprovedOrOwner' (yinsure.sol#223-227) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "    function _safeMint(address to, uint256 tokenId) internal {\n\n        _safeMint(to, tokenId, \"\");\n",
                    "message": "Function 'ERC721._safeMint' (yinsure.sol#228-230) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n\n        _mint(to, tokenId);\n\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": "Function 'ERC721._safeMint' (yinsure.sol#231-234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {\n",
                    "message": "Parameter '_data' of ERC721._safeMint (yinsure.sol#231) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 243,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        require(to != address(0), \"ERC721: mint to the zero address\");\n\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n\n\n        _tokenOwner[tokenId] = to;\n\n        _ownedTokensCount[to].increment();\n\n\n\n        emit Transfer(address(0), to, tokenId);\n",
                    "message": "Function 'ERC721._mint' (yinsure.sol#235-243) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 253,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n\n\n        _clearApproval(tokenId);\n\n\n\n        _ownedTokensCount[owner].decrement();\n\n        _tokenOwner[tokenId] = address(0);\n\n\n\n        emit Transfer(owner, address(0), tokenId);\n",
                    "message": "Function 'ERC721._burn' (yinsure.sol#244-253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": 256,
                    "vulnerability_code": "    function _burn(uint256 tokenId) internal {\n\n        _burn(ownerOf(tokenId), tokenId);\n",
                    "message": "Function 'ERC721._burn' (yinsure.sol#254-256) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "    function _transferFrom(address from, address to, uint256 tokenId) internal {\n\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n\n\n        _clearApproval(tokenId);\n\n\n\n        _ownedTokensCount[from].decrement();\n\n        _ownedTokensCount[to].increment();\n\n\n\n        _tokenOwner[tokenId] = to;\n\n\n\n        emit Transfer(from, to, tokenId);\n",
                    "message": "Function 'ERC721._transferFrom' (yinsure.sol#257-269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n\n        internal returns (bool)\n\n    {\n\n        if (!to.isContract()) {\n\n            return true;\n\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n\n        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n\n            IERC721Receiver(to).onERC721Received.selector,\n\n            _msgSender(),\n\n            from,\n\n            tokenId,\n\n            _data\n\n        ));\n\n        if (!success) {\n\n            if (returndata.length > 0) {\n\n                // solhint-disable-next-line no-inline-assembly\n\n                assembly {\n\n                    let returndata_size := mload(returndata)\n\n                    revert(add(32, returndata), returndata_size)\n\n                }\n\n            } else {\n\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n\n            }\n\n        } else {\n\n            bytes4 retval = abi.decode(returndata, (bytes4));\n\n            return (retval == _ERC721_RECEIVED);\n\n        }\n",
                    "message": "Function 'ERC721._checkOnERC721Received' (yinsure.sol#270-298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n",
                    "message": "Parameter '_data' of ERC721._checkOnERC721Received (yinsure.sol#270) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "    function _clearApproval(uint256 tokenId) private {\n\n        if (_tokenApprovals[tokenId] != address(0)) {\n\n            _tokenApprovals[tokenId] = address(0);\n\n        }\n",
                    "message": "Function 'ERC721._clearApproval' (yinsure.sol#299-303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 348,
                    "vulnerability_code": "    function _mint(address to, uint256 tokenId) internal {\n\n        super._mint(to, tokenId);\n\n\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n\n\n\n        _addTokenToAllTokensEnumeration(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._mint' (yinsure.sol#342-348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 357,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        _removeTokenFromOwnerEnumeration(owner, tokenId);\n\n        // Since tokenId will be deleted, we can clear its slot in _ownedTokensIndex to trigger a gas refund\n\n        _ownedTokensIndex[tokenId] = 0;\n\n\n\n        _removeTokenFromAllTokensEnumeration(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._burn' (yinsure.sol#349-357) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function _transferFrom(address from, address to, uint256 tokenId) internal {\n\n        super._transferFrom(from, to, tokenId);\n\n\n\n        _removeTokenFromOwnerEnumeration(from, tokenId);\n\n\n\n        _addTokenToOwnerEnumeration(to, tokenId);\n",
                    "message": "Function 'ERC721Enumerable._transferFrom' (yinsure.sol#335-341) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": 360,
                    "vulnerability_code": "    function _tokensOfOwner(address owner) internal view returns (uint256[] storage) {\n\n        return _ownedTokens[owner];\n",
                    "message": "Function 'ERC721Enumerable._tokensOfOwner' (yinsure.sol#358-360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 364,
                    "vulnerability_code": "    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;\n\n        _ownedTokens[to].push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._addTokenToOwnerEnumeration' (yinsure.sol#361-364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 368,
                    "vulnerability_code": "    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n\n        _allTokensIndex[tokenId] = _allTokens.length;\n\n        _allTokens.push(tokenId);\n",
                    "message": "Function 'ERC721Enumerable._addTokenToAllTokensEnumeration' (yinsure.sol#365-368) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 379,
                    "vulnerability_code": "    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        if (tokenIndex != lastTokenIndex) {\n\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        }\n\n        _ownedTokens[from].length--;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFromOwnerEnumeration' (yinsure.sol#369-379) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": 389,
                    "vulnerability_code": "    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n\n        uint256 lastTokenIndex = _allTokens.length.sub(1);\n\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        _allTokens.length--;\n\n        _allTokensIndex[tokenId] = 0;\n",
                    "message": "Function 'ERC721Enumerable._removeTokenFromAllTokensEnumeration' (yinsure.sol#380-389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": 448,
                    "vulnerability_code": "    function _burn(address owner, uint256 tokenId) internal {\n\n        super._burn(owner, tokenId);\n\n\n\n        // Clear metadata (if any)\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n\n            delete _tokenURIs[tokenId];\n\n        }\n",
                    "message": "Function 'ERC721Metadata._burn' (yinsure.sol#441-448) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 434,
                    "vulnerability_code": "    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\n\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n\n        _tokenURIs[tokenId] = _tokenURI;\n",
                    "message": "Function 'ERC721Metadata._setTokenURI' (yinsure.sol#431-434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {\n",
                    "message": "Parameter '_tokenURI' of ERC721Metadata._setTokenURI (yinsure.sol#431) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function _setBaseURI(string memory baseURI) internal {\n\n        _baseURI = baseURI;\n",
                    "message": "Function 'ERC721Metadata._setBaseURI' (yinsure.sol#435-437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": 498,
                    "vulnerability_code": "    function _transferOwnership(address newOwner) internal {\n\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (yinsure.sol#494-498) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _v,\n",
                    "message": "Parameter '_v' of NexusMutualCover.buyCover (yinsure.sol#763) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _r,\n",
                    "message": "Parameter '_r' of NexusMutualCover.buyCover (yinsure.sol#764) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _s\n",
                    "message": "Parameter '_s' of NexusMutualCover.buyCover (yinsure.sol#765) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _masterAddress, uint _distributorFeePercentage) public {\n",
                    "message": "Parameter '_masterAddress' of Distributor. (yinsure.sol#878) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _masterAddress, uint _distributorFeePercentage) public {\n",
                    "message": "Parameter '_distributorFeePercentage' of Distributor. (yinsure.sol#878) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _v,\n",
                    "message": "Parameter '_v' of Distributor.buyCover (yinsure.sol#894) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _r,\n",
                    "message": "Parameter '_r' of Distributor.buyCover (yinsure.sol#895) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _s\n",
                    "message": "Parameter '_s' of Distributor.buyCover (yinsure.sol#896) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": 983,
                    "vulnerability_code": "  function _sendAssuredSum(\n\n    bytes4 coverCurrency,\n\n    uint sumAssured\n\n    )\n\n    internal\n\n  {\n\n    if (coverCurrency == ethCurrency) {\n\n      msg.sender.transfer(sumAssured);\n\n    } else {\n\n      IERC20 erc20 = IERC20(coverAPI.getCurrencyAssetAddress(coverCurrency));\n\n      require(erc20.transfer(msg.sender, sumAssured), \"Transfer failed\");\n\n    }\n",
                    "message": "Function 'Distributor._sendAssuredSum' (yinsure.sol#971-983) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 990,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function nxmTokenApprove(address _spender, uint256 _value)\n",
                    "message": "Parameter '_spender' of Distributor.nxmTokenApprove (yinsure.sol#990) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 990,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function nxmTokenApprove(address _spender, uint256 _value)\n",
                    "message": "Parameter '_value' of Distributor.nxmTokenApprove (yinsure.sol#990) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawEther(address payable _recipient, uint256 _amount)\n",
                    "message": "Parameter '_recipient' of Distributor.withdrawEther (yinsure.sol#998) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 998,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawEther(address payable _recipient, uint256 _amount)\n",
                    "message": "Parameter '_amount' of Distributor.withdrawEther (yinsure.sol#998) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawTokens(address payable _recipient, uint256 _amount, bytes4 _currency)\n",
                    "message": "Parameter '_recipient' of Distributor.withdrawTokens (yinsure.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawTokens(address payable _recipient, uint256 _amount, bytes4 _currency)\n",
                    "message": "Parameter '_amount' of Distributor.withdrawTokens (yinsure.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function withdrawTokens(address payable _recipient, uint256 _amount, bytes4 _currency)\n",
                    "message": "Parameter '_currency' of Distributor.withdrawTokens (yinsure.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant ethCurrency = \"ETH\";\n",
                    "message": "Constant 'Distributor.ethCurrency' (yinsure.sol#869) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _tokenOwner[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenApprovals[tokenId] = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _ownedTokens[from].length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _allTokens.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes4 => bool) private _supportedInterfaces;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) private _tokenOwner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (uint256 => address) private _tokenApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => Counters.Counter) private _ownedTokensCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => bool)) private _operatorApprovals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256[]) private _ownedTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _ownedTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[] private _allTokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => uint256) private _allTokensIndex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _baseURI;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint256 => string) private _tokenURIs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _notEntered;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (returndata.length > 0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() external view returns (bytes32, bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getscAddressOfCover(uint _cid) external returns(uint, address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getClaimbyIndex(uint _claimId) external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) internal view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, bytes memory returndata) = to.call(abi.encodeWithSelector(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { codehash := extcodehash(account) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function makeCoverBegin(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function makeCoverUsingCA(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buyCover(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call.value(amount)(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 524,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] calldata coverDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint16 coverPeriod,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _v,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _r,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _s\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] calldata coverDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint16 coverPeriod,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _v,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _r,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _s\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCoverMemberAddress(uint _cid) external returns(address payable _add);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address payable memberAddress,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint[] memory coverDetails\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  NexusMutualCover.Data coverAPI;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 892,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] calldata coverDetails,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint16 coverPeriod,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 _v,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _r,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 _s\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint coverPrice = coverDetails[1];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint requiredValue = distributorFeePercentage.mul(coverPrice).div(100).add(coverPrice);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (coverCurrency == \"ETH\") {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(msg.value == requiredValue, \"Incorrect value sent\");\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/yearn/Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Token.sol:\n\t- pragma solidity^0.5.17 (Token.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "interface yERC20 {\n\n  function deposit(uint256 _amount) external;\n\n  function withdraw(uint256 _amount) external;\n\n  function getPricePerFullShare() external view returns (uint);\n",
                    "message": "Contract 'yERC20' (Token.sol#8-12) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/yearn/Controller.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in Controller.sol:\n\t- pragma solidity^0.5.16 (Controller.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint) external;\n",
                    "message": "Parameter '' of Controller.withdraw (Controller.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Controller.withdraw (Controller.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of Controller.balanceOf (Controller.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint) external;\n",
                    "message": "Parameter '' of Controller.earn (Controller.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Controller.earn (Controller.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function want(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.want (Controller.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of Controller.vaults (Controller.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/yearn/Strategy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in Strategy.sol:\n\t- pragma solidity^0.5.16 (Strategy.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address) external;\n",
                    "message": "Parameter '' of Strategy.withdraw (Strategy.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of Strategy.withdraw (Strategy.sol#18) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/yearn/Vault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in Vault.sol:\n\t- pragma solidity^0.5.16 (Vault.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint) external;\n",
                    "message": "Parameter '' of Vault.deposit (Vault.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of Vault.withdraw (Vault.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/yearn/Mintr.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Mintr.sol:\n\t- pragma solidity^0.5.17 (Mintr.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of Mintr.mint (Mintr.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/yearn/Converter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in Converter.sol:\n\t- pragma solidity^0.5.16 (Converter.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function convert(address) external returns (uint);\n",
                    "message": "Parameter '' of Converter.convert (Converter.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/yearn/OneSplitAudit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in OneSplitAudit.sol:\n\t- pragma solidity^0.5.16 (OneSplitAudit.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swap(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata distribution,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 flags\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256 returnAmount);\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/uniswap/Uni.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Uni.sol:\n\t- pragma solidity^0.5.17 (Uni.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '' of Uni.swapExactTokensForTokens (Uni.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Uni.swapExactTokensForTokens (Uni.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of Uni.swapExactTokensForTokens (Uni.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_2' of Uni.swapExactTokensForTokens (Uni.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_3' of Uni.swapExactTokensForTokens (Uni.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/curve/Curve.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Curve.sol:\n\t- pragma solidity^0.5.17 (Curve.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
                    "message": "Function 'ICurveFi.get_virtual_price' (Curve.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function add_liquidity( // sBTC pool\n\n    uint256[3] calldata amounts,\n\n    uint256 min_mint_amount\n",
                    "message": "Function 'ICurveFi.add_liquidity' (Curve.sol#10-13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 min_mint_amount\n",
                    "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (Curve.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function add_liquidity( // bUSD pool\n\n    uint256[4] calldata amounts,\n\n    uint256 min_mint_amount\n",
                    "message": "Function 'ICurveFi.add_liquidity' (Curve.sol#14-17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 min_mint_amount\n",
                    "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (Curve.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "  function remove_liquidity_imbalance(\n\n    uint256[4] calldata amounts,\n\n    uint256 max_burn_amount\n",
                    "message": "Function 'ICurveFi.remove_liquidity_imbalance' (Curve.sol#18-21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 max_burn_amount\n",
                    "message": "Parameter 'max_burn_amount' of ICurveFi.remove_liquidity_imbalance (Curve.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function remove_liquidity(\n\n    uint256 _amount,\n\n    uint256[4] calldata amounts\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (Curve.sol#22-25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_from_amount' of ICurveFi.exchange (Curve.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_min_to_amount' of ICurveFi.exchange (Curve.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/curve/Gauge.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Gauge.sol:\n\t- pragma solidity^0.5.17 (Gauge.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint) external;\n",
                    "message": "Parameter '' of Gauge.deposit (Gauge.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of Gauge.balanceOf (Gauge.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of Gauge.withdraw (Gauge.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/dforce/Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Token.sol:\n\t- pragma solidity^0.5.17 (Token.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "interface dERC20 {\n\n  function mint(address, uint256) external;\n\n  function redeem(address, uint) external;\n\n  function getTokenBalance(address) external view returns (uint);\n\n  function getExchangeRate() external view returns (uint);\n",
                    "message": "Contract 'dERC20' (Token.sol#7-12) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address, uint256) external;\n",
                    "message": "Parameter '' of dERC20.mint (Token.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of dERC20.mint (Token.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function redeem(address, uint) external;\n",
                    "message": "Parameter '' of dERC20.redeem (Token.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function redeem(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of dERC20.redeem (Token.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenBalance(address) external view returns (uint);\n",
                    "message": "Parameter '' of dERC20.getTokenBalance (Token.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/dforce/Rewards.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Rewards.sol:\n\t- pragma solidity^0.5.17 (Rewards.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "interface dRewards {\n\n    function withdraw(uint) external;\n\n    function getReward() external;\n\n    function stake(uint) external;\n\n    function balanceOf(address) external view returns (uint);\n\n    function exit() external;\n",
                    "message": "Contract 'dRewards' (Rewards.sol#7-13) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of dRewards.withdraw (Rewards.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stake(uint) external;\n",
                    "message": "Parameter '' of dRewards.stake (Rewards.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of dRewards.balanceOf (Rewards.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/aave/AaveToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in AaveToken.sol:\n\t- pragma solidity^0.5.16 (AaveToken.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/aave/LendingPoolAddressesProvider.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in LendingPoolAddressesProvider.sol:\n\t- pragma solidity^0.5.16 (LendingPoolAddressesProvider.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/aave/Oracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in Oracle.sol:\n\t- pragma solidity^0.5.16 (Oracle.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/aave/Aave.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in Aave.sol:\n\t- pragma solidity^0.5.16 (Aave.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function repay(address _reserve, uint _amount, address payable _onBehalfOf) external payable;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/maker/Maker.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_84"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "interface GemLike {\n\n    function approve(address, uint) external;\n\n    function transfer(address, uint) external;\n\n    function transferFrom(address, address, uint) external;\n\n    function deposit() external payable;\n\n    function withdraw(uint) external;\n",
                    "message": "GemLike (Maker.sol#5-11) has incorrect ERC20 function interface(s):\n\t-approve (Maker.sol#6)\n\t-transfer (Maker.sol#7)\n\t-transferFrom (Maker.sol#8)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Maker.sol:\n\t- pragma solidity^0.5.17 (Maker.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint) external;\n",
                    "message": "Parameter '' of GemLike.approve (Maker.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of GemLike.approve (Maker.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address, uint) external;\n",
                    "message": "Parameter '' of GemLike.transfer (Maker.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of GemLike.transfer (Maker.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address, address, uint) external;\n",
                    "message": "Parameter '' of GemLike.transferFrom (Maker.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of GemLike.transferFrom (Maker.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of GemLike.transferFrom (Maker.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of GemLike.withdraw (Maker.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cdpCan(address, uint, address) external view returns (uint);\n",
                    "message": "Parameter '' of ManagerLike.cdpCan (Maker.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cdpCan(address, uint, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of ManagerLike.cdpCan (Maker.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cdpCan(address, uint, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of ManagerLike.cdpCan (Maker.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(uint) external view returns (bytes32);\n",
                    "message": "Parameter '' of ManagerLike.ilks (Maker.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function owns(uint) external view returns (address);\n",
                    "message": "Parameter '' of ManagerLike.owns (Maker.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(uint) external view returns (address);\n",
                    "message": "Parameter '' of ManagerLike.urns (Maker.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function open(bytes32, address) external returns (uint);\n",
                    "message": "Parameter '' of ManagerLike.open (Maker.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function open(bytes32, address) external returns (uint);\n",
                    "message": "Parameter '_scope_0' of ManagerLike.open (Maker.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function give(uint, address) external;\n",
                    "message": "Parameter '' of ManagerLike.give (Maker.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function give(uint, address) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.give (Maker.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cdpAllow(uint, address, uint) external;\n",
                    "message": "Parameter '' of ManagerLike.cdpAllow (Maker.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cdpAllow(uint, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.cdpAllow (Maker.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cdpAllow(uint, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of ManagerLike.cdpAllow (Maker.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urnAllow(address, uint) external;\n",
                    "message": "Parameter '' of ManagerLike.urnAllow (Maker.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urnAllow(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.urnAllow (Maker.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(uint, int, int) external;\n",
                    "message": "Parameter '' of ManagerLike.frob (Maker.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(uint, int, int) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.frob (Maker.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(uint, int, int) external;\n",
                    "message": "Parameter '_scope_1' of ManagerLike.frob (Maker.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(uint, address, uint) external;\n",
                    "message": "Parameter '' of ManagerLike.flux (Maker.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(uint, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.flux (Maker.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function flux(uint, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of ManagerLike.flux (Maker.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(uint, address, uint) external;\n",
                    "message": "Parameter '' of ManagerLike.move (Maker.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(uint, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.move (Maker.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(uint, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of ManagerLike.move (Maker.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint, address, uint) external;\n",
                    "message": "Parameter '' of ManagerLike.exit (Maker.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.exit (Maker.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of ManagerLike.exit (Maker.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint, address, uint) external;\n",
                    "message": "Parameter '_scope_2' of ManagerLike.exit (Maker.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function quit(uint, address) external;\n",
                    "message": "Parameter '' of ManagerLike.quit (Maker.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function quit(uint, address) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.quit (Maker.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enter(address, uint) external;\n",
                    "message": "Parameter '' of ManagerLike.enter (Maker.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function enter(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.enter (Maker.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function shift(uint, uint) external;\n",
                    "message": "Parameter '' of ManagerLike.shift (Maker.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function shift(uint, uint) external;\n",
                    "message": "Parameter '_scope_0' of ManagerLike.shift (Maker.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function can(address, address) external view returns (uint);\n",
                    "message": "Parameter '' of VatLike.can (Maker.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function can(address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of VatLike.can (Maker.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\n",
                    "message": "Parameter '' of VatLike.ilks (Maker.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function dai(address) external view returns (uint);\n",
                    "message": "Parameter '' of VatLike.dai (Maker.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of VatLike.urns (Maker.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of VatLike.urns (Maker.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(bytes32, address, address, address, int, int) external;\n",
                    "message": "Parameter '' of VatLike.frob (Maker.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(bytes32, address, address, address, int, int) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.frob (Maker.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(bytes32, address, address, address, int, int) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.frob (Maker.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(bytes32, address, address, address, int, int) external;\n",
                    "message": "Parameter '_scope_2' of VatLike.frob (Maker.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(bytes32, address, address, address, int, int) external;\n",
                    "message": "Parameter '_scope_3' of VatLike.frob (Maker.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function frob(bytes32, address, address, address, int, int) external;\n",
                    "message": "Parameter '_scope_4' of VatLike.frob (Maker.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hope(address) external;\n",
                    "message": "Parameter '' of VatLike.hope (Maker.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address, address, uint) external;\n",
                    "message": "Parameter '' of VatLike.move (Maker.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of VatLike.move (Maker.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function move(address, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of VatLike.move (Maker.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(address, uint) external payable;\n",
                    "message": "Parameter '' of GemJoinLike.join (Maker.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(address, uint) external payable;\n",
                    "message": "Parameter '_scope_0' of GemJoinLike.join (Maker.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint) external;\n",
                    "message": "Parameter '' of GemJoinLike.exit (Maker.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of GemJoinLike.exit (Maker.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function bags(address) external view returns (address);\n",
                    "message": "Parameter '' of GNTJoinLike.bags (Maker.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function make(address) external returns (address);\n",
                    "message": "Parameter '' of GNTJoinLike.make (Maker.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(address, uint) external payable;\n",
                    "message": "Parameter '' of DaiJoinLike.join (Maker.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(address, uint) external payable;\n",
                    "message": "Parameter '_scope_0' of DaiJoinLike.join (Maker.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint) external;\n",
                    "message": "Parameter '' of DaiJoinLike.exit (Maker.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of DaiJoinLike.exit (Maker.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hope(address) external;\n",
                    "message": "Parameter '' of HopeLike.hope (Maker.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function nope(address) external;\n",
                    "message": "Parameter '' of HopeLike.nope (Maker.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fix(bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of EndLike.fix (Maker.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cash(bytes32, uint) external;\n",
                    "message": "Parameter '' of EndLike.cash (Maker.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function cash(bytes32, uint) external;\n",
                    "message": "Parameter '_scope_0' of EndLike.cash (Maker.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function free(bytes32) external;\n",
                    "message": "Parameter '' of EndLike.free (Maker.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pack(uint) external;\n",
                    "message": "Parameter '' of EndLike.pack (Maker.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function skim(bytes32, address) external;\n",
                    "message": "Parameter '' of EndLike.skim (Maker.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function skim(bytes32, address) external;\n",
                    "message": "Parameter '_scope_0' of EndLike.skim (Maker.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function drip(bytes32) external returns (uint);\n",
                    "message": "Parameter '' of JugLike.drip (Maker.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function pie(address) external view returns (uint);\n",
                    "message": "Parameter '' of PotLike.pie (Maker.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function join(uint) external;\n",
                    "message": "Parameter '' of PotLike.join (Maker.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(uint) external;\n",
                    "message": "Parameter '' of PotLike.exit (Maker.sol#82) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (address, uint);\n",
                    "message": "Parameter '' of SpotLike.ilks (Maker.sol#86) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function urns(bytes32, address) external view returns (uint, uint);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ilks(bytes32) external view returns (address, uint);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read() external view returns (uint, bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function foresight() external view returns (uint, bool);\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/compound/Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Token.sol:\n\t- pragma solidity^0.5.17 (Token.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "interface cToken {\n\n    function mint(uint mintAmount) external returns (uint);\n\n    function redeem(uint redeemTokens) external returns (uint);\n\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n\n    function borrow(uint borrowAmount) external returns (uint);\n\n    function repayBorrow(uint repayAmount) external returns (uint);\n\n    function exchangeRateStored() external view returns (uint);\n\n    function balanceOf(address _owner) external view returns (uint);\n\n    function underlying() external view returns (address);\n",
                    "message": "Contract 'cToken' (Token.sol#7-16) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/weth/WETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": "Detected issues with version pragma in WETH.sol:\n\t- pragma solidity^0.5.16 (WETH.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.16;\n",
                    "message": null
                }
            ]
        }
    },
    "yearn-protocol-9ff0dc0ea73642c529383d0675930a41bf033295/interfaces/cream/Controller.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in Controller.sol:\n\t- pragma solidity^0.5.17 (Controller.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    }
}