{
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/ECDH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if ((x1 == 0) && (y1 == 0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (x2, y2, z2);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if ((x2 == 0) && (y2 == 0)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (x1, y1, z1);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if ((x1 == x2) && (y1 == y2)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (ln, lz) = jMul(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                x1,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z1,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                x1,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z1\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (ln, lz) = jMul(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ln,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                lz,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function publicKey(uint256 privKey) external pure returns (uint256 qx, uint256 qy) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 qx, uint256 qy)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 x3, uint256 z3)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 x3, uint256 z3)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 x3, uint256 z3)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 x3, uint256 z3)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 x3, uint256 y3, uint256 z3)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 x3, uint256 y3, uint256 z3)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint256 x3, uint256 y3, uint256 z3)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant GX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant GY = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant N = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant A = 0;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/Decryption.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint8 i = 0; i < 32; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n\n        bytes32 numberBytes = bytes32(secretNumber);\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = numberBytes[i] ^ key[i];\n\n        }\n\n        assembly {\n\n            ciphertext := mload(add(tmp, 32))\n\n        }\n",
                    "message": "Decryption.encrypt (Decryption.sol#27-36) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "    function decrypt(bytes32 ciphertext, bytes32 key) external pure returns (uint256 secretNumber) {\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = ciphertext[i] ^ key[i];\n\n        }\n\n        bytes32 numberBytes;\n\n        assembly {\n\n            numberBytes := mload(add(tmp, 32))\n\n        }\n\n        secretNumber = uint256(numberBytes);\n",
                    "message": "Decryption.decrypt (Decryption.sol#38-48) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n\n        bytes32 numberBytes = bytes32(secretNumber);\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = numberBytes[i] ^ key[i];\n\n        }\n\n        assembly {\n\n            ciphertext := mload(add(tmp, 32))\n\n        }\n",
                    "message": "Decryption.encrypt uses assembly (Decryption.sol#27-36)\n\t- Decryption.sol#33-35\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "    function decrypt(bytes32 ciphertext, bytes32 key) external pure returns (uint256 secretNumber) {\n\n        bytes memory tmp = new bytes(32);\n\n        for (uint8 i = 0; i < 32; i++) {\n\n            tmp[i] = ciphertext[i] ^ key[i];\n\n        }\n\n        bytes32 numberBytes;\n\n        assembly {\n\n            numberBytes := mload(add(tmp, 32))\n\n        }\n\n        secretNumber = uint256(numberBytes);\n",
                    "message": "Decryption.decrypt uses assembly (Decryption.sol#38-48)\n\t- Decryption.sol#44-46\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Decryption.sol:\n\t- pragma solidity^0.5.0 (Decryption.sol#22): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decrypt(bytes32 ciphertext, bytes32 key) external pure returns (uint256 secretNumber) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/thirdparty/BokkyPooBahsDateTimeLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (year >= 1970 && month > 0 && month <= 12) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint daysInMonth = _getDaysInMonth(year, month);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (day > 0 && day <= daysInMonth) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                valid = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (day > 0 && day <= daysInMonth) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                valid = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (hour < 24 && minute < 60 && second < 60) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                valid = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in BokkyPooBahsDateTimeLibrary.sol:\n\t- pragma solidity^0.5.0 (BokkyPooBahsDateTimeLibrary.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\n\n        require(year >= 1970);\n\n        int _year = int(year);\n\n        int _month = int(month);\n\n        int _day = int(day);\n\n\n\n        int __days = _day\n\n          - 32075\n\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n\n          - OFFSET19700101;\n\n\n\n        _days = uint(__days);\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._daysFromDate' (BokkyPooBahsDateTimeLibrary.sol#58-72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n\n        int __days = int(_days);\n\n\n\n        int L = __days + 68569 + OFFSET19700101;\n\n        int N = 4 * L / 146097;\n\n        L = L - (146097 * N + 3) / 4;\n\n        int _year = 4000 * (L + 1) / 1461001;\n\n        L = L - 1461 * _year / 4 + 31;\n\n        int _month = 80 * L / 2447;\n\n        int _day = L - 2447 * _month / 80;\n\n        L = _month / 11;\n\n        _month = _month + 2 - 12 * L;\n\n        _year = 100 * (N - 49) + _year + L;\n\n\n\n        year = uint(_year);\n\n        month = uint(_month);\n\n        day = uint(_day);\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._daysToDate' (BokkyPooBahsDateTimeLibrary.sol#91-108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n",
                    "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary._daysToDate (BokkyPooBahsDateTimeLibrary.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\n\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._isLeapYear' (BokkyPooBahsDateTimeLibrary.sol#150-152) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\n\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n\n            daysInMonth = 31;\n\n        } else if (month != 2) {\n\n            daysInMonth = 30;\n\n        } else {\n\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n\n        }\n",
                    "message": "Function 'BokkyPooBahsDateTimeLibrary._getDaysInMonth' (BokkyPooBahsDateTimeLibrary.sol#166-174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_years' of BokkyPooBahsDateTimeLibrary.addYears (BokkyPooBahsDateTimeLibrary.sol#208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_months' of BokkyPooBahsDateTimeLibrary.addMonths (BokkyPooBahsDateTimeLibrary.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary.addDays (BokkyPooBahsDateTimeLibrary.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_hours' of BokkyPooBahsDateTimeLibrary.addHours (BokkyPooBahsDateTimeLibrary.sol#240) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_minutes' of BokkyPooBahsDateTimeLibrary.addMinutes (BokkyPooBahsDateTimeLibrary.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_seconds' of BokkyPooBahsDateTimeLibrary.addSeconds (BokkyPooBahsDateTimeLibrary.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_years' of BokkyPooBahsDateTimeLibrary.subYears (BokkyPooBahsDateTimeLibrary.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_months' of BokkyPooBahsDateTimeLibrary.subMonths (BokkyPooBahsDateTimeLibrary.sol#266) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_days' of BokkyPooBahsDateTimeLibrary.subDays (BokkyPooBahsDateTimeLibrary.sol#281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_hours' of BokkyPooBahsDateTimeLibrary.subHours (BokkyPooBahsDateTimeLibrary.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_minutes' of BokkyPooBahsDateTimeLibrary.subMinutes (BokkyPooBahsDateTimeLibrary.sol#289) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\n",
                    "message": "Parameter '_seconds' of BokkyPooBahsDateTimeLibrary.subSeconds (BokkyPooBahsDateTimeLibrary.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_MON = 1;\n",
                    "message": "BokkyPooBahsDateTimeLibrary.DOW_MON (BokkyPooBahsDateTimeLibrary.sol#37) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_TUE (BokkyPooBahsDateTimeLibrary.sol#38) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_WED (BokkyPooBahsDateTimeLibrary.sol#39) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_THU (BokkyPooBahsDateTimeLibrary.sol#40) is never used in BokkyPooBahsDateTimeLibrary\nBokkyPooBahsDateTimeLibrary.DOW_SUN (BokkyPooBahsDateTimeLibrary.sol#43) is never used in BokkyPooBahsDateTimeLibrary\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant SECONDS_PER_HOUR = 60 * 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant SECONDS_PER_MINUTE = 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int constant OFFSET19700101 = 2440588;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_MON = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_TUE = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_WED = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_THU = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_FRI = 5;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_SAT = 6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant DOW_SUN = 7;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/INodesData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addNode(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata name,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes4 ip,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes4 publicIP,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint16 port,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata publicKey,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata publicKey,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint validatorId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    external returns (uint);\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/ISkaleBalances.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/IManagerData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/ISkaleToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function CAP() external view returns (uint);\n",
                    "message": "Function 'ISkaleToken.CAP' (ISkaleToken.sol#14) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata userData,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata operatorData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (bool);\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/ISchainsData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/ISchainsFunctionalityInternal.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in ISchainsFunctionalityInternal.sol:\n\t- pragma solidity^0.5.0 (ISchainsFunctionalityInternal.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getNodesDataFromTypeOfSchain(uint typeOfSchain) external view returns (uint, uint8);\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/IConstants.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NODE_DEPOSIT() external view returns (uint);\n",
                    "message": "Function 'IConstants.NODE_DEPOSIT' (IConstants.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function FRACTIONAL_FACTOR() external view returns (uint);\n",
                    "message": "Function 'IConstants.FRACTIONAL_FACTOR' (IConstants.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function FULL_FACTOR() external view returns (uint);\n",
                    "message": "Function 'IConstants.FULL_FACTOR' (IConstants.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function SECONDS_TO_DAY() external view returns (uint32);\n",
                    "message": "Function 'IConstants.SECONDS_TO_DAY' (IConstants.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function SECONDS_TO_YEAR() external view returns (uint32);\n",
                    "message": "Function 'IConstants.SECONDS_TO_YEAR' (IConstants.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MEDIUM_DIVISOR() external view returns (uint8);\n",
                    "message": "Function 'IConstants.MEDIUM_DIVISOR' (IConstants.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function TINY_DIVISOR() external view returns (uint8);\n",
                    "message": "Function 'IConstants.TINY_DIVISOR' (IConstants.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function SMALL_DIVISOR() external view returns (uint8);\n",
                    "message": "Function 'IConstants.SMALL_DIVISOR' (IConstants.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MEDIUM_TEST_DIVISOR() external view returns (uint8);\n",
                    "message": "Function 'IConstants.MEDIUM_TEST_DIVISOR' (IConstants.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NUMBER_OF_NODES_FOR_SCHAIN() external view returns (uint);\n",
                    "message": "Function 'IConstants.NUMBER_OF_NODES_FOR_SCHAIN' (IConstants.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NUMBER_OF_NODES_FOR_TEST_SCHAIN() external view returns (uint);\n",
                    "message": "Function 'IConstants.NUMBER_OF_NODES_FOR_TEST_SCHAIN' (IConstants.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN() external view returns (uint);\n",
                    "message": "Function 'IConstants.NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN' (IConstants.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function SIX_YEARS() external view returns (uint32);\n",
                    "message": "Function 'IConstants.SIX_YEARS' (IConstants.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NUMBER_OF_MONITORS() external view returns (uint);\n",
                    "message": "Function 'IConstants.NUMBER_OF_MONITORS' (IConstants.sol#30) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/IGroupsData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getGroupsPublicKey(bytes32 groupIndex) external view returns (uint, uint, uint, uint);\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/ISchainsFunctionality.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/INodesFunctionality.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/tokenSale/ITokenSaleManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/delegation/IDelegatableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/delegation/IHolderDelegation.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                }
            ]
        }
    },
    "skale-manager-50c8f4e037f6bf578d62bd752516b17237b55811/contracts/interfaces/delegation/IValidatorDelegation.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": "Different versions of Solidity is used in IValidatorDelegation.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.3']\n\t- IValidatorDelegation.sol#22 declares pragma solidity^0.5.3\n\t- IValidatorDelegation.sol#23 declares pragma experimentalABIEncoderV2\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function registerValidator(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string calldata description,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint feeRatePromille,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint minimumDelegationAmount\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint validatorId);\n",
                    "message": null
                }
            ]
        }
    }
}