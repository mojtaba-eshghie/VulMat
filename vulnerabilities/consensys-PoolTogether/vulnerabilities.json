{
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/token/TokenControllerInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in TokenControllerInterface.sol:\n\t- pragma solidity>=0.5.0<0.7.0 (TokenControllerInterface.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/token/TicketInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in TicketInterface.sol:\n\t- pragma solidity>=0.5.0<0.7.0 (TicketInterface.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/token/TokenListenerLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.12;\n",
                    "message": "Detected issues with version pragma in TokenListenerLibrary.sol:\n\t- pragma solidity^0.6.12 (TokenListenerLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 public constant ERC165_INTERFACE_ID_TOKEN_LISTENER = 0xff5e34e7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.12;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/prize-strategy/PeriodicPrizeStrategyListenerLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.12;\n",
                    "message": "Detected issues with version pragma in PeriodicPrizeStrategyListenerLibrary.sol:\n\t- pragma solidity^0.6.12 (PeriodicPrizeStrategyListenerLibrary.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 public constant ERC165_INTERFACE_ID_PERIODIC_PRIZE_STRATEGY_LISTENER = 0x575072c6;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.12;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/test/DoppelgangerWithExec.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert(\"Mock on the method is not initialized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert(\"Mock revert\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert(\"Mock on the method is not initialized\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "arbitrary-low-level-call",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      (bool succeeded, bytes memory returnValue) = target.call(data);\n",
                    "message": "An attacker may perform call() to an arbitrary address with controlled calldata"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "    function __internal__mockReturn(bytes memory ret) pure private {\n\n        assembly {\n\n            return (add(ret, 0x20), mload(ret))\n\n        }\n",
                    "message": "DoppelgangerWithExec.__internal__mockReturn (DoppelgangerWithExec.sol#66-70) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    fallback() external payable {\n\n        MockCall storage mockCall = __internal__getMockCall();\n\n        if (mockCall.reverts == true) {\n\n            __internal__mockRevert();\n\n            return;\n\n        }\n\n        __internal__mockReturn(mockCall.returnValue);\n",
                    "message": "Contract locking ether found in DoppelgangerWithExec.sol:\n\tContract DoppelgangerWithExec has payable functions:\n\t - fallback (DoppelgangerWithExec.sol#15-22)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "    function __internal__mockReturn(bytes memory ret) pure private {\n\n        assembly {\n\n            return (add(ret, 0x20), mload(ret))\n\n        }\n",
                    "message": "DoppelgangerWithExec.__internal__mockReturn uses assembly (DoppelgangerWithExec.sol#66-70)\n\t- DoppelgangerWithExec.sol#67-69\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "    function __waffle__mockReverts(bytes memory data) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: true,\n\n            returnValue: \"\"\n\n        });\n",
                    "message": "DoppelgangerWithExec.__waffle__mockReverts (DoppelgangerWithExec.sol#24-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function __waffle__mockReturns(bytes memory data, bytes memory value) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: false,\n\n            returnValue: value\n\n        });\n",
                    "message": "DoppelgangerWithExec.__waffle__mockReturns (DoppelgangerWithExec.sol#32-38) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in DoppelgangerWithExec.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (DoppelgangerWithExec.sol#3): is has a complex pragma\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function __waffle__call(address target, bytes calldata data) external returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.call(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
                    "message": "Low level call in DoppelgangerWithExec.__waffle__call (DoppelgangerWithExec.sol#40-44):\n\t-(succeeded,returnValue) = target.call(data) DoppelgangerWithExec.sol#41\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function __waffle__staticcall(address target, bytes calldata data) external view returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.staticcall(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
                    "message": "Low level call in DoppelgangerWithExec.__waffle__staticcall (DoppelgangerWithExec.sol#46-50):\n\t-(succeeded,returnValue) = target.staticcall(data) DoppelgangerWithExec.sol#47\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "    function __waffle__mockReverts(bytes memory data) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: true,\n\n            returnValue: \"\"\n\n        });\n",
                    "message": "Function 'DoppelgangerWithExec.__waffle__mockReverts' (DoppelgangerWithExec.sol#24-30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function __waffle__mockReturns(bytes memory data, bytes memory value) public {\n\n        mockConfig[keccak256(data)] = MockCall({\n\n            initialized: true,\n\n            reverts: false,\n\n            returnValue: value\n\n        });\n",
                    "message": "Function 'DoppelgangerWithExec.__waffle__mockReturns' (DoppelgangerWithExec.sol#32-38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function __waffle__call(address target, bytes calldata data) external returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.call(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
                    "message": "Function 'DoppelgangerWithExec.__waffle__call' (DoppelgangerWithExec.sol#40-44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function __waffle__staticcall(address target, bytes calldata data) external view returns (bytes memory) {\n\n      (bool succeeded, bytes memory returnValue) = target.staticcall(data);\n\n      require(succeeded, string(returnValue));\n\n      return returnValue;\n",
                    "message": "Function 'DoppelgangerWithExec.__waffle__staticcall' (DoppelgangerWithExec.sol#46-50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function __internal__getMockCall() view private returns (MockCall storage mockCall) {\n\n        mockCall = mockConfig[keccak256(msg.data)];\n\n        if (mockCall.initialized == true) {\n\n            // Mock method with specified arguments\n\n            return mockCall;\n\n        }\n\n        mockCall = mockConfig[keccak256(abi.encodePacked(msg.sig))];\n\n        if (mockCall.initialized == true) {\n\n            // Mock method with any arguments\n\n            return mockCall;\n\n        }\n\n        revert(\"Mock on the method is not initialized\");\n",
                    "message": "Function 'DoppelgangerWithExec.__internal__getMockCall' (DoppelgangerWithExec.sol#52-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "    function __internal__mockReturn(bytes memory ret) pure private {\n\n        assembly {\n\n            return (add(ret, 0x20), mload(ret))\n\n        }\n",
                    "message": "Function 'DoppelgangerWithExec.__internal__mockReturn' (DoppelgangerWithExec.sol#66-70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function __internal__mockRevert() pure private {\n\n        revert(\"Mock revert\");\n",
                    "message": "Function 'DoppelgangerWithExec.__internal__mockRevert' (DoppelgangerWithExec.sol#72-74) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => MockCall) mockConfig;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    fallback() external payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        MockCall storage mockCall = __internal__getMockCall();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        MockCall storage mockCall = __internal__getMockCall();\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (mockCall.reverts == true) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            __internal__mockRevert();\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/test/Timestamp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function blockTime() public view returns (uint256) {\n\n    return block.timestamp;\n",
                    "message": "Timestamp.blockTime (Timestamp.sol#7-9) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in Timestamp.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (Timestamp.sol#3): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/test/ExtendedSafeCastExposed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**112, \"SafeCast: value doesn't fit in an uint112\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**96, \"SafeCast: value doesn't fit in an uint96\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**112, \"SafeCast: value doesn't fit in an uint112\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**96, \"SafeCast: value doesn't fit in an uint96\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in ExtendedSafeCastExposed.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (ExtendedSafeCastExposed.sol#5): is has a complex pragma\n\t- pragma solidity>=0.6.0<0.7.0 (ExtendedSafeCastExposed.sol#37): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/test/UInt256ArrayExposed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _array.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (uint256[] memory _array) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    array = new uint256[](_array.length);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _array.length; i++) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      array[i] = _array[i];\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      array[i] = _array[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _array.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index < self.length, \"UInt256Array/unknown-index\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _array.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function remove(uint256[] storage self, uint256 index) internal {\n\n    require(index < self.length, \"UInt256Array/unknown-index\");\n\n    self[index] = self[self.length-1];\n\n    delete self[self.length-1];\n\n    self.pop();\n",
                    "message": "UInt256Array.remove (UInt256ArrayExposed.sol#8-13) does not use the value returned by external calls:\n\t-self.pop() (UInt256ArrayExposed.sol#12)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in UInt256ArrayExposed.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (UInt256ArrayExposed.sol#5): is has a complex pragma\n\t- pragma solidity>=0.6.0<0.7.0 (UInt256ArrayExposed.sol#18): is has a complex pragma\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (uint256[] memory _array) public {\n",
                    "message": "Parameter '_array' of UInt256ArrayExposed. (UInt256ArrayExposed.sol#25) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _array.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < _array.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/test/MappedSinglyLinkedListExposed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(self.count == 0, \"Already init\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAddress != SENTINEL && newAddress != address(0), \"Invalid address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(self.addressMap[newAddress] == address(0), \"Already added\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != SENTINEL && addr != address(0), \"Invalid address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(self.addressMap[prevAddress] == addr, \"Invalid prevAddress\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAddress != SENTINEL && newAddress != address(0), \"Invalid address\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != SENTINEL && addr != address(0), \"Invalid address\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in MappedSinglyLinkedListExposed.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (MappedSinglyLinkedListExposed.sol#5): is has a complex pragma\n\t- pragma solidity>=0.6.0<0.7.0 (MappedSinglyLinkedListExposed.sol#109): is has a complex pragma\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function end(Mapping storage) internal pure returns (address) {\n",
                    "message": "Parameter '' of MappedSinglyLinkedList.end (MappedSinglyLinkedListExposed.sol#36) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public constant SENTINEL = address(0x1);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  MappedSinglyLinkedList.Mapping list;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/utils/UInt256Array.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index < self.length, \"UInt256Array/unknown-index\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function remove(uint256[] storage self, uint256 index) internal {\n\n    require(index < self.length, \"UInt256Array/unknown-index\");\n\n    self[index] = self[self.length-1];\n\n    delete self[self.length-1];\n\n    self.pop();\n",
                    "message": "UInt256Array.remove (UInt256Array.sol#8-13) does not use the value returned by external calls:\n\t-self.pop() (UInt256Array.sol#12)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in UInt256Array.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (UInt256Array.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/utils/ExtendedSafeCast.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**112, \"SafeCast: value doesn't fit in an uint112\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**96, \"SafeCast: value doesn't fit in an uint96\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**112, \"SafeCast: value doesn't fit in an uint112\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(value < 2**96, \"SafeCast: value doesn't fit in an uint96\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in ExtendedSafeCast.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (ExtendedSafeCast.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/utils/MappedSinglyLinkedList.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(self.count == 0, \"Already init\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAddress != SENTINEL && newAddress != address(0), \"Invalid address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(self.addressMap[newAddress] == address(0), \"Already added\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != SENTINEL && addr != address(0), \"Invalid address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(self.addressMap[prevAddress] == addr, \"Invalid prevAddress\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAddress != SENTINEL && newAddress != address(0), \"Invalid address\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != SENTINEL && addr != address(0), \"Invalid address\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in MappedSinglyLinkedList.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (MappedSinglyLinkedList.sol#5): is has a complex pragma\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function end(Mapping storage) internal pure returns (address) {\n",
                    "message": "Parameter '' of MappedSinglyLinkedList.end (MappedSinglyLinkedList.sol#36) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public constant SENTINEL = address(0x1);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (currentAddress != address(0) && currentAddress != SENTINEL) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/registry/RegistryInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in RegistryInterface.sol:\n\t- pragma solidity>=0.5.0<0.7.0 (RegistryInterface.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/reserve/ReserveInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in ReserveInterface.sol:\n\t- pragma solidity>=0.5.0<0.7.0 (ReserveInterface.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/external/openzeppelin/OpenZeppelinProxyFactoryInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in OpenZeppelinProxyFactoryInterface.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (OpenZeppelinProxyFactoryInterface.sol#3): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "pool-contracts-956b9e9dfd41dacd4040c08b5061354cc11897fc/contracts/external/openzeppelin/ProxyFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(success, \"ProxyFactory/constructor-call-failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(success, \"ProxyFactory/constructor-call-failed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      proxy := create(0, clone, 0x37)\n\n    }\n\n\n\n    emit ProxyCreated(address(proxy));\n\n\n\n    if(_data.length > 0) {\n\n      (bool success,) = proxy.call(_data);\n\n      require(success, \"ProxyFactory/constructor-call-failed\");\n\n    }\n",
                    "message": "ProxyFactory.deployMinimal uses assembly (ProxyFactory.sol#11-28)\n\t- ProxyFactory.sol#14-20\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      proxy := create(0, clone, 0x37)\n\n    }\n\n\n\n    emit ProxyCreated(address(proxy));\n\n\n\n    if(_data.length > 0) {\n\n      (bool success,) = proxy.call(_data);\n\n      require(success, \"ProxyFactory/constructor-call-failed\");\n\n    }\n",
                    "message": "ProxyFactory.deployMinimal (ProxyFactory.sol#11-28) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in ProxyFactory.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (ProxyFactory.sol#3): is has a complex pragma\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n    assembly {\n\n      let clone := mload(0x40)\n\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x14), targetBytes)\n\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      proxy := create(0, clone, 0x37)\n\n    }\n\n\n\n    emit ProxyCreated(address(proxy));\n\n\n\n    if(_data.length > 0) {\n\n      (bool success,) = proxy.call(_data);\n\n      require(success, \"ProxyFactory/constructor-call-failed\");\n\n    }\n",
                    "message": "Low level call in ProxyFactory.deployMinimal (ProxyFactory.sol#11-28):\n\t-(success) = proxy.call(_data) ProxyFactory.sol#25\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n",
                    "message": "Parameter '_logic' of ProxyFactory.deployMinimal (ProxyFactory.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n",
                    "message": "Parameter '_data' of ProxyFactory.deployMinimal (ProxyFactory.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function deployMinimal(address _logic, bytes memory _data) public returns (address proxy) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    }
}