{
    "boomstarter-ico-ec2d28f0c3243b8f782cbd44522b5a9ca0fc22a8/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) public restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.4 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": null
                }
            ]
        }
    },
    "boomstarter-ico-ec2d28f0c3243b8f782cbd44522b5a9ca0fc22a8/contracts/IBoomstarterToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwner(uint ownerIndex) public view returns (address);\n",
                    "message": "IBoomstarterToken.getOwner (IBoomstarterToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public view returns (address[]);\n",
                    "message": "IBoomstarterToken.getOwners (IBoomstarterToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isOwner(address _addr) public view returns (bool);\n",
                    "message": "IBoomstarterToken.isOwner (IBoomstarterToken.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "IBoomstarterToken.totalSupply (IBoomstarterToken.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) public view returns (uint256);\n",
                    "message": "IBoomstarterToken.balanceOf (IBoomstarterToken.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "IBoomstarterToken.transfer (IBoomstarterToken.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "IBoomstarterToken.allowance (IBoomstarterToken.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "IBoomstarterToken.transferFrom (IBoomstarterToken.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "IBoomstarterToken.approve (IBoomstarterToken.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function name() public view returns (string);\n",
                    "message": "IBoomstarterToken.name (IBoomstarterToken.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function symbol() public view returns (string);\n",
                    "message": "IBoomstarterToken.symbol (IBoomstarterToken.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decimals() public view returns (uint8);\n",
                    "message": "IBoomstarterToken.decimals (IBoomstarterToken.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _amount) public returns (bool);\n",
                    "message": "IBoomstarterToken.burn (IBoomstarterToken.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public;\n",
                    "message": "IBoomstarterToken.approveAndCall (IBoomstarterToken.sol#38) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.4.23;\n",
                    "message": "Detected issues with version pragma in IBoomstarterToken.sol:\n\t- pragma solidity0.4.23 (IBoomstarterToken.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public view returns (address[]);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function name() public view returns (string);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function symbol() public view returns (string);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwner(uint ownerIndex) public view returns (address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public view returns (address[]);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isOwner(address _addr) public view returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) public view returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function name() public view returns (string);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function symbol() public view returns (string);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decimals() public view returns (uint8);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _amount) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public;\n",
                    "message": null
                }
            ]
        }
    },
    "boomstarter-ico-ec2d28f0c3243b8f782cbd44522b5a9ca0fc22a8/contracts/oraclize/usingOraclize.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    if(subindex == n.length)\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (byte(cborlen).length > ctr) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        while (byte(elemcborlen).length > ctr - lctr) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (byte(cborlen).length > ctr) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 737,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        while (byte(elemcborlen).length > ctr - lctr) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < arrlen; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < arrlen; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i=0; i< n_random_bytes; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 765,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((_nbytes > 0) && (_nbytes <= 32));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                if (decimals){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 642,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                   if (_b == 0) break;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    else _b--;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 644,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                mint *= 10;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 646,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                mint += uint(bresult[i]) - 48;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            } else if (bresult[i] == 46) decimals = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (v != 27 && v != 28)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (false, 0);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    else _b--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < minLength; i ++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        subindex++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            len++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < arrlen; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (i = 0; i < arrlen; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 707,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < arrlen; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (i = 0; i < arrlen; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 733,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 749,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i=0; i< n_random_bytes; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_20"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": 533,
                    "vulnerability_code": "    function getCodeSize(address _addr) constant internal returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n",
                    "message": "usingOraclize.getCodeSize (usingOraclize.sol#529-533) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": 974,
                    "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n\n        uint minLength = length + toOffset;\n\n\n\n        // Buffer too small\n\n        require(to.length >= minLength); // Should be a better way?\n\n\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n\n        uint i = 32 + fromOffset;\n\n        uint j = 32 + toOffset;\n\n\n\n        while (i < (32 + fromOffset + length)) {\n\n            assembly {\n\n                let tmp := mload(add(from, i))\n\n                mstore(add(to, j), tmp)\n\n            }\n\n            i += 32;\n\n            j += 32;\n\n        }\n\n\n\n        return to;\n",
                    "message": "usingOraclize.copyBytes (usingOraclize.sol#954-974) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 80,
                    "vulnerability_code": "    modifier oraclizeAPI {\n\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n\n            oraclize_setNetwork(networkID_auto);\n\n\n\n        if(address(oraclize) != OAR.getAddress())\n\n            oraclize = OraclizeI(OAR.getAddress());\n\n\n\n        _;\n",
                    "message": "Reentrancy in usingOraclize.oraclizeAPI (usingOraclize.sol#72-80):\n\tExternal calls:\n\t- address(oraclize) != OAR.getAddress() (usingOraclize.sol#76-77)\n\t- oraclize = OraclizeI(OAR.getAddress()) (usingOraclize.sol#77)\n\tState variables written after the call(s):\n\t- oraclize (usingOraclize.sol#77)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": 807,
                    "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10; \n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly { \n\n            mstore(add(delay, 0x20), _delay) \n\n        }\n\n        \n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        \n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        \n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n        \n\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\n\n        return queryId;\n",
                    "message": "Reentrancy in usingOraclize.oraclize_newRandomDSQuery (usingOraclize.sol#764-807):\n\tExternal calls:\n\t- sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash() (usingOraclize.sol#772)\n\t- queryId = oraclize_query(random,args,_customGasLimit) (usingOraclize.sol#788)\n\tExternal calls sending eth:\n\t- queryId = oraclize_query(random,args,_customGasLimit) (usingOraclize.sol#788)\n\tState variables written after the call(s):\n\t- oraclize_network_name (usingOraclize.sol#788)\n\t- oraclize_randomDS_args (usingOraclize.sol#805)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": 533,
                    "vulnerability_code": "    function getCodeSize(address _addr) constant internal returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n",
                    "message": "usingOraclize.getCodeSize uses assembly (usingOraclize.sol#529-533)\n\t- usingOraclize.sol#530-533\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": 807,
                    "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10; \n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly { \n\n            mstore(add(delay, 0x20), _delay) \n\n        }\n\n        \n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        \n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        \n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n        \n\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\n\n        return queryId;\n",
                    "message": "usingOraclize.oraclize_newRandomDSQuery uses assembly (usingOraclize.sol#764-807)\n\t- usingOraclize.sol#773-779\n\t- usingOraclize.sol#780-784\n\t- usingOraclize.sol#792-805\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": 842,
                    "vulnerability_code": "    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n\n        bool sigok;\n\n        address signer;\n\n\n\n        bytes32 sigr;\n\n        bytes32 sigs;\n\n\n\n        bytes memory sigr_ = new bytes(32);\n\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n\n        bytes memory sigs_ = new bytes(32);\n\n        offset += 32 + 2;\n\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n\n\n        assembly {\n\n            sigr := mload(add(sigr_, 32))\n\n            sigs := mload(add(sigs_, 32))\n\n        }\n\n\n\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n\n        if (address(keccak256(pubkey)) == signer) return true;\n\n        else {\n\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n\n            return (address(keccak256(pubkey)) == signer);\n\n        }\n",
                    "message": "usingOraclize.verifySig uses assembly (usingOraclize.sol#816-842)\n\t- usingOraclize.sol#830-836\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": 974,
                    "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n\n        uint minLength = length + toOffset;\n\n\n\n        // Buffer too small\n\n        require(to.length >= minLength); // Should be a better way?\n\n\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n\n        uint i = 32 + fromOffset;\n\n        uint j = 32 + toOffset;\n\n\n\n        while (i < (32 + fromOffset + length)) {\n\n            assembly {\n\n                let tmp := mload(add(from, i))\n\n                mstore(add(to, j), tmp)\n\n            }\n\n            i += 32;\n\n            j += 32;\n\n        }\n\n\n\n        return to;\n",
                    "message": "usingOraclize.copyBytes uses assembly (usingOraclize.sol#954-974)\n\t- usingOraclize.sol#965-969\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 978,
                    "vulnerability_to_line": 1003,
                    "vulnerability_code": "    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n\n        // We do our own memory management here. Solidity uses memory offset\n\n        // 0x40 to store the current end of memory. We write past it (as\n\n        // writes are memory extensions), but don't update the offset so\n\n        // Solidity will reuse it. The memory used here is only needed for\n\n        // this context.\n\n\n\n        // FIXME: inline assembly can't access return values\n\n        bool ret;\n\n        address addr;\n\n\n\n        assembly {\n\n            let size := mload(0x40)\n\n            mstore(size, hash)\n\n            mstore(add(size, 32), v)\n\n            mstore(add(size, 64), r)\n\n            mstore(add(size, 96), s)\n\n\n\n            // NOTE: we can reuse the request memory because we deal with\n\n            //       the return code\n\n            ret := call(3000, 1, 0, size, 128, size, 32)\n\n            addr := mload(size)\n\n        }\n\n\n\n        return (ret, addr);\n",
                    "message": "usingOraclize.safer_ecrecover uses assembly (usingOraclize.sol#978-1003)\n\t- usingOraclize.sol#989-1002\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": 1044,
                    "vulnerability_code": "    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        if (sig.length != 65)\n\n          return (false, 0);\n\n\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        assembly {\n\n            r := mload(add(sig, 32))\n\n            s := mload(add(sig, 64))\n\n\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n\n            // 'mload' will pad with zeroes if we overread.\n\n            // There is no 'mload8' to do this, but that would be nicer.\n\n            v := byte(0, mload(add(sig, 96)))\n\n\n\n            // Alternative solution:\n\n            // 'byte' is not working due to the Solidity parser, so lets\n\n            // use the second best option, 'and'\n\n            // v := and(mload(add(sig, 65)), 255)\n\n        }\n\n\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n\n        // to match the YP range of [27, 28]\n\n        //\n\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n\n        if (v < 27)\n\n          v += 27;\n\n\n\n        if (v != 27 && v != 28)\n\n            return (false, 0);\n\n\n\n        return safer_ecrecover(hash, v, r, s);\n",
                    "message": "usingOraclize.ecrecovery uses assembly (usingOraclize.sol#1006-1044)\n\t- usingOraclize.sol#1017-1037\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public cbAddress;\n",
                    "message": "OraclizeI.cbAddress should be constant (usingOraclize.sol#37)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
                    "message": "OraclizeI.query2 (usingOraclize.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n",
                    "message": "OraclizeI.queryN (usingOraclize.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(string _datasource) public returns (uint _dsprice);\n",
                    "message": "OraclizeI.getPrice (usingOraclize.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n",
                    "message": "OraclizeI.getPrice (usingOraclize.sol#45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getAddress() public returns (address _addr);\n",
                    "message": "OraclizeAddrResolverI.getAddress (usingOraclize.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function __callback(bytes32 myid, string result) public {\n\n        __callback(myid, result, new bytes(0));\n",
                    "message": "usingOraclize.__callback (usingOraclize.sol#126-128) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in usingOraclize.sol:\n\t- pragma solidity^0.4.18 (usingOraclize.sol#34): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) external payable returns (bytes32 _id);\n",
                    "message": "Function 'OraclizeI.query_withGasLimit' (usingOraclize.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) external payable returns (bytes32 _id);\n",
                    "message": "Function 'OraclizeI.query2_withGasLimit' (usingOraclize.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) external payable returns (bytes32 _id);\n",
                    "message": "Function 'OraclizeI.queryN_withGasLimit' (usingOraclize.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n",
                    "message": "Function 'OraclizeI.randomDS_getSessionPubKeyHash' (usingOraclize.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 1046,
                    "vulnerability_code": "contract usingOraclize {\n\n    uint constant day = 60*60*24;\n\n    uint constant week = 60*60*24*7;\n\n    uint constant month = 60*60*24*30;\n\n    byte constant proofType_NONE = 0x00;\n\n    byte constant proofType_TLSNotary = 0x10;\n\n    byte constant proofType_Android = 0x20;\n\n    byte constant proofType_Ledger = 0x30;\n\n    byte constant proofType_Native = 0xF0;\n\n    byte constant proofStorage_IPFS = 0x01;\n\n    uint8 constant networkID_auto = 0;\n\n    uint8 constant networkID_mainnet = 1;\n\n    uint8 constant networkID_testnet = 2;\n\n    uint8 constant networkID_morden = 2;\n\n    uint8 constant networkID_consensys = 161;\n\n\n\n    OraclizeAddrResolverI OAR;\n\n\n\n    OraclizeI oraclize;\n\n    modifier oraclizeAPI {\n\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n\n            oraclize_setNetwork(networkID_auto);\n\n\n\n        if(address(oraclize) != OAR.getAddress())\n\n            oraclize = OraclizeI(OAR.getAddress());\n\n\n\n        _;\n\n    }\n\n    modifier coupon(string code){\n\n        oraclize = OraclizeI(OAR.getAddress());\n\n        _;\n\n    }\n\n\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n\n      return oraclize_setNetwork();\n\n      networkID; // silence the warning and remain backwards compatible\n\n    }\n\n    function oraclize_setNetwork() internal returns(bool){\n\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n\n            oraclize_setNetworkName(\"eth_mainnet\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n\n            oraclize_setNetworkName(\"eth_ropsten3\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n\n            oraclize_setNetworkName(\"eth_kovan\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n\n            oraclize_setNetworkName(\"eth_rinkeby\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n\n            return true;\n\n        }\n\n        return false;\n\n    }\n\n\n\n    function __callback(bytes32 myid, string result) public {\n\n        __callback(myid, result, new bytes(0));\n\n    }\n\n    function __callback(bytes32 myid, string result, bytes proof) public {\n\n      return;\n\n      myid; result; proof; // Silence compiler warnings\n\n    }\n\n\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource);\n\n    }\n\n\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(0, datasource, arg);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n\n    }\n\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n\n    }\n\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n\n    }\n\n\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n\n        return oraclize.cbAddress();\n\n    }\n\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n\n        return oraclize.setProofType(proofP);\n\n    }\n\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n\n        return oraclize.setCustomGasPrice(gasPrice);\n\n    }\n\n\n\n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n\n        return oraclize.randomDS_getSessionPubKeyHash();\n\n    }\n\n\n\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\n\n        assembly {\n\n            _size := extcodesize(_addr)\n\n        }\n\n    }\n\n\n\n    function parseAddr(string _a) internal pure returns (address){\n\n        bytes memory tmp = bytes(_a);\n\n        uint160 iaddr = 0;\n\n        uint160 b1;\n\n        uint160 b2;\n\n        for (uint i=2; i<2+2*20; i+=2){\n\n            iaddr *= 256;\n\n            b1 = uint160(tmp[i]);\n\n            b2 = uint160(tmp[i+1]);\n\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n\n            iaddr += (b1*16+b2);\n\n        }\n\n        return address(iaddr);\n\n    }\n\n\n\n    function strCompare(string _a, string _b) internal pure returns (int) {\n\n        bytes memory a = bytes(_a);\n\n        bytes memory b = bytes(_b);\n\n        uint minLength = a.length;\n\n        if (b.length < minLength) minLength = b.length;\n\n        for (uint i = 0; i < minLength; i ++)\n\n            if (a[i] < b[i])\n\n                return -1;\n\n            else if (a[i] > b[i])\n\n                return 1;\n\n        if (a.length < b.length)\n\n            return -1;\n\n        else if (a.length > b.length)\n\n            return 1;\n\n        else\n\n            return 0;\n\n    }\n\n\n\n    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n\n        bytes memory h = bytes(_haystack);\n\n        bytes memory n = bytes(_needle);\n\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n\n            return -1;\n\n        else if(h.length > (2**128 -1))\n\n            return -1;\n\n        else\n\n        {\n\n            uint subindex = 0;\n\n            for (uint i = 0; i < h.length; i ++)\n\n            {\n\n                if (h[i] == n[0])\n\n                {\n\n                    subindex = 1;\n\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n\n                    {\n\n                        subindex++;\n\n                    }\n\n                    if(subindex == n.length)\n\n                        return int(i);\n\n                }\n\n            }\n\n            return -1;\n\n        }\n\n    }\n\n\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n\n        bytes memory _ba = bytes(_a);\n\n        bytes memory _bb = bytes(_b);\n\n        bytes memory _bc = bytes(_c);\n\n        bytes memory _bd = bytes(_d);\n\n        bytes memory _be = bytes(_e);\n\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n\n        bytes memory babcde = bytes(abcde);\n\n        uint k = 0;\n\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n\n        return string(babcde);\n\n    }\n\n\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n\n        return strConcat(_a, _b, _c, _d, \"\");\n\n    }\n\n\n\n    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n\n        return strConcat(_a, _b, _c, \"\", \"\");\n\n    }\n\n\n\n    function strConcat(string _a, string _b) internal pure returns (string) {\n\n        return strConcat(_a, _b, \"\", \"\", \"\");\n\n    }\n\n\n\n    // parseInt\n\n    function parseInt(string _a) internal pure returns (uint) {\n\n        return parseInt(_a, 0);\n\n    }\n\n\n\n    // parseInt(parseFloat*10^_b)\n\n    function parseInt(string _a, uint _b) internal pure returns (uint) {\n\n        bytes memory bresult = bytes(_a);\n\n        uint mint = 0;\n\n        bool decimals = false;\n\n        for (uint i=0; i<bresult.length; i++){\n\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n\n                if (decimals){\n\n                   if (_b == 0) break;\n\n                    else _b--;\n\n                }\n\n                mint *= 10;\n\n                mint += uint(bresult[i]) - 48;\n\n            } else if (bresult[i] == 46) decimals = true;\n\n        }\n\n        if (_b > 0) mint *= 10**_b;\n\n        return mint;\n\n    }\n\n\n\n    function uint2str(uint i) internal pure returns (string){\n\n        if (i == 0) return \"0\";\n\n        uint j = i;\n\n        uint len;\n\n        while (j != 0){\n\n            len++;\n\n            j /= 10;\n\n        }\n\n        bytes memory bstr = new bytes(len);\n\n        uint k = len - 1;\n\n        while (i != 0){\n\n            bstr[k--] = byte(48 + i % 10);\n\n            i /= 10;\n\n        }\n\n        return string(bstr);\n\n    }\n\n\n\n    function stra2cbor(string[] arr) internal pure returns (bytes) {\n\n            uint arrlen = arr.length;\n\n\n\n            // get correct cbor output length\n\n            uint outputlen = 0;\n\n            bytes[] memory elemArray = new bytes[](arrlen);\n\n            for (uint i = 0; i < arrlen; i++) {\n\n                elemArray[i] = (bytes(arr[i]));\n\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n\n            }\n\n            uint ctr = 0;\n\n            uint cborlen = arrlen + 0x80;\n\n            outputlen += byte(cborlen).length;\n\n            bytes memory res = new bytes(outputlen);\n\n\n\n            while (byte(cborlen).length > ctr) {\n\n                res[ctr] = byte(cborlen)[ctr];\n\n                ctr++;\n\n            }\n\n            for (i = 0; i < arrlen; i++) {\n\n                res[ctr] = 0x5F;\n\n                ctr++;\n\n                for (uint x = 0; x < elemArray[i].length; x++) {\n\n                    // if there's a bug with larger strings, this may be the culprit\n\n                    if (x % 23 == 0) {\n\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n\n                        elemcborlen += 0x40;\n\n                        uint lctr = ctr;\n\n                        while (byte(elemcborlen).length > ctr - lctr) {\n\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n\n                            ctr++;\n\n                        }\n\n                    }\n\n                    res[ctr] = elemArray[i][x];\n\n                    ctr++;\n\n                }\n\n                res[ctr] = 0xFF;\n\n                ctr++;\n\n            }\n\n            return res;\n\n        }\n\n\n\n    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n\n            uint arrlen = arr.length;\n\n\n\n            // get correct cbor output length\n\n            uint outputlen = 0;\n\n            bytes[] memory elemArray = new bytes[](arrlen);\n\n            for (uint i = 0; i < arrlen; i++) {\n\n                elemArray[i] = (bytes(arr[i]));\n\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n\n            }\n\n            uint ctr = 0;\n\n            uint cborlen = arrlen + 0x80;\n\n            outputlen += byte(cborlen).length;\n\n            bytes memory res = new bytes(outputlen);\n\n\n\n            while (byte(cborlen).length > ctr) {\n\n                res[ctr] = byte(cborlen)[ctr];\n\n                ctr++;\n\n            }\n\n            for (i = 0; i < arrlen; i++) {\n\n                res[ctr] = 0x5F;\n\n                ctr++;\n\n                for (uint x = 0; x < elemArray[i].length; x++) {\n\n                    // if there's a bug with larger strings, this may be the culprit\n\n                    if (x % 23 == 0) {\n\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n\n                        elemcborlen += 0x40;\n\n                        uint lctr = ctr;\n\n                        while (byte(elemcborlen).length > ctr - lctr) {\n\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n\n                            ctr++;\n\n                        }\n\n                    }\n\n                    res[ctr] = elemArray[i][x];\n\n                    ctr++;\n\n                }\n\n                res[ctr] = 0xFF;\n\n                ctr++;\n\n            }\n\n            return res;\n\n        }\n\n\n\n\n\n    string oraclize_network_name;\n\n    function oraclize_setNetworkName(string _network_name) internal {\n\n        oraclize_network_name = _network_name;\n\n    }\n\n\n\n    function oraclize_getNetworkName() internal view returns (string) {\n\n        return oraclize_network_name;\n\n    }\n\n\n\n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10; \n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly { \n\n            mstore(add(delay, 0x20), _delay) \n\n        }\n\n        \n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        \n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        \n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n        \n\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\n\n        return queryId;\n\n    }\n\n    \n\n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n\n        oraclize_randomDS_args[queryId] = commitment;\n\n    }\n\n\n\n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n\n        bool sigok;\n\n        address signer;\n\n\n\n        bytes32 sigr;\n\n        bytes32 sigs;\n\n\n\n        bytes memory sigr_ = new bytes(32);\n\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n\n        bytes memory sigs_ = new bytes(32);\n\n        offset += 32 + 2;\n\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n\n\n        assembly {\n\n            sigr := mload(add(sigr_, 32))\n\n            sigs := mload(add(sigs_, 32))\n\n        }\n\n\n\n\n\n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n\n        if (address(keccak256(pubkey)) == signer) return true;\n\n        else {\n\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n\n            return (address(keccak256(pubkey)) == signer);\n\n        }\n\n    }\n\n\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n\n        bool sigok;\n\n\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n\n\n        bytes memory appkey1_pubkey = new bytes(64);\n\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n\n\n        bytes memory tosign2 = new bytes(1+65+32);\n\n        tosign2[0] = byte(1); //role\n\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n\n\n        if (sigok == false) return false;\n\n\n\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n\n\n        bytes memory tosign3 = new bytes(1+65);\n\n        tosign3[0] = 0xFE;\n\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n\n\n        return sigok;\n\n    }\n\n\n\n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        require(proofVerified);\n\n\n\n        _;\n\n    }\n\n\n\n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        if (proofVerified == false) return 2;\n\n\n\n        return 0;\n\n    }\n\n\n\n    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n\n        bool match_ = true;\n\n        \n\n        require(prefix.length == n_random_bytes);\n\n\n\n        for (uint256 i=0; i< n_random_bytes; i++) {\n\n            if (content[i] != prefix[i]) match_ = false;\n\n        }\n\n\n\n        return match_;\n\n    }\n\n\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n\n        bytes memory keyhash = new bytes(32);\n\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\n\n\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n\n        // This is to verify that the computed args match with the ones specified in the query.\n\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n\n\n        bytes memory sessionPubkey = new bytes(64);\n\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n\n            delete oraclize_randomDS_args[queryId];\n\n        } else return false;\n\n\n\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n\n        bytes memory tosign1 = new bytes(32+8+1+32);\n\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n\n        }\n\n\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n\n    }\n\n\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n\n        uint minLength = length + toOffset;\n\n\n\n        // Buffer too small\n\n        require(to.length >= minLength); // Should be a better way?\n\n\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n\n        uint i = 32 + fromOffset;\n\n        uint j = 32 + toOffset;\n\n\n\n        while (i < (32 + fromOffset + length)) {\n\n            assembly {\n\n                let tmp := mload(add(from, i))\n\n                mstore(add(to, j), tmp)\n\n            }\n\n            i += 32;\n\n            j += 32;\n\n        }\n\n\n\n        return to;\n\n    }\n\n\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n\n        // We do our own memory management here. Solidity uses memory offset\n\n        // 0x40 to store the current end of memory. We write past it (as\n\n        // writes are memory extensions), but don't update the offset so\n\n        // Solidity will reuse it. The memory used here is only needed for\n\n        // this context.\n\n\n\n        // FIXME: inline assembly can't access return values\n\n        bool ret;\n\n        address addr;\n\n\n\n        assembly {\n\n            let size := mload(0x40)\n\n            mstore(size, hash)\n\n            mstore(add(size, 32), v)\n\n            mstore(add(size, 64), r)\n\n            mstore(add(size, 96), s)\n\n\n\n            // NOTE: we can reuse the request memory because we deal with\n\n            //       the return code\n\n            ret := call(3000, 1, 0, size, 128, size, 32)\n\n            addr := mload(size)\n\n        }\n\n\n\n        return (ret, addr);\n\n    }\n\n\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        if (sig.length != 65)\n\n          return (false, 0);\n\n\n\n        // The signature format is a compact form of:\n\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n\n        // Compact means, uint8 is not padded to 32 bytes.\n\n        assembly {\n\n            r := mload(add(sig, 32))\n\n            s := mload(add(sig, 64))\n\n\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n\n            // 'mload' will pad with zeroes if we overread.\n\n            // There is no 'mload8' to do this, but that would be nicer.\n\n            v := byte(0, mload(add(sig, 96)))\n\n\n\n            // Alternative solution:\n\n            // 'byte' is not working due to the Solidity parser, so lets\n\n            // use the second best option, 'and'\n\n            // v := and(mload(add(sig, 65)), 255)\n\n        }\n\n\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n\n        // to match the YP range of [27, 28]\n\n        //\n\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n\n        if (v < 27)\n\n          v += 27;\n\n\n\n        if (v != 27 && v != 28)\n\n            return (false, 0);\n\n\n\n        return safer_ecrecover(hash, v, r, s);\n\n    }\n\n\n",
                    "message": "Contract 'usingOraclize' (usingOraclize.sol#53-1046) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n\n      return oraclize_setNetwork();\n\n      networkID; // silence the warning and remain backwards compatible\n",
                    "message": "Function 'usingOraclize.oraclize_setNetwork' (usingOraclize.sol#86-89) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 124,
                    "vulnerability_code": "    function oraclize_setNetwork() internal returns(bool){\n\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n\n            oraclize_setNetworkName(\"eth_mainnet\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n\n            oraclize_setNetworkName(\"eth_ropsten3\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n\n            oraclize_setNetworkName(\"eth_kovan\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n\n            oraclize_setNetworkName(\"eth_rinkeby\");\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n\n            return true;\n\n        }\n\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n\n            return true;\n\n        }\n\n        return false;\n",
                    "message": "Function 'usingOraclize.oraclize_setNetwork' (usingOraclize.sol#90-124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function __callback(bytes32 myid, string result) public {\n\n        __callback(myid, result, new bytes(0));\n",
                    "message": "Function 'usingOraclize.__callback' (usingOraclize.sol#126-128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 132,
                    "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n\n      return;\n\n      myid; result; proof; // Silence compiler warnings\n",
                    "message": "Function 'usingOraclize.__callback' (usingOraclize.sol#129-132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 136,
                    "vulnerability_code": "    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource);\n",
                    "message": "Function 'usingOraclize.oraclize_getPrice' (usingOraclize.sol#134-136) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 140,
                    "vulnerability_code": "    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n\n        return oraclize.getPrice(datasource, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_getPrice' (usingOraclize.sol#138-140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(0, datasource, arg);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#142-146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#147-151) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#152-156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#157-161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#162-166) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#167-171) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#172-176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#177-181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 187,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#182-187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#188-193) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 199,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#194-199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 205,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = stra2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#200-205) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#206-210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#211-215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 220,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#216-220) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": 225,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#221-225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#227-232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#233-238) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 244,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#239-244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#245-250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#251-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#258-264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#265-271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#272-278) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": 287,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#280-287) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 295,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#288-295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#296-303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#304-311) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#312-320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 329,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#321-329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#330-338) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        string[] memory dynargs = new string[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#339-347) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(0, datasource, args);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#348-353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource);\n\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#354-359) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#360-365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n\n        uint price = oraclize.getPrice(datasource, gaslimit);\n\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n\n        bytes memory args = ba2cbor(argN);\n\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#366-371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": 376,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#372-376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": 381,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#377-381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": 386,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#382-386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": 391,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](1);\n\n        dynargs[0] = args[0];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#387-391) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": 398,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#393-398) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": 404,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#399-404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 410,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#405-410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": 416,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](2);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#411-416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": 423,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#417-423) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 430,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#424-430) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#431-437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 444,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](3);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#438-444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": 453,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#446-453) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": 461,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#454-461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": 469,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#462-469) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](4);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#470-477) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 486,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#478-486) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": 495,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#487-495) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": 504,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#496-504) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": 513,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n\n        bytes[] memory dynargs = new bytes[](5);\n\n        dynargs[0] = args[0];\n\n        dynargs[1] = args[1];\n\n        dynargs[2] = args[2];\n\n        dynargs[3] = args[3];\n\n        dynargs[4] = args[4];\n\n        return oraclize_query(datasource, dynargs, gaslimit);\n",
                    "message": "Function 'usingOraclize.oraclize_query' (usingOraclize.sol#505-513) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": 517,
                    "vulnerability_code": "    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n\n        return oraclize.cbAddress();\n",
                    "message": "Function 'usingOraclize.oraclize_cbAddress' (usingOraclize.sol#515-517) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 520,
                    "vulnerability_code": "    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n\n        return oraclize.setProofType(proofP);\n",
                    "message": "Function 'usingOraclize.oraclize_setProof' (usingOraclize.sol#518-520) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 523,
                    "vulnerability_code": "    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n\n        return oraclize.setCustomGasPrice(gasPrice);\n",
                    "message": "Function 'usingOraclize.oraclize_setCustomGasPrice' (usingOraclize.sol#521-523) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n\n        return oraclize.randomDS_getSessionPubKeyHash();\n",
                    "message": "Function 'usingOraclize.oraclize_randomDS_getSessionPubKeyHash' (usingOraclize.sol#525-527) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseAddr(string _a) internal pure returns (address){\n",
                    "message": "Parameter '_a' of usingOraclize.parseAddr (usingOraclize.sol#535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
                    "message": "Parameter '_a' of usingOraclize.strCompare (usingOraclize.sol#555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
                    "message": "Parameter '_b' of usingOraclize.strCompare (usingOraclize.sol#555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
                    "message": "Parameter '_haystack' of usingOraclize.indexOf (usingOraclize.sol#573) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
                    "message": "Parameter '_needle' of usingOraclize.indexOf (usingOraclize.sol#573) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": "Parameter '_a' of usingOraclize.strConcat (usingOraclize.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": "Parameter '_b' of usingOraclize.strConcat (usingOraclize.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": "Parameter '_c' of usingOraclize.strConcat (usingOraclize.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": "Parameter '_d' of usingOraclize.strConcat (usingOraclize.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": "Parameter '_e' of usingOraclize.strConcat (usingOraclize.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": "Parameter '_a' of usingOraclize.strConcat (usingOraclize.sol#617) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": "Parameter '_b' of usingOraclize.strConcat (usingOraclize.sol#617) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": "Parameter '_c' of usingOraclize.strConcat (usingOraclize.sol#617) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": "Parameter '_d' of usingOraclize.strConcat (usingOraclize.sol#617) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
                    "message": "Parameter '_a' of usingOraclize.strConcat (usingOraclize.sol#621) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
                    "message": "Parameter '_b' of usingOraclize.strConcat (usingOraclize.sol#621) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
                    "message": "Parameter '_c' of usingOraclize.strConcat (usingOraclize.sol#621) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
                    "message": "Parameter '_a' of usingOraclize.strConcat (usingOraclize.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
                    "message": "Parameter '_b' of usingOraclize.strConcat (usingOraclize.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 630,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseInt(string _a) internal pure returns (uint) {\n",
                    "message": "Parameter '_a' of usingOraclize.parseInt (usingOraclize.sol#630) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
                    "message": "Parameter '_a' of usingOraclize.parseInt (usingOraclize.sol#635) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
                    "message": "Parameter '_b' of usingOraclize.parseInt (usingOraclize.sol#635) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 756,
                    "vulnerability_to_line": 758,
                    "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n\n        oraclize_network_name = _network_name;\n",
                    "message": "Function 'usingOraclize.oraclize_setNetworkName' (usingOraclize.sol#756-758) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 756,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n",
                    "message": "Parameter '_network_name' of usingOraclize.oraclize_setNetworkName (usingOraclize.sol#756) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 760,
                    "vulnerability_to_line": 762,
                    "vulnerability_code": "    function oraclize_getNetworkName() internal view returns (string) {\n\n        return oraclize_network_name;\n",
                    "message": "Function 'usingOraclize.oraclize_getNetworkName' (usingOraclize.sol#760-762) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": 807,
                    "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n\n        require((_nbytes > 0) && (_nbytes <= 32));\n\n        // Convert from seconds to ledger timer ticks\n\n        _delay *= 10; \n\n        bytes memory nbytes = new bytes(1);\n\n        nbytes[0] = byte(_nbytes);\n\n        bytes memory unonce = new bytes(32);\n\n        bytes memory sessionKeyHash = new bytes(32);\n\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n\n        assembly {\n\n            mstore(unonce, 0x20)\n\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n\n            mstore(sessionKeyHash, 0x20)\n\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n\n        }\n\n        bytes memory delay = new bytes(32);\n\n        assembly { \n\n            mstore(add(delay, 0x20), _delay) \n\n        }\n\n        \n\n        bytes memory delay_bytes8 = new bytes(8);\n\n        copyBytes(delay, 24, 8, delay_bytes8, 0);\n\n\n\n        bytes[4] memory args = [unonce, nbytes, sessionKeyHash, delay];\n\n        bytes32 queryId = oraclize_query(\"random\", args, _customGasLimit);\n\n        \n\n        bytes memory delay_bytes8_left = new bytes(8);\n\n        \n\n        assembly {\n\n            let x := mload(add(delay_bytes8, 0x20))\n\n            mstore8(add(delay_bytes8_left, 0x27), div(x, 0x100000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x26), div(x, 0x1000000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x25), div(x, 0x10000000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x24), div(x, 0x100000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x23), div(x, 0x1000000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x22), div(x, 0x10000000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x21), div(x, 0x100000000000000000000000000000000000000000000000000))\n\n            mstore8(add(delay_bytes8_left, 0x20), div(x, 0x1000000000000000000000000000000000000000000000000))\n\n\n\n        }\n\n        \n\n        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\n\n        return queryId;\n",
                    "message": "Function 'usingOraclize.oraclize_newRandomDSQuery' (usingOraclize.sol#764-807) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n",
                    "message": "Parameter '_delay' of usingOraclize.oraclize_newRandomDSQuery (usingOraclize.sol#764) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n",
                    "message": "Parameter '_nbytes' of usingOraclize.oraclize_newRandomDSQuery (usingOraclize.sol#764) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 764,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n",
                    "message": "Parameter '_customGasLimit' of usingOraclize.oraclize_newRandomDSQuery (usingOraclize.sol#764) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": 811,
                    "vulnerability_code": "    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n\n        oraclize_randomDS_args[queryId] = commitment;\n",
                    "message": "Function 'usingOraclize.oraclize_randomDS_setCommitment' (usingOraclize.sol#809-811) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": 877,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n\n        bool sigok;\n\n\n\n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n\n\n\n        bytes memory appkey1_pubkey = new bytes(64);\n\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n\n\n\n        bytes memory tosign2 = new bytes(1+65+32);\n\n        tosign2[0] = byte(1); //role\n\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n\n\n\n        if (sigok == false) return false;\n\n\n\n\n\n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n\n\n\n        bytes memory tosign3 = new bytes(1+65);\n\n        tosign3[0] = 0xFE;\n\n        copyBytes(proof, 3, 65, tosign3, 1);\n\n\n\n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n\n\n\n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n\n\n\n        return sigok;\n",
                    "message": "Function 'usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity' (usingOraclize.sol#844-877) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": 897,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        if (proofVerified == false) return 2;\n\n\n\n        return 0;\n",
                    "message": "Function 'usingOraclize.oraclize_randomDS_proofVerify__returnCode' (usingOraclize.sol#889-897) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
                    "message": "Parameter '_queryId' of usingOraclize.oraclize_randomDS_proofVerify__returnCode (usingOraclize.sol#889) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
                    "message": "Parameter '_result' of usingOraclize.oraclize_randomDS_proofVerify__returnCode (usingOraclize.sol#889) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
                    "message": "Parameter '_proof' of usingOraclize.oraclize_randomDS_proofVerify__returnCode (usingOraclize.sol#889) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n",
                    "message": "Parameter 'n_random_bytes' of usingOraclize.matchBytes32Prefix (usingOraclize.sol#899) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": 951,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n\n\n\n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n\n        bytes memory keyhash = new bytes(32);\n\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\n\n\n\n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n\n\n\n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n\n        if (!matchBytes32Prefix(sha256(sig1), result, uint(proof[ledgerProofLength+32+8]))) return false;\n\n\n\n        // Step 4: commitment match verification, keccak256(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n\n        // This is to verify that the computed args match with the ones specified in the query.\n\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n\n\n\n        bytes memory sessionPubkey = new bytes(64);\n\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n\n\n\n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n\n            delete oraclize_randomDS_args[queryId];\n\n        } else return false;\n\n\n\n\n\n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n\n        bytes memory tosign1 = new bytes(32+8+1+32);\n\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n\n        if (!verifySig(sha256(tosign1), sig1, sessionPubkey)) return false;\n\n\n\n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n\n        }\n\n\n\n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n",
                    "message": "Function 'usingOraclize.oraclize_randomDS_proofVerify__main' (usingOraclize.sol#911-951) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
                    "message": "Parameter 'context_name' of usingOraclize.oraclize_randomDS_proofVerify__main (usingOraclize.sol#911) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 978,
                    "vulnerability_to_line": 1003,
                    "vulnerability_code": "    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n\n        // We do our own memory management here. Solidity uses memory offset\n\n        // 0x40 to store the current end of memory. We write past it (as\n\n        // writes are memory extensions), but don't update the offset so\n\n        // Solidity will reuse it. The memory used here is only needed for\n\n        // this context.\n\n\n\n        // FIXME: inline assembly can't access return values\n\n        bool ret;\n\n        address addr;\n\n\n\n        assembly {\n\n            let size := mload(0x40)\n\n            mstore(size, hash)\n\n            mstore(add(size, 32), v)\n\n            mstore(add(size, 64), r)\n\n            mstore(add(size, 96), s)\n\n\n\n            // NOTE: we can reuse the request memory because we deal with\n\n            //       the return code\n\n            ret := call(3000, 1, 0, size, 128, size, 32)\n\n            addr := mload(size)\n\n        }\n\n\n\n        return (ret, addr);\n",
                    "message": "Function 'usingOraclize.safer_ecrecover' (usingOraclize.sol#978-1003) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant day = 60*60*24;\n",
                    "message": "Constant 'usingOraclize.day' (usingOraclize.sol#54) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant week = 60*60*24*7;\n",
                    "message": "Constant 'usingOraclize.week' (usingOraclize.sol#55) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant month = 60*60*24*30;\n",
                    "message": "Constant 'usingOraclize.month' (usingOraclize.sol#56) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_NONE = 0x00;\n",
                    "message": "Constant 'usingOraclize.proofType_NONE' (usingOraclize.sol#57) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_TLSNotary = 0x10;\n",
                    "message": "Constant 'usingOraclize.proofType_TLSNotary' (usingOraclize.sol#58) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Android = 0x20;\n",
                    "message": "Constant 'usingOraclize.proofType_Android' (usingOraclize.sol#59) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
                    "message": "Constant 'usingOraclize.proofType_Ledger' (usingOraclize.sol#60) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Native = 0xF0;\n",
                    "message": "Constant 'usingOraclize.proofType_Native' (usingOraclize.sol#61) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
                    "message": "Constant 'usingOraclize.proofStorage_IPFS' (usingOraclize.sol#62) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_auto = 0;\n",
                    "message": "Constant 'usingOraclize.networkID_auto' (usingOraclize.sol#63) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_mainnet = 1;\n",
                    "message": "Constant 'usingOraclize.networkID_mainnet' (usingOraclize.sol#64) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_testnet = 2;\n",
                    "message": "Constant 'usingOraclize.networkID_testnet' (usingOraclize.sol#65) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_morden = 2;\n",
                    "message": "Constant 'usingOraclize.networkID_morden' (usingOraclize.sol#66) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_consensys = 161;\n",
                    "message": "Constant 'usingOraclize.networkID_consensys' (usingOraclize.sol#67) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    OraclizeAddrResolverI OAR;\n",
                    "message": "Variable 'usingOraclize.OAR' (usingOraclize.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string oraclize_network_name;\n",
                    "message": "Variable 'usingOraclize.oraclize_network_name' (usingOraclize.sol#755) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n",
                    "message": "Variable 'usingOraclize.oraclize_randomDS_args' (usingOraclize.sol#813) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n",
                    "message": "Variable 'usingOraclize.oraclize_randomDS_sessionKeysHashVerified' (usingOraclize.sol#814) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": 887,
                    "vulnerability_code": "    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n\n        require((_proof[0] == \"L\") && (_proof[1] == \"P\") && (_proof[2] == 1));\n\n\n\n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n\n        require(proofVerified);\n\n\n\n        _;\n",
                    "message": "Modifier 'usingOraclize.oraclize_randomDS_proofVerify' (usingOraclize.sol#879-887) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant day = 60*60*24;\n",
                    "message": "usingOraclize.day (usingOraclize.sol#54) is never used in usingOraclize\nusingOraclize.week (usingOraclize.sol#55) is never used in usingOraclize\nusingOraclize.month (usingOraclize.sol#56) is never used in usingOraclize\nusingOraclize.proofType_NONE (usingOraclize.sol#57) is never used in usingOraclize\nusingOraclize.proofType_TLSNotary (usingOraclize.sol#58) is never used in usingOraclize\nusingOraclize.proofType_Android (usingOraclize.sol#59) is never used in usingOraclize\nusingOraclize.proofType_Ledger (usingOraclize.sol#60) is never used in usingOraclize\nusingOraclize.proofType_Native (usingOraclize.sol#61) is never used in usingOraclize\nusingOraclize.proofStorage_IPFS (usingOraclize.sol#62) is never used in usingOraclize\nusingOraclize.networkID_mainnet (usingOraclize.sol#64) is never used in usingOraclize\nusingOraclize.networkID_testnet (usingOraclize.sol#65) is never used in usingOraclize\nusingOraclize.networkID_morden (usingOraclize.sol#66) is never used in usingOraclize\nusingOraclize.networkID_consensys (usingOraclize.sol#67) is never used in usingOraclize\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_NONE = 0x00;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_TLSNotary = 0x10;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Android = 0x20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Native = 0xF0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint cborlen = arrlen + 0x80;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                res[ctr] = 0x5F;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        elemcborlen += 0x40;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                res[ctr] = 0xFF;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint cborlen = arrlen + 0x80;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                res[ctr] = 0x5F;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        elemcborlen += 0x40;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 748,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                res[ctr] = 0xFF;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 824,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint offset = 4+(uint(dersig[3]) - 0x20);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        tosign3[0] = 0xFE;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function randomDS_getSessionPubKeyHash() external constant returns(bytes32);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCodeSize(address _addr) constant internal returns(uint _size) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (byte(cborlen).length > ctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        while (byte(elemcborlen).length > ctr - lctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (byte(cborlen).length > ctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        while (byte(elemcborlen).length > ctr - lctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 529,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCodeSize(address _addr) constant internal returns(uint _size) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < minLength; i ++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < h.length; i ++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i=0; i<bresult.length; i++){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < arrlen; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (i = 0; i < arrlen; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < arrlen; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (i = 0; i < arrlen; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (uint x = 0; x < elemArray[i].length; x++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (byte(cborlen).length > ctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        while (byte(elemcborlen).length > ctr - lctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            while (byte(cborlen).length > ctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        while (byte(elemcborlen).length > ctr - lctr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (i < (32 + fromOffset + length)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract OraclizeI {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 978,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        __callback(myid, result, new bytes(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        oraclize_randomDS_setCommitment(queryId, keccak256(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) public payable returns (bytes32 _id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function queryN(uint _timestamp, string _datasource, bytes _argN) public payable returns (bytes32 _id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(string _datasource) public returns (uint _dsprice);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(string _datasource, uint gaslimit) public returns (uint _dsprice);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function __callback(bytes32 myid, string result) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function __callback(bytes32 myid, string result, bytes proof) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseAddr(string _a) internal pure returns (address){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strCompare(string _a, string _b) internal pure returns (int) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function indexOf(string _haystack, string _needle) internal pure returns (int) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strConcat(string _a, string _b) internal pure returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 630,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseInt(string _a) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function parseInt(string _a, uint _b) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function uint2str(uint i) internal pure returns (string){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stra2cbor(string[] arr) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 670,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stra2cbor(string[] arr) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ba2cbor(bytes[] arr) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 756,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_setNetworkName(string _network_name) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 760,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_getNetworkName() internal view returns (string) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 844,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function matchBytes32Prefix(bytes32 content, bytes prefix, uint n_random_bytes) internal pure returns (bool){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal pure returns (bytes) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1006,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 773,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly { \n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 792,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 965,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1017,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant day = 60*60*24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant week = 60*60*24*7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant month = 60*60*24*30;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_NONE = 0x00;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_TLSNotary = 0x10;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Android = 0x20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Ledger = 0x30;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofType_Native = 0xF0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    byte constant proofStorage_IPFS = 0x01;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_auto = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_mainnet = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_testnet = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_morden = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 constant networkID_consensys = 161;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    OraclizeAddrResolverI OAR;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    OraclizeI oraclize;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string oraclize_network_name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n",
                    "message": null
                }
            ]
        }
    }
}