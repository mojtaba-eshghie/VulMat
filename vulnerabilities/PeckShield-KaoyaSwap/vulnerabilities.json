{
    "contracts-8273073f1d6914f372790399378f177573c52e37/Kaoya.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Kaoya is Context, IBEP20, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor () public  {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address msgSender = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = msgSender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit OwnershipTransferred(address(0), msgSender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!initialized, \"FiatToken: contract is already initialized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(sender != address(0), \"BEP20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(account != address(0), \"BEP20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(account != address(0), \"BEP20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(owner != address(0), \"BEP20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(spender != address(0), \"BEP20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!initialized, \"FiatToken: contract is already initialized\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(sender != address(0), \"BEP20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(account != address(0), \"BEP20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(owner != address(0), \"BEP20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(spender != address(0), \"BEP20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_23"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) external override view returns (uint256) {\n",
                    "message": "Kaoya.allowance.owner (local variable @ Kaoya.sol#432) shadows:\n\t- Ownable.owner (function @ Kaoya.sol#306-308)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint totalSupply\n",
                    "message": "Kaoya.initialize.totalSupply (local variable @ Kaoya.sol#363) shadows:\n\t- Kaoya.totalSupply (function @ Kaoya.sol#405-407)\n\t- IBEP20.totalSupply (function @ Kaoya.sol#17)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _approve(address owner, address spender, uint256 amount) internal {\n",
                    "message": "Kaoya._approve.owner (local variable @ Kaoya.sol#595) shadows:\n\t- Ownable.owner (function @ Kaoya.sol#306-308)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 328,
                    "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipTransferred(_owner, address(0));\n\n    _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (Kaoya.sol#325-328) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (Kaoya.sol#334-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function initialize(\n\n    string memory tokenName,\n\n    string memory tokenSymbol,\n\n    uint8 tokenDecimals,\n\n    uint totalSupply\n\n  ) public {\n\n    require(!initialized, \"FiatToken: contract is already initialized\");\n\n    _name = tokenName;\n\n    _symbol = tokenSymbol;\n\n    _decimals = tokenDecimals;\n\n    _totalSupply = totalSupply;\n\n    _balances[msg.sender] = _totalSupply;\n\n    _owner = msg.sender;\n\n    initialized = true;\n",
                    "message": "Kaoya.initialize (Kaoya.sol#359-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 481,
                    "vulnerability_code": "  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\n    return true;\n",
                    "message": "Kaoya.increaseAllowance (Kaoya.sol#478-481) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n\n    return true;\n",
                    "message": "Kaoya.decreaseAllowance (Kaoya.sol#497-500) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": 513,
                    "vulnerability_code": "  function mint(uint256 amount) public onlyOwner returns (bool) {\n\n    _mint(_msgSender(), amount);\n\n    return true;\n",
                    "message": "Kaoya.mint (Kaoya.sol#510-513) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 521,
                    "vulnerability_code": "  function burn(uint256 amount) public returns (bool) {\n\n    _burn(_msgSender(), amount);\n\n    return true;\n",
                    "message": "Kaoya.burn (Kaoya.sol#518-521) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in Kaoya.sol:\n\t- pragma solidity0.6.12 (Kaoya.sol#11): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "  function _msgSender() internal view returns (address payable) {\n\n    return payable(msg.sender);\n",
                    "message": "Function 'Context._msgSender' (Kaoya.sol#118-120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": 125,
                    "vulnerability_code": "  function _msgData() internal view returns (bytes memory) {\n\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n    return msg.data;\n",
                    "message": "Function 'Context._msgData' (Kaoya.sol#122-125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 344,
                    "vulnerability_code": "  function _transferOwnership(address newOwner) internal {\n\n    emit OwnershipTransferred(_owner, newOwner);\n\n    _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (Kaoya.sol#341-344) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address internal _owner;\n",
                    "message": "Variable 'Ownable._owner' (Kaoya.sol#290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": 544,
                    "vulnerability_code": "  function _transfer(address sender, address recipient, uint256 amount) internal {\n\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\n\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n\n\n    _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n\n    _balances[recipient] = _balances[recipient].add(amount);\n\n    emit Transfer(sender, recipient, amount);\n",
                    "message": "Function 'Kaoya._transfer' (Kaoya.sol#537-544) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": 561,
                    "vulnerability_code": "  function _mint(address account, uint256 amount) internal {\n\n    require(account != address(0), \"BEP20: mint to the zero address\");\n\n\n\n    _totalSupply = _totalSupply.add(amount);\n\n    _balances[account] = _balances[account].add(amount);\n\n    emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'Kaoya._mint' (Kaoya.sol#555-561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": 580,
                    "vulnerability_code": "  function _burn(address account, uint256 amount) internal {\n\n    require(account != address(0), \"BEP20: burn from the zero address\");\n\n\n\n    _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n\n    _totalSupply = _totalSupply.sub(amount);\n\n    emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'Kaoya._burn' (Kaoya.sol#574-580) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": 601,
                    "vulnerability_code": "  function _approve(address owner, address spender, uint256 amount) internal {\n\n    require(owner != address(0), \"BEP20: approve from the zero address\");\n\n    require(spender != address(0), \"BEP20: approve to the zero address\");\n\n\n\n    _allowances[owner][spender] = amount;\n\n    emit Approval(owner, spender, amount);\n",
                    "message": "Function 'Kaoya._approve' (Kaoya.sol#595-601) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": 612,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 amount) internal {\n\n    _burn(account, amount);\n\n    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\n",
                    "message": "Function 'Kaoya._burnFrom' (Kaoya.sol#609-612) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 public _decimals;\n",
                    "message": "Variable 'Kaoya._decimals' (Kaoya.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string public _symbol;\n",
                    "message": "Variable 'Kaoya._symbol' (Kaoya.sol#356) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string public _name;\n",
                    "message": "Variable 'Kaoya._name' (Kaoya.sol#357) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => mapping (address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "contracts-8273073f1d6914f372790399378f177573c52e37/betting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner==msg.sender, 'UniswapV2Router: EXPIRED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(matchInfo[matchLength-1].endTime>block.timestamp-1 && matchInfo[matchLength-1].endTime<block.timestamp+1, \"error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(matchInfo[matchLength-1].betEndTime>block.timestamp-1, \"error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(matchInfo[matchId].endTime<block.timestamp-1, \"error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(user.done==false,\"error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(matchInfo[matchLength-1].endTime>block.timestamp-1 && matchInfo[matchLength-1].endTime<block.timestamp+1, \"error\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(user.matchId<matchInfo.length-1&&user.done==false&&user.balance>0){\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            claim(user.matchId);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')",
                "exception (AssertionError)"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOracle(address _oracle) public onlyOwner{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => UserInfo) userInfo;\n",
                    "message": null
                }
            ]
        }
    },
    "contracts-8273073f1d6914f372790399378f177573c52e37/KaoyaProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(IMPLEMENTATION_SLOT == keccak256(\"org.zeppelinos.proxy.implementation\"));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setImplementation(_implementation);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setAdmin(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_26"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(addr) }\n\n    return size > 0;\n",
                    "message": "AddressUtils.isContract (KaoyaProxy.sol#89-100) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal override view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "UpgradeabilityProxy._implementation (KaoyaProxy.sol#134-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 244,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._admin (KaoyaProxy.sol#239-244) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  receive() payable external{\n\n    assert(msg.sender == wbnb); // only accept ETH via fallback from the WETH contract\n",
                    "message": "Contract locking ether found in KaoyaProxy.sol:\n\tContract KaoyaProxy has payable functions:\n\t - fallback (KaoyaProxy.sol#21-23)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "UpgradeabilityProxy.constructor._implementation (local variable @ KaoyaProxy.sol#128) shadows:\n\t- UpgradeabilityProxy._implementation (function @ KaoyaProxy.sol#134-139)\n\t- Proxy._implementation (function @ KaoyaProxy.sol#28)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) UpgradeabilityProxy(_implementation) public {\n",
                    "message": "AdminUpgradeabilityProxy.constructor._implementation (local variable @ KaoyaProxy.sol#205) shadows:\n\t- UpgradeabilityProxy._implementation (function @ KaoyaProxy.sol#134-139)\n\t- Proxy._implementation (function @ KaoyaProxy.sol#28)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public AdminUpgradeabilityProxy(_implementation) {\n",
                    "message": "KaoyaProxy.constructor._implementation (local variable @ KaoyaProxy.sol#261) shadows:\n\t- UpgradeabilityProxy._implementation (function @ KaoyaProxy.sol#134-139)\n\t- Proxy._implementation (function @ KaoyaProxy.sol#28)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize())\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize())\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize()) }\n\n      default { return(0, returndatasize()) }\n\n    }\n",
                    "message": "Proxy._delegate uses assembly (KaoyaProxy.sol#36-55)\n\t- KaoyaProxy.sol#37-54\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n\n    uint256 size;\n\n    // XXX Currently there is no better way to check if there is a contract in an address\n\n    // than to check the size of the code at that address.\n\n    // See https://ethereum.stackexchange.com/a/14016/36603\n\n    // for more details about how this works.\n\n    // TODO Check this again before the Serenity release, because all addresses will be\n\n    // contracts then.\n\n    // solium-disable-next-line security/no-inline-assembly\n\n    assembly { size := extcodesize(addr) }\n\n    return size > 0;\n",
                    "message": "AddressUtils.isContract uses assembly (KaoyaProxy.sol#89-100)\n\t- KaoyaProxy.sol#98\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal override view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "UpgradeabilityProxy._implementation uses assembly (KaoyaProxy.sol#134-139)\n\t- KaoyaProxy.sol#136-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) private {\n\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (KaoyaProxy.sol#154-162)\n\t- KaoyaProxy.sol#159-161\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 244,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._admin uses assembly (KaoyaProxy.sol#239-244)\n\t- KaoyaProxy.sol#241-243\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "AdminUpgradeabilityProxy._setAdmin uses assembly (KaoyaProxy.sol#245-251)\n\t- KaoyaProxy.sol#248-250\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.12;\n",
                    "message": "Detected issues with version pragma in KaoyaProxy.sol:\n\t- pragma solidity^0.6.12 (KaoyaProxy.sol#3): it allows old versions\n\t- pragma solidity^0.6.12 (KaoyaProxy.sol#258): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal virtual view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (KaoyaProxy.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "  function _delegate(address implementation) internal {\n\n    assembly {\n\n      // Copy msg.data. We take full control of memory in this inline assembly\n\n      // block because it will not return to Solidity code. We overwrite the\n\n      // Solidity scratch pad at memory position 0.\n\n      calldatacopy(0, 0, calldatasize())\n\n\n\n      // Call the implementation.\n\n      // out and outsize are 0 because we don't know the size yet.\n\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n\n\n      // Copy the returned data.\n\n      returndatacopy(0, 0, returndatasize())\n\n\n\n      switch result\n\n      // delegatecall returns 0 on error.\n\n      case 0 { revert(0, returndatasize()) }\n\n      default { return(0, returndatasize()) }\n\n    }\n",
                    "message": "Function 'Proxy._delegate' (KaoyaProxy.sol#36-55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": 63,
                    "vulnerability_code": "  function _willFallback() internal virtual {\n",
                    "message": "Function 'Proxy._willFallback' (KaoyaProxy.sol#62-63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function _fallback() internal {\n\n    _willFallback();\n\n    _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (KaoyaProxy.sol#69-72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function _implementation() internal override view returns (address impl) {\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n\n      impl := sload(slot)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._implementation' (KaoyaProxy.sol#134-139) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Parameter '_implementation' of UpgradeabilityProxy. (KaoyaProxy.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function _upgradeTo(address newImplementation) internal {\n\n    _setImplementation(newImplementation);\n\n    emit Upgraded(newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (KaoyaProxy.sol#145-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "  function _setImplementation(address newImplementation) private {\n\n    require(AddressUtils.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newImplementation)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (KaoyaProxy.sol#154-162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "  function _willFallback() internal override {\n\n    super._willFallback();\n",
                    "message": "Function 'AdminUpgradeabilityProxy._willFallback' (KaoyaProxy.sol#253-255) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setwbnb(address _wbnb) external ifAdmin{\n",
                    "message": "Parameter '_wbnb' of AdminUpgradeabilityProxy.setwbnb (KaoyaProxy.sol#230) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 244,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n\n      adm := sload(slot)\n\n    }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._admin' (KaoyaProxy.sol#239-244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "  function _setAdmin(address newAdmin) internal {\n\n    bytes32 slot = ADMIN_SLOT;\n\n\n\n    assembly {\n\n      sstore(slot, newAdmin)\n\n    }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._setAdmin' (KaoyaProxy.sol#245-251) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address wbnb = 0xD7AE40e5EF906caD1633bDBFE47cCe04c4fcf28B;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal override view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.12;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isContract(address addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _implementation() internal override view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address wbnb = 0xD7AE40e5EF906caD1633bDBFE47cCe04c4fcf28B;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  fallback() payable external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _fallback();\n",
                    "message": null
                }
            ]
        }
    }
}