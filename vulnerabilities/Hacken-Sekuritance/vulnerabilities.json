{
    "TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6/TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, \"SafeMath: subtraction overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, \"SafeMath: division by zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath: modulo by zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 769,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 769,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 813,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n",
                    "message": "TokenMintERC20Token.constructor.name (local variable @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#903) shadows:\n\t- TokenMintERC20Token.name (function @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#953-957)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n",
                    "message": "TokenMintERC20Token.constructor.symbol (local variable @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#903) shadows:\n\t- TokenMintERC20Token.symbol (function @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#967-971)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n",
                    "message": "TokenMintERC20Token.constructor.decimals (local variable @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#903) shadows:\n\t- TokenMintERC20Token.decimals (function @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#981-985)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n",
                    "message": "TokenMintERC20Token.constructor.totalSupply (local variable @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#903) shadows:\n\t- ERC20.totalSupply (function @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#471-475)\n\t- IERC20.totalSupply (function @ TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#35)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint256);\n",
                    "message": "IERC20.totalSupply (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": 475,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n\n\n        return _totalSupply;\n\n\n",
                    "message": "ERC20.totalSupply (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#471-475) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address account) external view returns (uint256);\n",
                    "message": "IERC20.balanceOf (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": 489,
                    "vulnerability_code": "    function balanceOf(address account) public view returns (uint256) {\n\n\n\n        return _balances[account];\n\n\n",
                    "message": "ERC20.balanceOf (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#485-489) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": 515,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) public returns (bool) {\n\n\n\n        _transfer(msg.sender, recipient, amount);\n\n\n\n        return true;\n\n\n",
                    "message": "ERC20.transfer (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#509-515) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transfer (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": 529,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n\n\n        return _allowances[owner][spender];\n\n\n",
                    "message": "ERC20.allowance (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#525-529) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) external view returns (uint256);\n",
                    "message": "IERC20.allowance (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 553,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n\n\n        _approve(msg.sender, spender, value);\n\n\n\n        return true;\n\n\n",
                    "message": "ERC20.approve (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#547-553) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.approve (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n\n\n\n        _transfer(sender, recipient, amount);\n\n\n\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n\n\n\n        return true;\n\n\n",
                    "message": "ERC20.transferFrom (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#581-589) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n",
                    "message": "IERC20.transferFrom (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 623,
                    "vulnerability_code": "    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\n\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n\n\n\n        return true;\n\n\n",
                    "message": "ERC20.increaseAllowance (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#617-623) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 655,
                    "vulnerability_to_line": 661,
                    "vulnerability_code": "    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\n\n\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n\n\n\n        return true;\n\n\n",
                    "message": "ERC20.decreaseAllowance (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#655-661) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": 939,
                    "vulnerability_code": "    function burn(uint256 value) public {\n\n\n\n      _burn(msg.sender, value);\n\n\n",
                    "message": "TokenMintERC20Token.burn (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#935-939) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": 957,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n\n\n      return _name;\n\n\n",
                    "message": "TokenMintERC20Token.name (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#953-957) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 967,
                    "vulnerability_to_line": 971,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n\n\n      return _symbol;\n\n\n",
                    "message": "TokenMintERC20Token.symbol (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#967-971) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": 985,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n\n\n      return _decimals;\n\n\n",
                    "message": "TokenMintERC20Token.decimals (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#981-985) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol:\n\t- pragma solidity^0.5.0 (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#15): it allows old versions\n\t- pragma solidity^0.5.0 (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#173): it allows old versions\n\t- pragma solidity^0.5.0 (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#393): it allows old versions\n\t- pragma solidity^0.5.0 (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#853): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": 707,
                    "vulnerability_code": "    function _transfer(address sender, address recipient, uint256 amount) internal {\n\n\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n\n\n\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\n\n\n\n\n\n        _balances[sender] = _balances[sender].sub(amount);\n\n\n\n        _balances[recipient] = _balances[recipient].add(amount);\n\n\n\n        emit Transfer(sender, recipient, amount);\n\n\n",
                    "message": "Function 'ERC20._transfer' (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#693-707) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": 741,
                    "vulnerability_code": "    function _mint(address account, uint256 amount) internal {\n\n\n\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n\n\n\n\n\n\n        _totalSupply = _totalSupply.add(amount);\n\n\n\n        _balances[account] = _balances[account].add(amount);\n\n\n\n        emit Transfer(address(0), account, amount);\n\n\n",
                    "message": "Function 'ERC20._mint' (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#729-741) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": 779,
                    "vulnerability_code": "    function _burn(address account, uint256 value) internal {\n\n\n\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\n\n\n\n\n\n        _totalSupply = _totalSupply.sub(value);\n\n\n\n        _balances[account] = _balances[account].sub(value);\n\n\n\n        emit Transfer(account, address(0), value);\n\n\n",
                    "message": "Function 'ERC20._burn' (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#767-779) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 809,
                    "vulnerability_to_line": 821,
                    "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n\n\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n\n\n\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n\n\n\n\n\n\n        _allowances[owner][spender] = value;\n\n\n\n        emit Approval(owner, spender, value);\n\n\n",
                    "message": "Function 'ERC20._approve' (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#809-821) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": 843,
                    "vulnerability_code": "    function _burnFrom(address account, uint256 amount) internal {\n\n\n\n        _burn(account, amount);\n\n\n\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n\n\n",
                    "message": "Function 'ERC20._burnFrom' (TokenMintERC20Token0x887168120cb89Fb06F3E74Dc4AF20D67dF0977f6.sol#837-843) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenMintERC20Token is ERC20 {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 883,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _name = name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 907,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _symbol = symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _decimals = decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _mint(tokenOwnerAddress, totalSupply);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      _mint(tokenOwnerAddress, totalSupply);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      feeReceiver.transfer(msg.value);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      feeReceiver.transfer(msg.value);\n",
                    "message": null
                }
            ]
        }
    }
}