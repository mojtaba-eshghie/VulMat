{
    "loot-box-2cbea5a85d53c555e28791df5b264d7b32779eea/contracts/external/pooltogether/PeriodicPrizeStrategyInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in PeriodicPrizeStrategyInterface.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (PeriodicPrizeStrategyInterface.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    },
    "loot-box-2cbea5a85d53c555e28791df5b264d7b32779eea/contracts/external/pooltogether/MinimalProxyLibrary.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "  function minimalProxy(address _logic) internal pure returns (bytes memory clone) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let size := 0x37\n\n      // allocate output byte array - this could also be done without assembly\n\n      // by using clone = new bytes(size)\n\n      clone := mload(0x40)\n\n      // new \"memory end\" including padding\n\n      mstore(0x40, add(clone, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n      // store length in memory\n\n      mstore(clone, size)\n\n      mstore(add(clone, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x34), targetBytes)\n\n      mstore(add(clone, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n    }\n",
                    "message": "MinimalProxyLibrary.minimalProxy (MinimalProxyLibrary.sol#9-27) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "  function minimalProxy(address _logic) internal pure returns (bytes memory clone) {\n\n    // Adapted from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n\n    bytes20 targetBytes = bytes20(_logic);\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let size := 0x37\n\n      // allocate output byte array - this could also be done without assembly\n\n      // by using clone = new bytes(size)\n\n      clone := mload(0x40)\n\n      // new \"memory end\" including padding\n\n      mstore(0x40, add(clone, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n\n      // store length in memory\n\n      mstore(clone, size)\n\n      mstore(add(clone, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n      mstore(add(clone, 0x34), targetBytes)\n\n      mstore(add(clone, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n    }\n",
                    "message": "MinimalProxyLibrary.minimalProxy uses assembly (MinimalProxyLibrary.sol#9-27)\n\t- MinimalProxyLibrary.sol#14-26\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in MinimalProxyLibrary.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (MinimalProxyLibrary.sol#5): is has a complex pragma\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minimalProxy(address _logic) internal pure returns (bytes memory clone) {\n",
                    "message": "Parameter '_logic' of MinimalProxyLibrary.minimalProxy (MinimalProxyLibrary.sol#9) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minimalProxy(address _logic) internal pure returns (bytes memory clone) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function minimalProxy(address _logic) internal pure returns (bytes memory clone) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "loot-box-2cbea5a85d53c555e28791df5b264d7b32779eea/contracts/external/pooltogether/PeriodicPrizeStrategyListener.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": "Detected issues with version pragma in PeriodicPrizeStrategyListener.sol:\n\t- pragma solidity>=0.6.0<0.7.0 (PeriodicPrizeStrategyListener.sol#5): is has a complex pragma\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.6.0 <0.7.0;\n",
                    "message": null
                }
            ]
        }
    }
}