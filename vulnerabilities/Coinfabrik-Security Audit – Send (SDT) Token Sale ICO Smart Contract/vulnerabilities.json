{
    "sdt-contracts-master/flattened-contracts/TokenSale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenVesting is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenSale is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    circulatingSupply += claimable;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public circulatingSupply = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public activated = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public isStopped = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public isFinalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].vesting,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].start,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].claimed\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value.sub(grants[_to][i].claimed)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value.sub(grants[_to][i].claimed)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].vesting,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].start,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].claimed\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_79"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 307,
                    "vulnerability_code": "  function claim(address _to) internal {\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n\n    }\n\n\n\n    token.transfer(_to, claimable);\n\n    circulatingSupply += claimable;\n\n\n\n    NewTokenClaim(_to, claimable);\n\n  }\n",
                    "message": "TokenVesting.claim (TokenSale.sol#282-307) does not use the value returned by external calls:\n\t-token.transfer(_to,claimable) (TokenSale.sol#302-303)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": 507,
                    "vulnerability_code": "  function initialize(\n\n      address _sdt,\n\n      address _vestingContract,\n\n      address _icoCostsPool,\n\n      address _distributionContract\n\n  ) public validAddress(_sdt) validAddress(_vestingContract) onlyOwner {\n\n    require(!activated);\n\n    activated = true;\n\n\n\n    token = BurnableToken(_sdt);\n\n    vesting = TokenVesting(_vestingContract);\n\n\n\n    // 1% reserve is released on deploy\n\n    token.transfer(_icoCostsPool, 7000000 ether);\n\n    token.transfer(_distributionContract, 161000000 ether);\n\n\n\n    //early backers allocation\n\n    uint256 threeMonths = vestingStarts.add(90 days);\n\n\n\n    updateStats(0, 43387693 ether);\n\n    grantVestedTokens(0x02f807E6a1a59F8714180B301Cba84E76d3B4d06, 22572063 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x3A1e89dD9baDe5985E7Eb36E9AFd200dD0E20613, 15280000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xA61c9A0E96eC7Ceb67586fC8BFDCE009395D9b21, 250000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x26C9899eA2F8940726BbCC79483F2ce07989314E, 100000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xC88d5031e00BC316bE181F0e60971e8fEdB9223b, 1360000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x38f4cAD7997907741FA0D912422Ae59aC6b83dD1, 250000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x2b2992e51E86980966c42736C458e2232376a044, 105000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xdD0F60610052bE0976Cf8BEE576Dbb3a1621a309, 140000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xd61B4F33D3413827baa1425E2FDa485913C9625B, 740000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xE6D4a77D01C680Ebbc0c84393ca598984b3F45e3, 505630 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x35D3648c29Ac180D5C7Ef386D52de9539c9c487a, 150000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x344a6130d187f51ef0DAb785e10FaEA0FeE4b5dE, 967500 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x026cC76a245987f3420D0FE30070B568b4b46F68, 967500 ether, vestingStarts, threeMonths);\n\n  }\n\n\n",
                    "message": "TokenSale.initialize (TokenSale.sol#472-507) does not use the value returned by external calls:\n\t-token.transfer(_icoCostsPool,7000000000000000419430400) (TokenSale.sol#485-486)\n\t-token.transfer(_distributionContract,160999999999999990319546368) (TokenSale.sol#486-487)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "  function claimTokens(address _token) public onlyOwner {\n\n    require(_token != address(token));\n\n    if (_token == 0x0) {\n\n      owner.transfer(this.balance);\n\n      return;\n\n    }\n\n\n\n    ERC20Basic erc20token = ERC20Basic(_token);\n\n    uint256 balance = erc20token.balanceOf(this);\n\n    erc20token.transfer(owner, balance);\n\n    ClaimedTokens(_token, owner, balance);\n\n  }\n\n\n",
                    "message": "TokenSale.claimTokens (TokenSale.sol#568-581) does not use the value returned by external calls:\n\t-erc20token.transfer(owner,balance) (TokenSale.sol#577-578)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": 641,
                    "vulnerability_code": "  function grantVestedTokens(\n\n      address _to,\n\n      uint256 _value,\n\n      uint256 _start,\n\n      uint256 _vesting\n\n  ) internal {\n\n    token.transfer(vesting, _value);\n\n    vesting.grantVestedTokens(_to, _value, _start, _vesting);\n\n  }\n",
                    "message": "TokenSale.grantVestedTokens (TokenSale.sol#632-641) does not use the value returned by external calls:\n\t-token.transfer(vesting,_value) (TokenSale.sol#638-639)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 307,
                    "vulnerability_code": "  function claim(address _to) internal {\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n\n    }\n\n\n\n    token.transfer(_to, claimable);\n\n    circulatingSupply += claimable;\n\n\n\n    NewTokenClaim(_to, claimable);\n\n  }\n",
                    "message": "Reentrancy in TokenVesting.claim (TokenSale.sol#282-307):\n\tExternal calls:\n\t- token.transfer(_to,claimable) (TokenSale.sol#302-303)\n\tState variables written after the call(s):\n\t- circulatingSupply (TokenSale.sol#303-304)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": 507,
                    "vulnerability_code": "  function initialize(\n\n      address _sdt,\n\n      address _vestingContract,\n\n      address _icoCostsPool,\n\n      address _distributionContract\n\n  ) public validAddress(_sdt) validAddress(_vestingContract) onlyOwner {\n\n    require(!activated);\n\n    activated = true;\n\n\n\n    token = BurnableToken(_sdt);\n\n    vesting = TokenVesting(_vestingContract);\n\n\n\n    // 1% reserve is released on deploy\n\n    token.transfer(_icoCostsPool, 7000000 ether);\n\n    token.transfer(_distributionContract, 161000000 ether);\n\n\n\n    //early backers allocation\n\n    uint256 threeMonths = vestingStarts.add(90 days);\n\n\n\n    updateStats(0, 43387693 ether);\n\n    grantVestedTokens(0x02f807E6a1a59F8714180B301Cba84E76d3B4d06, 22572063 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x3A1e89dD9baDe5985E7Eb36E9AFd200dD0E20613, 15280000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xA61c9A0E96eC7Ceb67586fC8BFDCE009395D9b21, 250000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x26C9899eA2F8940726BbCC79483F2ce07989314E, 100000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xC88d5031e00BC316bE181F0e60971e8fEdB9223b, 1360000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x38f4cAD7997907741FA0D912422Ae59aC6b83dD1, 250000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x2b2992e51E86980966c42736C458e2232376a044, 105000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xdD0F60610052bE0976Cf8BEE576Dbb3a1621a309, 140000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xd61B4F33D3413827baa1425E2FDa485913C9625B, 740000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xE6D4a77D01C680Ebbc0c84393ca598984b3F45e3, 505630 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x35D3648c29Ac180D5C7Ef386D52de9539c9c487a, 150000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x344a6130d187f51ef0DAb785e10FaEA0FeE4b5dE, 967500 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x026cC76a245987f3420D0FE30070B568b4b46F68, 967500 ether, vestingStarts, threeMonths);\n\n  }\n\n\n",
                    "message": "Reentrancy in TokenSale.initialize (TokenSale.sol#472-507):\n\tExternal calls:\n\t- token.transfer(_icoCostsPool,7000000000000000419430400) (TokenSale.sol#485-486)\n\t- token.transfer(_distributionContract,160999999999999990319546368) (TokenSale.sol#486-487)\n\tState variables written after the call(s):\n\t- raised (TokenSale.sol#491-492)\n\t- soldTokens (TokenSale.sol#491-492)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function calculateVestedTokens(\n\n      uint256 _tokens,\n\n      uint256 _vesting,\n\n      uint256 _start,\n\n      uint256 _claimed\n\n  ) internal constant returns (uint256) {\n\n    uint256 time = block.timestamp;\n\n\n\n    if (time < _start) {\n\n      return 0;\n\n    }\n\n\n\n    if (time >= _vesting) {\n\n      return _tokens.sub(_claimed);\n\n    }\n\n\n\n    uint256 vestedTokens = _tokens.mul(time.sub(_start)).div(\n\n      _vesting.sub(_start)\n\n    );\n\n\n\n    return vestedTokens.sub(_claimed);\n\n  }\n\n\n",
                    "message": "TokenVesting.calculateVestedTokens (TokenSale.sol#256-279) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- time < _start (TokenSale.sol#264-268)\n\t- time >= _vesting (TokenSale.sol#268-272)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "  function TokenSale(\n\n      uint256 _startTime,\n\n      uint256 _endTime,\n\n      address _wallet,\n\n      uint256 _vestingStarts\n\n  ) public validAddress(_wallet) {\n\n    require(_startTime > block.timestamp - 60);\n\n    require(_endTime > startTime);\n\n    require(_vestingStarts > startTime);\n\n\n\n    vestingStarts = _vestingStarts;\n\n    vestingEnds = vestingStarts.add(VESTING_TIME);\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    wallet = _wallet;\n\n  }\n\n\n",
                    "message": "TokenSale.TokenSale (TokenSale.sol#434-451) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_startTime > block.timestamp - 60) (TokenSale.sol#440-441)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 402,
                    "vulnerability_code": "  bool public isFinalized = false;\n",
                    "message": "TokenSale.isFinalized should be constant (TokenSale.sol#401-402)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
                    "message": "Ownable.transferOwnership (TokenSale.sol#76-82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 345,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n\n  }\n\n\n",
                    "message": "BasicToken.balanceOf (TokenSale.sol#341-345) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (TokenSale.sol#93-94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 336,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n\n  }\n\n\n",
                    "message": "BasicToken.transfer (TokenSale.sol#325-336) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (TokenSale.sol#94-95) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n\n    token = ERC20Basic(_token);\n\n    ico = _ico;\n\n    initialized = true;\n\n    active = true;\n\n  }\n\n\n",
                    "message": "TokenVesting.init (TokenSale.sol#148-155) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "  function stop() public isActive onlyOwner {\n\n    active = false;\n\n  }\n\n\n",
                    "message": "TokenVesting.stop (TokenSale.sol#155-159) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function resume() public onlyOwner {\n\n    require(!active);\n\n    require(initialized);\n\n    active = true;\n\n  }\n\n\n",
                    "message": "TokenVesting.resume (TokenSale.sol#159-165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "  function grantVestedTokens(\n\n      address _to,\n\n      uint256 _value,\n\n      uint256 _start,\n\n      uint256 _vesting\n\n  ) public icoResticted isActive {\n\n    require(_value > 0);\n\n    require(_vesting > _start);\n\n    require(grants[_to].length < 10);\n\n\n\n    TokenGrant memory grant = TokenGrant(_value, 0, _vesting, _start);\n\n    grants[_to].push(grant);\n\n\n\n    NewTokenGrant(_to, _value, _start, _vesting);\n\n  }\n\n\n",
                    "message": "TokenVesting.grantVestedTokens (TokenSale.sol#173-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "  function claimTokens() public {\n\n    claim(msg.sender);\n\n  }\n\n\n",
                    "message": "TokenVesting.claimTokens (TokenSale.sol#192-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "  function claimTokensFor(address _to) public onlyOwner {\n\n    claim(_to);\n\n  }\n\n\n",
                    "message": "TokenVesting.claimTokensFor (TokenSale.sol#200-204) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "  function claimableTokens() public constant returns (uint256) {\n\n    address _to = msg.sender;\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return 0;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n    }\n\n    return claimable;\n\n  }\n\n\n",
                    "message": "TokenVesting.claimableTokens (TokenSale.sol#207-229) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 249,
                    "vulnerability_code": "  function totalVestedTokens() public constant returns (uint256) {\n\n    address _to = msg.sender;\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return 0;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimable = claimable.add(\n\n        grants[_to][i].value.sub(grants[_to][i].claimed)\n\n      );\n\n    }\n\n    return claimable;\n\n  }\n\n\n",
                    "message": "TokenVesting.totalVestedTokens (TokenSale.sol#232-249) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "    function burn(uint256 _value) public {\n\n        require(_value <= balances[msg.sender]);\n\n        // no need to require value <= totalSupply, since that would imply the\n\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n\n        totalSupply = totalSupply.sub(_value);\n\n        Burn(burner, _value);\n\n    }\n",
                    "message": "BurnableToken.burn (TokenSale.sol#361-371) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n\n    require(_rate > 0);\n\n    weiUsdRate = _rate;\n\n  }\n\n\n",
                    "message": "TokenSale.setWeiUsdRate (TokenSale.sol#455-460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": 469,
                    "vulnerability_code": "  function setBtcUsdRate(uint256 _rate) public onlyOwner {\n\n    require(_rate > 0);\n\n    btcUsdRate = _rate;\n\n  }\n\n\n",
                    "message": "TokenSale.setBtcUsdRate (TokenSale.sol#464-469) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": 507,
                    "vulnerability_code": "  function initialize(\n\n      address _sdt,\n\n      address _vestingContract,\n\n      address _icoCostsPool,\n\n      address _distributionContract\n\n  ) public validAddress(_sdt) validAddress(_vestingContract) onlyOwner {\n\n    require(!activated);\n\n    activated = true;\n\n\n\n    token = BurnableToken(_sdt);\n\n    vesting = TokenVesting(_vestingContract);\n\n\n\n    // 1% reserve is released on deploy\n\n    token.transfer(_icoCostsPool, 7000000 ether);\n\n    token.transfer(_distributionContract, 161000000 ether);\n\n\n\n    //early backers allocation\n\n    uint256 threeMonths = vestingStarts.add(90 days);\n\n\n\n    updateStats(0, 43387693 ether);\n\n    grantVestedTokens(0x02f807E6a1a59F8714180B301Cba84E76d3B4d06, 22572063 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x3A1e89dD9baDe5985E7Eb36E9AFd200dD0E20613, 15280000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xA61c9A0E96eC7Ceb67586fC8BFDCE009395D9b21, 250000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x26C9899eA2F8940726BbCC79483F2ce07989314E, 100000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xC88d5031e00BC316bE181F0e60971e8fEdB9223b, 1360000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x38f4cAD7997907741FA0D912422Ae59aC6b83dD1, 250000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x2b2992e51E86980966c42736C458e2232376a044, 105000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xdD0F60610052bE0976Cf8BEE576Dbb3a1621a309, 140000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xd61B4F33D3413827baa1425E2FDa485913C9625B, 740000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0xE6D4a77D01C680Ebbc0c84393ca598984b3F45e3, 505630 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x35D3648c29Ac180D5C7Ef386D52de9539c9c487a, 150000 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x344a6130d187f51ef0DAb785e10FaEA0FeE4b5dE, 967500 ether, vestingStarts, threeMonths);\n\n    grantVestedTokens(0x026cC76a245987f3420D0FE30070B568b4b46F68, 967500 ether, vestingStarts, threeMonths);\n\n  }\n\n\n",
                    "message": "TokenSale.initialize (TokenSale.sol#472-507) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 528,
                    "vulnerability_code": "  function finalize(\n\n      address _poolA,\n\n      address _poolB,\n\n      address _poolC,\n\n      address _poolD\n\n  )\n\n      public\n\n      validAddress(_poolA)\n\n      validAddress(_poolB)\n\n      validAddress(_poolC)\n\n      validAddress(_poolD)\n\n      onlyOwner\n\n  {\n\n    grantVestedTokens(_poolA, 175000000 ether, vestingStarts, vestingStarts.add(7 years));\n\n    grantVestedTokens(_poolB, 168000000 ether, vestingStarts, vestingStarts.add(7 years));\n\n    grantVestedTokens(_poolC, 70000000 ether, vestingStarts, vestingStarts.add(7 years));\n\n    grantVestedTokens(_poolD, 48999990 ether, vestingStarts, vestingStarts.add(4 years));\n\n\n\n    token.burn(token.balanceOf(this));\n\n  }\n\n\n",
                    "message": "TokenSale.finalize (TokenSale.sol#507-528) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": 533,
                    "vulnerability_code": "  function stop() public onlyOwner isActive returns(bool) {\n\n    isStopped = true;\n\n    return true;\n\n  }\n\n\n",
                    "message": "TokenSale.stop (TokenSale.sol#528-533) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": 539,
                    "vulnerability_code": "  function resume() public onlyOwner returns(bool) {\n\n    require(isStopped);\n\n    isStopped = false;\n\n    return true;\n\n  }\n\n\n",
                    "message": "TokenSale.resume (TokenSale.sol#533-539) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "  function () public payable {\n\n    uint256 usd = msg.value.div(weiUsdRate);\n\n    doPurchase(usd, msg.value, 0, msg.sender, vestingEnds);\n\n    forwardFunds();\n\n  }\n\n\n",
                    "message": "TokenSale.fallback (TokenSale.sol#539-545) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": 553,
                    "vulnerability_code": "  function btcPurchase(\n\n      address _beneficiary,\n\n      uint256 _btcValue\n\n  ) public onlyOwner validAddress(_beneficiary) {\n\n    uint256 usd = _btcValue.div(btcUsdRate);\n\n    doPurchase(usd, 0, _btcValue, _beneficiary, vestingEnds);\n\n  }\n\n\n",
                    "message": "TokenSale.btcPurchase (TokenSale.sol#545-553) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "  function claimTokens(address _token) public onlyOwner {\n\n    require(_token != address(token));\n\n    if (_token == 0x0) {\n\n      owner.transfer(this.balance);\n\n      return;\n\n    }\n\n\n\n    ERC20Basic erc20token = ERC20Basic(_token);\n\n    uint256 balance = erc20token.balanceOf(this);\n\n    erc20token.transfer(owner, balance);\n\n    ClaimedTokens(_token, owner, balance);\n\n  }\n\n\n",
                    "message": "TokenSale.claimTokens (TokenSale.sol#568-581) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in TokenSale.sol:\n\t- pragma solidity^0.4.18 (TokenSale.sol#3-5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
                    "message": "Function 'Ownable.Ownable' (TokenSale.sol#58-62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function TokenVesting() public {\n\n    active = false;\n\n  }\n\n\n",
                    "message": "Function 'TokenVesting.TokenVesting' (TokenSale.sol#144-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
                    "message": "Parameter '_token' of TokenVesting.init (TokenSale.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
                    "message": "Parameter '_ico' of TokenVesting.init (TokenSale.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "      address _to,\n",
                    "message": "Parameter '_to' of TokenVesting.grantVestedTokens (TokenSale.sol#174-175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "      uint256 _value,\n",
                    "message": "Parameter '_value' of TokenVesting.grantVestedTokens (TokenSale.sol#175-176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 177,
                    "vulnerability_code": "      uint256 _start,\n",
                    "message": "Parameter '_start' of TokenVesting.grantVestedTokens (TokenSale.sol#176-177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 178,
                    "vulnerability_code": "      uint256 _vesting\n",
                    "message": "Parameter '_vesting' of TokenVesting.grantVestedTokens (TokenSale.sol#177-178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claimTokensFor(address _to) public onlyOwner {\n",
                    "message": "Parameter '_to' of TokenVesting.claimTokensFor (TokenSale.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "      uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of TokenVesting.calculateVestedTokens (TokenSale.sol#257-258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 259,
                    "vulnerability_code": "      uint256 _vesting,\n",
                    "message": "Parameter '_vesting' of TokenVesting.calculateVestedTokens (TokenSale.sol#258-259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 260,
                    "vulnerability_code": "      uint256 _start,\n",
                    "message": "Parameter '_start' of TokenVesting.calculateVestedTokens (TokenSale.sol#259-260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "      uint256 _claimed\n",
                    "message": "Parameter '_claimed' of TokenVesting.calculateVestedTokens (TokenSale.sol#260-261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claim(address _to) internal {\n",
                    "message": "Parameter '_to' of TokenVesting.claim (TokenSale.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (TokenSale.sol#341) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (TokenSale.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (TokenSale.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _value) public {\n",
                    "message": "Parameter '_value' of BurnableToken.burn (TokenSale.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 451,
                    "vulnerability_code": "  function TokenSale(\n\n      uint256 _startTime,\n\n      uint256 _endTime,\n\n      address _wallet,\n\n      uint256 _vestingStarts\n\n  ) public validAddress(_wallet) {\n\n    require(_startTime > block.timestamp - 60);\n\n    require(_endTime > startTime);\n\n    require(_vestingStarts > startTime);\n\n\n\n    vestingStarts = _vestingStarts;\n\n    vestingEnds = vestingStarts.add(VESTING_TIME);\n\n    startTime = _startTime;\n\n    endTime = _endTime;\n\n    wallet = _wallet;\n\n  }\n\n\n",
                    "message": "Function 'TokenSale.TokenSale' (TokenSale.sol#434-451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 436,
                    "vulnerability_code": "      uint256 _startTime,\n",
                    "message": "Parameter '_startTime' of TokenSale.TokenSale (TokenSale.sol#435-436) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "      uint256 _endTime,\n",
                    "message": "Parameter '_endTime' of TokenSale.TokenSale (TokenSale.sol#436-437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "      address _wallet,\n",
                    "message": "Parameter '_wallet' of TokenSale.TokenSale (TokenSale.sol#437-438) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": 439,
                    "vulnerability_code": "      uint256 _vestingStarts\n",
                    "message": "Parameter '_vestingStarts' of TokenSale.TokenSale (TokenSale.sol#438-439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n",
                    "message": "Parameter '_rate' of TokenSale.setWeiUsdRate (TokenSale.sol#455) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBtcUsdRate(uint256 _rate) public onlyOwner {\n",
                    "message": "Parameter '_rate' of TokenSale.setBtcUsdRate (TokenSale.sol#464) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 474,
                    "vulnerability_code": "      address _sdt,\n",
                    "message": "Parameter '_sdt' of TokenSale.initialize (TokenSale.sol#473-474) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": 475,
                    "vulnerability_code": "      address _vestingContract,\n",
                    "message": "Parameter '_vestingContract' of TokenSale.initialize (TokenSale.sol#474-475) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "      address _icoCostsPool,\n",
                    "message": "Parameter '_icoCostsPool' of TokenSale.initialize (TokenSale.sol#475-476) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "      address _distributionContract\n",
                    "message": "Parameter '_distributionContract' of TokenSale.initialize (TokenSale.sol#476-477) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": 509,
                    "vulnerability_code": "      address _poolA,\n",
                    "message": "Parameter '_poolA' of TokenSale.finalize (TokenSale.sol#508-509) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": 510,
                    "vulnerability_code": "      address _poolB,\n",
                    "message": "Parameter '_poolB' of TokenSale.finalize (TokenSale.sol#509-510) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": 511,
                    "vulnerability_code": "      address _poolC,\n",
                    "message": "Parameter '_poolC' of TokenSale.finalize (TokenSale.sol#510-511) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": 512,
                    "vulnerability_code": "      address _poolD\n",
                    "message": "Parameter '_poolD' of TokenSale.finalize (TokenSale.sol#511-512) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": 547,
                    "vulnerability_code": "      address _beneficiary,\n",
                    "message": "Parameter '_beneficiary' of TokenSale.btcPurchase (TokenSale.sol#546-547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 548,
                    "vulnerability_code": "      uint256 _btcValue\n",
                    "message": "Parameter '_btcValue' of TokenSale.btcPurchase (TokenSale.sol#547-548) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function computeTokens(uint256 _usd) public pure returns(uint256) {\n",
                    "message": "Parameter '_usd' of TokenSale.computeTokens (TokenSale.sol#557) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of TokenSale.claimTokens (TokenSale.sol#568) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 595,
                    "vulnerability_code": "      uint256 _usd,\n",
                    "message": "Parameter '_usd' of TokenSale.doPurchase (TokenSale.sol#594-595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": 596,
                    "vulnerability_code": "      uint256 _eth,\n",
                    "message": "Parameter '_eth' of TokenSale.doPurchase (TokenSale.sol#595-596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": 597,
                    "vulnerability_code": "      uint256 _btc,\n",
                    "message": "Parameter '_btc' of TokenSale.doPurchase (TokenSale.sol#596-597) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": 598,
                    "vulnerability_code": "      address _address,\n",
                    "message": "Parameter '_address' of TokenSale.doPurchase (TokenSale.sol#597-598) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 598,
                    "vulnerability_to_line": 599,
                    "vulnerability_code": "      uint256 _vestingEnds\n",
                    "message": "Parameter '_vestingEnds' of TokenSale.doPurchase (TokenSale.sol#598-599) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": 634,
                    "vulnerability_code": "      address _to,\n",
                    "message": "Parameter '_to' of TokenSale.grantVestedTokens (TokenSale.sol#633-634) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": 635,
                    "vulnerability_code": "      uint256 _value,\n",
                    "message": "Parameter '_value' of TokenSale.grantVestedTokens (TokenSale.sol#634-635) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 635,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "      uint256 _start,\n",
                    "message": "Parameter '_start' of TokenSale.grantVestedTokens (TokenSale.sol#635-636) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 636,
                    "vulnerability_to_line": 637,
                    "vulnerability_code": "      uint256 _vesting\n",
                    "message": "Parameter '_vesting' of TokenSale.grantVestedTokens (TokenSale.sol#636-637) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x02f807E6a1a59F8714180B301Cba84E76d3B4d06, 22572063 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x3A1e89dD9baDe5985E7Eb36E9AFd200dD0E20613, 15280000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0xA61c9A0E96eC7Ceb67586fC8BFDCE009395D9b21, 250000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x26C9899eA2F8940726BbCC79483F2ce07989314E, 100000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0xC88d5031e00BC316bE181F0e60971e8fEdB9223b, 1360000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x38f4cAD7997907741FA0D912422Ae59aC6b83dD1, 250000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x2b2992e51E86980966c42736C458e2232376a044, 105000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0xdD0F60610052bE0976Cf8BEE576Dbb3a1621a309, 140000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0xd61B4F33D3413827baa1425E2FDa485913C9625B, 740000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0xE6D4a77D01C680Ebbc0c84393ca598984b3F45e3, 505630 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x35D3648c29Ac180D5C7Ef386D52de9539c9c487a, 150000 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x344a6130d187f51ef0DAb785e10FaEA0FeE4b5dE, 967500 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(0x026cC76a245987f3420D0FE30070B568b4b46F68, 967500 ether, vestingStarts, threeMonths);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_address != address(0x0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claimableTokens() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalVestedTokens() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateVestedTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(_poolA, 175000000 ether, vestingStarts, vestingStarts.add(7 years));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(_poolB, 168000000 ether, vestingStarts, vestingStarts.add(7 years));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(_poolC, 70000000 ether, vestingStarts, vestingStarts.add(7 years));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    grantVestedTokens(_poolD, 48999990 ether, vestingStarts, vestingStarts.add(4 years));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBtcUsdRate(uint256 _rate) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/flattened-contracts/TokenVesting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TokenVesting is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    circulatingSupply += claimable;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public circulatingSupply = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].vesting,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].start,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].claimed\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value.sub(grants[_to][i].claimed)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value.sub(grants[_to][i].claimed)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].value,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].vesting,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].start,\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        grants[_to][i].claimed\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 307,
                    "vulnerability_code": "  function claim(address _to) internal {\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n\n    }\n\n\n\n    token.transfer(_to, claimable);\n\n    circulatingSupply += claimable;\n\n\n\n    NewTokenClaim(_to, claimable);\n\n  }\n",
                    "message": "TokenVesting.claim (TokenVesting.sol#282-307) does not use the value returned by external calls:\n\t-token.transfer(_to,claimable) (TokenVesting.sol#302-303)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 307,
                    "vulnerability_code": "  function claim(address _to) internal {\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n      grants[_to][i].claimed = grants[_to][i].claimed.add(claimableFor);\n\n    }\n\n\n\n    token.transfer(_to, claimable);\n\n    circulatingSupply += claimable;\n\n\n\n    NewTokenClaim(_to, claimable);\n\n  }\n",
                    "message": "Reentrancy in TokenVesting.claim (TokenVesting.sol#282-307):\n\tExternal calls:\n\t- token.transfer(_to,claimable) (TokenVesting.sol#302-303)\n\tState variables written after the call(s):\n\t- circulatingSupply (TokenVesting.sol#303-304)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function calculateVestedTokens(\n\n      uint256 _tokens,\n\n      uint256 _vesting,\n\n      uint256 _start,\n\n      uint256 _claimed\n\n  ) internal constant returns (uint256) {\n\n    uint256 time = block.timestamp;\n\n\n\n    if (time < _start) {\n\n      return 0;\n\n    }\n\n\n\n    if (time >= _vesting) {\n\n      return _tokens.sub(_claimed);\n\n    }\n\n\n\n    uint256 vestedTokens = _tokens.mul(time.sub(_start)).div(\n\n      _vesting.sub(_start)\n\n    );\n\n\n\n    return vestedTokens.sub(_claimed);\n\n  }\n\n\n",
                    "message": "TokenVesting.calculateVestedTokens (TokenVesting.sol#256-279) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- time < _start (TokenVesting.sol#264-268)\n\t- time >= _vesting (TokenVesting.sol#268-272)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "  uint256 public totalSupply;\n",
                    "message": "ERC20Basic.totalSupply should be constant (TokenVesting.sol#92-93)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
                    "message": "Ownable.transferOwnership (TokenVesting.sol#76-82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (TokenVesting.sol#93-94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (TokenVesting.sol#94-95) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n\n    token = ERC20Basic(_token);\n\n    ico = _ico;\n\n    initialized = true;\n\n    active = true;\n\n  }\n\n\n",
                    "message": "TokenVesting.init (TokenVesting.sol#148-155) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "  function stop() public isActive onlyOwner {\n\n    active = false;\n\n  }\n\n\n",
                    "message": "TokenVesting.stop (TokenVesting.sol#155-159) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function resume() public onlyOwner {\n\n    require(!active);\n\n    require(initialized);\n\n    active = true;\n\n  }\n\n\n",
                    "message": "TokenVesting.resume (TokenVesting.sol#159-165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "  function grantVestedTokens(\n\n      address _to,\n\n      uint256 _value,\n\n      uint256 _start,\n\n      uint256 _vesting\n\n  ) public icoResticted isActive {\n\n    require(_value > 0);\n\n    require(_vesting > _start);\n\n    require(grants[_to].length < 10);\n\n\n\n    TokenGrant memory grant = TokenGrant(_value, 0, _vesting, _start);\n\n    grants[_to].push(grant);\n\n\n\n    NewTokenGrant(_to, _value, _start, _vesting);\n\n  }\n\n\n",
                    "message": "TokenVesting.grantVestedTokens (TokenVesting.sol#173-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "  function claimTokens() public {\n\n    claim(msg.sender);\n\n  }\n\n\n",
                    "message": "TokenVesting.claimTokens (TokenVesting.sol#192-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "  function claimTokensFor(address _to) public onlyOwner {\n\n    claim(_to);\n\n  }\n\n\n",
                    "message": "TokenVesting.claimTokensFor (TokenVesting.sol#200-204) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "  function claimableTokens() public constant returns (uint256) {\n\n    address _to = msg.sender;\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return 0;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    uint256 claimableFor = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimableFor = calculateVestedTokens(\n\n        grants[_to][i].value,\n\n        grants[_to][i].vesting,\n\n        grants[_to][i].start,\n\n        grants[_to][i].claimed\n\n      );\n\n      claimable = claimable.add(claimableFor);\n\n    }\n\n    return claimable;\n\n  }\n\n\n",
                    "message": "TokenVesting.claimableTokens (TokenVesting.sol#207-229) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 249,
                    "vulnerability_code": "  function totalVestedTokens() public constant returns (uint256) {\n\n    address _to = msg.sender;\n\n    uint256 numberOfGrants = grants[_to].length;\n\n\n\n    if (numberOfGrants == 0) {\n\n      return 0;\n\n    }\n\n\n\n    uint256 claimable = 0;\n\n    for (uint256 i = 0; i < numberOfGrants; i++) {\n\n      claimable = claimable.add(\n\n        grants[_to][i].value.sub(grants[_to][i].claimed)\n\n      );\n\n    }\n\n    return claimable;\n\n  }\n\n\n",
                    "message": "TokenVesting.totalVestedTokens (TokenVesting.sol#232-249) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in TokenVesting.sol:\n\t- pragma solidity^0.4.18 (TokenVesting.sol#3-5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
                    "message": "Function 'Ownable.Ownable' (TokenVesting.sol#58-62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function TokenVesting() public {\n\n    active = false;\n\n  }\n\n\n",
                    "message": "Function 'TokenVesting.TokenVesting' (TokenVesting.sol#144-148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
                    "message": "Parameter '_token' of TokenVesting.init (TokenVesting.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
                    "message": "Parameter '_ico' of TokenVesting.init (TokenVesting.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": 175,
                    "vulnerability_code": "      address _to,\n",
                    "message": "Parameter '_to' of TokenVesting.grantVestedTokens (TokenVesting.sol#174-175) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "      uint256 _value,\n",
                    "message": "Parameter '_value' of TokenVesting.grantVestedTokens (TokenVesting.sol#175-176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 177,
                    "vulnerability_code": "      uint256 _start,\n",
                    "message": "Parameter '_start' of TokenVesting.grantVestedTokens (TokenVesting.sol#176-177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 178,
                    "vulnerability_code": "      uint256 _vesting\n",
                    "message": "Parameter '_vesting' of TokenVesting.grantVestedTokens (TokenVesting.sol#177-178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claimTokensFor(address _to) public onlyOwner {\n",
                    "message": "Parameter '_to' of TokenVesting.claimTokensFor (TokenVesting.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "      uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of TokenVesting.calculateVestedTokens (TokenVesting.sol#257-258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 259,
                    "vulnerability_code": "      uint256 _vesting,\n",
                    "message": "Parameter '_vesting' of TokenVesting.calculateVestedTokens (TokenVesting.sol#258-259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 260,
                    "vulnerability_code": "      uint256 _start,\n",
                    "message": "Parameter '_start' of TokenVesting.calculateVestedTokens (TokenVesting.sol#259-260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "      uint256 _claimed\n",
                    "message": "Parameter '_claimed' of TokenVesting.calculateVestedTokens (TokenVesting.sol#260-261) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claim(address _to) internal {\n",
                    "message": "Parameter '_to' of TokenVesting.claim (TokenVesting.sol#282) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claimableTokens() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalVestedTokens() public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateVestedTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < numberOfGrants; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address _token, address _ico) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/flattened-contracts/Escrow.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Escrow is IEscrow, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (lock.fee > 0 && lock.recipient == _recipient) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      token.transfer(_recipient, lock.value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      token.transfer(msg.sender, lock.fee);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      token.transfer(_recipient, lock.value.add(lock.fee));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (lock.fee > 0 && lock.sender != _recipient) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      token.transfer(_recipient, lock.value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      token.transfer(msg.sender, lock.fee);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      token.transfer(_recipient, lock.value.add(lock.fee));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_59"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function release(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration != 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.recipient == _recipient || lock.sender == _recipient);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.recipient == _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
                    "message": "Reentrancy in Escrow.release (Escrow.sol#279-313):\n\tExternal calls:\n\t- token.transfer(_recipient,lock.value) (Escrow.sol#294-295)\n\t- token.transfer(msg.sender,lock.fee) (Escrow.sol#295-296)\n\t- token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#297-298)\n\tState variables written after the call(s):\n\t- escrows (Escrow.sol#300-301)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 355,
                    "vulnerability_code": "  function releaseUnlocked(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration == 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.sender != _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
                    "message": "Reentrancy in Escrow.releaseUnlocked (Escrow.sol#322-355):\n\tExternal calls:\n\t- token.transfer(_recipient,lock.value) (Escrow.sol#336-337)\n\t- token.transfer(msg.sender,lock.fee) (Escrow.sol#337-338)\n\t- token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#339-340)\n\tState variables written after the call(s):\n\t- escrows (Escrow.sol#342-343)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function release(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration != 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.recipient == _recipient || lock.sender == _recipient);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.recipient == _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
                    "message": "Escrow.release (Escrow.sol#279-313) does not use the value returned by external calls:\n\t-token.transfer(_recipient,lock.value) (Escrow.sol#294-295)\n\t-token.transfer(msg.sender,lock.fee) (Escrow.sol#295-296)\n\t-token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#297-298)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 355,
                    "vulnerability_code": "  function releaseUnlocked(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration == 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.sender != _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
                    "message": "Escrow.releaseUnlocked (Escrow.sol#322-355) does not use the value returned by external calls:\n\t-token.transfer(_recipient,lock.value) (Escrow.sol#336-337)\n\t-token.transfer(msg.sender,lock.fee) (Escrow.sol#337-338)\n\t-token.transfer(_recipient,lock.value.add(lock.fee)) (Escrow.sol#339-340)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": 385,
                    "vulnerability_code": "  function claim(\n\n      address _arbitrator,\n\n      uint256 _transactionId\n\n  ) public {\n\n    Lock memory lock = escrows[_arbitrator][_transactionId];\n\n\n\n    require(lock.sender == msg.sender);\n\n    require(lock.paid);\n\n    require(lock.expiration < block.timestamp);\n\n    require(lock.expiration != 0);\n\n    require(lock.expiration != 1);\n\n\n\n    delete escrows[_arbitrator][_transactionId];\n\n\n\n    token.transfer(msg.sender, lock.value.add(lock.fee));\n\n\n\n    Released(\n\n      _arbitrator,\n\n      msg.sender,\n\n      _transactionId\n\n    );\n\n  }\n\n\n",
                    "message": "Escrow.claim (Escrow.sol#362-385) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,lock.value.add(lock.fee)) (Escrow.sol#376-377)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n\n    require(_tokenAddress != address(token));\n\n\n\n    ISendToken erc20Token = ISendToken(_tokenAddress);\n\n    erc20Token.transfer(_transferTo, _value);\n\n  }\n",
                    "message": "Escrow.transferToken (Escrow.sol#407-413) does not use the value returned by external calls:\n\t-erc20Token.transfer(_transferTo,_value) (Escrow.sol#411-412)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": 385,
                    "vulnerability_code": "  function claim(\n\n      address _arbitrator,\n\n      uint256 _transactionId\n\n  ) public {\n\n    Lock memory lock = escrows[_arbitrator][_transactionId];\n\n\n\n    require(lock.sender == msg.sender);\n\n    require(lock.paid);\n\n    require(lock.expiration < block.timestamp);\n\n    require(lock.expiration != 0);\n\n    require(lock.expiration != 1);\n\n\n\n    delete escrows[_arbitrator][_transactionId];\n\n\n\n    token.transfer(msg.sender, lock.value.add(lock.fee));\n\n\n\n    Released(\n\n      _arbitrator,\n\n      msg.sender,\n\n      _transactionId\n\n    );\n\n  }\n\n\n",
                    "message": "Escrow.claim (Escrow.sol#362-385) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(lock.expiration < block.timestamp) (Escrow.sol#370-371)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": 245,
                    "vulnerability_code": "  function create(\n\n      address _sender,\n\n      address _recipient,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public tokenRestricted {\n\n\n\n    require(_tokens > 0);\n\n    require(_fee >= 0);\n\n    require(escrows[_arbitrator][_transactionId].value == 0);\n\n\n\n    escrows[_arbitrator][_transactionId].sender = _sender;\n\n    escrows[_arbitrator][_transactionId].recipient = _recipient;\n\n    escrows[_arbitrator][_transactionId].value = _tokens;\n\n    escrows[_arbitrator][_transactionId].fee = _fee;\n\n    escrows[_arbitrator][_transactionId].expiration = _expiration;\n\n\n\n    Created(_sender, _recipient, _arbitrator, _transactionId);\n\n  }\n\n\n",
                    "message": "Escrow.create (Escrow.sol#222-245) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function create(\n\n      address _sender,\n\n      address _recipient,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public;\n\n\n",
                    "message": "IEscrow.create (Escrow.sol#24-34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function fund(\n\n      address _sender,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public;\n\n\n",
                    "message": "IEscrow.fund (Escrow.sol#34-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": 270,
                    "vulnerability_code": "  function fund(\n\n      address _sender,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public tokenRestricted {\n\n\n\n    require(escrows[_arbitrator][_transactionId].sender == _sender);\n\n    require(escrows[_arbitrator][_transactionId].value == _tokens);\n\n    require(escrows[_arbitrator][_transactionId].fee == _fee);\n\n    require(escrows[_arbitrator][_transactionId].paid == false);\n\n\n\n    escrows[_arbitrator][_transactionId].paid = true;\n\n\n\n    Paid(_arbitrator, _transactionId);\n\n  }\n\n\n",
                    "message": "Escrow.fund (Escrow.sol#252-270) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n\n\n",
                    "message": "ISendToken.transfer (Escrow.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n\n\n",
                    "message": "ISendToken.isVerified (Escrow.sol#54-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function verify(address _address) public;\n\n\n",
                    "message": "ISendToken.verify (Escrow.sol#56-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "  function unverify(address _address) public;\n\n\n",
                    "message": "ISendToken.unverify (Escrow.sol#58-60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "  function verifiedTransferFrom(\n\n      address from,\n\n      address to,\n\n      uint256 value,\n\n      uint256 referenceId,\n\n      uint256 exchangeRate,\n\n      uint256 fee\n\n  ) public;\n\n\n",
                    "message": "ISendToken.verifiedTransferFrom (Escrow.sol#60-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "  function issueExchangeRate(\n\n      address _from,\n\n      address _to,\n\n      address _verifiedAddress,\n\n      uint256 _value,\n\n      uint256 _referenceId,\n\n      uint256 _exchangeRate\n\n  ) public;\n\n\n",
                    "message": "ISendToken.issueExchangeRate (Escrow.sol#69-78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
                    "message": "Ownable.transferOwnership (Escrow.sol#159-165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function getStatus(address _arbitrator, uint256 _transactionId) \n\n      public view returns(address, address, uint256, uint256, uint256, bool) {\n\n    return(\n\n      escrows[_arbitrator][_transactionId].sender,\n\n      escrows[_arbitrator][_transactionId].recipient,\n\n      escrows[_arbitrator][_transactionId].value,\n\n      escrows[_arbitrator][_transactionId].fee,\n\n      escrows[_arbitrator][_transactionId].expiration,\n\n      escrows[_arbitrator][_transactionId].paid\n\n    );\n\n  }\n\n\n",
                    "message": "Escrow.getStatus (Escrow.sol#198-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "  function isUnlocked(address _arbitrator, uint256 _transactionId) public view returns(bool) {\n\n    return escrows[_arbitrator][_transactionId].expiration == 1;\n\n  }\n\n\n",
                    "message": "Escrow.isUnlocked (Escrow.sol#210-214) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "  function release(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration != 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.recipient == _recipient || lock.sender == _recipient);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.recipient == _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
                    "message": "Escrow.release (Escrow.sol#279-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 355,
                    "vulnerability_code": "  function releaseUnlocked(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public {\n\n\n\n    Lock memory lock = escrows[msg.sender][_transactionId];\n\n\n\n    require(lock.expiration == 1);\n\n    require(lock.sender == _sender);\n\n    require(lock.paid);\n\n\n\n    if (lock.fee > 0 && lock.sender != _recipient) {\n\n      token.transfer(_recipient, lock.value);\n\n      token.transfer(msg.sender, lock.fee);\n\n    } else {\n\n      token.transfer(_recipient, lock.value.add(lock.fee));\n\n    }\n\n\n\n    delete escrows[msg.sender][_transactionId];\n\n\n\n    token.issueExchangeRate(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      lock.value,\n\n      _transactionId,\n\n      _exchangeRate\n\n    );\n\n    Released(msg.sender, _recipient, _transactionId);\n\n  }\n\n\n",
                    "message": "Escrow.releaseUnlocked (Escrow.sol#322-355) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": 385,
                    "vulnerability_code": "  function claim(\n\n      address _arbitrator,\n\n      uint256 _transactionId\n\n  ) public {\n\n    Lock memory lock = escrows[_arbitrator][_transactionId];\n\n\n\n    require(lock.sender == msg.sender);\n\n    require(lock.paid);\n\n    require(lock.expiration < block.timestamp);\n\n    require(lock.expiration != 0);\n\n    require(lock.expiration != 1);\n\n\n\n    delete escrows[_arbitrator][_transactionId];\n\n\n\n    token.transfer(msg.sender, lock.value.add(lock.fee));\n\n\n\n    Released(\n\n      _arbitrator,\n\n      msg.sender,\n\n      _transactionId\n\n    );\n\n  }\n\n\n",
                    "message": "Escrow.claim (Escrow.sol#362-385) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 403,
                    "vulnerability_code": "  function mediate(\n\n      uint256 _transactionId\n\n  ) public {\n\n    require(escrows[msg.sender][_transactionId].paid);\n\n    require(escrows[msg.sender][_transactionId].expiration != 0);\n\n    require(escrows[msg.sender][_transactionId].expiration != 1);\n\n\n\n    escrows[msg.sender][_transactionId].expiration = 0;\n\n\n\n    Dispute(msg.sender, _transactionId);\n\n  }\n\n\n",
                    "message": "Escrow.mediate (Escrow.sol#391-403) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n\n    require(_tokenAddress != address(token));\n\n\n\n    ISendToken erc20Token = ISendToken(_tokenAddress);\n\n    erc20Token.transfer(_transferTo, _value);\n\n  }\n",
                    "message": "Escrow.transferToken (Escrow.sol#407-413) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in Escrow.sol:\n\t- pragma solidity^0.4.18 (Escrow.sol#3-5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 145,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
                    "message": "Function 'Ownable.Ownable' (Escrow.sol#141-145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "      address _sender,\n",
                    "message": "Parameter '_sender' of Escrow.create (Escrow.sol#223-224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 225,
                    "vulnerability_code": "      address _recipient,\n",
                    "message": "Parameter '_recipient' of Escrow.create (Escrow.sol#224-225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 226,
                    "vulnerability_code": "      address _arbitrator,\n",
                    "message": "Parameter '_arbitrator' of Escrow.create (Escrow.sol#225-226) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 227,
                    "vulnerability_code": "      uint256 _transactionId,\n",
                    "message": "Parameter '_transactionId' of Escrow.create (Escrow.sol#226-227) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "      uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of Escrow.create (Escrow.sol#227-228) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "      uint256 _fee,\n",
                    "message": "Parameter '_fee' of Escrow.create (Escrow.sol#228-229) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "      uint256 _expiration\n",
                    "message": "Parameter '_expiration' of Escrow.create (Escrow.sol#229-230) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 254,
                    "vulnerability_code": "      address _sender,\n",
                    "message": "Parameter '_sender' of Escrow.fund (Escrow.sol#253-254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "      address _arbitrator,\n",
                    "message": "Parameter '_arbitrator' of Escrow.fund (Escrow.sol#254-255) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 256,
                    "vulnerability_code": "      uint256 _transactionId,\n",
                    "message": "Parameter '_transactionId' of Escrow.fund (Escrow.sol#255-256) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "      uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of Escrow.fund (Escrow.sol#256-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "      uint256 _fee\n",
                    "message": "Parameter '_fee' of Escrow.fund (Escrow.sol#257-258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 193,
                    "vulnerability_code": "  function Escrow(address _token) public {\n\n    token = ISendToken(_token);\n\n  }\n\n\n",
                    "message": "Function 'Escrow.Escrow' (Escrow.sol#189-193) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Escrow(address _token) public {\n",
                    "message": "Parameter '_token' of Escrow.Escrow (Escrow.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getStatus(address _arbitrator, uint256 _transactionId) \n",
                    "message": "Parameter '_arbitrator' of Escrow.getStatus (Escrow.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getStatus(address _arbitrator, uint256 _transactionId) \n",
                    "message": "Parameter '_transactionId' of Escrow.getStatus (Escrow.sol#198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUnlocked(address _arbitrator, uint256 _transactionId) public view returns(bool) {\n",
                    "message": "Parameter '_arbitrator' of Escrow.isUnlocked (Escrow.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUnlocked(address _arbitrator, uint256 _transactionId) public view returns(bool) {\n",
                    "message": "Parameter '_transactionId' of Escrow.isUnlocked (Escrow.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "      address _sender,\n",
                    "message": "Parameter '_sender' of Escrow.release (Escrow.sol#280-281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 282,
                    "vulnerability_code": "      address _recipient,\n",
                    "message": "Parameter '_recipient' of Escrow.release (Escrow.sol#281-282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "      uint256 _transactionId,\n",
                    "message": "Parameter '_transactionId' of Escrow.release (Escrow.sol#282-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "      uint256 _exchangeRate\n",
                    "message": "Parameter '_exchangeRate' of Escrow.release (Escrow.sol#283-284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "      address _sender,\n",
                    "message": "Parameter '_sender' of Escrow.releaseUnlocked (Escrow.sol#323-324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 325,
                    "vulnerability_code": "      address _recipient,\n",
                    "message": "Parameter '_recipient' of Escrow.releaseUnlocked (Escrow.sol#324-325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "      uint256 _transactionId,\n",
                    "message": "Parameter '_transactionId' of Escrow.releaseUnlocked (Escrow.sol#325-326) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "      uint256 _exchangeRate\n",
                    "message": "Parameter '_exchangeRate' of Escrow.releaseUnlocked (Escrow.sol#326-327) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 364,
                    "vulnerability_code": "      address _arbitrator,\n",
                    "message": "Parameter '_arbitrator' of Escrow.claim (Escrow.sol#363-364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "      uint256 _transactionId\n",
                    "message": "Parameter '_transactionId' of Escrow.claim (Escrow.sol#364-365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": 393,
                    "vulnerability_code": "      uint256 _transactionId\n",
                    "message": "Parameter '_transactionId' of Escrow.mediate (Escrow.sol#392-393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n",
                    "message": "Parameter '_tokenAddress' of Escrow.transferToken (Escrow.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n",
                    "message": "Parameter '_transferTo' of Escrow.transferToken (Escrow.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferToken(address _tokenAddress, address _transferTo, uint256 _value) public onlyOwner {\n",
                    "message": "Parameter '_value' of Escrow.transferToken (Escrow.sol#407) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verify(address _address) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unverify(address _address) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/flattened-contracts/SDT.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract SnapshotToken is ISnapshotToken, StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_77"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function create(\n\n      address _sender,\n\n      address _recipient,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public;\n\n\n",
                    "message": "IEscrow.create (SDT.sol#24-34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "  function fund(\n\n      address _sender,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public;\n\n\n",
                    "message": "IEscrow.fund (SDT.sol#34-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function verify(address _address) public;\n\n\n",
                    "message": "ISendToken.verify (SDT.sol#56-58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": 487,
                    "vulnerability_code": "  function verify(address _address) public onlyOwner {\n\n    verifiedAddresses[_address] = true;\n\n  }\n\n\n",
                    "message": "SendToken.verify (SDT.sol#483-487) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 496,
                    "vulnerability_code": "  function unverify(address _address) public onlyOwner {\n\n    verifiedAddresses[_address] = false;\n\n  }\n\n\n",
                    "message": "SendToken.unverify (SDT.sol#492-496) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "  function unverify(address _address) public;\n\n\n",
                    "message": "ISendToken.unverify (SDT.sol#58-60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 69,
                    "vulnerability_code": "  function verifiedTransferFrom(\n\n      address from,\n\n      address to,\n\n      uint256 value,\n\n      uint256 referenceId,\n\n      uint256 exchangeRate,\n\n      uint256 fee\n\n  ) public;\n\n\n",
                    "message": "ISendToken.verifiedTransferFrom (SDT.sol#60-69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": 540,
                    "vulnerability_code": "  function verifiedTransferFrom(\n\n      address _from,\n\n      address _to,\n\n      uint256 _value,\n\n      uint256 _referenceId,\n\n      uint256 _exchangeRate,\n\n      uint256 _fee\n\n  ) public verifiedResticted {\n\n    require(_exchangeRate > 0);\n\n\n\n    transferFrom(_from, _to, _value);\n\n    transferFrom(_from, msg.sender, _fee);\n\n\n\n    VerifiedTransfer(\n\n      _from,\n\n      _to,\n\n      msg.sender,\n\n      _value,\n\n      _referenceId,\n\n      _exchangeRate\n\n    );\n\n  }\n\n\n",
                    "message": "SendToken.verifiedTransferFrom (SDT.sol#517-540) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": 626,
                    "vulnerability_code": "  function issueExchangeRate(\n\n      address _from,\n\n      address _to,\n\n      address _verifiedAddress,\n\n      uint256 _value,\n\n      uint256 _transactionId,\n\n      uint256 _exchangeRate\n\n  ) public escrowResticted {\n\n    bool noRate = (_exchangeRate == 0);\n\n    if (isVerified(_verifiedAddress)) {\n\n      require(!noRate);\n\n      VerifiedTransfer(\n\n        _from,\n\n        _to,\n\n        _verifiedAddress,\n\n        _value,\n\n        _transactionId,\n\n        _exchangeRate\n\n      );\n\n    } else {\n\n      require(noRate);\n\n    }\n\n  }\n",
                    "message": "SendToken.issueExchangeRate (SDT.sol#603-626) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "  function issueExchangeRate(\n\n      address _from,\n\n      address _to,\n\n      address _verifiedAddress,\n\n      uint256 _value,\n\n      uint256 _referenceId,\n\n      uint256 _exchangeRate\n\n  ) public;\n\n\n",
                    "message": "ISendToken.issueExchangeRate (SDT.sol#69-78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": 98,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
                    "message": "ISnapshotToken.requestSnapshots (SDT.sol#97-98) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 418,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public isPolls {\n\n    snapshotBlock = _blockNumber;\n\n  }\n",
                    "message": "SnapshotToken.requestSnapshots (SDT.sol#415-418) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
                    "message": "Ownable.transferOwnership (SDT.sol#137-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": 240,
                    "vulnerability_code": "  function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (SDT.sol#239-240) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": 303,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n\n    return allowed[_owner][_spender];\n\n  }\n\n\n",
                    "message": "StandardToken.allowance (SDT.sol#299-303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (SDT.sol#241-242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    Approval(msg.sender, _spender, _value);\n\n    return true;\n\n  }\n\n\n",
                    "message": "StandardToken.approve (SDT.sol#287-293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n\n",
                    "message": "StandardToken.increaseApproval (SDT.sol#313-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": 340,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n\n  }\n\n\n",
                    "message": "StandardToken.decreaseApproval (SDT.sol#329-340) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": 376,
                    "vulnerability_code": "  function setPolls(address _address) public onlyOwner {\n\n    polls = _address;\n\n  }\n\n\n",
                    "message": "SnapshotToken.setPolls (SDT.sol#372-376) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 444,
                    "vulnerability_code": "    function burn(uint256 _value) public {\n\n        require(_value <= balances[msg.sender]);\n\n        // no need to require value <= totalSupply, since that would imply the\n\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n\n        totalSupply = totalSupply.sub(_value);\n\n        Burn(burner, _value);\n\n    }\n",
                    "message": "BurnableToken.burn (SDT.sol#434-444) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "  function setEscrow(address _address) public onlyOwner {\n\n    escrow = IEscrow(_address);\n\n  }\n\n\n",
                    "message": "SendToken.setEscrow (SDT.sol#501-505) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": 568,
                    "vulnerability_code": "  function createEscrow(\n\n      address _sender,\n\n      address _recipient,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public {\n\n    escrow.create(\n\n      _sender,\n\n      _recipient,\n\n      msg.sender,\n\n      _transactionId,\n\n      _tokens,\n\n      _fee,\n\n      _expiration\n\n    );\n\n  }\n\n\n",
                    "message": "SendToken.createEscrow (SDT.sol#549-568) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "  function fundEscrow(\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public {\n\n    uint256 total = _tokens.add(_fee);\n\n    transfer(escrow, total);\n\n\n\n    escrow.fund(\n\n      msg.sender,\n\n      _arbitrator,\n\n      _transactionId,\n\n      _tokens,\n\n      _fee\n\n    );\n\n  }\n\n\n",
                    "message": "SendToken.fundEscrow (SDT.sol#576-594) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in SDT.sol:\n\t- pragma solidity^0.4.18 (SDT.sol#3-5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
                    "message": "Function 'Ownable.Ownable' (SDT.sol#119-123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (SDT.sol#226) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (SDT.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (SDT.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (SDT.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (SDT.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (SDT.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (SDT.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (SDT.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (SDT.sol#287) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (SDT.sol#287) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (SDT.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (SDT.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (SDT.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (SDT.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public isPolls {\n",
                    "message": "Parameter '_blockNumber' of SnapshotToken.requestSnapshots (SDT.sol#415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256) {\n",
                    "message": "Parameter '_owner' of SnapshotToken.takeSnapshot (SDT.sol#403) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of SnapshotToken.transfer (SDT.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of SnapshotToken.transfer (SDT.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of SnapshotToken.transferFrom (SDT.sol#393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of SnapshotToken.transferFrom (SDT.sol#393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of SnapshotToken.transferFrom (SDT.sol#393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setPolls(address _address) public onlyOwner {\n",
                    "message": "Parameter '_address' of SnapshotToken.setPolls (SDT.sol#372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _value) public {\n",
                    "message": "Parameter '_value' of BurnableToken.burn (SDT.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVerified(address _address) public view returns(bool) {\n",
                    "message": "Parameter '_address' of SendToken.isVerified (SDT.sol#474) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verify(address _address) public onlyOwner {\n",
                    "message": "Parameter '_address' of SendToken.verify (SDT.sol#483) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unverify(address _address) public onlyOwner {\n",
                    "message": "Parameter '_address' of SendToken.unverify (SDT.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 519,
                    "vulnerability_code": "      address _from,\n",
                    "message": "Parameter '_from' of SendToken.verifiedTransferFrom (SDT.sol#518-519) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": 520,
                    "vulnerability_code": "      address _to,\n",
                    "message": "Parameter '_to' of SendToken.verifiedTransferFrom (SDT.sol#519-520) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": 521,
                    "vulnerability_code": "      uint256 _value,\n",
                    "message": "Parameter '_value' of SendToken.verifiedTransferFrom (SDT.sol#520-521) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": 522,
                    "vulnerability_code": "      uint256 _referenceId,\n",
                    "message": "Parameter '_referenceId' of SendToken.verifiedTransferFrom (SDT.sol#521-522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": 523,
                    "vulnerability_code": "      uint256 _exchangeRate,\n",
                    "message": "Parameter '_exchangeRate' of SendToken.verifiedTransferFrom (SDT.sol#522-523) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": 524,
                    "vulnerability_code": "      uint256 _fee\n",
                    "message": "Parameter '_fee' of SendToken.verifiedTransferFrom (SDT.sol#523-524) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 604,
                    "vulnerability_to_line": 605,
                    "vulnerability_code": "      address _from,\n",
                    "message": "Parameter '_from' of SendToken.issueExchangeRate (SDT.sol#604-605) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": 606,
                    "vulnerability_code": "      address _to,\n",
                    "message": "Parameter '_to' of SendToken.issueExchangeRate (SDT.sol#605-606) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": 607,
                    "vulnerability_code": "      address _verifiedAddress,\n",
                    "message": "Parameter '_verifiedAddress' of SendToken.issueExchangeRate (SDT.sol#606-607) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": 608,
                    "vulnerability_code": "      uint256 _value,\n",
                    "message": "Parameter '_value' of SendToken.issueExchangeRate (SDT.sol#607-608) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": 609,
                    "vulnerability_code": "      uint256 _transactionId,\n",
                    "message": "Parameter '_transactionId' of SendToken.issueExchangeRate (SDT.sol#608-609) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": 610,
                    "vulnerability_code": "      uint256 _exchangeRate\n",
                    "message": "Parameter '_exchangeRate' of SendToken.issueExchangeRate (SDT.sol#609-610) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setEscrow(address _address) public onlyOwner {\n",
                    "message": "Parameter '_address' of SendToken.setEscrow (SDT.sol#501) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "      address _sender,\n",
                    "message": "Parameter '_sender' of SendToken.createEscrow (SDT.sol#550-551) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": 552,
                    "vulnerability_code": "      address _recipient,\n",
                    "message": "Parameter '_recipient' of SendToken.createEscrow (SDT.sol#551-552) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": 553,
                    "vulnerability_code": "      uint256 _transactionId,\n",
                    "message": "Parameter '_transactionId' of SendToken.createEscrow (SDT.sol#552-553) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "      uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of SendToken.createEscrow (SDT.sol#553-554) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": 555,
                    "vulnerability_code": "      uint256 _fee,\n",
                    "message": "Parameter '_fee' of SendToken.createEscrow (SDT.sol#554-555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": 556,
                    "vulnerability_code": "      uint256 _expiration\n",
                    "message": "Parameter '_expiration' of SendToken.createEscrow (SDT.sol#555-556) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": 578,
                    "vulnerability_code": "      address _arbitrator,\n",
                    "message": "Parameter '_arbitrator' of SendToken.fundEscrow (SDT.sol#577-578) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": 579,
                    "vulnerability_code": "      uint256 _transactionId,\n",
                    "message": "Parameter '_transactionId' of SendToken.fundEscrow (SDT.sol#578-579) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": 580,
                    "vulnerability_code": "      uint256 _tokens,\n",
                    "message": "Parameter '_tokens' of SendToken.fundEscrow (SDT.sol#579-580) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "      uint256 _fee\n",
                    "message": "Parameter '_fee' of SendToken.fundEscrow (SDT.sol#580-581) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": 656,
                    "vulnerability_code": "  function SDT(address _sale) public validAddress(_sale) {\n\n    verifiedAddresses[owner] = true;\n\n    totalSupply = 700000000 * 10 ** decimals;\n\n    balances[_sale] = totalSupply;\n\n  }\n",
                    "message": "Function 'SDT.SDT' (SDT.sol#651-656) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function SDT(address _sale) public validAddress(_sale) {\n",
                    "message": "Parameter '_sale' of SDT.SDT (SDT.sol#651) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_address != address(0x0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setPolls(address _address) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setEscrow(address _address) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verify(address _address) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unverify(address _address) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/flattened-contracts/Polls.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Polls is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "  function vote(uint256 _option) public {\n\n    require(poll.endTime >= block.timestamp);\n\n    require(!voted[poll.block][msg.sender]);\n\n    require(token.takeSnapshot(msg.sender) >= poll.minimumTokens);\n\n\n\n    voted[poll.block][msg.sender] = true;\n\n    results[poll.block][_option] = results[poll.block][_option] + 1;\n\n  }\n\n\n",
                    "message": "Reentrancy in Polls.vote (Polls.sol#140-149):\n\tExternal calls:\n\t- require(bool)(token.takeSnapshot(msg.sender) >= poll.minimumTokens) (Polls.sol#143-144)\n\tState variables written after the call(s):\n\t- voted (Polls.sol#145-146)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "  function vote(uint256 _option) public {\n\n    require(poll.endTime >= block.timestamp);\n\n    require(!voted[poll.block][msg.sender]);\n\n    require(token.takeSnapshot(msg.sender) >= poll.minimumTokens);\n\n\n\n    voted[poll.block][msg.sender] = true;\n\n    results[poll.block][_option] = results[poll.block][_option] + 1;\n\n  }\n\n\n",
                    "message": "Reentrancy in Polls.vote (Polls.sol#140-149):\n\tExternal calls:\n\t- require(bool)(token.takeSnapshot(msg.sender) >= poll.minimumTokens) (Polls.sol#143-144)\n\tState variables written after the call(s):\n\t- results (Polls.sol#146-147)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "  function vote(uint256 _option) public {\n\n    require(poll.endTime >= block.timestamp);\n\n    require(!voted[poll.block][msg.sender]);\n\n    require(token.takeSnapshot(msg.sender) >= poll.minimumTokens);\n\n\n\n    voted[poll.block][msg.sender] = true;\n\n    results[poll.block][_option] = results[poll.block][_option] + 1;\n\n  }\n\n\n",
                    "message": "Polls.vote (Polls.sol#140-149) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(poll.endTime >= block.timestamp) (Polls.sol#141-142)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "  function showResults(uint256 _option) public view returns (uint256) {\n\n    require(poll.endTime <= block.timestamp);\n\n\n\n    return results[poll.block][_option];\n\n  }\n\n\n",
                    "message": "Polls.showResults (Polls.sol#153-159) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(poll.endTime <= block.timestamp) (Polls.sol#154-155)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
                    "message": "ISnapshotToken.requestSnapshots (Polls.sol#14-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256);\n",
                    "message": "ISnapshotToken.takeSnapshot (Polls.sol#15-16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
                    "message": "Ownable.transferOwnership (Polls.sol#54-60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "  function createPoll(\n\n      bytes32 _question,\n\n      bytes32[] _options,\n\n      uint256 _minimumTokens,\n\n      uint256 _endTime\n\n  ) public onlyOwner {\n\n    poll.block = block.number;\n\n    poll.minimumTokens = _minimumTokens;\n\n    poll.endTime = _endTime;\n\n\n\n    token.requestSnapshots(block.number);\n\n\n\n    PollCreated(\n\n      block.number,\n\n      _question,\n\n      _options,\n\n      _minimumTokens,\n\n      _endTime\n\n    );\n\n  }\n\n\n",
                    "message": "Polls.createPoll (Polls.sol#113-134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "  function vote(uint256 _option) public {\n\n    require(poll.endTime >= block.timestamp);\n\n    require(!voted[poll.block][msg.sender]);\n\n    require(token.takeSnapshot(msg.sender) >= poll.minimumTokens);\n\n\n\n    voted[poll.block][msg.sender] = true;\n\n    results[poll.block][_option] = results[poll.block][_option] + 1;\n\n  }\n\n\n",
                    "message": "Polls.vote (Polls.sol#140-149) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "  function logResults(uint256 _option) public onlyOwner {\n\n    ResultRevealed(poll.block, _option, showResults(_option));\n\n  }\n",
                    "message": "Polls.logResults (Polls.sol#163-166) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in Polls.sol:\n\t- pragma solidity^0.4.18 (Polls.sol#3-5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 40,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
                    "message": "Function 'Ownable.Ownable' (Polls.sol#36-40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "  function Polls(address _token) public {\n\n    require(_token != 0x0);\n\n    token = ISnapshotToken(_token);\n\n  }\n\n\n",
                    "message": "Function 'Polls.Polls' (Polls.sol#99-104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Polls(address _token) public {\n",
                    "message": "Parameter '_token' of Polls.Polls (Polls.sol#99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "      bytes32 _question,\n",
                    "message": "Parameter '_question' of Polls.createPoll (Polls.sol#114-115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "      bytes32[] _options,\n",
                    "message": "Parameter '_options' of Polls.createPoll (Polls.sol#115-116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "      uint256 _minimumTokens,\n",
                    "message": "Parameter '_minimumTokens' of Polls.createPoll (Polls.sol#116-117) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "      uint256 _endTime\n",
                    "message": "Parameter '_endTime' of Polls.createPoll (Polls.sol#117-118) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function vote(uint256 _option) public {\n",
                    "message": "Parameter '_option' of Polls.vote (Polls.sol#140) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function showResults(uint256 _option) public view returns (uint256) {\n",
                    "message": "Parameter '_option' of Polls.showResults (Polls.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function logResults(uint256 _option) public onlyOwner {\n",
                    "message": "Parameter '_option' of Polls.logResults (Polls.sol#163) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bytes32[] _options,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/flattened-contracts/Distribution.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Distribution is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n\n    require(!isActive);\n\n    require(token.balanceOf(this) == _cap);\n\n    require(_startTime > block.timestamp);\n\n\n\n    startTime = _startTime;\n\n    cap = _cap;\n\n    stageCap = cap / stages;\n\n    isActive = true;\n\n  }\n\n\n",
                    "message": "Distribution.init (Distribution.sol#244-255) uses a dangerous strict equality:\n\t- require(bool)(token.balanceOf(this) == _cap)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function claimBonus(uint16 _stage) public {\n\n    require(!claimed[msg.sender][_stage]);\n\n    require(getStage() > _stage);\n\n\n\n    if (!burned[_stage]) {\n\n      token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1 ether)));\n\n      burned[_stage] = true;\n\n    }\n\n\n\n    uint256 tokens = computeAddressBonus(_stage);\n\n    token.transfer(msg.sender, tokens);\n\n    bonusClaimedTokens = bonusClaimedTokens.add(tokens);\n\n    claimed[msg.sender][_stage] = true;\n\n\n\n    NewBonusClaim(msg.sender, tokens);\n\n  }\n\n\n",
                    "message": "Reentrancy in Distribution.claimBonus (Distribution.sol#259-276):\n\tExternal calls:\n\t- token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1000000000000000000))) (Distribution.sol#264-265)\n\tState variables written after the call(s):\n\t- burned (Distribution.sol#265-266)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function claimBonus(uint16 _stage) public {\n\n    require(!claimed[msg.sender][_stage]);\n\n    require(getStage() > _stage);\n\n\n\n    if (!burned[_stage]) {\n\n      token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1 ether)));\n\n      burned[_stage] = true;\n\n    }\n\n\n\n    uint256 tokens = computeAddressBonus(_stage);\n\n    token.transfer(msg.sender, tokens);\n\n    bonusClaimedTokens = bonusClaimedTokens.add(tokens);\n\n    claimed[msg.sender][_stage] = true;\n\n\n\n    NewBonusClaim(msg.sender, tokens);\n\n  }\n\n\n",
                    "message": "Reentrancy in Distribution.claimBonus (Distribution.sol#259-276):\n\tExternal calls:\n\t- token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1000000000000000000))) (Distribution.sol#264-265)\n\t- token.transfer(msg.sender,tokens) (Distribution.sol#269-270)\n\tState variables written after the call(s):\n\t- claimed (Distribution.sol#271-272)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n\n    require(!isActive);\n\n    require(token.balanceOf(this) == _cap);\n\n    require(_startTime > block.timestamp);\n\n\n\n    startTime = _startTime;\n\n    cap = _cap;\n\n    stageCap = cap / stages;\n\n    isActive = true;\n\n  }\n\n\n",
                    "message": "Reentrancy in Distribution.init (Distribution.sol#244-255):\n\tExternal calls:\n\t- require(bool)(token.balanceOf(this) == _cap) (Distribution.sol#246-247)\n\tState variables written after the call(s):\n\t- isActive (Distribution.sol#252-253)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 240,
                    "vulnerability_code": "  function () external payable {\n\n    require(isActive);\n\n    require(weiUsdRate > 0);\n\n    require(getStage() < stages);\n\n\n\n    uint256 usd = msg.value / weiUsdRate;\n\n    uint256 tokens = computeTokens(usd);\n\n    uint16 stage = getStage();\n\n\n\n    sold[stage] = sold[stage].add(tokens);\n\n    require(sold[stage] < stageCap);\n\n\n\n    contributions[msg.sender][stage] = contributions[msg.sender][stage].add(tokens);\n\n    soldTokens = soldTokens.add(tokens);\n\n    raisedETH = raisedETH.add(msg.value);\n\n    raisedUSD = raisedUSD.add(usd);\n\n\n\n    NewPurchase(msg.sender, tokens, usd, msg.value);\n\n    token.transfer(msg.sender, tokens);\n\n  }\n\n\n",
                    "message": "Distribution.fallback (Distribution.sol#219-240) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,tokens) (Distribution.sol#237-238)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function claimBonus(uint16 _stage) public {\n\n    require(!claimed[msg.sender][_stage]);\n\n    require(getStage() > _stage);\n\n\n\n    if (!burned[_stage]) {\n\n      token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1 ether)));\n\n      burned[_stage] = true;\n\n    }\n\n\n\n    uint256 tokens = computeAddressBonus(_stage);\n\n    token.transfer(msg.sender, tokens);\n\n    bonusClaimedTokens = bonusClaimedTokens.add(tokens);\n\n    claimed[msg.sender][_stage] = true;\n\n\n\n    NewBonusClaim(msg.sender, tokens);\n\n  }\n\n\n",
                    "message": "Distribution.claimBonus (Distribution.sol#259-276) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,tokens) (Distribution.sol#269-270)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "  function claimTokens(address _token) public onlyOwner {\n\n    // owner can claim any token but SDT\n\n    require(_token != address(token));\n\n    if (_token == 0x0) {\n\n      owner.transfer(this.balance);\n\n      return;\n\n    }\n\n\n\n    ERC20Basic erc20token = ERC20Basic(_token);\n\n    uint256 balance = erc20token.balanceOf(this);\n\n    erc20token.transfer(owner, balance);\n\n    ClaimedTokens(_token, owner, balance);\n\n  }\n\n\n",
                    "message": "Distribution.claimTokens (Distribution.sol#335-349) does not use the value returned by external calls:\n\t-erc20token.transfer(owner,balance) (Distribution.sol#345-346)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function claimBonus(uint16 _stage) public {\n\n    require(!claimed[msg.sender][_stage]);\n\n    require(getStage() > _stage);\n\n\n\n    if (!burned[_stage]) {\n\n      token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1 ether)));\n\n      burned[_stage] = true;\n\n    }\n\n\n\n    uint256 tokens = computeAddressBonus(_stage);\n\n    token.transfer(msg.sender, tokens);\n\n    bonusClaimedTokens = bonusClaimedTokens.add(tokens);\n\n    claimed[msg.sender][_stage] = true;\n\n\n\n    NewBonusClaim(msg.sender, tokens);\n\n  }\n\n\n",
                    "message": "Reentrancy in Distribution.claimBonus (Distribution.sol#259-276):\n\tExternal calls:\n\t- token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1000000000000000000))) (Distribution.sol#264-265)\n\t- token.transfer(msg.sender,tokens) (Distribution.sol#269-270)\n\tState variables written after the call(s):\n\t- bonusClaimedTokens (Distribution.sol#270-271)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n\n    require(!isActive);\n\n    require(token.balanceOf(this) == _cap);\n\n    require(_startTime > block.timestamp);\n\n\n\n    startTime = _startTime;\n\n    cap = _cap;\n\n    stageCap = cap / stages;\n\n    isActive = true;\n\n  }\n\n\n",
                    "message": "Reentrancy in Distribution.init (Distribution.sol#244-255):\n\tExternal calls:\n\t- require(bool)(token.balanceOf(this) == _cap) (Distribution.sol#246-247)\n\tState variables written after the call(s):\n\t- cap (Distribution.sol#250-251)\n\t- stageCap (Distribution.sol#251-252)\n\t- startTime (Distribution.sol#249-250)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n\n    require(!isActive);\n\n    require(token.balanceOf(this) == _cap);\n\n    require(_startTime > block.timestamp);\n\n\n\n    startTime = _startTime;\n\n    cap = _cap;\n\n    stageCap = cap / stages;\n\n    isActive = true;\n\n  }\n\n\n",
                    "message": "Distribution.init (Distribution.sol#244-255) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_startTime > block.timestamp) (Distribution.sol#247-248)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "  function getStage() public view returns(uint16) {\n\n    require(block.timestamp >= startTime);\n\n    return uint16(uint256(block.timestamp).sub(startTime).div(stageDuration));\n\n  }\n\n\n",
                    "message": "Distribution.getStage (Distribution.sol#307-312) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp >= startTime) (Distribution.sol#308-309)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    require(newOwner != address(0));\n\n    OwnershipTransferred(owner, newOwner);\n\n    owner = newOwner;\n\n  }\n\n\n",
                    "message": "Ownable.transferOwnership (Distribution.sol#76-82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n\n    return balances[_owner];\n\n  }\n\n\n",
                    "message": "BasicToken.balanceOf (Distribution.sol#130-134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "  function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (Distribution.sol#93-94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 125,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n\n    require(_to != address(0));\n\n    require(_value <= balances[msg.sender]);\n\n\n\n    // SafeMath.sub will throw if there is not enough balance.\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n\n    balances[_to] = balances[_to].add(_value);\n\n    Transfer(msg.sender, _to, _value);\n\n    return true;\n\n  }\n\n\n",
                    "message": "BasicToken.transfer (Distribution.sol#114-125) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (Distribution.sol#94-95) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "    function burn(uint256 _value) public {\n\n        require(_value <= balances[msg.sender]);\n\n        // no need to require value <= totalSupply, since that would imply the\n\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n        address burner = msg.sender;\n\n        balances[burner] = balances[burner].sub(_value);\n\n        totalSupply = totalSupply.sub(_value);\n\n        Burn(burner, _value);\n\n    }\n",
                    "message": "BurnableToken.burn (Distribution.sol#150-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 255,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n\n    require(!isActive);\n\n    require(token.balanceOf(this) == _cap);\n\n    require(_startTime > block.timestamp);\n\n\n\n    startTime = _startTime;\n\n    cap = _cap;\n\n    stageCap = cap / stages;\n\n    isActive = true;\n\n  }\n\n\n",
                    "message": "Distribution.init (Distribution.sol#244-255) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 276,
                    "vulnerability_code": "  function claimBonus(uint16 _stage) public {\n\n    require(!claimed[msg.sender][_stage]);\n\n    require(getStage() > _stage);\n\n\n\n    if (!burned[_stage]) {\n\n      token.burn(stageCap.sub(sold[_stage]).sub(sold[_stage].mul(computeBonus(_stage)).div(1 ether)));\n\n      burned[_stage] = true;\n\n    }\n\n\n\n    uint256 tokens = computeAddressBonus(_stage);\n\n    token.transfer(msg.sender, tokens);\n\n    bonusClaimedTokens = bonusClaimedTokens.add(tokens);\n\n    claimed[msg.sender][_stage] = true;\n\n\n\n    NewBonusClaim(msg.sender, tokens);\n\n  }\n\n\n",
                    "message": "Distribution.claimBonus (Distribution.sol#259-276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n\n    require(_rate > 0);\n\n    weiUsdRate = _rate;\n\n  }\n\n\n",
                    "message": "Distribution.setWeiUsdRate (Distribution.sol#280-285) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "  function forwardFunds(uint256 _amount, address _address) public onlyOwner {\n\n    _address.transfer(_amount);\n\n  }\n\n\n",
                    "message": "Distribution.forwardFunds (Distribution.sol#290-294) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "  function claimTokens(address _token) public onlyOwner {\n\n    // owner can claim any token but SDT\n\n    require(_token != address(token));\n\n    if (_token == 0x0) {\n\n      owner.transfer(this.balance);\n\n      return;\n\n    }\n\n\n\n    ERC20Basic erc20token = ERC20Basic(_token);\n\n    uint256 balance = erc20token.balanceOf(this);\n\n    erc20token.transfer(owner, balance);\n\n    ClaimedTokens(_token, owner, balance);\n\n  }\n\n\n",
                    "message": "Distribution.claimTokens (Distribution.sol#335-349) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in Distribution.sol:\n\t- pragma solidity^0.4.18 (Distribution.sol#3-5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "  function Ownable() public {\n\n    owner = msg.sender;\n\n  }\n\n\n",
                    "message": "Function 'Ownable.Ownable' (Distribution.sol#58-62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (Distribution.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (Distribution.sol#114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (Distribution.sol#114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(uint256 _value) public {\n",
                    "message": "Parameter '_value' of BurnableToken.burn (Distribution.sol#150) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "  function Distribution(\n\n      uint16 _stages,\n\n      uint256 _stageDuration,\n\n      address _token\n\n  ) public {\n\n    stages = _stages;\n\n    stageDuration = _stageDuration;\n\n    isActive = false;\n\n    token = BurnableToken(_token);\n\n  }\n\n\n",
                    "message": "Function 'Distribution.Distribution' (Distribution.sol#205-216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "      uint16 _stages,\n",
                    "message": "Parameter '_stages' of Distribution.Distribution (Distribution.sol#206-207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "      uint256 _stageDuration,\n",
                    "message": "Parameter '_stageDuration' of Distribution.Distribution (Distribution.sol#207-208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "      address _token\n",
                    "message": "Parameter '_token' of Distribution.Distribution (Distribution.sol#208-209) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n",
                    "message": "Parameter '_cap' of Distribution.init (Distribution.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n",
                    "message": "Parameter '_startTime' of Distribution.init (Distribution.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claimBonus(uint16 _stage) public {\n",
                    "message": "Parameter '_stage' of Distribution.claimBonus (Distribution.sol#259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n",
                    "message": "Parameter '_rate' of Distribution.setWeiUsdRate (Distribution.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function forwardFunds(uint256 _amount, address _address) public onlyOwner {\n",
                    "message": "Parameter '_amount' of Distribution.forwardFunds (Distribution.sol#290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function forwardFunds(uint256 _amount, address _address) public onlyOwner {\n",
                    "message": "Parameter '_address' of Distribution.forwardFunds (Distribution.sol#290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function computeTokens(uint256 _usd) public view returns(uint256) {\n",
                    "message": "Parameter '_usd' of Distribution.computeTokens (Distribution.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function computeBonus(uint16 _stage) public view returns(uint256) {\n",
                    "message": "Parameter '_stage' of Distribution.computeBonus (Distribution.sol#316) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function computeAddressBonus(uint16 _stage) public view returns(uint256) {\n",
                    "message": "Parameter '_stage' of Distribution.computeAddressBonus (Distribution.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function claimTokens(address _token) public onlyOwner {\n",
                    "message": "Parameter '_token' of Distribution.claimTokens (Distribution.sol#335) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(uint256 _cap, uint256 _startTime) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setWeiUsdRate(uint256 _rate) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/contracts/IEscrow.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function create(\n\n      address _sender,\n\n      address _recipient,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee,\n\n      uint256 _expiration\n\n  ) public;\n\n\n",
                    "message": "IEscrow.create (IEscrow.sol#23-33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "  function fund(\n\n      address _sender,\n\n      address _arbitrator,\n\n      uint256 _transactionId,\n\n      uint256 _tokens,\n\n      uint256 _fee\n\n  ) public;\n\n\n",
                    "message": "IEscrow.fund (IEscrow.sol#33-41) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in IEscrow.sol:\n\t- pragma solidity^0.4.18 (IEscrow.sol#3-5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/contracts/ISendToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n\n\n",
                    "message": "ISendToken.transfer (ISendToken.sol#13-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n\n\n",
                    "message": "ISendToken.isVerified (ISendToken.sol#15-17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function verify(address _address) public;\n\n\n",
                    "message": "ISendToken.verify (ISendToken.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "  function unverify(address _address) public;\n\n\n",
                    "message": "ISendToken.unverify (ISendToken.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "  function verifiedTransferFrom(\n\n      address from,\n\n      address to,\n\n      uint256 value,\n\n      uint256 referenceId,\n\n      uint256 exchangeRate,\n\n      uint256 fee\n\n  ) public;\n\n\n",
                    "message": "ISendToken.verifiedTransferFrom (ISendToken.sol#21-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function issueExchangeRate(\n\n      address _from,\n\n      address _to,\n\n      address _verifiedAddress,\n\n      uint256 _value,\n\n      uint256 _referenceId,\n\n      uint256 _exchangeRate\n\n  ) public;\n\n\n",
                    "message": "ISendToken.issueExchangeRate (ISendToken.sol#30-39) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in ISendToken.sol:\n\t- pragma solidity^0.4.18 (ISendToken.sol#4-6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isVerified(address _address) public constant returns(bool);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function verify(address _address) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unverify(address _address) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public;\n",
                    "message": null
                }
            ]
        }
    },
    "sdt-contracts-master/contracts/ISnapshotToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
                    "message": "ISnapshotToken.requestSnapshots (ISnapshotToken.sol#13-14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256);\n",
                    "message": "ISnapshotToken.takeSnapshot (ISnapshotToken.sol#14-15) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n\n\n",
                    "message": "Detected issues with version pragma in ISnapshotToken.sol:\n\t- pragma solidity^0.4.18 (ISnapshotToken.sol#3-5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function requestSnapshots(uint256 _blockNumber) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function takeSnapshot(address _owner) public returns(uint256);\n",
                    "message": null
                }
            ]
        }
    }
}