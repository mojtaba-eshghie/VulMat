{
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/BMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "    function calcSpotPrice(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint spotPrice)\n\n    {\n\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\n\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\n\n        uint ratio = bdiv(numer, denom);\n\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\n\n        return  (spotPrice = bmul(ratio, scale));\n",
                    "message": "BMath.calcSpotPrice (BMath.sol#266-281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "    function calcOutGivenIn(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint tokenAmountIn,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountOut)\n\n    {\n\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n\n        uint adjustedIn = bsub(BONE, swapFee);\n\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\n\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\n\n        uint foo = bpow(y, weightRatio);\n\n        uint bar = bsub(BONE, foo);\n\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\n\n        return tokenAmountOut;\n",
                    "message": "BMath.calcOutGivenIn (BMath.sol#293-312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "    function calcInGivenOut(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint tokenAmountOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountIn)\n\n    {\n\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\n\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\n\n        uint y = bdiv(tokenBalanceOut, diff);\n\n        uint foo = bpow(y, weightRatio);\n\n        foo = bsub(foo, BONE);\n\n        tokenAmountIn = bsub(BONE, swapFee);\n\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\n\n        return tokenAmountIn;\n",
                    "message": "BMath.calcInGivenOut (BMath.sol#324-343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": 383,
                    "vulnerability_code": "    function calcPoolOutGivenSingleIn(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint tokenAmountIn,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint poolAmountOut)\n\n    {\n\n        // Charge the trading fee for the proportion of tokenAi\n\n        ///  which is implicitly traded to the other pool tokens.\n\n        // That proportion is (1- weightTokenIn)\n\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\n\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n\n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\n\n\n\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\n\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\n\n\n\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\n\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\n\n        // SWC-Integer Overflow and Underflow: L143\n\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\n\n        return poolAmountOut;\n",
                    "message": "BMath.calcPoolOutGivenSingleIn (BMath.sol#355-383) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function calcSingleInGivenPoolOut(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint poolAmountOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountIn)\n\n    {\n\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\n\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n\n      \n\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\n\n        uint boo = bdiv(BONE, normalizedWeight); \n\n        uint tokenInRatio = bpow(poolRatio, boo);\n\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\n\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\n\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way \n\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\n\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\n\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\n\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\n\n        return tokenAmountIn;\n",
                    "message": "BMath.calcSingleInGivenPoolOut (BMath.sol#395-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "    function calcSingleOutGivenPoolIn(\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint poolAmountIn,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountOut)\n\n    {\n\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n\n        // charge exit fee on the pool token side\n\n        // pAiAfterExitFee = pAi*(1-exitFee)\n\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\n\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\n\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n\n     \n\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\n\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\n\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\n\n\n\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\n\n\n\n        // charge swap fee on the output token side \n\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\n\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\n\n        return tokenAmountOut;\n",
                    "message": "BMath.calcSingleOutGivenPoolIn (BMath.sol#434-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 507,
                    "vulnerability_code": "    function calcPoolInGivenSingleOut(\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint tokenAmountOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint poolAmountIn)\n\n    {\n\n\n\n        // charge swap fee on the output token side \n\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\n\n        uint zoo = bsub(BONE, normalizedWeight);\n\n        uint zar = bmul(zoo, swapFee); \n\n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\n\n\n\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\n\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\n\n\n\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\n\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\n\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\n\n\n\n        // charge exit fee on the pool token side\n\n        // pAi = pAiAfterExitFee/(1-exitFee)\n\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\n\n        return poolAmountIn;\n",
                    "message": "BMath.calcPoolInGivenSingleOut (BMath.sol#476-507) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in BMath.sol:\n\t- pragma solidity0.5.12 (BMath.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (BMath.sol#47): it allows old versions\n\t- pragma solidity0.5.12 (BMath.sol#90): it allows old versions\n\t- pragma solidity0.5.12 (BMath.sol#254): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint, bool)\n",
                    "message": null
                }
            ]
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/BToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals = 18;\n",
                    "message": "BToken._decimals should be constant (BToken.sol#315)\nBToken._name should be constant (BToken.sol#313)\nBToken._symbol should be constant (BToken.sol#314)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 339,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply;\n",
                    "message": "BToken.totalSupply (BToken.sol#337-339) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() external view returns (uint);\n",
                    "message": "IERC20.totalSupply (BToken.sol#262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "BToken.name (BToken.sol#317-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "BToken.symbol (BToken.sol#321-323) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "BToken.decimals (BToken.sol#325-327) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in BToken.sol:\n\t- pragma solidity0.5.12 (BToken.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (BToken.sol#47): it allows old versions\n\t- pragma solidity0.5.12 (BToken.sol#90): it allows old versions\n\t- pragma solidity0.5.12 (BToken.sol#254): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function _mint(uint amt) internal {\n\n        _balance[address(this)] = badd(_balance[address(this)], amt);\n\n        _totalSupply = badd(_totalSupply, amt);\n\n        emit Transfer(address(0), address(this), amt);\n",
                    "message": "Function 'BTokenBase._mint' (BToken.sol#282-286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "    function _burn(uint amt) internal {\n\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\n\n        _totalSupply = bsub(_totalSupply, amt);\n\n        emit Transfer(address(this), address(0), amt);\n",
                    "message": "Function 'BTokenBase._burn' (BToken.sol#288-293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[src] = bsub(_balance[src], amt);\n\n        _balance[dst] = badd(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
                    "message": "Function 'BTokenBase._move' (BToken.sol#295-300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
                    "message": "Function 'BTokenBase._push' (BToken.sol#302-304) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
                    "message": "Function 'BTokenBase._pull' (BToken.sol#306-308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint)                   internal _balance;\n",
                    "message": "Variable 'BTokenBase._balance' (BToken.sol#275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address=>uint)) internal _allowance;\n",
                    "message": "Variable 'BTokenBase._allowance' (BToken.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint internal _totalSupply;\n",
                    "message": "Variable 'BTokenBase._totalSupply' (BToken.sol#277) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string  private _name     = \"Balancer Pool Token\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string  private _symbol   = \"BPT\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals = 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint, bool)\n",
                    "message": null
                }
            ]
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/BConst.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in BConst.sol:\n\t- pragma solidity0.5.12 (BConst.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (BConst.sol#47): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity0.5.12 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upgrade(address new_address) external restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/BNum.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in BNum.sol:\n\t- pragma solidity0.5.12 (BNum.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (BNum.sol#47): it allows old versions\n\t- pragma solidity0.5.12 (BNum.sol#90): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint, bool)\n",
                    "message": null
                }
            ]
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/BFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _controller = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _factory = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _swapFee = MIN_FEE;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _publicSwap = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _finalized = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _blabs = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address t = _tokens[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1034,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint bal = _records[t].balance;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address t = _tokens[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1065,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint bal = _records[t].balance;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_mutex, \"ERR_REENTRY\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_mutex, \"ERR_REENTRY\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 786,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(swapFee >= MIN_FEE, \"ERR_MIN_FEE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(swapFee <= MAX_FEE, \"ERR_MAX_FEE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 862,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 872,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 882,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 883,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(initSupply >= MIN_POOL_SUPPLY, \"ERR_MIN_POOL_SUPPLY\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 898,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_records[token].bound, \"ERR_IS_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 900,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens.length < MAX_BOUND_TOKENS, \"ERR_MAX_TOKENS\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 924,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(denorm >= MIN_WEIGHT, \"ERR_MIN_WEIGHT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 925,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(denorm <= MAX_WEIGHT, \"ERR_MAX_WEIGHT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 926,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balance >= MIN_BALANCE, \"ERR_MIN_BALANCE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balance <= MAX_BALANCE, \"ERR_MAX_BALANCE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_totalWeight <= MAX_TOTAL_WEIGHT, \"ERR_MAX_TOTAL_WEIGHT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 959,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 961,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1001,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1025,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1030,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ratio != 0, \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(tokenAmountIn <= maxAmountsIn[i], \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1050,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1057,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ratio != 0, \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1067,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(tokenAmountOut >= minAmountsOut[i], \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1089,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1096,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(poolAmountOut >= minPoolAmountOut, \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(poolAmountIn <= maxPoolAmountIn, \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _blabs, \"ERR_NOT_BLABS\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _blabs, \"ERR_NOT_BLABS\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(xfer, \"ERR_ERC20_FAILED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_29"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": 984,
                    "vulnerability_code": "    function unbind(address token)\n\n        external\n\n        _logs_\n\n        _lock_\n\n    {\n\n\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n\n\n        uint tokenBalance = _records[token].balance;\n\n        uint tokenExitFee = bmul(tokenBalance, EXIT_FEE);\n\n\n\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\n\n\n\n        // Swap the token-to-unbind with the last token,\n\n        // then delete the last token\n\n        uint index = _records[token].index;\n\n        uint last = _tokens.length - 1;\n\n        _tokens[index] = _tokens[last];\n\n        _records[_tokens[index]].index = index;\n\n        _tokens.pop();\n\n        _records[token] = Record({\n\n            bound: false,\n\n            index: 0,\n\n            denorm: 0,\n\n            balance: 0\n\n        });\n\n\n\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\n\n        _pushUnderlying(token, _factory, tokenExitFee);\n",
                    "message": "Reentrancy in BPool.unbind (BFactory.sol#953-984):\n\tExternal calls:\n\t- _tokens.pop() (BFactory.sol#974)\n\tState variables written after the call(s):\n\t- _records (BFactory.sol#975-980)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": 984,
                    "vulnerability_code": "    function unbind(address token)\n\n        external\n\n        _logs_\n\n        _lock_\n\n    {\n\n\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n\n\n        uint tokenBalance = _records[token].balance;\n\n        uint tokenExitFee = bmul(tokenBalance, EXIT_FEE);\n\n\n\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\n\n\n\n        // Swap the token-to-unbind with the last token,\n\n        // then delete the last token\n\n        uint index = _records[token].index;\n\n        uint last = _tokens.length - 1;\n\n        _tokens[index] = _tokens[last];\n\n        _records[_tokens[index]].index = index;\n\n        _tokens.pop();\n\n        _records[token] = Record({\n\n            bound: false,\n\n            index: 0,\n\n            denorm: 0,\n\n            balance: 0\n\n        });\n\n\n\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\n\n        _pushUnderlying(token, _factory, tokenExitFee);\n",
                    "message": "BPool.unbind (BFactory.sol#953-984) does not use the value returned by external calls:\n\t-_tokens.pop() (BFactory.sol#974)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals = 18;\n",
                    "message": "BToken._decimals should be constant (BFactory.sol#315)\nBToken._name should be constant (BFactory.sol#313)\nBToken._symbol should be constant (BFactory.sol#314)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "BToken.name (BFactory.sol#317-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "BToken.symbol (BFactory.sol#321-323) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "BToken.decimals (BFactory.sol#325-327) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in BFactory.sol:\n\t- pragma solidity0.5.12 (BFactory.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (BFactory.sol#47): it allows old versions\n\t- pragma solidity0.5.12 (BFactory.sol#90): it allows old versions\n\t- pragma solidity0.5.12 (BFactory.sol#254): it allows old versions\n\t- pragma solidity0.5.12 (BFactory.sol#395): it allows old versions\n\t- pragma solidity0.5.12 (BFactory.sol#668): it allows old versions\n\t- pragma solidity0.5.12 (BFactory.sol#1403): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function _mint(uint amt) internal {\n\n        _balance[address(this)] = badd(_balance[address(this)], amt);\n\n        _totalSupply = badd(_totalSupply, amt);\n\n        emit Transfer(address(0), address(this), amt);\n",
                    "message": "Function 'BTokenBase._mint' (BFactory.sol#282-286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "    function _burn(uint amt) internal {\n\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\n\n        _totalSupply = bsub(_totalSupply, amt);\n\n        emit Transfer(address(this), address(0), amt);\n",
                    "message": "Function 'BTokenBase._burn' (BFactory.sol#288-293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[src] = bsub(_balance[src], amt);\n\n        _balance[dst] = badd(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
                    "message": "Function 'BTokenBase._move' (BFactory.sol#295-300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
                    "message": "Function 'BTokenBase._push' (BFactory.sol#302-304) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
                    "message": "Function 'BTokenBase._pull' (BFactory.sol#306-308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint)                   internal _balance;\n",
                    "message": "Variable 'BTokenBase._balance' (BFactory.sol#275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address=>uint)) internal _allowance;\n",
                    "message": "Variable 'BTokenBase._allowance' (BFactory.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint internal _totalSupply;\n",
                    "message": "Variable 'BTokenBase._totalSupply' (BFactory.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": 686,
                    "vulnerability_code": "    event LOG_SWAP(\n\n        address indexed caller,\n\n        address indexed tokenIn,\n\n        address indexed tokenOut,\n\n        uint256         tokenAmountIn,\n\n        uint256         tokenAmountOut\n",
                    "message": "Event 'BPool.LOG_SWAP' (BFactory.sol#680-686) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "    event LOG_JOIN(\n\n        address indexed caller,\n\n        address indexed tokenIn,\n\n        uint256         tokenAmountIn\n",
                    "message": "Event 'BPool.LOG_JOIN' (BFactory.sol#688-692) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 698,
                    "vulnerability_code": "    event LOG_EXIT(\n\n        address indexed caller,\n\n        address indexed tokenOut,\n\n        uint256         tokenAmountOut\n",
                    "message": "Event 'BPool.LOG_EXIT' (BFactory.sol#694-698) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": 704,
                    "vulnerability_code": "    event LOG_CALL(\n\n        bytes4  indexed sig,\n\n        address indexed caller,\n\n        bytes           data\n",
                    "message": "Event 'BPool.LOG_CALL' (BFactory.sol#700-704) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": 1353,
                    "vulnerability_code": "    function _pullUnderlying(address erc20, address from, uint amount)\n\n        internal\n\n    {\n\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\n\n        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Function 'BPool._pullUnderlying' (BFactory.sol#1348-1353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": 1360,
                    "vulnerability_code": "    function _pushUnderlying(address erc20, address to, uint amount)\n\n        internal\n\n    {\n\n        bool xfer = IERC20(erc20).transfer(to, amount);\n\n        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Function 'BPool._pushUnderlying' (BFactory.sol#1355-1360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1362,
                    "vulnerability_to_line": 1366,
                    "vulnerability_code": "    function _pullPoolShare(address from, uint amount)\n\n        internal\n\n    {\n\n        _pull(from, amount);\n",
                    "message": "Function 'BPool._pullPoolShare' (BFactory.sol#1362-1366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1372,
                    "vulnerability_code": "    function _pushPoolShare(address to, uint amount)\n\n        internal\n\n    {\n\n        _push(to, amount);\n",
                    "message": "Function 'BPool._pushPoolShare' (BFactory.sol#1368-1372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": 1378,
                    "vulnerability_code": "    function _mintPoolShare(uint amount)\n\n        internal\n\n    {\n\n        _mint(amount);\n",
                    "message": "Function 'BPool._mintPoolShare' (BFactory.sol#1374-1378) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1380,
                    "vulnerability_to_line": 1384,
                    "vulnerability_code": "    function _burnPoolShare(uint amount)\n\n        internal\n\n    {\n\n        _burn(amount);\n",
                    "message": "Function 'BPool._burnPoolShare' (BFactory.sol#1380-1384) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": 709,
                    "vulnerability_code": "    modifier _logs_() {\n\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\n\n        _;\n",
                    "message": "Modifier 'BPool._logs_' (BFactory.sol#706-709) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 711,
                    "vulnerability_to_line": 716,
                    "vulnerability_code": "    modifier _lock_() {\n\n        require(!_mutex, \"ERR_REENTRY\");\n\n        _mutex = true;\n\n        _;\n\n        _mutex = false;\n",
                    "message": "Modifier 'BPool._lock_' (BFactory.sol#711-716) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": 721,
                    "vulnerability_code": "    modifier _viewlock_() {\n\n        require(!_mutex, \"ERR_REENTRY\");\n\n        _;\n",
                    "message": "Modifier 'BPool._viewlock_' (BFactory.sol#718-721) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1408,
                    "vulnerability_to_line": 1411,
                    "vulnerability_code": "    event LOG_NEW_POOL(\n\n        address indexed caller,\n\n        address indexed pool\n",
                    "message": "Event 'BFactory.LOG_NEW_POOL' (BFactory.sol#1408-1411) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSwapFee(uint swapFee)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address manager)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPublicSwap(bool public_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBLabs(address b) external {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string  private _name     = \"Balancer Pool Token\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string  private _symbol   = \"BPT\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals = 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _mutex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _factory;    // BFactory address to push token exitFee to\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _controller; // has CONTROL role\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _publicSwap; // true if PUBLIC can call SWAP functions\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private _swapFee;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _finalized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] private _tokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address=>Record) private  _records;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private _totalWeight;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address=>bool) private _isBPool;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _blabs;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint, bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1086,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint tokenAmountOut, uint spotPriceAfter)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint tokenAmountIn, uint spotPriceAfter)\n",
                    "message": null
                }
            ]
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/BColor.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in BColor.sol:\n\t- pragma solidity0.5.12 (BColor.sol#16): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/BPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _controller = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _factory = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 741,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _swapFee = MIN_FEE;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _publicSwap = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 743,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _finalized = false;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1033,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address t = _tokens[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1034,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint bal = _records[t].balance;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address t = _tokens[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1065,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint bal = _records[t].balance;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1068,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 712,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_mutex, \"ERR_REENTRY\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_mutex, \"ERR_REENTRY\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 786,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 796,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(swapFee >= MIN_FEE, \"ERR_MIN_FEE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(swapFee <= MAX_FEE, \"ERR_MAX_FEE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 862,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 872,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 881,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 882,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 883,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(initSupply >= MIN_POOL_SUPPLY, \"ERR_MIN_POOL_SUPPLY\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 898,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_records[token].bound, \"ERR_IS_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 900,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokens.length < MAX_BOUND_TOKENS, \"ERR_MAX_TOKENS\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 921,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 924,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(denorm >= MIN_WEIGHT, \"ERR_MIN_WEIGHT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 925,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(denorm <= MAX_WEIGHT, \"ERR_MAX_WEIGHT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 926,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balance >= MIN_BALANCE, \"ERR_MIN_BALANCE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balance <= MAX_BALANCE, \"ERR_MAX_BALANCE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_totalWeight <= MAX_TOTAL_WEIGHT, \"ERR_MAX_TOTAL_WEIGHT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 959,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 961,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_finalized, \"ERR_IS_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[token].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1001,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1013,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1014,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1025,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1030,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ratio != 0, \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(tokenAmountIn <= maxAmountsIn[i], \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1050,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_finalized, \"ERR_NOT_FINALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1057,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(ratio != 0, \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1067,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(tokenAmountOut >= minAmountsOut[i], \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1089,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1096,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");     \n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(poolAmountOut >= minPoolAmountOut, \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(poolAmountIn <= maxPoolAmountIn, \"ERR_LIMIT_IN\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": 984,
                    "vulnerability_code": "    function unbind(address token)\n\n        external\n\n        _logs_\n\n        _lock_\n\n    {\n\n\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n\n\n        uint tokenBalance = _records[token].balance;\n\n        uint tokenExitFee = bmul(tokenBalance, EXIT_FEE);\n\n\n\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\n\n\n\n        // Swap the token-to-unbind with the last token,\n\n        // then delete the last token\n\n        uint index = _records[token].index;\n\n        uint last = _tokens.length - 1;\n\n        _tokens[index] = _tokens[last];\n\n        _records[_tokens[index]].index = index;\n\n        _tokens.pop();\n\n        _records[token] = Record({\n\n            bound: false,\n\n            index: 0,\n\n            denorm: 0,\n\n            balance: 0\n\n        });\n\n\n\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\n\n        _pushUnderlying(token, _factory, tokenExitFee);\n",
                    "message": "Reentrancy in BPool.unbind (BPool.sol#953-984):\n\tExternal calls:\n\t- _tokens.pop() (BPool.sol#974)\n\tState variables written after the call(s):\n\t- _records (BPool.sol#975-980)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": 984,
                    "vulnerability_code": "    function unbind(address token)\n\n        external\n\n        _logs_\n\n        _lock_\n\n    {\n\n\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n\n\n        uint tokenBalance = _records[token].balance;\n\n        uint tokenExitFee = bmul(tokenBalance, EXIT_FEE);\n\n\n\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\n\n\n\n        // Swap the token-to-unbind with the last token,\n\n        // then delete the last token\n\n        uint index = _records[token].index;\n\n        uint last = _tokens.length - 1;\n\n        _tokens[index] = _tokens[last];\n\n        _records[_tokens[index]].index = index;\n\n        _tokens.pop();\n\n        _records[token] = Record({\n\n            bound: false,\n\n            index: 0,\n\n            denorm: 0,\n\n            balance: 0\n\n        });\n\n\n\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\n\n        _pushUnderlying(token, _factory, tokenExitFee);\n",
                    "message": "BPool.unbind (BPool.sol#953-984) does not use the value returned by external calls:\n\t-_tokens.pop() (BPool.sol#974)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals = 18;\n",
                    "message": "BToken._decimals should be constant (BPool.sol#315)\nBToken._name should be constant (BPool.sol#313)\nBToken._symbol should be constant (BPool.sol#314)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "BToken.name (BPool.sol#317-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "BToken.symbol (BPool.sol#321-323) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 327,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "BToken.decimals (BPool.sol#325-327) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in BPool.sol:\n\t- pragma solidity0.5.12 (BPool.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#47): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#90): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#254): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#395): it allows old versions\n\t- pragma solidity0.5.12 (BPool.sol#668): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function _mint(uint amt) internal {\n\n        _balance[address(this)] = badd(_balance[address(this)], amt);\n\n        _totalSupply = badd(_totalSupply, amt);\n\n        emit Transfer(address(0), address(this), amt);\n",
                    "message": "Function 'BTokenBase._mint' (BPool.sol#282-286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "    function _burn(uint amt) internal {\n\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\n\n        _totalSupply = bsub(_totalSupply, amt);\n\n        emit Transfer(address(this), address(0), amt);\n",
                    "message": "Function 'BTokenBase._burn' (BPool.sol#288-293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[src] = bsub(_balance[src], amt);\n\n        _balance[dst] = badd(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
                    "message": "Function 'BTokenBase._move' (BPool.sol#295-300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
                    "message": "Function 'BTokenBase._push' (BPool.sol#302-304) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
                    "message": "Function 'BTokenBase._pull' (BPool.sol#306-308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint)                   internal _balance;\n",
                    "message": "Variable 'BTokenBase._balance' (BPool.sol#275) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address=>uint)) internal _allowance;\n",
                    "message": "Variable 'BTokenBase._allowance' (BPool.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint internal _totalSupply;\n",
                    "message": "Variable 'BTokenBase._totalSupply' (BPool.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 680,
                    "vulnerability_to_line": 686,
                    "vulnerability_code": "    event LOG_SWAP(\n\n        address indexed caller,\n\n        address indexed tokenIn,\n\n        address indexed tokenOut,\n\n        uint256         tokenAmountIn,\n\n        uint256         tokenAmountOut\n",
                    "message": "Event 'BPool.LOG_SWAP' (BPool.sol#680-686) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "    event LOG_JOIN(\n\n        address indexed caller,\n\n        address indexed tokenIn,\n\n        uint256         tokenAmountIn\n",
                    "message": "Event 'BPool.LOG_JOIN' (BPool.sol#688-692) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 698,
                    "vulnerability_code": "    event LOG_EXIT(\n\n        address indexed caller,\n\n        address indexed tokenOut,\n\n        uint256         tokenAmountOut\n",
                    "message": "Event 'BPool.LOG_EXIT' (BPool.sol#694-698) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": 704,
                    "vulnerability_code": "    event LOG_CALL(\n\n        bytes4  indexed sig,\n\n        address indexed caller,\n\n        bytes           data\n",
                    "message": "Event 'BPool.LOG_CALL' (BPool.sol#700-704) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1348,
                    "vulnerability_to_line": 1353,
                    "vulnerability_code": "    function _pullUnderlying(address erc20, address from, uint amount)\n\n        internal\n\n    {\n\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\n\n        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Function 'BPool._pullUnderlying' (BPool.sol#1348-1353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": 1360,
                    "vulnerability_code": "    function _pushUnderlying(address erc20, address to, uint amount)\n\n        internal\n\n    {\n\n        bool xfer = IERC20(erc20).transfer(to, amount);\n\n        require(xfer, \"ERR_ERC20_FALSE\");\n",
                    "message": "Function 'BPool._pushUnderlying' (BPool.sol#1355-1360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1362,
                    "vulnerability_to_line": 1366,
                    "vulnerability_code": "    function _pullPoolShare(address from, uint amount)\n\n        internal\n\n    {\n\n        _pull(from, amount);\n",
                    "message": "Function 'BPool._pullPoolShare' (BPool.sol#1362-1366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1368,
                    "vulnerability_to_line": 1372,
                    "vulnerability_code": "    function _pushPoolShare(address to, uint amount)\n\n        internal\n\n    {\n\n        _push(to, amount);\n",
                    "message": "Function 'BPool._pushPoolShare' (BPool.sol#1368-1372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1374,
                    "vulnerability_to_line": 1378,
                    "vulnerability_code": "    function _mintPoolShare(uint amount)\n\n        internal\n\n    {\n\n        _mint(amount);\n",
                    "message": "Function 'BPool._mintPoolShare' (BPool.sol#1374-1378) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1380,
                    "vulnerability_to_line": 1384,
                    "vulnerability_code": "    function _burnPoolShare(uint amount)\n\n        internal\n\n    {\n\n        _burn(amount);\n",
                    "message": "Function 'BPool._burnPoolShare' (BPool.sol#1380-1384) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 706,
                    "vulnerability_to_line": 709,
                    "vulnerability_code": "    modifier _logs_() {\n\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\n\n        _;\n",
                    "message": "Modifier 'BPool._logs_' (BPool.sol#706-709) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 711,
                    "vulnerability_to_line": 716,
                    "vulnerability_code": "    modifier _lock_() {\n\n        require(!_mutex, \"ERR_REENTRY\");\n\n        _mutex = true;\n\n        _;\n\n        _mutex = false;\n",
                    "message": "Modifier 'BPool._lock_' (BPool.sol#711-716) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 718,
                    "vulnerability_to_line": 721,
                    "vulnerability_code": "    modifier _viewlock_() {\n\n        require(!_mutex, \"ERR_REENTRY\");\n\n        _;\n",
                    "message": "Modifier 'BPool._viewlock_' (BPool.sol#718-721) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1032,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1063,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSwapFee(uint swapFee)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setController(address manager)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPublicSwap(bool public_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string  private _name     = \"Balancer Pool Token\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string  private _symbol   = \"BPT\";\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals = 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _mutex;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _factory;    // BFactory address to push token exitFee to\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _controller; // has CONTROL role\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 727,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _publicSwap; // true if PUBLIC can call SWAP functions\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 731,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private _swapFee;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _finalized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] private _tokens;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address=>Record) private  _records;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private _totalWeight;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint, bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1086,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint tokenAmountOut, uint spotPriceAfter)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint tokenAmountIn, uint spotPriceAfter)\n",
                    "message": null
                }
            ]
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/test/TMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ERR_ADD_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!flag, \"ERR_SUB_UNDERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"ERR_DIV_ZERO\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 1; term >= precision; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "    function calcSpotPrice(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint spotPrice)\n\n    {\n\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\n\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\n\n        uint ratio = bdiv(numer, denom);\n\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\n\n        return  (spotPrice = bmul(ratio, scale));\n",
                    "message": "BMath.calcSpotPrice (TMath.sol#266-281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "    function calcOutGivenIn(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint tokenAmountIn,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountOut)\n\n    {\n\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n\n        uint adjustedIn = bsub(BONE, swapFee);\n\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\n\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\n\n        uint foo = bpow(y, weightRatio);\n\n        uint bar = bsub(BONE, foo);\n\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\n\n        return tokenAmountOut;\n",
                    "message": "BMath.calcOutGivenIn (TMath.sol#293-312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "    function calcInGivenOut(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint tokenAmountOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountIn)\n\n    {\n\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\n\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\n\n        uint y = bdiv(tokenBalanceOut, diff);\n\n        uint foo = bpow(y, weightRatio);\n\n        foo = bsub(foo, BONE);\n\n        tokenAmountIn = bsub(BONE, swapFee);\n\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\n\n        return tokenAmountIn;\n",
                    "message": "BMath.calcInGivenOut (TMath.sol#324-343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": 383,
                    "vulnerability_code": "    function calcPoolOutGivenSingleIn(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint tokenAmountIn,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint poolAmountOut)\n\n    {\n\n        // Charge the trading fee for the proportion of tokenAi\n\n        ///  which is implicitly traded to the other pool tokens.\n\n        // That proportion is (1- weightTokenIn)\n\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\n\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n\n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\n\n\n\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\n\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\n\n\n\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\n\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\n\n        // SWC-Integer Overflow and Underflow: L143\n\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\n\n        return poolAmountOut;\n",
                    "message": "BMath.calcPoolOutGivenSingleIn (TMath.sol#355-383) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function calcSingleInGivenPoolOut(\n\n        uint tokenBalanceIn,\n\n        uint tokenWeightIn,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint poolAmountOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountIn)\n\n    {\n\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\n\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n\n      \n\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\n\n        uint boo = bdiv(BONE, normalizedWeight); \n\n        uint tokenInRatio = bpow(poolRatio, boo);\n\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\n\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\n\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way \n\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\n\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\n\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\n\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\n\n        return tokenAmountIn;\n",
                    "message": "BMath.calcSingleInGivenPoolOut (TMath.sol#395-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "    function calcSingleOutGivenPoolIn(\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint poolAmountIn,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint tokenAmountOut)\n\n    {\n\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n\n        // charge exit fee on the pool token side\n\n        // pAiAfterExitFee = pAi*(1-exitFee)\n\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\n\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\n\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n\n     \n\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\n\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\n\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\n\n\n\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\n\n\n\n        // charge swap fee on the output token side \n\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\n\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\n\n        return tokenAmountOut;\n",
                    "message": "BMath.calcSingleOutGivenPoolIn (TMath.sol#434-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": 507,
                    "vulnerability_code": "    function calcPoolInGivenSingleOut(\n\n        uint tokenBalanceOut,\n\n        uint tokenWeightOut,\n\n        uint poolSupply,\n\n        uint totalWeight,\n\n        uint tokenAmountOut,\n\n        uint swapFee\n\n    )\n\n        public pure\n\n        returns (uint poolAmountIn)\n\n    {\n\n\n\n        // charge swap fee on the output token side \n\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\n\n        uint zoo = bsub(BONE, normalizedWeight);\n\n        uint zar = bmul(zoo, swapFee); \n\n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\n\n\n\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\n\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\n\n\n\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\n\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\n\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\n\n\n\n        // charge exit fee on the pool token side\n\n        // pAi = pAiAfterExitFee/(1-exitFee)\n\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\n\n        return poolAmountIn;\n",
                    "message": "BMath.calcPoolInGivenSingleOut (TMath.sol#476-507) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in TMath.sol:\n\t- pragma solidity0.5.12 (TMath.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (TMath.sol#47): it allows old versions\n\t- pragma solidity0.5.12 (TMath.sol#90): it allows old versions\n\t- pragma solidity0.5.12 (TMath.sol#254): it allows old versions\n\t- pragma solidity0.5.12 (TMath.sol#527): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": 536,
                    "vulnerability_code": "    function calc_btoi(uint a) external pure returns (uint) {\n\n        return btoi(a);\n",
                    "message": "Function 'TMath.calc_btoi' (TMath.sol#534-536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": 540,
                    "vulnerability_code": "    function calc_bfloor(uint a) external pure returns (uint) {\n\n        return bfloor(a);\n",
                    "message": "Function 'TMath.calc_bfloor' (TMath.sol#538-540) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": 544,
                    "vulnerability_code": "    function calc_badd(uint a, uint b) external pure returns (uint) {\n\n        return badd(a, b);\n",
                    "message": "Function 'TMath.calc_badd' (TMath.sol#542-544) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": 548,
                    "vulnerability_code": "    function calc_bsub(uint a, uint b) external pure returns (uint) {\n\n        return bsub(a, b);\n",
                    "message": "Function 'TMath.calc_bsub' (TMath.sol#546-548) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": 552,
                    "vulnerability_code": "    function calc_bsubSign(uint a, uint b) external pure returns (uint, bool) {\n\n        return bsubSign(a, b);\n",
                    "message": "Function 'TMath.calc_bsubSign' (TMath.sol#550-552) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": 556,
                    "vulnerability_code": "    function calc_bmul(uint a, uint b) external pure returns (uint) {\n\n        return bmul(a, b);\n",
                    "message": "Function 'TMath.calc_bmul' (TMath.sol#554-556) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "    function calc_bdiv(uint a, uint b) external pure returns (uint) {\n\n        return bdiv(a, b);\n",
                    "message": "Function 'TMath.calc_bdiv' (TMath.sol#558-560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": 564,
                    "vulnerability_code": "    function calc_bpowi(uint a, uint n) external pure returns (uint) {\n\n        return bpowi(a, n);\n",
                    "message": "Function 'TMath.calc_bpowi' (TMath.sol#562-564) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": 568,
                    "vulnerability_code": "    function calc_bpow(uint base, uint exp) external pure returns (uint) {\n\n        return bpow(base, exp);\n",
                    "message": "Function 'TMath.calc_bpow' (TMath.sol#566-568) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": 572,
                    "vulnerability_code": "    function calc_bpowApprox(uint base, uint exp, uint precision) external pure returns (uint) {\n\n        return bpowApprox(base, exp, precision);\n",
                    "message": "Function 'TMath.calc_bpowApprox' (TMath.sol#570-572) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint, bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calc_bsubSign(uint a, uint b) external pure returns (uint, bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/test/TToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _allowance[src][msg.sender] = sub(_allowance[src][msg.sender], amt);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 name,\n",
                    "message": "TToken.constructor.name (local variable @ TToken.sol#44) shadows:\n\t- TToken.name (function @ TToken.sol#53-55)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 symbol,\n",
                    "message": "TToken.constructor.symbol (local variable @ TToken.sol#45) shadows:\n\t- TToken.symbol (function @ TToken.sol#57-59)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "TToken.constructor.decimals (local variable @ TToken.sol#46) shadows:\n\t- TToken.decimals (function @ TToken.sol#61-63)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "    function name() public view returns (bytes32) {\n\n        return _name;\n",
                    "message": "TToken.name (TToken.sol#53-55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "    function symbol() public view returns (bytes32) {\n\n        return _symbol;\n",
                    "message": "TToken.symbol (TToken.sol#57-59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 63,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "TToken.decimals (TToken.sol#61-63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply;\n",
                    "message": "TToken.totalSupply (TToken.sol#94-96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function mint(address dst, uint amt) public returns (bool) {\n\n        _mint(dst, amt);\n\n        return true;\n",
                    "message": "TToken.mint (TToken.sol#104-107) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function burn(uint amt) public returns (bool) {\n\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[address(this)] = sub(_balance[address(this)], amt);\n\n        _totalSupply = sub(_totalSupply, amt);\n\n        emit Transfer(address(this), address(0), amt);\n\n        return true;\n",
                    "message": "TToken.burn (TToken.sol#109-115) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in TToken.sol:\n\t- pragma solidity0.5.12 (TToken.sol#16): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[src] = sub(_balance[src], amt);\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
                    "message": "Function 'TToken._move' (TToken.sol#65-70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
                    "message": "Function 'TToken._push' (TToken.sol#72-74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
                    "message": "Function 'TToken._pull' (TToken.sol#76-78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function _mint(address dst, uint amt) internal {\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        _totalSupply = add(_totalSupply, amt);\n\n        emit Transfer(address(0), dst, amt);\n",
                    "message": "Function 'TToken._mint' (TToken.sol#80-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint internal _totalSupply;\n",
                    "message": "Variable 'TToken._totalSupply' (TToken.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint)                   private _balance;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address=>uint)) private _allowance;\n",
                    "message": null
                }
            ]
        }
    },
    "balancer-core-942a51e202cc5bf9158bad77162bc72aa0a8afaf/contracts/test/TTokenFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _allowance[src][msg.sender] = sub(_allowance[src][msg.sender], amt);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 name,\n",
                    "message": "TToken.constructor.name (local variable @ TTokenFactory.sol#44) shadows:\n\t- TToken.name (function @ TTokenFactory.sol#53-55)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32 symbol,\n",
                    "message": "TToken.constructor.symbol (local variable @ TTokenFactory.sol#45) shadows:\n\t- TToken.symbol (function @ TTokenFactory.sol#57-59)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "TToken.constructor.decimals (local variable @ TTokenFactory.sol#46) shadows:\n\t- TToken.decimals (function @ TTokenFactory.sol#61-63)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 55,
                    "vulnerability_code": "    function name() public view returns (bytes32) {\n\n        return _name;\n",
                    "message": "TToken.name (TTokenFactory.sol#53-55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "    function symbol() public view returns (bytes32) {\n\n        return _symbol;\n",
                    "message": "TToken.symbol (TTokenFactory.sol#57-59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": 63,
                    "vulnerability_code": "    function decimals() public view returns(uint8) {\n\n        return _decimals;\n",
                    "message": "TToken.decimals (TTokenFactory.sol#61-63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply;\n",
                    "message": "TToken.totalSupply (TTokenFactory.sol#94-96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 107,
                    "vulnerability_code": "    function mint(address dst, uint amt) public returns (bool) {\n\n        _mint(dst, amt);\n\n        return true;\n",
                    "message": "TToken.mint (TTokenFactory.sol#104-107) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function burn(uint amt) public returns (bool) {\n\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[address(this)] = sub(_balance[address(this)], amt);\n\n        _totalSupply = sub(_totalSupply, amt);\n\n        emit Transfer(address(this), address(0), amt);\n\n        return true;\n",
                    "message": "TToken.burn (TTokenFactory.sol#109-115) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.5.12;\n",
                    "message": "Detected issues with version pragma in TTokenFactory.sol:\n\t- pragma solidity0.5.12 (TTokenFactory.sol#16): it allows old versions\n\t- pragma solidity0.5.12 (TTokenFactory.sol#148): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 70,
                    "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n\n        _balance[src] = sub(_balance[src], amt);\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
                    "message": "Function 'TToken._move' (TTokenFactory.sol#65-70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
                    "message": "Function 'TToken._push' (TTokenFactory.sol#72-74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
                    "message": "Function 'TToken._pull' (TTokenFactory.sol#76-78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function _mint(address dst, uint amt) internal {\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        _totalSupply = add(_totalSupply, amt);\n\n        emit Transfer(address(0), dst, amt);\n",
                    "message": "Function 'TToken._mint' (TTokenFactory.sol#80-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint internal _totalSupply;\n",
                    "message": "Variable 'TToken._totalSupply' (TTokenFactory.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8   private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint)                   private _balance;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address=>uint)) private _allowance;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32=>TToken) tokens;\n",
                    "message": null
                }
            ]
        }
    }
}