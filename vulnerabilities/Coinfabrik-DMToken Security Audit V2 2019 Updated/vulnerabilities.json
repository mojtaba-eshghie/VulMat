{
    "code.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is ApprovalContract, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < recipients.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _address.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < recipients.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _address.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _address != address(0) &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount > 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _start < _end &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            vestingMembers[_address].totalSum == 0 &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            balances[msg.sender] > _amount\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _address.length == _amount.length &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _address.length == _start.length &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _address.length == _end.length\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < recipients.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _address.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_44"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public decimals = 8;\n",
                    "message": "DMToken.decimals should be constant (code.sol#314)\nDMToken.name should be constant (code.sol#312)\nDMToken.symbol should be constant (code.sol#313)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 74,
                    "vulnerability_code": "    function transferOwnership(address newOwner) onlyOwner public {\n\n        require(newOwner != address(0));\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (code.sol#70-74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public constant returns (uint256);\n",
                    "message": "ERC20.allowance (code.sol#94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": 130,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "ApprovalContract.allowance (code.sol#128-130) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n        require(_to != address(0));\n\n\n\n        uint256 _allowance = allowed[_from][msg.sender];\n\n\n\n        subFromBalance(_from, _value);\n\n\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n\n        Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "Vesting.transferFrom (code.sol#295-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (code.sol#95) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "ApprovalContract.approve (code.sol#116-120) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (code.sol#96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 143,
                    "vulnerability_code": "    function increaseApproval (address _spender, uint _addedValue) public\n\n    returns (bool success) {\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ApprovalContract.increaseApproval (code.sol#138-143) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "    function decreaseApproval (address _spender, uint _subtractedValue) public\n\n    returns (bool success) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ApprovalContract.decreaseApproval (code.sol#145-155) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n\n        require(_amount < hardCap);\n\n        totalSupply = totalSupply.add(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n        Mint(_to, _amount);\n\n        Transfer(0x0, _to, _amount);\n\n        return true;\n",
                    "message": "MintableToken.mint (code.sol#182-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 325,
                    "vulnerability_code": "    function multiTransfer(address[] recipients, uint256[] amounts) public {\n\n        require(recipients.length == amounts.length);\n\n        for (uint i = 0; i < recipients.length; i++) {\n\n            transfer(recipients[i], amounts[i]);\n\n        }\n",
                    "message": "DMToken.multiTransfer (code.sol#320-325) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function multiVesting(\n\n        address[] _address,\n\n        uint256[] _amount,\n\n        uint256[] _start,\n\n        uint256[] _end\n\n    ) public onlyOwner {\n\n        require(\n\n            _address.length == _amount.length &&\n\n            _address.length == _start.length &&\n\n            _address.length == _end.length\n\n        );\n\n        for (uint i = 0; i < _address.length; i++) {\n\n            addVestingMember(_address[i], _amount[i], _start[i], _end[i]);\n\n        }\n",
                    "message": "DMToken.multiVesting (code.sol#327-341) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.4.18;\n",
                    "message": "Detected issues with version pragma in code.sol:\n\t- pragma solidity0.4.18 (code.sol#8): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function Ownable() public {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (code.sol#54-56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n",
                    "message": "Parameter '_owner' of ApprovalContract.allowance (code.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n",
                    "message": "Parameter '_spender' of ApprovalContract.allowance (code.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ApprovalContract.approve (code.sol#116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ApprovalContract.approve (code.sol#116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval (address _spender, uint _addedValue) public\n",
                    "message": "Parameter '_spender' of ApprovalContract.increaseApproval (code.sol#138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval (address _spender, uint _addedValue) public\n",
                    "message": "Parameter '_addedValue' of ApprovalContract.increaseApproval (code.sol#138) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval (address _spender, uint _subtractedValue) public\n",
                    "message": "Parameter '_spender' of ApprovalContract.decreaseApproval (code.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval (address _spender, uint _subtractedValue) public\n",
                    "message": "Parameter '_subtractedValue' of ApprovalContract.decreaseApproval (code.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_to' of MintableToken.mint (code.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n",
                    "message": "Parameter '_amount' of MintableToken.mint (code.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "    struct _Vesting {\n\n        uint256 totalSum;     //total amount\n\n        uint256 start;        //start block\n\n        uint256 end;          //end block\n\n        uint256 usedAmount;   //the amount of paid payments\n",
                    "message": "Struct 'Vesting._Vesting' (code.sol#199-204) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of Vesting.balanceOf (code.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of Vesting.transfer (code.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of Vesting.transfer (code.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of Vesting.transferFrom (code.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of Vesting.transferFrom (code.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of Vesting.transferFrom (code.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _address,\n",
                    "message": "Parameter '_address' of Vesting.addVestingMember (code.sol#209) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount,\n",
                    "message": "Parameter '_amount' of Vesting.addVestingMember (code.sol#210) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _start,\n",
                    "message": "Parameter '_start' of Vesting.addVestingMember (code.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _end\n",
                    "message": "Parameter '_end' of Vesting.addVestingMember (code.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function currentPart(address _address) private constant returns (uint256) {\n",
                    "message": "Parameter '_address' of Vesting.currentPart (code.sol#234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subFromBalance(address _address, uint256 _amount) private returns (uint256) {\n",
                    "message": "Parameter '_address' of Vesting.subFromBalance (code.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function subFromBalance(address _address, uint256 _amount) private returns (uint256) {\n",
                    "message": "Parameter '_amount' of Vesting.subFromBalance (code.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "    function DMToken() public {\n\n        hardCap = 15644283100000000;\n",
                    "message": "Function 'DMToken.DMToken' (code.sol#316-318) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _address,\n",
                    "message": "Parameter '_address' of DMToken.multiVesting (code.sol#328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _amount,\n",
                    "message": "Parameter '_amount' of DMToken.multiVesting (code.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _start,\n",
                    "message": "Parameter '_start' of DMToken.multiVesting (code.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _end\n",
                    "message": "Parameter '_end' of DMToken.multiVesting (code.sol#331) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function currentPart(address _address) private constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < recipients.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _address.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < recipients.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _address.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function multiTransfer(address[] recipients, uint256[] amounts) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function multiTransfer(address[] recipients, uint256[] amounts) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _address,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _amount,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _start,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] _end\n",
                    "message": null
                }
            ]
        }
    }
}