{
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/AbyssToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowTransfers = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public issuanceFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= limitEndDate || !isLimitEnabled || (!limitedWallets[_from] && !limitedWallets[_to]));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_62"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function AbyssToken(address _listener, address[] _owners, address manager) public\n",
                    "message": "AbyssToken.AbyssToken.manager (local variable @ AbyssToken.sol#444) shadows:\n\t- MultiOwnable.manager (state variable @ AbyssToken.sol#12)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
                    "message": "MultiOwnable.setOwners (AbyssToken.sol#33-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
                    "message": "MultiOwnable.getOwners (AbyssToken.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (AbyssToken.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (AbyssToken.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (AbyssToken.sol#76) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (AbyssToken.sol#164-166) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": "ITokenEventListener.onTokenTransfer (AbyssToken.sol#184) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
                    "message": "ManagedToken.setListener (AbyssToken.sol#244-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.increaseApproval (AbyssToken.sol#312-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 337,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.decreaseApproval (AbyssToken.sol#328-337) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
                    "message": "ManagedToken.finishIssuance (AbyssToken.sol#343-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n\n        require(msg.sender == limitedWalletsManager || ownerByAddress[msg.sender]);\n\n        limitedWallets[_wallet] = true;\n",
                    "message": "TransferLimitedToken.addLimitedWalletAddress (AbyssToken.sol#404-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n\n        limitedWallets[_wallet] = false;\n",
                    "message": "TransferLimitedToken.delLimitedWalletAddress (AbyssToken.sol#413-415) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "    function disableLimit() public onlyManager {\n\n        isLimitEnabled = false;\n",
                    "message": "TransferLimitedToken.disableLimit (AbyssToken.sol#420-422) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in AbyssToken.sol:\n\t- pragma solidity^0.4.21 (AbyssToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (AbyssToken.sol#59): it allows old versions\n\t- pragma solidity^0.4.21 (AbyssToken.sol#84): it allows old versions\n\t- pragma solidity^0.4.21 (AbyssToken.sol#122): it allows old versions\n\t- pragma solidity^0.4.21 (AbyssToken.sol#171): it allows old versions\n\t- pragma solidity^0.4.21 (AbyssToken.sol#189): it allows old versions\n\t- pragma solidity^0.4.21 (AbyssToken.sol#352): it allows old versions\n\t- pragma solidity^0.4.21 (AbyssToken.sol#439): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
                    "message": "Function 'MultiOwnable.MultiOwnable' (AbyssToken.sol#26-28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": "Parameter '_owners' of MultiOwnable.setOwners (AbyssToken.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
                    "message": "Function 'MultiOwnable._setOwners' (AbyssToken.sol#39-50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": "Parameter '_owners' of MultiOwnable._setOwners (AbyssToken.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (AbyssToken.sol#94-95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (AbyssToken.sol#154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (AbyssToken.sol#133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transfer (AbyssToken.sol#133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (AbyssToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (AbyssToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transferFrom (AbyssToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (AbyssToken.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.approve (AbyssToken.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (AbyssToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (AbyssToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transfer (AbyssToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transfer (AbyssToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_from' of ManagedToken.transferFrom (AbyssToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transferFrom (AbyssToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transferFrom (AbyssToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
                    "message": "Function 'ManagedToken.ManagedToken' (AbyssToken.sol#224-229) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_listener' of ManagedToken.ManagedToken (AbyssToken.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_owners' of ManagedToken.ManagedToken (AbyssToken.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (AbyssToken.sol#235) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": "Parameter '_listener' of ManagedToken.setListener (AbyssToken.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_to' of ManagedToken.issue (AbyssToken.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_value' of ManagedToken.issue (AbyssToken.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_from' of ManagedToken.destroy (AbyssToken.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_value' of ManagedToken.destroy (AbyssToken.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.increaseApproval (AbyssToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (AbyssToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.decreaseApproval (AbyssToken.sol#328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (AbyssToken.sol#328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of TransferLimitedToken.transfer (AbyssToken.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.transfer (AbyssToken.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_from' of TransferLimitedToken.transferFrom (AbyssToken.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of TransferLimitedToken.transferFrom (AbyssToken.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.transferFrom (AbyssToken.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": "Parameter '_spender' of TransferLimitedToken.approve (AbyssToken.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.approve (AbyssToken.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 398,
                    "vulnerability_code": "    function TransferLimitedToken(\n\n        uint256 _limitStartDate,\n\n        address _listener,\n\n        address[] _owners,\n\n        address _limitedWalletsManager\n\n    ) public ManagedToken(_listener, _owners)\n\n    {\n\n        limitEndDate = _limitStartDate + LIMIT_TRANSFERS_PERIOD;\n\n        isLimitEnabled = true;\n\n        limitedWalletsManager = _limitedWalletsManager;\n",
                    "message": "Function 'TransferLimitedToken.TransferLimitedToken' (AbyssToken.sol#388-398) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _limitStartDate,\n",
                    "message": "Parameter '_limitStartDate' of TransferLimitedToken.TransferLimitedToken (AbyssToken.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _limitedWalletsManager\n",
                    "message": "Parameter '_limitedWalletsManager' of TransferLimitedToken.TransferLimitedToken (AbyssToken.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n",
                    "message": "Parameter '_wallet' of TransferLimitedToken.addLimitedWalletAddress (AbyssToken.sol#404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n",
                    "message": "Parameter '_wallet' of TransferLimitedToken.delLimitedWalletAddress (AbyssToken.sol#413) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "    function AbyssToken(address _listener, address[] _owners, address manager) public\n\n        TransferLimitedToken(SALE_END_TIME, _listener, _owners, manager)\n\n    {\n\n        name = \"ABYSS\";\n\n        symbol = \"ABYSS\";\n\n        decimals = 18;\n",
                    "message": "Function 'AbyssToken.AbyssToken' (AbyssToken.sol#444-450) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function AbyssToken(address _listener, address[] _owners, address manager) public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/DateTime.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = 1; i <= 12; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = ORIGIN_YEAR; i < year; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = 1; i < month; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": 133,
                    "vulnerability_code": "        function getMonth(uint timestamp) public pure returns (uint8) {\n\n                return parseTimestamp(timestamp).month;\n",
                    "message": "DateTime.getMonth (DateTime.sol#131-133) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 137,
                    "vulnerability_code": "        function getDay(uint timestamp) public pure returns (uint8) {\n\n                return parseTimestamp(timestamp).day;\n",
                    "message": "DateTime.getDay (DateTime.sol#135-137) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 157,
                    "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, 0, 0, 0);\n",
                    "message": "DateTime.toTimestamp (DateTime.sol#155-157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, 0, 0);\n",
                    "message": "DateTime.toTimestamp (DateTime.sol#159-161) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, minute, 0);\n",
                    "message": "DateTime.toTimestamp (DateTime.sol#163-165) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in DateTime.sol:\n\t- pragma solidity^0.4.21 (DateTime.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "        struct _DateTime {\n\n                uint16 year;\n\n                uint8 month;\n\n                uint8 day;\n\n                uint8 hour;\n\n                uint8 minute;\n\n                uint8 second;\n\n                uint8 weekday;\n",
                    "message": "Struct 'DateTime._DateTime' (DateTime.sol#10-18) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                while (secondsAccountedFor > timestamp) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant DAY_IN_SECONDS = 86400;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant YEAR_IN_SECONDS = 31536000;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant HOUR_IN_SECONDS = 3600;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant MINUTE_IN_SECONDS = 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint16 constant ORIGIN_YEAR = 1970;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/RefundPoll.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public yesCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public noCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalVoted = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public holdEndTime = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= startTime && now <= endTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_startTime >= now && _endTime > _startTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(holdEndTime > 0 && holdEndTime > endTime) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(now >= holdEndTime);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(now >= endTime);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_24"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (RefundPoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (RefundPoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (RefundPoll.sol#133)\n\tState variables written after the call(s):\n\t- votesByAddress (RefundPoll.sol#143)\n\t- votesByAddress (RefundPoll.sol#144)\n\t- votesByAddress (RefundPoll.sol#145)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (RefundPoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (RefundPoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (RefundPoll.sol#133)\n\tState variables written after the call(s):\n\t- noCounter (RefundPoll.sol#139)\n\t- totalVoted (RefundPoll.sol#147)\n\t- yesCounter (RefundPoll.sol#137)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (RefundPoll.sol#51)\nIERC20Token.name should be constant (RefundPoll.sol#49)\nIERC20Token.symbol should be constant (RefundPoll.sol#50)\nIERC20Token.totalSupply should be constant (RefundPoll.sol#52)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (RefundPoll.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transfer (RefundPoll.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (RefundPoll.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (RefundPoll.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (RefundPoll.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "BasePoll.vote (RefundPoll.sol#129-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function revokeVote() public checkTime {\n\n        require(votesByAddress[msg.sender].time > 0);\n\n\n\n        uint256 voiceWeight = votesByAddress[msg.sender].weight;\n\n        bool agree = votesByAddress[msg.sender].agree;\n\n\n\n        votesByAddress[msg.sender].time = 0;\n\n        votesByAddress[msg.sender].weight = 0;\n\n        votesByAddress[msg.sender].agree = false;\n\n\n\n        totalVoted = safeSub(totalVoted, 1);\n\n        if(agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n",
                    "message": "BasePoll.revokeVote (RefundPoll.sol#153-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function onTokenTransfer(address tokenHolder, uint256 amount) public {\n\n        require(msg.sender == fundAddress);\n\n        if(votesByAddress[tokenHolder].time == 0) {\n\n            return;\n\n        }\n\n        if(!checkTransfersAfterEnd) {\n\n             if(finalized || (now < startTime || now > endTime)) {\n\n                 return;\n\n             }\n\n        }\n\n\n\n        if(token.balanceOf(tokenHolder) >= votesByAddress[tokenHolder].weight) {\n\n            return;\n\n        }\n\n        uint256 voiceWeight = amount;\n\n        if(amount > votesByAddress[tokenHolder].weight) {\n\n            voiceWeight = votesByAddress[tokenHolder].weight;\n\n        }\n\n\n\n        if(votesByAddress[tokenHolder].agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n\n        votesByAddress[tokenHolder].weight = safeSub(votesByAddress[tokenHolder].weight, voiceWeight);\n",
                    "message": "BasePoll.onTokenTransfer (RefundPoll.sol#175-200) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "    function tryToFinalize() public notFinalized returns(bool) {\n\n        if(now < endTime) {\n\n            return false;\n\n        }\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
                    "message": "BasePoll.tryToFinalize (RefundPoll.sol#205-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "    function tryToFinalize() public returns(bool) {\n\n        if(holdEndTime > 0 && holdEndTime > endTime) {\n\n            require(now >= holdEndTime);\n\n        } else {\n\n            require(now >= endTime);\n\n        }\n\n\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
                    "message": "RefundPoll.tryToFinalize (RefundPoll.sol#283-293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "    function isNowApproved() public view returns(bool) {\n\n        return isSubjectApproved();\n",
                    "message": "BasePoll.isNowApproved (RefundPoll.sol#214-216) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in RefundPoll.sol:\n\t- pragma solidity^0.4.21 (RefundPoll.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (RefundPoll.sol#41): it allows old versions\n\t- pragma solidity^0.4.21 (RefundPoll.sol#66): it allows old versions\n\t- pragma solidity^0.4.21 (RefundPoll.sol#230): it allows old versions\n\t- pragma solidity^0.4.21 (RefundPoll.sol#253): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (RefundPoll.sol#13-14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n\n        require(_tokenAddress != address(0));\n\n        require(_startTime >= now && _endTime > _startTime);\n\n\n\n        token = IERC20Token(_tokenAddress);\n\n        fundAddress = _fundAddress;\n\n        startTime = _startTime;\n\n        endTime = _endTime;\n\n        finalized = false;\n\n        checkTransfersAfterEnd = _checkTransfersAfterEnd;\n",
                    "message": "Function 'BasePoll.BasePoll' (RefundPoll.sol#113-123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_tokenAddress' of BasePoll.BasePoll (RefundPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_fundAddress' of BasePoll.BasePoll (RefundPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_startTime' of BasePoll.BasePoll (RefundPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_endTime' of BasePoll.BasePoll (RefundPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_checkTransfersAfterEnd' of BasePoll.BasePoll (RefundPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "    function RefundPoll(\n\n        address _tokenAddress,\n\n        address _fundAddress,\n\n        uint256 _startTime,\n\n        uint256 _endTime,\n\n        uint256 _holdEndTime,\n\n        bool _checkTransfersAfterEnd\n\n    ) public\n\n        BasePoll(_tokenAddress, _fundAddress, _startTime, _endTime, _checkTransfersAfterEnd)\n\n    {\n\n        holdEndTime = _holdEndTime;\n",
                    "message": "Function 'RefundPoll.RefundPoll' (RefundPoll.sol#270-281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _holdEndTime,\n",
                    "message": "Parameter '_holdEndTime' of RefundPoll.RefundPoll (RefundPoll.sol#275) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool checkTransfersAfterEnd;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/Pausable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != owner);\n\n        newOwner = _newOwner;\n",
                    "message": "Ownable.transferOwnership (Pausable.sol#35-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "    function confirmOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = 0x0;\n",
                    "message": "Ownable.confirmOwnership (Pausable.sol#43-48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "    function pause() onlyOwner whenNotPaused public {\n\n        paused = true;\n\n        Pause();\n",
                    "message": "Pausable.pause (Pausable.sol#85-88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function unpause() onlyOwner whenPaused public {\n\n        paused = false;\n\n        Unpause();\n",
                    "message": "Pausable.unpause (Pausable.sol#93-96) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in Pausable.sol:\n\t- pragma solidity^0.4.21 (Pausable.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (Pausable.sol#53): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n\n        owner = _owner == address(0) ? msg.sender : _owner;\n",
                    "message": "Function 'Ownable.Ownable' (Pausable.sol#19-21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n",
                    "message": "Parameter '_owner' of Ownable.Ownable (Pausable.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (Pausable.sol#35) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/ReservationFund.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ReservationFund is ICrowdsaleReservationFund, Ownable, SafeMath {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public crowdsaleFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "    function completeContribution(address contributor) external {\n\n        require(!crowdsaleFinished);\n\n        require(crowdsale.isContributorInLists(contributor));\n\n        require(contributions[contributor] > 0);\n\n\n\n        uint256 etherAmount = contributions[contributor];\n\n        uint256 tokenAmount = tokensToIssue[contributor];\n\n        uint256 tokenBonusAmount = bonusTokensToIssue[contributor];\n\n\n\n        contributions[contributor] = 0;\n\n        tokensToIssue[contributor] = 0;\n\n        bonusTokensToIssue[contributor] = 0;\n\n\n\n        crowdsale.processReservationFundContribution.value(etherAmount)(contributor, tokenAmount, tokenBonusAmount);\n\n        TransferToFund(contributor, etherAmount);\n",
                    "message": "Reentrancy in ReservationFund.completeContribution (ReservationFund.sol#204-219):\n\tExternal calls:\n\t- require(bool)(crowdsale.isContributorInLists(contributor)) (ReservationFund.sol#206)\n\tState variables written after the call(s):\n\t- bonusTokensToIssue (ReservationFund.sol#215)\n\t- contributions (ReservationFund.sol#213)\n\t- tokensToIssue (ReservationFund.sol#214)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != owner);\n\n        newOwner = _newOwner;\n",
                    "message": "Ownable.transferOwnership (ReservationFund.sol#87-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "    function confirmOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = 0x0;\n",
                    "message": "Ownable.confirmOwnership (ReservationFund.sol#95-100) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": 172,
                    "vulnerability_code": "    function setCrowdsaleAddress(address crowdsaleAddress) public onlyOwner {\n\n        require(crowdsale == address(0));\n\n        crowdsale = ISimpleCrowdsale(crowdsaleAddress);\n",
                    "message": "ReservationFund.setCrowdsaleAddress (ReservationFund.sol#169-172) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 237,
                    "vulnerability_code": "    function refundPayment(address contributor) public {\n\n        require(crowdsaleFinished);\n\n        require(contributions[contributor] > 0 || tokensToIssue[contributor] > 0);\n\n        uint256 amountToRefund = contributions[contributor];\n\n\n\n        contributions[contributor] = 0;\n\n        tokensToIssue[contributor] = 0;\n\n        bonusTokensToIssue[contributor] = 0;\n\n\n\n        contributor.transfer(amountToRefund);\n\n        RefundPayment(contributor, amountToRefund);\n",
                    "message": "ReservationFund.refundPayment (ReservationFund.sol#226-237) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ReservationFund.sol:\n\t- pragma solidity^0.4.21 (ReservationFund.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#40): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#55): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#105): it allows old versions\n\t- pragma solidity^0.4.21 (ReservationFund.sol#143): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 73,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n\n        owner = _owner == address(0) ? msg.sender : _owner;\n",
                    "message": "Function 'Ownable.Ownable' (ReservationFund.sol#71-73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n",
                    "message": "Parameter '_owner' of Ownable.Ownable (ReservationFund.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (ReservationFund.sol#87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (ReservationFund.sol#115-116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tokensToIssue,\n",
                    "message": "Parameter '_tokensToIssue' of ReservationFund.processContribution (ReservationFund.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _bonusTokensToIssue\n",
                    "message": "Parameter '_bonusTokensToIssue' of ReservationFund.processContribution (ReservationFund.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "    function ReservationFund(address _owner) public Ownable(_owner) {\n",
                    "message": "Function 'ReservationFund.ReservationFund' (ReservationFund.sol#161-162) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCrowdsaleAddress(address crowdsaleAddress) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) contributions;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) tokensToIssue;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) bonusTokensToIssue;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/PollManagedFund.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowTransfers = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public issuanceFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public lastWithdrawTime = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public firstWithdrawAmount = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public yesCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public noCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalVoted = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public minTokensPerc = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public holdEndTime = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 1139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public minVotedTokensPerc = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 1140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public secondRefundPollDate = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now >= refundPollDates[i] && now <= safeAdd(refundPollDates[i], 1 days)) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now >= refundPollDates[i] && now <= safeAdd(refundPollDates[i], 1 days)) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= startTime && now <= endTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_startTime >= now && _endTime > _startTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1096,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(holdEndTime > 0 && holdEndTime > endTime) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(now >= holdEndTime);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1098,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(now >= endTime);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(refundPoll) != address(0) &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            !refundPoll.finalized() &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            refundPoll.holdEndTime() > 0 &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            now >= refundPoll.holdEndTime() &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            refundPoll.isNowApproved()\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(address(tapPoll) != address(0) && !tapPoll.finalized()) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            tapPoll.onTokenTransfer(_from, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "         if(address(refundPoll) != address(0) && !refundPoll.finalized()) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            refundPoll.onTokenTransfer(_from, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(secondRefundPollDate > 0 && now >= secondRefundPollDate && now <= safeAdd(secondRefundPollDate, 1 days)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now >= refundPollDates[i] && now <= safeAdd(refundPollDates[i], 1 days)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            secondRefundPollDate = 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = 1; i <= 12; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = ORIGIN_YEAR; i < year; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                for (i = 1; i < month; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_116"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.firstWithdraw (PollManagedFund.sol#772-778) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (PollManagedFund.sol#776)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 783,
                    "vulnerability_to_line": 789,
                    "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.withdraw (PollManagedFund.sol#783-789) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (PollManagedFund.sol#787)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": 823,
                    "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
                    "message": "Fund.refundTokenHolder (PollManagedFund.sol#811-823) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(refundAmount) (PollManagedFund.sol#820)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": 1281,
                    "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
                    "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": 1281,
                    "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
                    "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": 1281,
                    "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
                    "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": 1281,
                    "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
                    "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\nPollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized())\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": 1281,
                    "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
                    "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\nPollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized())\nPollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized())\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": 1281,
                    "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
                    "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) uses a dangerous strict equality:\n\t- require(bool)(address(refundPoll) == address(0))\nPollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) uses a dangerous strict equality:\n\t- require(bool)(tapPoll == address(0))\n\t- require(bool)(getDay(now) == 10)\nDateTime.getDaysInMonth (PollManagedFund.sol#47-60) uses a dangerous strict equality:\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\n\t- month == 4 || month == 6 || month == 9 || month == 11\nPollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized())\nPollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242) uses a dangerous strict equality:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized())\nSafeMath.safeMul (PollManagedFund.sol#259-263) uses a dangerous strict equality:\n\t- assert(bool)(a == 0 || c / a == b)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1304,
                    "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
                    "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\t- startTime = refundPoll.startTime() (PollManagedFund.sol#1289)\n\tState variables written after the call(s):\n\t- secondRefundPollDate (PollManagedFund.sol#1290-1294)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1304,
                    "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
                    "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\t- enableRefund() (PollManagedFund.sol#1287)\n\t- startTime = refundPoll.startTime() (PollManagedFund.sol#1289)\n\tState variables written after the call(s):\n\t- refundPoll (PollManagedFund.sol#1303)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 1234,
                    "vulnerability_to_line": 1242,
                    "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n\n        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n\n        if(agree) {\n\n            tap = _tap;\n\n        }\n\n        updateMinVotedTokens(tapPoll.getVotedTokensPerc());\n\n        TapPollFinished(agree, _tap);\n\n        delete tapPoll;\n",
                    "message": "Reentrancy in PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized()) (PollManagedFund.sol#1235)\n\t- updateMinVotedTokens(tapPoll.getVotedTokensPerc()) (PollManagedFund.sol#1239)\n\tState variables written after the call(s):\n\t- tapPoll (PollManagedFund.sol#1241)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": 910,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (PollManagedFund.sol#891-910):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (PollManagedFund.sol#894)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (PollManagedFund.sol#895)\n\tState variables written after the call(s):\n\t- votesByAddress (PollManagedFund.sol#905)\n\t- votesByAddress (PollManagedFund.sol#906)\n\t- votesByAddress (PollManagedFund.sol#907)\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
                    "message": "i in PollManagedFund.checkRefundPollDate (PollManagedFund.sol#1250) is a local variable never initialiazed\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 716,
                    "vulnerability_to_line": 723,
                    "vulnerability_code": "    function onCrowdsaleEnd() external onlyCrowdsale {\n\n        state = FundState.TeamWithdraw;\n\n        ISimpleCrowdsale crowdsale = ISimpleCrowdsale(crowdsaleAddress);\n\n        firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(), 2);\n\n        lastWithdrawTime = now;\n\n        tap = INITIAL_TAP;\n\n        crowdsaleEndDate = now;\n",
                    "message": "Reentrancy in Fund.onCrowdsaleEnd (PollManagedFund.sol#716-723):\n\tExternal calls:\n\t- firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(),2) (PollManagedFund.sol#719)\n\tState variables written after the call(s):\n\t- crowdsaleEndDate (PollManagedFund.sol#722)\n\t- lastWithdrawTime (PollManagedFund.sol#720)\n\t- tap (PollManagedFund.sol#721)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1304,
                    "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
                    "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\t- startTime = refundPoll.startTime() (PollManagedFund.sol#1289)\n\tState variables written after the call(s):\n\t- isWithdrawEnabled (PollManagedFund.sol#1295)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1283,
                    "vulnerability_to_line": 1304,
                    "vulnerability_code": "    function onRefundPollFinish(bool agree) external {\n\n        require(msg.sender == address(refundPoll) && refundPoll.finalized());\n\n        if(agree) {\n\n            if(secondRefundPollDate > 0) {\n\n                enableRefund();\n\n            } else {\n\n                uint256 startTime = refundPoll.startTime();\n\n                secondRefundPollDate = toTimestamp(\n\n                    getYear(startTime),\n\n                    getMonth(startTime) + 2,\n\n                    1\n\n                );\n\n                isWithdrawEnabled = false;\n\n            }\n\n        } else {\n\n            secondRefundPollDate = 0;\n\n            isWithdrawEnabled = true;\n\n        }\n\n        RefundPollFinished(agree);\n\n\n\n        delete refundPoll;\n",
                    "message": "Reentrancy in PollManagedFund.onRefundPollFinish (PollManagedFund.sol#1283-1304):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(refundPoll) && refundPoll.finalized()) (PollManagedFund.sol#1284)\n\tState variables written after the call(s):\n\t- isWithdrawEnabled (PollManagedFund.sol#1299)\n\t- secondRefundPollDate (PollManagedFund.sol#1298)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1234,
                    "vulnerability_to_line": 1242,
                    "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n\n        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n\n        if(agree) {\n\n            tap = _tap;\n\n        }\n\n        updateMinVotedTokens(tapPoll.getVotedTokensPerc());\n\n        TapPollFinished(agree, _tap);\n\n        delete tapPoll;\n",
                    "message": "Reentrancy in PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized()) (PollManagedFund.sol#1235)\n\tState variables written after the call(s):\n\t- tap (PollManagedFund.sol#1237)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1234,
                    "vulnerability_to_line": 1242,
                    "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n\n        require(msg.sender == address(tapPoll) && tapPoll.finalized());\n\n        if(agree) {\n\n            tap = _tap;\n\n        }\n\n        updateMinVotedTokens(tapPoll.getVotedTokensPerc());\n\n        TapPollFinished(agree, _tap);\n\n        delete tapPoll;\n",
                    "message": "Reentrancy in PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234-1242):\n\tExternal calls:\n\t- require(bool)(msg.sender == address(tapPoll) && tapPoll.finalized()) (PollManagedFund.sol#1235)\n\t- updateMinVotedTokens(tapPoll.getVotedTokensPerc()) (PollManagedFund.sol#1239)\n\tState variables written after the call(s):\n\t- minVotedTokensPerc (PollManagedFund.sol#1239)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": 910,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (PollManagedFund.sol#891-910):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (PollManagedFund.sol#894)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (PollManagedFund.sol#895)\n\tState variables written after the call(s):\n\t- noCounter (PollManagedFund.sol#901)\n\t- totalVoted (PollManagedFund.sol#909)\n\t- yesCounter (PollManagedFund.sol#899)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (PollManagedFund.sol#350)\nIERC20Token.name should be constant (PollManagedFund.sol#348)\nIERC20Token.symbol should be constant (PollManagedFund.sol#349)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, 0, 0);\n",
                    "message": "DateTime.toTimestamp (PollManagedFund.sol#159-161) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n\n                return toTimestamp(year, month, day, hour, minute, 0);\n",
                    "message": "DateTime.toTimestamp (PollManagedFund.sol#163-165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
                    "message": "MultiOwnable.setOwners (PollManagedFund.sol#314-318) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
                    "message": "MultiOwnable.getOwners (PollManagedFund.sol#333-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (PollManagedFund.sol#353) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (PollManagedFund.sol#397-399) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "ERC20Token.approve (PollManagedFund.sol#401-405) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (PollManagedFund.sol#356) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (PollManagedFund.sol#357) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": 409,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (PollManagedFund.sol#407-409) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": 1206,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n\n        require(msg.sender == address(token));\n\n        if(address(tapPoll) != address(0) && !tapPoll.finalized()) {\n\n            tapPoll.onTokenTransfer(_from, _value);\n\n        }\n\n         if(address(refundPoll) != address(0) && !refundPoll.finalized()) {\n\n            refundPoll.onTokenTransfer(_from, _value);\n\n        }\n",
                    "message": "PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198-1206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": "ITokenEventListener.onTokenTransfer (PollManagedFund.sol#427) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": 493,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
                    "message": "ManagedToken.setListener (PollManagedFund.sol#487-493) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.increaseApproval (PollManagedFund.sol#555-559) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": 580,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.decreaseApproval (PollManagedFund.sol#571-580) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": 590,
                    "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
                    "message": "ManagedToken.finishIssuance (PollManagedFund.sol#586-590) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 697,
                    "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n\n        require(crowdsaleAddress == address(0));\n\n        crowdsaleAddress = _crowdsaleAddress;\n",
                    "message": "Fund.setCrowdsaleAddress (PollManagedFund.sol#694-697) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": 702,
                    "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n\n        require(address(token) == address(0));\n\n        token = ManagedToken(_tokenAddress);\n",
                    "message": "Fund.setTokenAddress (PollManagedFund.sol#699-702) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 762,
                    "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n\n        if(state != FundState.TeamWithdraw) {\n\n            return 0;\n\n        }\n\n        return calcTapAmount();\n",
                    "message": "Fund.getCurrentTapAmount (PollManagedFund.sol#757-762) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 772,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.firstWithdraw (PollManagedFund.sol#772-778) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 783,
                    "vulnerability_to_line": 789,
                    "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.withdraw (PollManagedFund.sol#783-789) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": 823,
                    "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
                    "message": "Fund.refundTokenHolder (PollManagedFund.sol#811-823) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": 910,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "BasePoll.vote (PollManagedFund.sol#891-910) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": 931,
                    "vulnerability_code": "    function revokeVote() public checkTime {\n\n        require(votesByAddress[msg.sender].time > 0);\n\n\n\n        uint256 voiceWeight = votesByAddress[msg.sender].weight;\n\n        bool agree = votesByAddress[msg.sender].agree;\n\n\n\n        votesByAddress[msg.sender].time = 0;\n\n        votesByAddress[msg.sender].weight = 0;\n\n        votesByAddress[msg.sender].agree = false;\n\n\n\n        totalVoted = safeSub(totalVoted, 1);\n\n        if(agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n",
                    "message": "BasePoll.revokeVote (PollManagedFund.sol#915-931) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 937,
                    "vulnerability_to_line": 962,
                    "vulnerability_code": "    function onTokenTransfer(address tokenHolder, uint256 amount) public {\n\n        require(msg.sender == fundAddress);\n\n        if(votesByAddress[tokenHolder].time == 0) {\n\n            return;\n\n        }\n\n        if(!checkTransfersAfterEnd) {\n\n             if(finalized || (now < startTime || now > endTime)) {\n\n                 return;\n\n             }\n\n        }\n\n\n\n        if(token.balanceOf(tokenHolder) >= votesByAddress[tokenHolder].weight) {\n\n            return;\n\n        }\n\n        uint256 voiceWeight = amount;\n\n        if(amount > votesByAddress[tokenHolder].weight) {\n\n            voiceWeight = votesByAddress[tokenHolder].weight;\n\n        }\n\n\n\n        if(votesByAddress[tokenHolder].agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n\n        votesByAddress[tokenHolder].weight = safeSub(votesByAddress[tokenHolder].weight, voiceWeight);\n",
                    "message": "BasePoll.onTokenTransfer (PollManagedFund.sol#937-962) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 967,
                    "vulnerability_to_line": 974,
                    "vulnerability_code": "    function tryToFinalize() public notFinalized returns(bool) {\n\n        if(now < endTime) {\n\n            return false;\n\n        }\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
                    "message": "BasePoll.tryToFinalize (PollManagedFund.sol#967-974) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": 1105,
                    "vulnerability_code": "    function tryToFinalize() public returns(bool) {\n\n        if(holdEndTime > 0 && holdEndTime > endTime) {\n\n            require(now >= holdEndTime);\n\n        } else {\n\n            require(now >= endTime);\n\n        }\n\n\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
                    "message": "RefundPoll.tryToFinalize (PollManagedFund.sol#1095-1105) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 976,
                    "vulnerability_to_line": 978,
                    "vulnerability_code": "    function isNowApproved() public view returns(bool) {\n\n        return isSubjectApproved();\n",
                    "message": "BasePoll.isNowApproved (PollManagedFund.sol#976-978) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1222,
                    "vulnerability_to_line": 1232,
                    "vulnerability_code": "    function createTapPoll(uint8 tapIncPerc) public onlyOwner {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(tapPoll == address(0));\n\n        require(getDay(now) == 10);\n\n        require(tapIncPerc <= 50);\n\n        uint256 _tap = safeAdd(tap, safeDiv(safeMul(tap, tapIncPerc), 100));\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + TAP_POLL_DURATION;\n\n        tapPoll = new TapPoll(_tap, token, this, startTime, endTime, minVotedTokensPerc);\n\n        TapPollCreated();\n",
                    "message": "PollManagedFund.createTapPoll (PollManagedFund.sol#1222-1232) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": 1281,
                    "vulnerability_code": "    function createRefundPoll() public onlyTokenHolder {\n\n        require(state == FundState.TeamWithdraw);\n\n        require(address(refundPoll) == address(0));\n\n        require(checkRefundPollDate());\n\n\n\n        if(secondRefundPollDate > 0 && now > safeAdd(secondRefundPollDate, 1 days)) {\n\n            secondRefundPollDate = 0;\n\n        }\n\n\n\n        uint256 startTime = now;\n\n        uint256 endTime = startTime + REFUND_POLL_DURATION;\n\n        bool isFirstRefund = secondRefundPollDate == 0;\n\n        uint256 holdEndTime = 0;\n\n\n\n        if(isFirstRefund) {\n\n            holdEndTime = toTimestamp(\n\n                getYear(startTime),\n\n                getMonth(startTime) + 1,\n\n                1\n\n            );\n\n        }\n\n        refundPoll = new RefundPoll(token, this, startTime, endTime, holdEndTime, isFirstRefund);\n\n        RefundPollCreated();\n",
                    "message": "PollManagedFund.createRefundPoll (PollManagedFund.sol#1258-1281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1306,
                    "vulnerability_to_line": 1308,
                    "vulnerability_code": "    function forceRefund() public onlyOwner {\n\n        enableRefund();\n",
                    "message": "PollManagedFund.forceRefund (PollManagedFund.sol#1306-1308) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in PollManagedFund.sol:\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#222): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#246): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#284): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#340): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#365): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#414): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#432): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#595): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#610): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#828): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#992): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#1015): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#1065): it allows old versions\n\t- pragma solidity^0.4.21 (PollManagedFund.sol#1120): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "        struct _DateTime {\n\n                uint16 year;\n\n                uint8 month;\n\n                uint8 day;\n\n                uint8 hour;\n\n                uint8 minute;\n\n                uint8 second;\n\n                uint8 weekday;\n",
                    "message": "Struct 'DateTime._DateTime' (PollManagedFund.sol#10-18) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (PollManagedFund.sol#256-257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 309,
                    "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
                    "message": "Function 'MultiOwnable.MultiOwnable' (PollManagedFund.sol#307-309) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": "Parameter '_owners' of MultiOwnable.setOwners (PollManagedFund.sol#314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": 331,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
                    "message": "Function 'MultiOwnable._setOwners' (PollManagedFund.sol#320-331) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": "Parameter '_owners' of MultiOwnable._setOwners (PollManagedFund.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (PollManagedFund.sol#397) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (PollManagedFund.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transfer (PollManagedFund.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (PollManagedFund.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (PollManagedFund.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transferFrom (PollManagedFund.sol#386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (PollManagedFund.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.approve (PollManagedFund.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (PollManagedFund.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (PollManagedFund.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transfer (PollManagedFund.sol#495) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 495,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transfer (PollManagedFund.sol#495) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_from' of ManagedToken.transferFrom (PollManagedFund.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transferFrom (PollManagedFund.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transferFrom (PollManagedFund.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": 472,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
                    "message": "Function 'ManagedToken.ManagedToken' (PollManagedFund.sol#467-472) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_listener' of ManagedToken.ManagedToken (PollManagedFund.sol#467) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_owners' of ManagedToken.ManagedToken (PollManagedFund.sol#467) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (PollManagedFund.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": "Parameter '_listener' of ManagedToken.setListener (PollManagedFund.sol#487) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_to' of ManagedToken.issue (PollManagedFund.sol#523) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_value' of ManagedToken.issue (PollManagedFund.sol#523) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_from' of ManagedToken.destroy (PollManagedFund.sol#536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_value' of ManagedToken.destroy (PollManagedFund.sol#536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.increaseApproval (PollManagedFund.sol#555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (PollManagedFund.sol#555) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.decreaseApproval (PollManagedFund.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (PollManagedFund.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": 680,
                    "vulnerability_code": "    function Fund(\n\n        address _teamWallet,\n\n        address _referralTokenWallet,\n\n        address _foundationTokenWallet,\n\n        address _companyTokenWallet,\n\n        address _reserveTokenWallet,\n\n        address _bountyTokenWallet,\n\n        address _advisorTokenWallet,\n\n        address[] _owners\n\n    ) public\n\n    {\n\n        teamWallet = _teamWallet;\n\n        referralTokenWallet = _referralTokenWallet;\n\n        foundationTokenWallet = _foundationTokenWallet;\n\n        companyTokenWallet = _companyTokenWallet;\n\n        reserveTokenWallet = _reserveTokenWallet;\n\n        bountyTokenWallet = _bountyTokenWallet;\n\n        advisorTokenWallet = _advisorTokenWallet;\n\n        _setOwners(_owners);\n",
                    "message": "Function 'Fund.Fund' (PollManagedFund.sol#661-680) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _teamWallet,\n",
                    "message": "Parameter '_teamWallet' of Fund.Fund (PollManagedFund.sol#662) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 663,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _referralTokenWallet,\n",
                    "message": "Parameter '_referralTokenWallet' of Fund.Fund (PollManagedFund.sol#663) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _foundationTokenWallet,\n",
                    "message": "Parameter '_foundationTokenWallet' of Fund.Fund (PollManagedFund.sol#664) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _companyTokenWallet,\n",
                    "message": "Parameter '_companyTokenWallet' of Fund.Fund (PollManagedFund.sol#665) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 666,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _reserveTokenWallet,\n",
                    "message": "Parameter '_reserveTokenWallet' of Fund.Fund (PollManagedFund.sol#666) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _bountyTokenWallet,\n",
                    "message": "Parameter '_bountyTokenWallet' of Fund.Fund (PollManagedFund.sol#667) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _advisorTokenWallet,\n",
                    "message": "Parameter '_advisorTokenWallet' of Fund.Fund (PollManagedFund.sol#668) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners\n",
                    "message": "Parameter '_owners' of Fund.Fund (PollManagedFund.sol#669) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
                    "message": "Parameter '_crowdsaleAddress' of Fund.setCrowdsaleAddress (PollManagedFund.sol#694) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
                    "message": "Parameter '_tokenAddress' of Fund.setTokenAddress (PollManagedFund.sol#699) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 751,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decTap(uint256 _tap) external onlyOwner {\n",
                    "message": "Parameter '_tap' of Fund.decTap (PollManagedFund.sol#751) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": 885,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n\n        require(_tokenAddress != address(0));\n\n        require(_startTime >= now && _endTime > _startTime);\n\n\n\n        token = IERC20Token(_tokenAddress);\n\n        fundAddress = _fundAddress;\n\n        startTime = _startTime;\n\n        endTime = _endTime;\n\n        finalized = false;\n\n        checkTransfersAfterEnd = _checkTransfersAfterEnd;\n",
                    "message": "Function 'BasePoll.BasePoll' (PollManagedFund.sol#875-885) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_tokenAddress' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_fundAddress' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_startTime' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_endTime' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_checkTransfersAfterEnd' of BasePoll.BasePoll (PollManagedFund.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1035,
                    "vulnerability_to_line": 1047,
                    "vulnerability_code": "    function TapPoll(\n\n        uint256 _tap,\n\n        address _tokenAddress,\n\n        address _fundAddress,\n\n        uint256 _startTime,\n\n        uint256 _endTime,\n\n        uint256 _minTokensPerc\n\n    ) public\n\n        BasePoll(_tokenAddress, _fundAddress, _startTime, _endTime, false)\n\n    {\n\n        tap = _tap;\n\n        minTokensPerc = _minTokensPerc;\n",
                    "message": "Function 'TapPoll.TapPoll' (PollManagedFund.sol#1035-1047) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tap,\n",
                    "message": "Parameter '_tap' of TapPoll.TapPoll (PollManagedFund.sol#1036) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _minTokensPerc\n",
                    "message": "Parameter '_minTokensPerc' of TapPoll.TapPoll (PollManagedFund.sol#1041) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1082,
                    "vulnerability_to_line": 1093,
                    "vulnerability_code": "    function RefundPoll(\n\n        address _tokenAddress,\n\n        address _fundAddress,\n\n        uint256 _startTime,\n\n        uint256 _endTime,\n\n        uint256 _holdEndTime,\n\n        bool _checkTransfersAfterEnd\n\n    ) public\n\n        BasePoll(_tokenAddress, _fundAddress, _startTime, _endTime, _checkTransfersAfterEnd)\n\n    {\n\n        holdEndTime = _holdEndTime;\n",
                    "message": "Function 'RefundPoll.RefundPoll' (PollManagedFund.sol#1082-1093) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1087,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _holdEndTime,\n",
                    "message": "Parameter '_holdEndTime' of RefundPoll.RefundPoll (PollManagedFund.sol#1087) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n",
                    "message": "Parameter '_from' of PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n",
                    "message": "Parameter '' of PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address /*_to*/, uint256 _value) public {\n",
                    "message": "Parameter '_value' of PollManagedFund.onTokenTransfer (PollManagedFund.sol#1198) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1168,
                    "vulnerability_to_line": 1180,
                    "vulnerability_code": "    function PollManagedFund(\n\n        address _teamWallet,\n\n        address _referralTokenWallet,\n\n        address _foundationTokenWallet,\n\n        address _companyTokenWallet,\n\n        address _reserveTokenWallet,\n\n        address _bountyTokenWallet,\n\n        address _advisorTokenWallet,\n\n        address[] _owners\n\n        ) public\n\n    Fund(_teamWallet, _referralTokenWallet, _foundationTokenWallet, _companyTokenWallet, _reserveTokenWallet, _bountyTokenWallet, _advisorTokenWallet, _owners)\n\n    {\n",
                    "message": "Function 'PollManagedFund.PollManagedFund' (PollManagedFund.sol#1168-1180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMinVotedTokens(uint256 _minVotedTokensPerc) internal {\n",
                    "message": "Parameter '_minVotedTokensPerc' of PollManagedFund.updateMinVotedTokens (PollManagedFund.sol#1212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTapPollFinish(bool agree, uint256 _tap) external {\n",
                    "message": "Parameter '_tap' of PollManagedFund.onTapPollFinish (PollManagedFund.sol#1234) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint i; i < refundPollDates.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                while (secondsAccountedFor > timestamp) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1015,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1065,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant DAY_IN_SECONDS = 86400;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant YEAR_IN_SECONDS = 31536000;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant HOUR_IN_SECONDS = 3600;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint constant MINUTE_IN_SECONDS = 60;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint16 constant ORIGIN_YEAR = 1970;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool checkTransfersAfterEnd;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/Fund.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowTransfers = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public issuanceFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 421,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public lastWithdrawTime = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public firstWithdrawAmount = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_71"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.firstWithdraw (Fund.sol#553-559) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (Fund.sol#557)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 570,
                    "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.withdraw (Fund.sol#564-570) sends eth to arbitrary user\n\tDangerous calls:\n\t- teamWallet.transfer(amount) (Fund.sol#568)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
                    "message": "Fund.refundTokenHolder (Fund.sol#592-604) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(refundAmount) (Fund.sol#601)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n\n        uint256 c = a * b;\n\n        assert(a == 0 || c / a == b);\n\n        return c;\n",
                    "message": "SafeMath.safeMul (Fund.sol#40-44) uses a dangerous strict equality:\n\t- assert(bool)(a == 0 || c / a == b)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": 504,
                    "vulnerability_code": "    function onCrowdsaleEnd() external onlyCrowdsale {\n\n        state = FundState.TeamWithdraw;\n\n        ISimpleCrowdsale crowdsale = ISimpleCrowdsale(crowdsaleAddress);\n\n        firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(), 2);\n\n        lastWithdrawTime = now;\n\n        tap = INITIAL_TAP;\n\n        crowdsaleEndDate = now;\n",
                    "message": "Reentrancy in Fund.onCrowdsaleEnd (Fund.sol#497-504):\n\tExternal calls:\n\t- firstWithdrawAmount = safeDiv(crowdsale.getSoftCap(),2) (Fund.sol#500)\n\tState variables written after the call(s):\n\t- crowdsaleEndDate (Fund.sol#503)\n\t- lastWithdrawTime (Fund.sol#501)\n\t- tap (Fund.sol#502)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (Fund.sol#131)\nIERC20Token.name should be constant (Fund.sol#129)\nIERC20Token.symbol should be constant (Fund.sol#130)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
                    "message": "MultiOwnable.setOwners (Fund.sol#95-99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 116,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
                    "message": "MultiOwnable.getOwners (Fund.sol#114-116) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (Fund.sol#134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": 180,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (Fund.sol#178-180) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 186,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "ERC20Token.approve (Fund.sol#182-186) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (Fund.sol#137) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (Fund.sol#188-190) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (Fund.sol#138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": "ITokenEventListener.onTokenTransfer (Fund.sol#208) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": 274,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
                    "message": "ManagedToken.setListener (Fund.sol#268-274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": 340,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.increaseApproval (Fund.sol#336-340) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.decreaseApproval (Fund.sol#352-361) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
                    "message": "ManagedToken.finishIssuance (Fund.sol#367-371) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": 478,
                    "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n\n        require(crowdsaleAddress == address(0));\n\n        crowdsaleAddress = _crowdsaleAddress;\n",
                    "message": "Fund.setCrowdsaleAddress (Fund.sol#475-478) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n\n        require(address(token) == address(0));\n\n        token = ManagedToken(_tokenAddress);\n",
                    "message": "Fund.setTokenAddress (Fund.sol#480-483) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": 543,
                    "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n\n        if(state != FundState.TeamWithdraw) {\n\n            return 0;\n\n        }\n\n        return calcTapAmount();\n",
                    "message": "Fund.getCurrentTapAmount (Fund.sol#538-543) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "    function firstWithdraw() public onlyOwner withdrawEnabled {\n\n        require(firstWithdrawAmount > 0);\n\n        uint256 amount = firstWithdrawAmount;\n\n        firstWithdrawAmount = 0;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.firstWithdraw (Fund.sol#553-559) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 570,
                    "vulnerability_code": "    function withdraw() public onlyOwner withdrawEnabled {\n\n        require(state == FundState.TeamWithdraw);\n\n        uint256 amount = calcTapAmount();\n\n        lastWithdrawTime = now;\n\n        teamWallet.transfer(amount);\n\n        Withdraw(amount, now);\n",
                    "message": "Fund.withdraw (Fund.sol#564-570) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "    function refundTokenHolder() public {\n\n        require(state == FundState.Refund);\n\n\n\n        uint256 tokenBalance = token.balanceOf(msg.sender);\n\n        require(tokenBalance > 0);\n\n        uint256 refundAmount = safeDiv(safeMul(tokenBalance, address(this).balance), token.totalSupply());\n\n        require(refundAmount > 0);\n\n\n\n        token.destroy(msg.sender, tokenBalance);\n\n        msg.sender.transfer(refundAmount);\n\n\n\n        RefundHolder(msg.sender, refundAmount, tokenBalance, now);\n",
                    "message": "Fund.refundTokenHolder (Fund.sol#592-604) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in Fund.sol:\n\t- pragma solidity^0.4.21 (Fund.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#27): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#65): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#121): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#146): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#195): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#213): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#376): it allows old versions\n\t- pragma solidity^0.4.21 (Fund.sol#391): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (Fund.sol#37-38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
                    "message": "Function 'MultiOwnable.MultiOwnable' (Fund.sol#88-90) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": "Parameter '_owners' of MultiOwnable.setOwners (Fund.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
                    "message": "Function 'MultiOwnable._setOwners' (Fund.sol#101-112) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": "Parameter '_owners' of MultiOwnable._setOwners (Fund.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (Fund.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (Fund.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transfer (Fund.sol#157) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (Fund.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (Fund.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transferFrom (Fund.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (Fund.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.approve (Fund.sol#182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (Fund.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (Fund.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transfer (Fund.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transfer (Fund.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_from' of ManagedToken.transferFrom (Fund.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transferFrom (Fund.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transferFrom (Fund.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 253,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
                    "message": "Function 'ManagedToken.ManagedToken' (Fund.sol#248-253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_listener' of ManagedToken.ManagedToken (Fund.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_owners' of ManagedToken.ManagedToken (Fund.sol#248) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (Fund.sol#259) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": "Parameter '_listener' of ManagedToken.setListener (Fund.sol#268) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_to' of ManagedToken.issue (Fund.sol#304) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_value' of ManagedToken.issue (Fund.sol#304) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_from' of ManagedToken.destroy (Fund.sol#317) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_value' of ManagedToken.destroy (Fund.sol#317) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.increaseApproval (Fund.sol#336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (Fund.sol#336) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.decreaseApproval (Fund.sol#352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (Fund.sol#352) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 461,
                    "vulnerability_code": "    function Fund(\n\n        address _teamWallet,\n\n        address _referralTokenWallet,\n\n        address _foundationTokenWallet,\n\n        address _companyTokenWallet,\n\n        address _reserveTokenWallet,\n\n        address _bountyTokenWallet,\n\n        address _advisorTokenWallet,\n\n        address[] _owners\n\n    ) public\n\n    {\n\n        teamWallet = _teamWallet;\n\n        referralTokenWallet = _referralTokenWallet;\n\n        foundationTokenWallet = _foundationTokenWallet;\n\n        companyTokenWallet = _companyTokenWallet;\n\n        reserveTokenWallet = _reserveTokenWallet;\n\n        bountyTokenWallet = _bountyTokenWallet;\n\n        advisorTokenWallet = _advisorTokenWallet;\n\n        _setOwners(_owners);\n",
                    "message": "Function 'Fund.Fund' (Fund.sol#442-461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _teamWallet,\n",
                    "message": "Parameter '_teamWallet' of Fund.Fund (Fund.sol#443) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _referralTokenWallet,\n",
                    "message": "Parameter '_referralTokenWallet' of Fund.Fund (Fund.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _foundationTokenWallet,\n",
                    "message": "Parameter '_foundationTokenWallet' of Fund.Fund (Fund.sol#445) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _companyTokenWallet,\n",
                    "message": "Parameter '_companyTokenWallet' of Fund.Fund (Fund.sol#446) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _reserveTokenWallet,\n",
                    "message": "Parameter '_reserveTokenWallet' of Fund.Fund (Fund.sol#447) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _bountyTokenWallet,\n",
                    "message": "Parameter '_bountyTokenWallet' of Fund.Fund (Fund.sol#448) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _advisorTokenWallet,\n",
                    "message": "Parameter '_advisorTokenWallet' of Fund.Fund (Fund.sol#449) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners\n",
                    "message": "Parameter '_owners' of Fund.Fund (Fund.sol#450) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
                    "message": "Parameter '_crowdsaleAddress' of Fund.setCrowdsaleAddress (Fund.sol#475) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
                    "message": "Parameter '_tokenAddress' of Fund.setTokenAddress (Fund.sol#480) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decTap(uint256 _tap) external onlyOwner {\n",
                    "message": "Parameter '_tap' of Fund.decTap (Fund.sol#532) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCurrentTapAmount() public constant returns(uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCrowdsaleAddress(address _crowdsaleAddress) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenAddress(address _tokenAddress) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/Crowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 681,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract TheAbyssDAICO is Ownable, SafeMath, Pausable, ISimpleCrowdsale {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowTransfers = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public issuanceFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 713,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public tokenPriceNum = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 714,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public tokenPriceDenom = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalEtherContributed = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 735,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public rawTokenSupply = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 742,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalBNBContributed = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 744,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public hardCap = 0; // World hard cap will be set right before Token Sale\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 745,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public softCap = 0; // World soft cap will be set right before Token Sale\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 747,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public bnbRefundEnabled = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                walletTokens[msg.sender][i].released = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= limitEndDate || !isLimitEnabled || (!limitedWallets[_from] && !limitedWallets[_to]));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 769,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= SALE_START_TIME && now <= SALE_END_TIME);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 856,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(tokenPriceNum == 0 && tokenPriceDenom == 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tokenPriceNum > 0 && _tokenPriceDenom > 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                walletTokens[msg.sender][i].released = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 818,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(whiteList[msg.sender] && msg.value >= ETHER_MIN_CONTRIB) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now <= MAX_CONTRIB_CHECK_END_TIME && currentUserContribution > ETHER_MAX_CONTRIB ) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 820,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 822,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 823,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 824,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now <= MAX_CONTRIB_CHECK_END_TIME && currentUserContribution > ETHER_MAX_CONTRIB ) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 820,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(privilegedList[msg.sender] && msg.value >= ETHER_MIN_CONTRIB_PRIVATE) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now <= MAX_CONTRIB_CHECK_END_TIME && currentUserContribution > ETHER_MAX_CONTRIB_PRIVATE ) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 827,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 829,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now <= MAX_CONTRIB_CHECK_END_TIME && currentUserContribution > ETHER_MAX_CONTRIB_PRIVATE ) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 827,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 828,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(token.limitedWallets(msg.sender) && msg.value >= ETHER_MIN_CONTRIB_USA) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now <= MAX_CONTRIB_CHECK_END_TIME && currentUserContribution > ETHER_MAX_CONTRIB_USA) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 834,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(now <= MAX_CONTRIB_CHECK_END_TIME && currentUserContribution > ETHER_MAX_CONTRIB_USA) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 834,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 894,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(!whiteList[msg.sender] && !privilegedList[msg.sender]) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return false;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (totalEtherContributed >= safeSub(hardCap, ETHER_MIN_CONTRIB_USA) && totalBNBContributed >= safeSub(BNB_HARD_CAP, BNB_MIN_CONTRIB)) ||\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (now >= SALE_END_TIME && totalEtherContributed >= softCap)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            fund.onCrowdsaleEnd();\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            reservationFund.onCrowdsaleEnd();\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // BNB transfer\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            bnbToken.transfer(bnbTokenWallet, bnbToken.balanceOf(address(this)));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // Referral\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_115"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function releaseTokens() public {\n\n        require(walletTokens[msg.sender].length > 0);\n\n\n\n        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n\n            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n\n                walletTokens[msg.sender][i].released = true;\n\n                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n\n                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n\n            }\n\n        }\n",
                    "message": "LockedTokens.releaseTokens (Crowdsale.sol#544-554) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (Crowdsale.sol#550)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1019,
                    "vulnerability_to_line": 1047,
                    "vulnerability_code": "    function processBNBContribution() public whenNotPaused checkTime checkBNBContribution {\n\n        bool additionalBonusApplied = false;\n\n        uint256 bonusNum = 0;\n\n        uint256 bonusDenom = 100;\n\n        (bonusNum, bonusDenom) = getBonus();\n\n        uint256 amountBNB = bnbToken.allowance(msg.sender, address(this));\n\n        bnbToken.transferFrom(msg.sender, address(this), amountBNB);\n\n        bnbContributions[msg.sender] = safeAdd(bnbContributions[msg.sender], amountBNB);\n\n\n\n        uint256 tokenBonusAmount = 0;\n\n        uint256 tokenAmount = safeDiv(safeMul(amountBNB, BNB_TOKEN_PRICE_NUM), BNB_TOKEN_PRICE_DENOM);\n\n        rawTokenSupply = safeAdd(rawTokenSupply, tokenAmount);\n\n        if(bonusNum > 0) {\n\n            tokenBonusAmount = safeDiv(safeMul(tokenAmount, bonusNum), bonusDenom);\n\n        }\n\n\n\n        if(additionalBonusOwnerState[msg.sender] ==  AdditionalBonusState.Active) {\n\n            additionalBonusOwnerState[msg.sender] = AdditionalBonusState.Applied;\n\n            uint256 additionalBonus = safeDiv(safeMul(tokenAmount, ADDITIONAL_BONUS_NUM), ADDITIONAL_BONUS_DENOM);\n\n            tokenBonusAmount = safeAdd(tokenBonusAmount, additionalBonus);\n\n            additionalBonusApplied = true;\n\n        }\n\n\n\n        uint256 tokenTotalAmount = safeAdd(tokenAmount, tokenBonusAmount);\n\n        token.issue(msg.sender, tokenTotalAmount);\n\n        totalBNBContributed = safeAdd(totalBNBContributed, amountBNB);\n\n\n\n        LogBNBContribution(msg.sender, amountBNB, tokenAmount, tokenBonusAmount, additionalBonusApplied, now);\n",
                    "message": "TheAbyssDAICO.processBNBContribution (Crowdsale.sol#1019-1047) does not use the value returned by external calls:\n\t-bnbToken.transferFrom(msg.sender,address(this),amountBNB) (Crowdsale.sol#1025)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": 1150,
                    "vulnerability_code": "    function finalizeCrowdsale() public onlyOwner {\n\n        if(\n\n            (totalEtherContributed >= safeSub(hardCap, ETHER_MIN_CONTRIB_USA) && totalBNBContributed >= safeSub(BNB_HARD_CAP, BNB_MIN_CONTRIB)) ||\n\n            (now >= SALE_END_TIME && totalEtherContributed >= softCap)\n\n        ) {\n\n            fund.onCrowdsaleEnd();\n\n            reservationFund.onCrowdsaleEnd();\n\n            // BNB transfer\n\n            bnbToken.transfer(bnbTokenWallet, bnbToken.balanceOf(address(this)));\n\n\n\n            // Referral\n\n            uint256 referralTokenAmount = safeDiv(rawTokenSupply, 10);\n\n            token.issue(referralTokenWallet, referralTokenAmount);\n\n\n\n            // Foundation\n\n            uint256 foundationTokenAmount = safeDiv(token.totalSupply(), 2); // 20%\n\n            lockedTokens.addTokens(foundationTokenWallet, foundationTokenAmount, now + 365 days);\n\n\n\n            uint256 suppliedTokenAmount = token.totalSupply();\n\n\n\n            // Reserve\n\n            uint256 reservedTokenAmount = safeDiv(safeMul(suppliedTokenAmount, 3), 10); // 18%\n\n            token.issue(address(lockedTokens), reservedTokenAmount);\n\n            lockedTokens.addTokens(reserveTokenWallet, reservedTokenAmount, now + 183 days);\n\n\n\n            // Advisors\n\n            uint256 advisorsTokenAmount = safeDiv(suppliedTokenAmount, 10); // 6%\n\n            token.issue(advisorsTokenWallet, advisorsTokenAmount);\n\n\n\n            // Company\n\n            uint256 companyTokenAmount = safeDiv(suppliedTokenAmount, 4); // 15%\n\n            token.issue(address(lockedTokens), companyTokenAmount);\n\n            lockedTokens.addTokens(companyTokenWallet, companyTokenAmount, now + 730 days);\n\n\n\n            // Bounty\n\n            uint256 bountyTokenAmount = safeDiv(suppliedTokenAmount, 60); // 1%\n\n            token.issue(bountyTokenWallet, bountyTokenAmount);\n\n\n\n            token.setAllowTransfers(true);\n\n\n\n        } else if(now >= SALE_END_TIME) {\n\n            // Enable fund`s crowdsale refund if soft cap is not reached\n\n            fund.enableCrowdsaleRefund();\n\n            reservationFund.onCrowdsaleEnd();\n\n            bnbRefundEnabled = true;\n\n        }\n\n        token.finishIssuance();\n",
                    "message": "TheAbyssDAICO.finalizeCrowdsale (Crowdsale.sol#1103-1150) does not use the value returned by external calls:\n\t-bnbToken.transfer(bnbTokenWallet,bnbToken.balanceOf(address(this))) (Crowdsale.sol#1111)\n\t-token.finishIssuance() (Crowdsale.sol#1149)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": 1162,
                    "vulnerability_code": "    function refundBNBContributor() public {\n\n        require(bnbRefundEnabled);\n\n        require(bnbContributions[msg.sender] > 0);\n\n        uint256 amount = bnbContributions[msg.sender];\n\n        bnbContributions[msg.sender] = 0;\n\n        bnbToken.transfer(msg.sender, amount);\n\n        token.destroy(msg.sender, token.balanceOf(msg.sender));\n",
                    "message": "TheAbyssDAICO.refundBNBContributor (Crowdsale.sol#1155-1162) does not use the value returned by external calls:\n\t-bnbToken.transfer(msg.sender,amount) (Crowdsale.sol#1160)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "LockedTokens.releaseTokens has external calls inside a loop:\n\t- token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (Crowdsale.sol#550)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": 949,
                    "vulnerability_code": "    function addToLists(\n\n        address _wallet,\n\n        bool isInWhiteList,\n\n        bool isInPrivilegedList,\n\n        bool isInLimitedList,\n\n        bool hasAdditionalBonus\n\n    ) public onlyOwner {\n\n        if(isInWhiteList) {\n\n            whiteList[_wallet] = true;\n\n        }\n\n        if(isInPrivilegedList) {\n\n            privilegedList[_wallet] = true;\n\n        }\n\n        if(isInLimitedList) {\n\n            token.addLimitedWalletAddress(_wallet);\n\n        }\n\n        if(hasAdditionalBonus) {\n\n            additionalBonusOwnerState[_wallet] = AdditionalBonusState.Active;\n\n        }\n\n        if(reservationFund.canCompleteContribution(_wallet)) {\n\n            reservationFund.completeContribution(_wallet);\n\n        }\n",
                    "message": "Reentrancy in TheAbyssDAICO.addToLists (Crowdsale.sol#927-949):\n\tExternal calls:\n\t- token.addLimitedWalletAddress(_wallet) (Crowdsale.sol#941)\n\tState variables written after the call(s):\n\t- additionalBonusOwnerState (Crowdsale.sol#944)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": 1150,
                    "vulnerability_code": "    function finalizeCrowdsale() public onlyOwner {\n\n        if(\n\n            (totalEtherContributed >= safeSub(hardCap, ETHER_MIN_CONTRIB_USA) && totalBNBContributed >= safeSub(BNB_HARD_CAP, BNB_MIN_CONTRIB)) ||\n\n            (now >= SALE_END_TIME && totalEtherContributed >= softCap)\n\n        ) {\n\n            fund.onCrowdsaleEnd();\n\n            reservationFund.onCrowdsaleEnd();\n\n            // BNB transfer\n\n            bnbToken.transfer(bnbTokenWallet, bnbToken.balanceOf(address(this)));\n\n\n\n            // Referral\n\n            uint256 referralTokenAmount = safeDiv(rawTokenSupply, 10);\n\n            token.issue(referralTokenWallet, referralTokenAmount);\n\n\n\n            // Foundation\n\n            uint256 foundationTokenAmount = safeDiv(token.totalSupply(), 2); // 20%\n\n            lockedTokens.addTokens(foundationTokenWallet, foundationTokenAmount, now + 365 days);\n\n\n\n            uint256 suppliedTokenAmount = token.totalSupply();\n\n\n\n            // Reserve\n\n            uint256 reservedTokenAmount = safeDiv(safeMul(suppliedTokenAmount, 3), 10); // 18%\n\n            token.issue(address(lockedTokens), reservedTokenAmount);\n\n            lockedTokens.addTokens(reserveTokenWallet, reservedTokenAmount, now + 183 days);\n\n\n\n            // Advisors\n\n            uint256 advisorsTokenAmount = safeDiv(suppliedTokenAmount, 10); // 6%\n\n            token.issue(advisorsTokenWallet, advisorsTokenAmount);\n\n\n\n            // Company\n\n            uint256 companyTokenAmount = safeDiv(suppliedTokenAmount, 4); // 15%\n\n            token.issue(address(lockedTokens), companyTokenAmount);\n\n            lockedTokens.addTokens(companyTokenWallet, companyTokenAmount, now + 730 days);\n\n\n\n            // Bounty\n\n            uint256 bountyTokenAmount = safeDiv(suppliedTokenAmount, 60); // 1%\n\n            token.issue(bountyTokenWallet, bountyTokenAmount);\n\n\n\n            token.setAllowTransfers(true);\n\n\n\n        } else if(now >= SALE_END_TIME) {\n\n            // Enable fund`s crowdsale refund if soft cap is not reached\n\n            fund.enableCrowdsaleRefund();\n\n            reservationFund.onCrowdsaleEnd();\n\n            bnbRefundEnabled = true;\n\n        }\n\n        token.finishIssuance();\n",
                    "message": "Reentrancy in TheAbyssDAICO.finalizeCrowdsale (Crowdsale.sol#1103-1150):\n\tExternal calls:\n\t- fund.enableCrowdsaleRefund() (Crowdsale.sol#1145)\n\t- reservationFund.onCrowdsaleEnd() (Crowdsale.sol#1146)\n\tState variables written after the call(s):\n\t- bnbRefundEnabled (Crowdsale.sol#1147)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1019,
                    "vulnerability_to_line": 1047,
                    "vulnerability_code": "    function processBNBContribution() public whenNotPaused checkTime checkBNBContribution {\n\n        bool additionalBonusApplied = false;\n\n        uint256 bonusNum = 0;\n\n        uint256 bonusDenom = 100;\n\n        (bonusNum, bonusDenom) = getBonus();\n\n        uint256 amountBNB = bnbToken.allowance(msg.sender, address(this));\n\n        bnbToken.transferFrom(msg.sender, address(this), amountBNB);\n\n        bnbContributions[msg.sender] = safeAdd(bnbContributions[msg.sender], amountBNB);\n\n\n\n        uint256 tokenBonusAmount = 0;\n\n        uint256 tokenAmount = safeDiv(safeMul(amountBNB, BNB_TOKEN_PRICE_NUM), BNB_TOKEN_PRICE_DENOM);\n\n        rawTokenSupply = safeAdd(rawTokenSupply, tokenAmount);\n\n        if(bonusNum > 0) {\n\n            tokenBonusAmount = safeDiv(safeMul(tokenAmount, bonusNum), bonusDenom);\n\n        }\n\n\n\n        if(additionalBonusOwnerState[msg.sender] ==  AdditionalBonusState.Active) {\n\n            additionalBonusOwnerState[msg.sender] = AdditionalBonusState.Applied;\n\n            uint256 additionalBonus = safeDiv(safeMul(tokenAmount, ADDITIONAL_BONUS_NUM), ADDITIONAL_BONUS_DENOM);\n\n            tokenBonusAmount = safeAdd(tokenBonusAmount, additionalBonus);\n\n            additionalBonusApplied = true;\n\n        }\n\n\n\n        uint256 tokenTotalAmount = safeAdd(tokenAmount, tokenBonusAmount);\n\n        token.issue(msg.sender, tokenTotalAmount);\n\n        totalBNBContributed = safeAdd(totalBNBContributed, amountBNB);\n\n\n\n        LogBNBContribution(msg.sender, amountBNB, tokenAmount, tokenBonusAmount, additionalBonusApplied, now);\n",
                    "message": "Reentrancy in TheAbyssDAICO.processBNBContribution (Crowdsale.sol#1019-1047):\n\tExternal calls:\n\t- amountBNB = bnbToken.allowance(msg.sender,address(this)) (Crowdsale.sol#1024)\n\t- bnbToken.transferFrom(msg.sender,address(this),amountBNB) (Crowdsale.sol#1025)\n\tState variables written after the call(s):\n\t- additionalBonusOwnerState (Crowdsale.sol#1036)\n\t- bnbContributions (Crowdsale.sol#1026)\n\t- rawTokenSupply (Crowdsale.sol#1030)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1019,
                    "vulnerability_to_line": 1047,
                    "vulnerability_code": "    function processBNBContribution() public whenNotPaused checkTime checkBNBContribution {\n\n        bool additionalBonusApplied = false;\n\n        uint256 bonusNum = 0;\n\n        uint256 bonusDenom = 100;\n\n        (bonusNum, bonusDenom) = getBonus();\n\n        uint256 amountBNB = bnbToken.allowance(msg.sender, address(this));\n\n        bnbToken.transferFrom(msg.sender, address(this), amountBNB);\n\n        bnbContributions[msg.sender] = safeAdd(bnbContributions[msg.sender], amountBNB);\n\n\n\n        uint256 tokenBonusAmount = 0;\n\n        uint256 tokenAmount = safeDiv(safeMul(amountBNB, BNB_TOKEN_PRICE_NUM), BNB_TOKEN_PRICE_DENOM);\n\n        rawTokenSupply = safeAdd(rawTokenSupply, tokenAmount);\n\n        if(bonusNum > 0) {\n\n            tokenBonusAmount = safeDiv(safeMul(tokenAmount, bonusNum), bonusDenom);\n\n        }\n\n\n\n        if(additionalBonusOwnerState[msg.sender] ==  AdditionalBonusState.Active) {\n\n            additionalBonusOwnerState[msg.sender] = AdditionalBonusState.Applied;\n\n            uint256 additionalBonus = safeDiv(safeMul(tokenAmount, ADDITIONAL_BONUS_NUM), ADDITIONAL_BONUS_DENOM);\n\n            tokenBonusAmount = safeAdd(tokenBonusAmount, additionalBonus);\n\n            additionalBonusApplied = true;\n\n        }\n\n\n\n        uint256 tokenTotalAmount = safeAdd(tokenAmount, tokenBonusAmount);\n\n        token.issue(msg.sender, tokenTotalAmount);\n\n        totalBNBContributed = safeAdd(totalBNBContributed, amountBNB);\n\n\n\n        LogBNBContribution(msg.sender, amountBNB, tokenAmount, tokenBonusAmount, additionalBonusApplied, now);\n",
                    "message": "Reentrancy in TheAbyssDAICO.processBNBContribution (Crowdsale.sol#1019-1047):\n\tExternal calls:\n\t- amountBNB = bnbToken.allowance(msg.sender,address(this)) (Crowdsale.sol#1024)\n\t- bnbToken.transferFrom(msg.sender,address(this),amountBNB) (Crowdsale.sol#1025)\n\t- token.issue(msg.sender,tokenTotalAmount) (Crowdsale.sol#1043)\n\tState variables written after the call(s):\n\t- totalBNBContributed (Crowdsale.sol#1044)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1090,
                    "vulnerability_to_line": 1098,
                    "vulnerability_code": "    function processPayment(address contributor, uint256 etherAmount, uint256 tokenAmount, uint256 tokenBonusAmount, bool additionalBonusApplied) internal {\n\n        uint256 tokenTotalAmount = safeAdd(tokenAmount, tokenBonusAmount);\n\n\n\n        token.issue(contributor, tokenTotalAmount);\n\n        fund.processContribution.value(etherAmount)(contributor);\n\n        totalEtherContributed = safeAdd(totalEtherContributed, etherAmount);\n\n        userTotalContributed[contributor] = safeAdd(userTotalContributed[contributor], etherAmount);\n\n        LogContribution(contributor, etherAmount, tokenAmount, tokenBonusAmount, additionalBonusApplied, now);\n",
                    "message": "Reentrancy in TheAbyssDAICO.processPayment (Crowdsale.sol#1090-1098):\n\tExternal calls:\n\t- token.issue(contributor,tokenTotalAmount) (Crowdsale.sol#1093)\n\t- fund.processContribution.value(etherAmount)(contributor) (Crowdsale.sol#1094)\n\tExternal calls sending eth:\n\t- fund.processContribution.value(etherAmount)(contributor) (Crowdsale.sol#1094)\n\tState variables written after the call(s):\n\t- totalEtherContributed (Crowdsale.sol#1095)\n\t- userTotalContributed (Crowdsale.sol#1096)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (Crowdsale.sol#74)\nIERC20Token.name should be constant (Crowdsale.sol#72)\nIERC20Token.symbol should be constant (Crowdsale.sol#73)\nTheAbyssDAICO.BNB_HARD_CAP should be constant (Crowdsale.sol#739)\nTheAbyssDAICO.BNB_MIN_CONTRIB should be constant (Crowdsale.sol#740)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 217,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (Crowdsale.sol#215-217) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (Crowdsale.sol#77) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 227,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (Crowdsale.sol#225-227) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (Crowdsale.sol#81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
                    "message": "MultiOwnable.setOwners (Crowdsale.sol#119-123) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 140,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
                    "message": "MultiOwnable.getOwners (Crowdsale.sol#138-140) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": "ITokenEventListener.onTokenTransfer (Crowdsale.sol#245) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
                    "message": "ManagedToken.setListener (Crowdsale.sol#305-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": 377,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.increaseApproval (Crowdsale.sol#373-377) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": 398,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.decreaseApproval (Crowdsale.sol#389-398) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 408,
                    "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
                    "message": "ManagedToken.finishIssuance (Crowdsale.sol#404-408) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": 468,
                    "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n\n        require(msg.sender == limitedWalletsManager || ownerByAddress[msg.sender]);\n\n        limitedWallets[_wallet] = true;\n",
                    "message": "TransferLimitedToken.addLimitedWalletAddress (Crowdsale.sol#465-468) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n\n        limitedWallets[_wallet] = false;\n",
                    "message": "TransferLimitedToken.delLimitedWalletAddress (Crowdsale.sol#474-476) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function disableLimit() public onlyManager {\n\n        isLimitEnabled = false;\n",
                    "message": "TransferLimitedToken.disableLimit (Crowdsale.sol#481-483) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 554,
                    "vulnerability_code": "    function releaseTokens() public {\n\n        require(walletTokens[msg.sender].length > 0);\n\n\n\n        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n\n            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n\n                walletTokens[msg.sender][i].released = true;\n\n                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n\n                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n\n            }\n\n        }\n",
                    "message": "LockedTokens.releaseTokens (Crowdsale.sol#544-554) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != owner);\n\n        newOwner = _newOwner;\n",
                    "message": "Ownable.transferOwnership (Crowdsale.sol#591-594) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 599,
                    "vulnerability_to_line": 604,
                    "vulnerability_code": "    function confirmOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = 0x0;\n",
                    "message": "Ownable.confirmOwnership (Crowdsale.sol#599-604) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": 644,
                    "vulnerability_code": "    function pause() onlyOwner whenNotPaused public {\n\n        paused = true;\n\n        Pause();\n",
                    "message": "Pausable.pause (Crowdsale.sol#641-644) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": 652,
                    "vulnerability_code": "    function unpause() onlyOwner whenPaused public {\n\n        paused = false;\n\n        Unpause();\n",
                    "message": "Pausable.unpause (Crowdsale.sol#649-652) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 860,
                    "vulnerability_code": "    function setTokenPrice(uint256 _tokenPriceNum, uint256 _tokenPriceDenom) public onlyOwner {\n\n        require(tokenPriceNum == 0 && tokenPriceDenom == 0);\n\n        require(_tokenPriceNum > 0 && _tokenPriceDenom > 0);\n\n        tokenPriceNum = _tokenPriceNum;\n\n        tokenPriceDenom = _tokenPriceDenom;\n",
                    "message": "TheAbyssDAICO.setTokenPrice (Crowdsale.sol#855-860) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": 869,
                    "vulnerability_code": "    function setHardCap(uint256 _hardCap) public onlyOwner {\n\n        require(hardCap == 0);\n\n        hardCap = _hardCap;\n",
                    "message": "TheAbyssDAICO.setHardCap (Crowdsale.sol#866-869) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": 878,
                    "vulnerability_code": "    function setSoftCap(uint256 _softCap) public onlyOwner {\n\n        require(softCap == 0);\n\n        softCap = _softCap;\n",
                    "message": "TheAbyssDAICO.setSoftCap (Crowdsale.sol#875-878) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": 949,
                    "vulnerability_code": "    function addToLists(\n\n        address _wallet,\n\n        bool isInWhiteList,\n\n        bool isInPrivilegedList,\n\n        bool isInLimitedList,\n\n        bool hasAdditionalBonus\n\n    ) public onlyOwner {\n\n        if(isInWhiteList) {\n\n            whiteList[_wallet] = true;\n\n        }\n\n        if(isInPrivilegedList) {\n\n            privilegedList[_wallet] = true;\n\n        }\n\n        if(isInLimitedList) {\n\n            token.addLimitedWalletAddress(_wallet);\n\n        }\n\n        if(hasAdditionalBonus) {\n\n            additionalBonusOwnerState[_wallet] = AdditionalBonusState.Active;\n\n        }\n\n        if(reservationFund.canCompleteContribution(_wallet)) {\n\n            reservationFund.completeContribution(_wallet);\n\n        }\n",
                    "message": "TheAbyssDAICO.addToLists (Crowdsale.sol#927-949) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": 956,
                    "vulnerability_code": "    function addToWhiteList(address _wallet) public onlyOwner {\n\n        whiteList[_wallet] = true;\n",
                    "message": "TheAbyssDAICO.addToWhiteList (Crowdsale.sol#954-956) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 961,
                    "vulnerability_to_line": 963,
                    "vulnerability_code": "    function addAdditionalBonusMember(address _wallet) public onlyOwner {\n\n        additionalBonusOwnerState[_wallet] = AdditionalBonusState.Active;\n",
                    "message": "TheAbyssDAICO.addAdditionalBonusMember (Crowdsale.sol#961-963) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": 970,
                    "vulnerability_code": "    function addToPrivilegedList(address _wallet) public onlyOwner {\n\n        privilegedList[_wallet] = true;\n",
                    "message": "TheAbyssDAICO.addToPrivilegedList (Crowdsale.sol#968-970) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": 977,
                    "vulnerability_code": "    function setLockedTokens(address lockedTokensAddress) public onlyOwner {\n\n        lockedTokens = LockedTokens(lockedTokensAddress);\n",
                    "message": "TheAbyssDAICO.setLockedTokens (Crowdsale.sol#975-977) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": 988,
                    "vulnerability_code": "    function () payable public whenNotPaused {\n\n        if(whiteList[msg.sender] || privilegedList[msg.sender] || token.limitedWallets(msg.sender)) {\n\n            processContribution(msg.sender, msg.value);\n\n        } else {\n\n            processReservationContribution(msg.sender, msg.value);\n\n        }\n",
                    "message": "TheAbyssDAICO.fallback (Crowdsale.sol#982-988) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1019,
                    "vulnerability_to_line": 1047,
                    "vulnerability_code": "    function processBNBContribution() public whenNotPaused checkTime checkBNBContribution {\n\n        bool additionalBonusApplied = false;\n\n        uint256 bonusNum = 0;\n\n        uint256 bonusDenom = 100;\n\n        (bonusNum, bonusDenom) = getBonus();\n\n        uint256 amountBNB = bnbToken.allowance(msg.sender, address(this));\n\n        bnbToken.transferFrom(msg.sender, address(this), amountBNB);\n\n        bnbContributions[msg.sender] = safeAdd(bnbContributions[msg.sender], amountBNB);\n\n\n\n        uint256 tokenBonusAmount = 0;\n\n        uint256 tokenAmount = safeDiv(safeMul(amountBNB, BNB_TOKEN_PRICE_NUM), BNB_TOKEN_PRICE_DENOM);\n\n        rawTokenSupply = safeAdd(rawTokenSupply, tokenAmount);\n\n        if(bonusNum > 0) {\n\n            tokenBonusAmount = safeDiv(safeMul(tokenAmount, bonusNum), bonusDenom);\n\n        }\n\n\n\n        if(additionalBonusOwnerState[msg.sender] ==  AdditionalBonusState.Active) {\n\n            additionalBonusOwnerState[msg.sender] = AdditionalBonusState.Applied;\n\n            uint256 additionalBonus = safeDiv(safeMul(tokenAmount, ADDITIONAL_BONUS_NUM), ADDITIONAL_BONUS_DENOM);\n\n            tokenBonusAmount = safeAdd(tokenBonusAmount, additionalBonus);\n\n            additionalBonusApplied = true;\n\n        }\n\n\n\n        uint256 tokenTotalAmount = safeAdd(tokenAmount, tokenBonusAmount);\n\n        token.issue(msg.sender, tokenTotalAmount);\n\n        totalBNBContributed = safeAdd(totalBNBContributed, amountBNB);\n\n\n\n        LogBNBContribution(msg.sender, amountBNB, tokenAmount, tokenBonusAmount, additionalBonusApplied, now);\n",
                    "message": "TheAbyssDAICO.processBNBContribution (Crowdsale.sol#1019-1047) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": 1150,
                    "vulnerability_code": "    function finalizeCrowdsale() public onlyOwner {\n\n        if(\n\n            (totalEtherContributed >= safeSub(hardCap, ETHER_MIN_CONTRIB_USA) && totalBNBContributed >= safeSub(BNB_HARD_CAP, BNB_MIN_CONTRIB)) ||\n\n            (now >= SALE_END_TIME && totalEtherContributed >= softCap)\n\n        ) {\n\n            fund.onCrowdsaleEnd();\n\n            reservationFund.onCrowdsaleEnd();\n\n            // BNB transfer\n\n            bnbToken.transfer(bnbTokenWallet, bnbToken.balanceOf(address(this)));\n\n\n\n            // Referral\n\n            uint256 referralTokenAmount = safeDiv(rawTokenSupply, 10);\n\n            token.issue(referralTokenWallet, referralTokenAmount);\n\n\n\n            // Foundation\n\n            uint256 foundationTokenAmount = safeDiv(token.totalSupply(), 2); // 20%\n\n            lockedTokens.addTokens(foundationTokenWallet, foundationTokenAmount, now + 365 days);\n\n\n\n            uint256 suppliedTokenAmount = token.totalSupply();\n\n\n\n            // Reserve\n\n            uint256 reservedTokenAmount = safeDiv(safeMul(suppliedTokenAmount, 3), 10); // 18%\n\n            token.issue(address(lockedTokens), reservedTokenAmount);\n\n            lockedTokens.addTokens(reserveTokenWallet, reservedTokenAmount, now + 183 days);\n\n\n\n            // Advisors\n\n            uint256 advisorsTokenAmount = safeDiv(suppliedTokenAmount, 10); // 6%\n\n            token.issue(advisorsTokenWallet, advisorsTokenAmount);\n\n\n\n            // Company\n\n            uint256 companyTokenAmount = safeDiv(suppliedTokenAmount, 4); // 15%\n\n            token.issue(address(lockedTokens), companyTokenAmount);\n\n            lockedTokens.addTokens(companyTokenWallet, companyTokenAmount, now + 730 days);\n\n\n\n            // Bounty\n\n            uint256 bountyTokenAmount = safeDiv(suppliedTokenAmount, 60); // 1%\n\n            token.issue(bountyTokenWallet, bountyTokenAmount);\n\n\n\n            token.setAllowTransfers(true);\n\n\n\n        } else if(now >= SALE_END_TIME) {\n\n            // Enable fund`s crowdsale refund if soft cap is not reached\n\n            fund.enableCrowdsaleRefund();\n\n            reservationFund.onCrowdsaleEnd();\n\n            bnbRefundEnabled = true;\n\n        }\n\n        token.finishIssuance();\n",
                    "message": "TheAbyssDAICO.finalizeCrowdsale (Crowdsale.sol#1103-1150) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1155,
                    "vulnerability_to_line": 1162,
                    "vulnerability_code": "    function refundBNBContributor() public {\n\n        require(bnbRefundEnabled);\n\n        require(bnbContributions[msg.sender] > 0);\n\n        uint256 amount = bnbContributions[msg.sender];\n\n        bnbContributions[msg.sender] = 0;\n\n        bnbToken.transfer(msg.sender, amount);\n\n        token.destroy(msg.sender, token.balanceOf(msg.sender));\n",
                    "message": "TheAbyssDAICO.refundBNBContributor (Crowdsale.sol#1155-1162) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in Crowdsale.sol:\n\t- pragma solidity^0.4.21 (Crowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#27): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#64): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#89): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#145): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#183): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#232): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#250): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#413): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#500): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#559): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#609): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#657): it allows old versions\n\t- pragma solidity^0.4.21 (Crowdsale.sol#672): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
                    "message": "Function 'MultiOwnable.MultiOwnable' (Crowdsale.sol#112-114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": "Parameter '_owners' of MultiOwnable.setOwners (Crowdsale.sol#119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": 136,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
                    "message": "Function 'MultiOwnable._setOwners' (Crowdsale.sol#125-136) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": "Parameter '_owners' of MultiOwnable._setOwners (Crowdsale.sol#125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (Crowdsale.sol#155-156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (Crowdsale.sol#215) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (Crowdsale.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transfer (Crowdsale.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (Crowdsale.sol#204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (Crowdsale.sol#204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transferFrom (Crowdsale.sol#204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (Crowdsale.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.approve (Crowdsale.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (Crowdsale.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (Crowdsale.sol#225) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transfer (Crowdsale.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transfer (Crowdsale.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_from' of ManagedToken.transferFrom (Crowdsale.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transferFrom (Crowdsale.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transferFrom (Crowdsale.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
                    "message": "Function 'ManagedToken.ManagedToken' (Crowdsale.sol#285-290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_listener' of ManagedToken.ManagedToken (Crowdsale.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_owners' of ManagedToken.ManagedToken (Crowdsale.sol#285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (Crowdsale.sol#296) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": "Parameter '_listener' of ManagedToken.setListener (Crowdsale.sol#305) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_to' of ManagedToken.issue (Crowdsale.sol#341) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_value' of ManagedToken.issue (Crowdsale.sol#341) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_from' of ManagedToken.destroy (Crowdsale.sol#354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_value' of ManagedToken.destroy (Crowdsale.sol#354) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.increaseApproval (Crowdsale.sol#373) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (Crowdsale.sol#373) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.decreaseApproval (Crowdsale.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (Crowdsale.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of TransferLimitedToken.transfer (Crowdsale.sol#485) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.transfer (Crowdsale.sol#485) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_from' of TransferLimitedToken.transferFrom (Crowdsale.sol#489) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of TransferLimitedToken.transferFrom (Crowdsale.sol#489) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.transferFrom (Crowdsale.sol#489) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": "Parameter '_spender' of TransferLimitedToken.approve (Crowdsale.sol#493) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.approve (Crowdsale.sol#493) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function TransferLimitedToken(\n\n        uint256 _limitStartDate,\n\n        address _listener,\n\n        address[] _owners,\n\n        address _limitedWalletsManager\n\n    ) public ManagedToken(_listener, _owners)\n\n    {\n\n        limitEndDate = _limitStartDate + LIMIT_TRANSFERS_PERIOD;\n\n        isLimitEnabled = true;\n\n        limitedWalletsManager = _limitedWalletsManager;\n",
                    "message": "Function 'TransferLimitedToken.TransferLimitedToken' (Crowdsale.sol#449-459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _limitStartDate,\n",
                    "message": "Parameter '_limitStartDate' of TransferLimitedToken.TransferLimitedToken (Crowdsale.sol#450) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _limitedWalletsManager\n",
                    "message": "Parameter '_limitedWalletsManager' of TransferLimitedToken.TransferLimitedToken (Crowdsale.sol#453) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n",
                    "message": "Parameter '_wallet' of TransferLimitedToken.addLimitedWalletAddress (Crowdsale.sol#465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n",
                    "message": "Parameter '_wallet' of TransferLimitedToken.delLimitedWalletAddress (Crowdsale.sol#474) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": 528,
                    "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n\n        token = _token;\n\n        crowdsaleAddress = _crowdsaleAddress;\n",
                    "message": "Function 'LockedTokens.LockedTokens' (Crowdsale.sol#525-528) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n",
                    "message": "Parameter '_token' of LockedTokens.LockedTokens (Crowdsale.sol#525) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n",
                    "message": "Parameter '_crowdsaleAddress' of LockedTokens.LockedTokens (Crowdsale.sol#525) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
                    "message": "Parameter '_to' of LockedTokens.addTokens (Crowdsale.sol#536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
                    "message": "Parameter '_amount' of LockedTokens.addTokens (Crowdsale.sol#536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
                    "message": "Parameter '_lockEndTime' of LockedTokens.addTokens (Crowdsale.sol#536) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": 577,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n\n        owner = _owner == address(0) ? msg.sender : _owner;\n",
                    "message": "Function 'Ownable.Ownable' (Crowdsale.sol#575-577) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n",
                    "message": "Parameter '_owner' of Ownable.Ownable (Crowdsale.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (Crowdsale.sol#591) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 773,
                    "vulnerability_to_line": 803,
                    "vulnerability_code": "    function TheAbyssDAICO(\n\n        address bnbTokenAddress,\n\n        address tokenAddress,\n\n        address fundAddress,\n\n        address reservationFundAddress,\n\n        address _bnbTokenWallet,\n\n        address _referralTokenWallet,\n\n        address _foundationTokenWallet,\n\n        address _advisorsTokenWallet,\n\n        address _companyTokenWallet,\n\n        address _reserveTokenWallet,\n\n        address _bountyTokenWallet,\n\n        address _owner\n\n    ) public\n\n        Ownable(_owner)\n\n    {\n\n        require(tokenAddress != address(0));\n\n\n\n        bnbToken = IERC20Token(bnbTokenAddress);\n\n        token = TransferLimitedToken(tokenAddress);\n\n        fund = ICrowdsaleFund(fundAddress);\n\n        reservationFund = ICrowdsaleReservationFund(reservationFundAddress);\n\n\n\n        bnbTokenWallet = _bnbTokenWallet;\n\n        referralTokenWallet = _referralTokenWallet;\n\n        foundationTokenWallet = _foundationTokenWallet;\n\n        advisorsTokenWallet = _advisorsTokenWallet;\n\n        companyTokenWallet = _companyTokenWallet;\n\n        reserveTokenWallet = _reserveTokenWallet;\n\n        bountyTokenWallet = _bountyTokenWallet;\n",
                    "message": "Function 'TheAbyssDAICO.TheAbyssDAICO' (Crowdsale.sol#773-803) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 778,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _bnbTokenWallet,\n",
                    "message": "Parameter '_bnbTokenWallet' of TheAbyssDAICO.TheAbyssDAICO (Crowdsale.sol#778) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 779,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _referralTokenWallet,\n",
                    "message": "Parameter '_referralTokenWallet' of TheAbyssDAICO.TheAbyssDAICO (Crowdsale.sol#779) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _foundationTokenWallet,\n",
                    "message": "Parameter '_foundationTokenWallet' of TheAbyssDAICO.TheAbyssDAICO (Crowdsale.sol#780) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _advisorsTokenWallet,\n",
                    "message": "Parameter '_advisorsTokenWallet' of TheAbyssDAICO.TheAbyssDAICO (Crowdsale.sol#781) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _companyTokenWallet,\n",
                    "message": "Parameter '_companyTokenWallet' of TheAbyssDAICO.TheAbyssDAICO (Crowdsale.sol#782) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 783,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _reserveTokenWallet,\n",
                    "message": "Parameter '_reserveTokenWallet' of TheAbyssDAICO.TheAbyssDAICO (Crowdsale.sol#783) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _bountyTokenWallet,\n",
                    "message": "Parameter '_bountyTokenWallet' of TheAbyssDAICO.TheAbyssDAICO (Crowdsale.sol#784) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenPrice(uint256 _tokenPriceNum, uint256 _tokenPriceDenom) public onlyOwner {\n",
                    "message": "Parameter '_tokenPriceNum' of TheAbyssDAICO.setTokenPrice (Crowdsale.sol#855) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenPrice(uint256 _tokenPriceNum, uint256 _tokenPriceDenom) public onlyOwner {\n",
                    "message": "Parameter '_tokenPriceDenom' of TheAbyssDAICO.setTokenPrice (Crowdsale.sol#855) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setHardCap(uint256 _hardCap) public onlyOwner {\n",
                    "message": "Parameter '_hardCap' of TheAbyssDAICO.setHardCap (Crowdsale.sol#866) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSoftCap(uint256 _softCap) public onlyOwner {\n",
                    "message": "Parameter '_softCap' of TheAbyssDAICO.setSoftCap (Crowdsale.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 928,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _wallet,\n",
                    "message": "Parameter '_wallet' of TheAbyssDAICO.addToLists (Crowdsale.sol#928) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 954,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addToWhiteList(address _wallet) public onlyOwner {\n",
                    "message": "Parameter '_wallet' of TheAbyssDAICO.addToWhiteList (Crowdsale.sol#954) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 961,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addAdditionalBonusMember(address _wallet) public onlyOwner {\n",
                    "message": "Parameter '_wallet' of TheAbyssDAICO.addAdditionalBonusMember (Crowdsale.sol#961) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addToPrivilegedList(address _wallet) public onlyOwner {\n",
                    "message": "Parameter '_wallet' of TheAbyssDAICO.addToPrivilegedList (Crowdsale.sol#968) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public BNB_HARD_CAP = 300000 ether; // 300K BNB\n",
                    "message": "Variable 'TheAbyssDAICO.BNB_HARD_CAP' (Crowdsale.sol#739) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public BNB_MIN_CONTRIB = 1000 ether; // 1K BNB\n",
                    "message": "Variable 'TheAbyssDAICO.BNB_MIN_CONTRIB' (Crowdsale.sol#740) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBonus() internal constant returns (uint256, uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenPrice(uint256 _tokenPriceNum, uint256 _tokenPriceDenom) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setHardCap(uint256 _hardCap) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSoftCap(uint256 _softCap) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setLockedTokens(address lockedTokensAddress) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBonus() internal constant returns (uint256, uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () payable public whenNotPaused {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/TapPoll.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public yesCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public noCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalVoted = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public minTokensPerc = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= startTime && now <= endTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_startTime >= now && _endTime > _startTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_24"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (TapPoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (TapPoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (TapPoll.sol#133)\n\tState variables written after the call(s):\n\t- votesByAddress (TapPoll.sol#143)\n\t- votesByAddress (TapPoll.sol#144)\n\t- votesByAddress (TapPoll.sol#145)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (TapPoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (TapPoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (TapPoll.sol#133)\n\tState variables written after the call(s):\n\t- noCounter (TapPoll.sol#139)\n\t- totalVoted (TapPoll.sol#147)\n\t- yesCounter (TapPoll.sol#137)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (TapPoll.sol#51)\nIERC20Token.name should be constant (TapPoll.sol#49)\nIERC20Token.symbol should be constant (TapPoll.sol#50)\nIERC20Token.totalSupply should be constant (TapPoll.sol#52)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (TapPoll.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transfer (TapPoll.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (TapPoll.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (TapPoll.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (TapPoll.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "BasePoll.vote (TapPoll.sol#129-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function revokeVote() public checkTime {\n\n        require(votesByAddress[msg.sender].time > 0);\n\n\n\n        uint256 voiceWeight = votesByAddress[msg.sender].weight;\n\n        bool agree = votesByAddress[msg.sender].agree;\n\n\n\n        votesByAddress[msg.sender].time = 0;\n\n        votesByAddress[msg.sender].weight = 0;\n\n        votesByAddress[msg.sender].agree = false;\n\n\n\n        totalVoted = safeSub(totalVoted, 1);\n\n        if(agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n",
                    "message": "BasePoll.revokeVote (TapPoll.sol#153-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function onTokenTransfer(address tokenHolder, uint256 amount) public {\n\n        require(msg.sender == fundAddress);\n\n        if(votesByAddress[tokenHolder].time == 0) {\n\n            return;\n\n        }\n\n        if(!checkTransfersAfterEnd) {\n\n             if(finalized || (now < startTime || now > endTime)) {\n\n                 return;\n\n             }\n\n        }\n\n\n\n        if(token.balanceOf(tokenHolder) >= votesByAddress[tokenHolder].weight) {\n\n            return;\n\n        }\n\n        uint256 voiceWeight = amount;\n\n        if(amount > votesByAddress[tokenHolder].weight) {\n\n            voiceWeight = votesByAddress[tokenHolder].weight;\n\n        }\n\n\n\n        if(votesByAddress[tokenHolder].agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n\n        votesByAddress[tokenHolder].weight = safeSub(votesByAddress[tokenHolder].weight, voiceWeight);\n",
                    "message": "BasePoll.onTokenTransfer (TapPoll.sol#175-200) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "    function tryToFinalize() public notFinalized returns(bool) {\n\n        if(now < endTime) {\n\n            return false;\n\n        }\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
                    "message": "BasePoll.tryToFinalize (TapPoll.sol#205-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "    function isNowApproved() public view returns(bool) {\n\n        return isSubjectApproved();\n",
                    "message": "BasePoll.isNowApproved (TapPoll.sol#214-216) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in TapPoll.sol:\n\t- pragma solidity^0.4.21 (TapPoll.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (TapPoll.sol#41): it allows old versions\n\t- pragma solidity^0.4.21 (TapPoll.sol#66): it allows old versions\n\t- pragma solidity^0.4.21 (TapPoll.sol#230): it allows old versions\n\t- pragma solidity^0.4.21 (TapPoll.sol#253): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (TapPoll.sol#13-14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n\n        require(_tokenAddress != address(0));\n\n        require(_startTime >= now && _endTime > _startTime);\n\n\n\n        token = IERC20Token(_tokenAddress);\n\n        fundAddress = _fundAddress;\n\n        startTime = _startTime;\n\n        endTime = _endTime;\n\n        finalized = false;\n\n        checkTransfersAfterEnd = _checkTransfersAfterEnd;\n",
                    "message": "Function 'BasePoll.BasePoll' (TapPoll.sol#113-123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_tokenAddress' of BasePoll.BasePoll (TapPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_fundAddress' of BasePoll.BasePoll (TapPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_startTime' of BasePoll.BasePoll (TapPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_endTime' of BasePoll.BasePoll (TapPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_checkTransfersAfterEnd' of BasePoll.BasePoll (TapPoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "    function TapPoll(\n\n        uint256 _tap,\n\n        address _tokenAddress,\n\n        address _fundAddress,\n\n        uint256 _startTime,\n\n        uint256 _endTime,\n\n        uint256 _minTokensPerc\n\n    ) public\n\n        BasePoll(_tokenAddress, _fundAddress, _startTime, _endTime, false)\n\n    {\n\n        tap = _tap;\n\n        minTokensPerc = _minTokensPerc;\n",
                    "message": "Function 'TapPoll.TapPoll' (TapPoll.sol#273-285) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _tap,\n",
                    "message": "Parameter '_tap' of TapPoll.TapPoll (TapPoll.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _minTokensPerc\n",
                    "message": "Parameter '_minTokensPerc' of TapPoll.TapPoll (TapPoll.sol#279) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool checkTransfersAfterEnd;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/ISimpleCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ISimpleCrowdsale.sol:\n\t- pragma solidity^0.4.21 (ISimpleCrowdsale.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/token/TransferLimitedToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowTransfers = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public issuanceFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= limitEndDate || !isLimitEnabled || (!limitedWallets[_from] && !limitedWallets[_to]));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_61"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (TransferLimitedToken.sol#69)\nIERC20Token.name should be constant (TransferLimitedToken.sol#67)\nIERC20Token.symbol should be constant (TransferLimitedToken.sol#68)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
                    "message": "MultiOwnable.setOwners (TransferLimitedToken.sol#33-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
                    "message": "MultiOwnable.getOwners (TransferLimitedToken.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (TransferLimitedToken.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (TransferLimitedToken.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (TransferLimitedToken.sol#76) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (TransferLimitedToken.sol#164-166) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": "ITokenEventListener.onTokenTransfer (TransferLimitedToken.sol#184) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
                    "message": "ManagedToken.setListener (TransferLimitedToken.sol#244-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.increaseApproval (TransferLimitedToken.sol#312-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 337,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.decreaseApproval (TransferLimitedToken.sol#328-337) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
                    "message": "ManagedToken.finishIssuance (TransferLimitedToken.sol#343-347) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n\n        require(msg.sender == limitedWalletsManager || ownerByAddress[msg.sender]);\n\n        limitedWallets[_wallet] = true;\n",
                    "message": "TransferLimitedToken.addLimitedWalletAddress (TransferLimitedToken.sol#404-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": 415,
                    "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n\n        limitedWallets[_wallet] = false;\n",
                    "message": "TransferLimitedToken.delLimitedWalletAddress (TransferLimitedToken.sol#413-415) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "    function disableLimit() public onlyManager {\n\n        isLimitEnabled = false;\n",
                    "message": "TransferLimitedToken.disableLimit (TransferLimitedToken.sol#420-422) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in TransferLimitedToken.sol:\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#59): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#84): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#122): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#171): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#189): it allows old versions\n\t- pragma solidity^0.4.21 (TransferLimitedToken.sol#352): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
                    "message": "Function 'MultiOwnable.MultiOwnable' (TransferLimitedToken.sol#26-28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": "Parameter '_owners' of MultiOwnable.setOwners (TransferLimitedToken.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
                    "message": "Function 'MultiOwnable._setOwners' (TransferLimitedToken.sol#39-50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": "Parameter '_owners' of MultiOwnable._setOwners (TransferLimitedToken.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (TransferLimitedToken.sol#94-95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (TransferLimitedToken.sol#154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (TransferLimitedToken.sol#133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transfer (TransferLimitedToken.sol#133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (TransferLimitedToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (TransferLimitedToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transferFrom (TransferLimitedToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (TransferLimitedToken.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.approve (TransferLimitedToken.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (TransferLimitedToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (TransferLimitedToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transfer (TransferLimitedToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transfer (TransferLimitedToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_from' of ManagedToken.transferFrom (TransferLimitedToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transferFrom (TransferLimitedToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transferFrom (TransferLimitedToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
                    "message": "Function 'ManagedToken.ManagedToken' (TransferLimitedToken.sol#224-229) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_listener' of ManagedToken.ManagedToken (TransferLimitedToken.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_owners' of ManagedToken.ManagedToken (TransferLimitedToken.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (TransferLimitedToken.sol#235) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": "Parameter '_listener' of ManagedToken.setListener (TransferLimitedToken.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_to' of ManagedToken.issue (TransferLimitedToken.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_value' of ManagedToken.issue (TransferLimitedToken.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_from' of ManagedToken.destroy (TransferLimitedToken.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_value' of ManagedToken.destroy (TransferLimitedToken.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.increaseApproval (TransferLimitedToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (TransferLimitedToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.decreaseApproval (TransferLimitedToken.sol#328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (TransferLimitedToken.sol#328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of TransferLimitedToken.transfer (TransferLimitedToken.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.transfer (TransferLimitedToken.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_from' of TransferLimitedToken.transferFrom (TransferLimitedToken.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of TransferLimitedToken.transferFrom (TransferLimitedToken.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.transferFrom (TransferLimitedToken.sol#428) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": "Parameter '_spender' of TransferLimitedToken.approve (TransferLimitedToken.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": "Parameter '_value' of TransferLimitedToken.approve (TransferLimitedToken.sol#432) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 398,
                    "vulnerability_code": "    function TransferLimitedToken(\n\n        uint256 _limitStartDate,\n\n        address _listener,\n\n        address[] _owners,\n\n        address _limitedWalletsManager\n\n    ) public ManagedToken(_listener, _owners)\n\n    {\n\n        limitEndDate = _limitStartDate + LIMIT_TRANSFERS_PERIOD;\n\n        isLimitEnabled = true;\n\n        limitedWalletsManager = _limitedWalletsManager;\n",
                    "message": "Function 'TransferLimitedToken.TransferLimitedToken' (TransferLimitedToken.sol#388-398) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _limitStartDate,\n",
                    "message": "Parameter '_limitStartDate' of TransferLimitedToken.TransferLimitedToken (TransferLimitedToken.sol#389) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _limitedWalletsManager\n",
                    "message": "Parameter '_limitedWalletsManager' of TransferLimitedToken.TransferLimitedToken (TransferLimitedToken.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addLimitedWalletAddress(address _wallet) public {\n",
                    "message": "Parameter '_wallet' of TransferLimitedToken.addLimitedWalletAddress (TransferLimitedToken.sol#404) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function delLimitedWalletAddress(address _wallet) public onlyManager {\n",
                    "message": "Parameter '_wallet' of TransferLimitedToken.delLimitedWalletAddress (TransferLimitedToken.sol#413) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] _owners,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/token/ERC20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_23"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (ERC20Token.sol#13)\nIERC20Token.name should be constant (ERC20Token.sol#11)\nIERC20Token.symbol should be constant (ERC20Token.sol#12)\nIERC20Token.totalSupply should be constant (ERC20Token.sol#14)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (ERC20Token.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": 100,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (ERC20Token.sol#98-100) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n\n        require(_to != address(0));\n\n        require(balances[msg.sender] >= _value);\n\n\n\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n\n        balances[_to] = safeAdd(balances[_to], _value);\n\n        Transfer(msg.sender, _to, _value);\n\n        return true;\n",
                    "message": "ERC20Token.transfer (ERC20Token.sol#77-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transfer (ERC20Token.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n        require(_to != address(0));\n\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n\n\n\n        balances[_to] = safeAdd(balances[_to], _value);\n\n        balances[_from] = safeSub(balances[_from], _value);\n\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n\n        Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "ERC20Token.transferFrom (ERC20Token.sol#87-96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (ERC20Token.sol#18) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (ERC20Token.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "ERC20Token.approve (ERC20Token.sol#102-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 110,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (ERC20Token.sol#108-110) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (ERC20Token.sol#20) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ERC20Token.sol:\n\t- pragma solidity^0.4.21 (ERC20Token.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (ERC20Token.sol#28): it allows old versions\n\t- pragma solidity^0.4.21 (ERC20Token.sol#66): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (ERC20Token.sol#38-39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (ERC20Token.sol#98) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (ERC20Token.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transfer (ERC20Token.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (ERC20Token.sol#87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (ERC20Token.sol#87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transferFrom (ERC20Token.sol#87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (ERC20Token.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.approve (ERC20Token.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (ERC20Token.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (ERC20Token.sol#108) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/token/IERC20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (IERC20Token.sol#13)\nIERC20Token.name should be constant (IERC20Token.sol#11)\nIERC20Token.symbol should be constant (IERC20Token.sol#12)\nIERC20Token.totalSupply should be constant (IERC20Token.sol#14)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (IERC20Token.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transfer (IERC20Token.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (IERC20Token.sol#18) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (IERC20Token.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (IERC20Token.sol#20) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in IERC20Token.sol:\n\t- pragma solidity^0.4.21 (IERC20Token.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/token/ITokenEventListener.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": "ITokenEventListener.onTokenTransfer (ITokenEventListener.sol#16) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ITokenEventListener.sol:\n\t- pragma solidity^0.4.21 (ITokenEventListener.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/token/LockedTokens.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                walletTokens[msg.sender][i].released = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                walletTokens[msg.sender][i].released = true;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "    function releaseTokens() public {\n\n        require(walletTokens[msg.sender].length > 0);\n\n\n\n        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n\n            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n\n                walletTokens[msg.sender][i].released = true;\n\n                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n\n                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n\n            }\n\n        }\n",
                    "message": "LockedTokens.releaseTokens (LockedTokens.sol#110-120) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (LockedTokens.sol#116)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n",
                    "message": "LockedTokens.releaseTokens has external calls inside a loop:\n\t- token.transfer(msg.sender,walletTokens[msg.sender][i].amount) (LockedTokens.sol#116)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (LockedTokens.sol#51)\nIERC20Token.name should be constant (LockedTokens.sol#49)\nIERC20Token.symbol should be constant (LockedTokens.sol#50)\nIERC20Token.totalSupply should be constant (LockedTokens.sol#52)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (LockedTokens.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transfer (LockedTokens.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (LockedTokens.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (LockedTokens.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (LockedTokens.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": 120,
                    "vulnerability_code": "    function releaseTokens() public {\n\n        require(walletTokens[msg.sender].length > 0);\n\n\n\n        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n\n            if(!walletTokens[msg.sender][i].released && now >= walletTokens[msg.sender][i].lockEndTime) {\n\n                walletTokens[msg.sender][i].released = true;\n\n                token.transfer(msg.sender, walletTokens[msg.sender][i].amount);\n\n                TokensUnlocked(msg.sender, walletTokens[msg.sender][i].amount);\n\n            }\n\n        }\n",
                    "message": "LockedTokens.releaseTokens (LockedTokens.sol#110-120) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in LockedTokens.sol:\n\t- pragma solidity^0.4.21 (LockedTokens.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (LockedTokens.sol#41): it allows old versions\n\t- pragma solidity^0.4.21 (LockedTokens.sol#66): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (LockedTokens.sol#13-14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n\n        token = _token;\n\n        crowdsaleAddress = _crowdsaleAddress;\n",
                    "message": "Function 'LockedTokens.LockedTokens' (LockedTokens.sol#91-94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n",
                    "message": "Parameter '_token' of LockedTokens.LockedTokens (LockedTokens.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function LockedTokens(IERC20Token _token, address _crowdsaleAddress) public {\n",
                    "message": "Parameter '_crowdsaleAddress' of LockedTokens.LockedTokens (LockedTokens.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
                    "message": "Parameter '_to' of LockedTokens.addTokens (LockedTokens.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
                    "message": "Parameter '_amount' of LockedTokens.addTokens (LockedTokens.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTokens(address _to, uint256 _amount, uint256 _lockEndTime) external {\n",
                    "message": "Parameter '_lockEndTime' of LockedTokens.addTokens (LockedTokens.sol#102) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < walletTokens[msg.sender].length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/token/ManagedToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public allowTransfers = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas. \u2502 Scan Summary \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public issuanceFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas. \u2502 Scan Summary \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(msg.sender, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(hasListener() && success) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            eventListener.onTokenTransfer(_from, _to, _value);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_48"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (ManagedToken.sol#69)\nIERC20Token.name should be constant (ManagedToken.sol#67)\nIERC20Token.symbol should be constant (ManagedToken.sol#68)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
                    "message": "MultiOwnable.setOwners (ManagedToken.sol#33-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
                    "message": "MultiOwnable.getOwners (ManagedToken.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (ManagedToken.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "ERC20Token.balanceOf (ManagedToken.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (ManagedToken.sol#75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "ERC20Token.approve (ManagedToken.sol#158-162) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (ManagedToken.sol#76) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n\n      return allowed[_owner][_spender];\n",
                    "message": "ERC20Token.allowance (ManagedToken.sol#164-166) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": "ITokenEventListener.onTokenTransfer (ManagedToken.sol#184) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": 250,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        } else {\n\n            delete eventListener;\n\n        }\n",
                    "message": "ManagedToken.setListener (ManagedToken.sol#244-250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender], _addedValue);\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.increaseApproval (ManagedToken.sol#312-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 337,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = safeSub(oldValue, _subtractedValue);\n\n        }\n\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "ManagedToken.decreaseApproval (ManagedToken.sol#328-337) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "    function finishIssuance() public onlyOwner returns (bool) {\n\n        issuanceFinished = true;\n\n        IssuanceFinished();\n\n        return true;\n",
                    "message": "ManagedToken.finishIssuance (ManagedToken.sol#343-347) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ManagedToken.sol:\n\t- pragma solidity^0.4.21 (ManagedToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (ManagedToken.sol#59): it allows old versions\n\t- pragma solidity^0.4.21 (ManagedToken.sol#84): it allows old versions\n\t- pragma solidity^0.4.21 (ManagedToken.sol#122): it allows old versions\n\t- pragma solidity^0.4.21 (ManagedToken.sol#171): it allows old versions\n\t- pragma solidity^0.4.21 (ManagedToken.sol#189): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
                    "message": "Function 'MultiOwnable.MultiOwnable' (ManagedToken.sol#26-28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": "Parameter '_owners' of MultiOwnable.setOwners (ManagedToken.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
                    "message": "Function 'MultiOwnable._setOwners' (ManagedToken.sol#39-50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": "Parameter '_owners' of MultiOwnable._setOwners (ManagedToken.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (ManagedToken.sol#94-95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.balanceOf (ManagedToken.sol#154) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transfer (ManagedToken.sol#133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transfer (ManagedToken.sol#133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of ERC20Token.transferFrom (ManagedToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of ERC20Token.transferFrom (ManagedToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.transferFrom (ManagedToken.sol#143) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ERC20Token.approve (ManagedToken.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of ERC20Token.approve (ManagedToken.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_owner' of ERC20Token.allowance (ManagedToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": "Parameter '_spender' of ERC20Token.allowance (ManagedToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transfer (ManagedToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transfer (ManagedToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_from' of ManagedToken.transferFrom (ManagedToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_to' of ManagedToken.transferFrom (ManagedToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool) {\n",
                    "message": "Parameter '_value' of ManagedToken.transferFrom (ManagedToken.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n\n        if(_listener != address(0)) {\n\n            eventListener = ITokenEventListener(_listener);\n\n        }\n\n        _setOwners(_owners);\n",
                    "message": "Function 'ManagedToken.ManagedToken' (ManagedToken.sol#224-229) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_listener' of ManagedToken.ManagedToken (ManagedToken.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": "Parameter '_owners' of ManagedToken.ManagedToken (ManagedToken.sol#224) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": "Parameter '_allowTransfers' of ManagedToken.setAllowTransfers (ManagedToken.sol#235) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": "Parameter '_listener' of ManagedToken.setListener (ManagedToken.sol#244) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_to' of ManagedToken.issue (ManagedToken.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function issue(address _to, uint256 _value) external onlyOwner canIssue {\n",
                    "message": "Parameter '_value' of ManagedToken.issue (ManagedToken.sol#280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_from' of ManagedToken.destroy (ManagedToken.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _from, uint256 _value) external {\n",
                    "message": "Parameter '_value' of ManagedToken.destroy (ManagedToken.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.increaseApproval (ManagedToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of ManagedToken.increaseApproval (ManagedToken.sol#312) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of ManagedToken.decreaseApproval (ManagedToken.sol#328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of ManagedToken.decreaseApproval (ManagedToken.sol#328) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public constant returns (uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAllowTransfers(bool _allowTransfers) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setListener(address _listener) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ManagedToken(address _listener, address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function onTokenTransfer(address _from, address _to, uint256 _value) public;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/math/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity^0.4.21 (SafeMath.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (SafeMath.sol#13-14) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/ownership/MultiOwnable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[owners[i]] = false;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            ownerByAddress[_owners[j]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n\n        require(msg.sender == manager);\n\n        _setOwners(_owners);\n\n\n",
                    "message": "MultiOwnable.setOwners (MultiOwnable.sol#33-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n\n        return owners;\n",
                    "message": "MultiOwnable.getOwners (MultiOwnable.sol#52-54) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in MultiOwnable.sol:\n\t- pragma solidity^0.4.21 (MultiOwnable.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function MultiOwnable() public {\n\n        manager = msg.sender;\n",
                    "message": "Function 'MultiOwnable.MultiOwnable' (MultiOwnable.sol#26-28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": "Parameter '_owners' of MultiOwnable.setOwners (MultiOwnable.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n\n        for(uint256 i = 0; i < owners.length; i++) {\n\n            ownerByAddress[owners[i]] = false;\n\n        }\n\n\n\n\n\n        for(uint256 j = 0; j < _owners.length; j++) {\n\n            ownerByAddress[_owners[j]] = true;\n\n        }\n\n        owners = _owners;\n\n        SetOwners(_owners);\n",
                    "message": "Function 'MultiOwnable._setOwners' (MultiOwnable.sol#39-50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": "Parameter '_owners' of MultiOwnable._setOwners (MultiOwnable.sol#39) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 j = 0; j < _owners.length; j++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwners(address[] _owners) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setOwners(address[] _owners) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners() public constant returns (address[]) {\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/ownership/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        require(_newOwner != owner);\n\n        newOwner = _newOwner;\n",
                    "message": "Ownable.transferOwnership (Ownable.sol#35-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "    function confirmOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = 0x0;\n",
                    "message": "Ownable.confirmOwnership (Ownable.sol#43-48) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in Ownable.sol:\n\t- pragma solidity^0.4.21 (Ownable.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n\n        owner = _owner == address(0) ? msg.sender : _owner;\n",
                    "message": "Function 'Ownable.Ownable' (Ownable.sol#19-21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Ownable(address _owner) public {\n",
                    "message": "Parameter '_owner' of Ownable.Ownable (Ownable.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (Ownable.sol#35) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = 0x0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/poll/BasePoll.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public yesCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public noCounter = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalVoted = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= startTime && now <= endTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_startTime >= now && _endTime > _startTime);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (BasePoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (BasePoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (BasePoll.sol#133)\n\tState variables written after the call(s):\n\t- votesByAddress (BasePoll.sol#143)\n\t- votesByAddress (BasePoll.sol#144)\n\t- votesByAddress (BasePoll.sol#145)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "Reentrancy in BasePoll.vote (BasePoll.sol#129-148):\n\tExternal calls:\n\t- voiceWeight = token.balanceOf(msg.sender) (BasePoll.sol#132)\n\t- maxVoiceWeight = safeDiv(token.totalSupply(),MAX_TOKENS_WEIGHT_DENOM) (BasePoll.sol#133)\n\tState variables written after the call(s):\n\t- noCounter (BasePoll.sol#139)\n\t- totalVoted (BasePoll.sol#147)\n\t- yesCounter (BasePoll.sol#137)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals;\n",
                    "message": "IERC20Token.decimals should be constant (BasePoll.sol#51)\nIERC20Token.name should be constant (BasePoll.sol#49)\nIERC20Token.symbol should be constant (BasePoll.sol#50)\nIERC20Token.totalSupply should be constant (BasePoll.sol#52)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": "IERC20Token.balanceOf (BasePoll.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transfer (BasePoll.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (BasePoll.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value)  public returns (bool success);\n",
                    "message": "IERC20Token.approve (BasePoll.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": "IERC20Token.allowance (BasePoll.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function vote(bool agree) public checkTime {\n\n        require(votesByAddress[msg.sender].time == 0);\n\n\n\n        uint256 voiceWeight = token.balanceOf(msg.sender);\n\n        uint256 maxVoiceWeight = safeDiv(token.totalSupply(), MAX_TOKENS_WEIGHT_DENOM);\n\n        voiceWeight =  voiceWeight <= maxVoiceWeight ? voiceWeight : maxVoiceWeight;\n\n\n\n        if(agree) {\n\n            yesCounter = safeAdd(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeAdd(noCounter, voiceWeight);\n\n\n\n        }\n\n\n\n        votesByAddress[msg.sender].time = now;\n\n        votesByAddress[msg.sender].weight = voiceWeight;\n\n        votesByAddress[msg.sender].agree = agree;\n\n\n\n        totalVoted = safeAdd(totalVoted, 1);\n",
                    "message": "BasePoll.vote (BasePoll.sol#129-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function revokeVote() public checkTime {\n\n        require(votesByAddress[msg.sender].time > 0);\n\n\n\n        uint256 voiceWeight = votesByAddress[msg.sender].weight;\n\n        bool agree = votesByAddress[msg.sender].agree;\n\n\n\n        votesByAddress[msg.sender].time = 0;\n\n        votesByAddress[msg.sender].weight = 0;\n\n        votesByAddress[msg.sender].agree = false;\n\n\n\n        totalVoted = safeSub(totalVoted, 1);\n\n        if(agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n",
                    "message": "BasePoll.revokeVote (BasePoll.sol#153-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function onTokenTransfer(address tokenHolder, uint256 amount) public {\n\n        require(msg.sender == fundAddress);\n\n        if(votesByAddress[tokenHolder].time == 0) {\n\n            return;\n\n        }\n\n        if(!checkTransfersAfterEnd) {\n\n             if(finalized || (now < startTime || now > endTime)) {\n\n                 return;\n\n             }\n\n        }\n\n\n\n        if(token.balanceOf(tokenHolder) >= votesByAddress[tokenHolder].weight) {\n\n            return;\n\n        }\n\n        uint256 voiceWeight = amount;\n\n        if(amount > votesByAddress[tokenHolder].weight) {\n\n            voiceWeight = votesByAddress[tokenHolder].weight;\n\n        }\n\n\n\n        if(votesByAddress[tokenHolder].agree) {\n\n            yesCounter = safeSub(yesCounter, voiceWeight);\n\n        } else {\n\n            noCounter = safeSub(noCounter, voiceWeight);\n\n        }\n\n        votesByAddress[tokenHolder].weight = safeSub(votesByAddress[tokenHolder].weight, voiceWeight);\n",
                    "message": "BasePoll.onTokenTransfer (BasePoll.sol#175-200) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 212,
                    "vulnerability_code": "    function tryToFinalize() public notFinalized returns(bool) {\n\n        if(now < endTime) {\n\n            return false;\n\n        }\n\n        finalized = true;\n\n        onPollFinish(isSubjectApproved());\n\n        return true;\n",
                    "message": "BasePoll.tryToFinalize (BasePoll.sol#205-212) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "    function isNowApproved() public view returns(bool) {\n\n        return isSubjectApproved();\n",
                    "message": "BasePoll.isNowApproved (BasePoll.sol#214-216) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in BasePoll.sol:\n\t- pragma solidity^0.4.21 (BasePoll.sol#3): it allows old versions\n\t- pragma solidity^0.4.21 (BasePoll.sol#41): it allows old versions\n\t- pragma solidity^0.4.21 (BasePoll.sol#66): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "    function SafeMath() public {\n",
                    "message": "Function 'SafeMath.SafeMath' (BasePoll.sol#13-14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n\n        require(_tokenAddress != address(0));\n\n        require(_startTime >= now && _endTime > _startTime);\n\n\n\n        token = IERC20Token(_tokenAddress);\n\n        fundAddress = _fundAddress;\n\n        startTime = _startTime;\n\n        endTime = _endTime;\n\n        finalized = false;\n\n        checkTransfersAfterEnd = _checkTransfersAfterEnd;\n",
                    "message": "Function 'BasePoll.BasePoll' (BasePoll.sol#113-123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_tokenAddress' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_fundAddress' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_startTime' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_endTime' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function BasePoll(address _tokenAddress, address _fundAddress, uint256 _startTime, uint256 _endTime, bool _checkTransfersAfterEnd) public {\n",
                    "message": "Parameter '_checkTransfersAfterEnd' of BasePoll.BasePoll (BasePoll.sol#113) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public constant returns (uint256 balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool checkTransfersAfterEnd;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/fund/ICrowdsaleFund.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ICrowdsaleFund.sol:\n\t- pragma solidity^0.4.21 (ICrowdsaleFund.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/fund/IPollManagedFund.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in IPollManagedFund.sol:\n\t- pragma solidity^0.4.21 (IPollManagedFund.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "abyss-daico-21d6232a802cd966b86629cadeac0b7f3816f719/fund/ICrowdsaleReservationFund.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ICrowdsaleReservationFund.sol:\n\t- pragma solidity^0.4.21 (ICrowdsaleReservationFund.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    }
}