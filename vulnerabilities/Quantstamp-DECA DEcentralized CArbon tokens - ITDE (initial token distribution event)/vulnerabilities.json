{
    "dcc-fc1c63778abfcac6fa2a1ad7affc543f46e69a28/DECA_ERC20_0.4.18.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = \"DECA\";\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = \"DEcentralized CArbon tokens\";\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        decimals = 18;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        //for testing change weeks for days...\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        preICOEnds = now + 1 weeks;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bonus1Ends = now + 3 weeks;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bonus2Ends = now + 6 weeks;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        endDate = now + 11 weeks;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now >= startDate && now <= endDate);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (now > preICOEnds && now <= bonus1Ends ) {  \n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            tokens = msg.value * 1500;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (now > bonus1Ends && now <= bonus2Ends) {  \n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            tokens = msg.value * 1250;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            tokens = msg.value * 1000;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else if (now > bonus1Ends && now <= bonus2Ends) {  \n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            tokens = msg.value * 1250;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            tokens = msg.value * 1000;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_26"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public startDate;\n",
                    "message": "DECAToken.startDate (DECA_ERC20_0.4.18.sol#117) is never initialized. It is used in:\n\t- fallback (DECA_ERC20_0.4.18.sol#230-256)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public startDate;\n",
                    "message": "DECAToken.startDate should be constant (DECA_ERC20_0.4.18.sol#117)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 149,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint) {\n\n        return _totalSupply  - balances[address(0)];\n",
                    "message": "DECAToken.totalSupply (DECA_ERC20_0.4.18.sol#147-149) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint);\n",
                    "message": "ERC20Interface.totalSupply (DECA_ERC20_0.4.18.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address tokenOwner) public constant returns (uint balance);\n",
                    "message": "ERC20Interface.balanceOf (DECA_ERC20_0.4.18.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n\n        return balances[tokenOwner];\n",
                    "message": "DECAToken.balanceOf (DECA_ERC20_0.4.18.sol#154-156) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 211,
                    "vulnerability_code": "    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n",
                    "message": "DECAToken.allowance (DECA_ERC20_0.4.18.sol#209-211) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n",
                    "message": "ERC20Interface.allowance (DECA_ERC20_0.4.18.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint tokens) public returns (bool success);\n",
                    "message": "ERC20Interface.transfer (DECA_ERC20_0.4.18.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function transfer(address to, uint tokens) public returns (bool success) {\n\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n\n        balances[to] = safeAdd(balances[to], tokens);\n\n        emit Transfer(msg.sender, to, tokens);\n\n        return true;\n",
                    "message": "DECAToken.transfer (DECA_ERC20_0.4.18.sol#164-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success);\n",
                    "message": "ERC20Interface.approve (DECA_ERC20_0.4.18.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        return true;\n",
                    "message": "DECAToken.approve (DECA_ERC20_0.4.18.sol#180-184) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n",
                    "message": "ERC20Interface.transferFrom (DECA_ERC20_0.4.18.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": 202,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        balances[from] = safeSub(balances[from], tokens);\n\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n\n        balances[to] = safeAdd(balances[to], tokens);\n\n        emit Transfer(from, to, tokens);\n\n        return true;\n",
                    "message": "DECAToken.transferFrom (DECA_ERC20_0.4.18.sol#196-202) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n",
                    "message": "ApproveAndCallFallBack.receiveApproval (DECA_ERC20_0.4.18.sol#70) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 95,
                    "vulnerability_code": "    function updateCCDBAddress(string CCDBAddress) public onlyOwner {\n\n       _CCDBAddress = CCDBAddress;\n",
                    "message": "Owned.updateCCDBAddress (DECA_ERC20_0.4.18.sol#93-95) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": 98,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        newOwner = _newOwner;\n",
                    "message": "Owned.transferOwnership (DECA_ERC20_0.4.18.sol#96-98) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 104,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        emit OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n",
                    "message": "Owned.acceptOwnership (DECA_ERC20_0.4.18.sol#99-104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        emit Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n\n        return true;\n",
                    "message": "DECAToken.approveAndCall (DECA_ERC20_0.4.18.sol#219-224) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": 256,
                    "vulnerability_code": "    function () public payable {\n\n        require(now >= startDate && now <= endDate);\n\n        uint tokens;\n\n        uint toOwner;\n\n        uint toSender;\n\n        uint percentage;\n\n        \n\n        percentage = 2; // percentage that goes to the owner\n\n\n\n        if (now <= preICOEnds) {\n\n            tokens = msg.value * 2000;\n\n        } else if (now > preICOEnds && now <= bonus1Ends ) {  \n\n            tokens = msg.value * 1500;\n\n        } else if (now > bonus1Ends && now <= bonus2Ends) {  \n\n            tokens = msg.value * 1250;\n\n        } else {\n\n            tokens = msg.value * 1000;\n\n        }\n\n        toOwner = safeDiv(tokens, percentage); // percentage assigned to the contract owner (DAO)\n\n        toSender = tokens; // tokens goes to sender\n\n        balances[msg.sender] = safeAdd(balances[msg.sender], toSender);\n\n        balances[owner] = safeAdd(balances[owner], toOwner);\n\n        _totalSupply = safeAdd(_totalSupply, safeAdd(tokens,safeDiv(tokens, percentage)));\n\n        emit Transfer(address(0), msg.sender, toSender);\n\n        emit Transfer(address(0), owner, toOwner);\n\n        owner.transfer(msg.value);\n",
                    "message": "DECAToken.fallback (DECA_ERC20_0.4.18.sol#230-256) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": 265,
                    "vulnerability_code": "    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n",
                    "message": "DECAToken.transferAnyERC20Token (DECA_ERC20_0.4.18.sol#263-265) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.26;\n",
                    "message": "Detected issues with version pragma in DECA_ERC20_0.4.18.sol:\n\t- pragma solidity^0.4.26 (DECA_ERC20_0.4.18.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateCCDBAddress(string CCDBAddress) public onlyOwner {\n",
                    "message": "Parameter 'CCDBAddress' of Owned.updateCCDBAddress (DECA_ERC20_0.4.18.sol#93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Owned.transferOwnership (DECA_ERC20_0.4.18.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string public _CCDBAddress;\n",
                    "message": "Variable 'Owned._CCDBAddress' (DECA_ERC20_0.4.18.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public _totalSupply;\n",
                    "message": "Variable 'DECAToken._totalSupply' (DECA_ERC20_0.4.18.sol#116) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return _totalSupply  - balances[address(0)];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address tokenOwner) public constant returns (uint balance);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint tokens) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.26;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function () public payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateCCDBAddress(string CCDBAddress) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => uint)) allowed;\n",
                    "message": null
                }
            ]
        }
    }
}