{
    "StakingPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                accountStakes.length--;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        tswap = Ierc20(0xf823eA01D48F7Fb36b4b319f21dae404Ac86Bb8d);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewardToken = Ierc20(0xdE55ea8232e0B1615d762eFCB17Cb2D7df164727);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        poolDuration = 1 hours;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (now > poolEndTime) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                stakeTimeSec = poolEndTime.sub(userStake.stakingTime);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    stakeTimeSec = poolEndTime.sub(userStake.lastWithdrawTime);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (now > poolEndTime) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                stakeTimeSec = poolEndTime.sub(lastStake.stakingTime);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    stakeTimeSec = poolEndTime.sub(lastStake.lastWithdrawTime);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (now > poolEndTime) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                stakeTimeSec = poolEndTime.sub(userStake.stakingTime);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    stakeTimeSec = poolEndTime.sub(userStake.lastWithdrawTime);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(newOwner != address(0), \"New owner is the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(poolStartTime == 0, \"Pool rewards already set\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_rewardAmount > 0, \"Cannot create pool with zero amount\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amount > 0, \"Cannot stake 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < poolEndTime, \"Staking pool is closed\"); //staking pool is closed for staking\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amount > 0, \"Amount can not be zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(userTotalStaking[msg.sender].totalStaking >= amount, \"You are trying to withdaw more than your stake\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_rwdAmount > 0, \"You do not have enough rewards\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                accountStakes.length--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            i--;\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_rewardAmount > 0, \"Cannot create pool with zero amount\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(userTotalStaking[msg.sender].totalStaking >= amount, \"You are trying to withdaw more than your stake\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": 136,
                    "vulnerability_code": "    function ownerSetPoolRewards(uint256 _rewardAmount) external onlyOwner {\n\n        require(poolStartTime == 0, \"Pool rewards already set\");\n\n        require(_rewardAmount > 0, \"Cannot create pool with zero amount\");\n\n        \n\n        //set total rewards value\n\n        totalRewards = _rewardAmount;\n\n        \n\n        poolStartTime = now;\n\n        poolEndTime = now + poolDuration;\n\n        \n\n        //transfer tokens to contract\n\n        // SWC-Unchecked Call Return Value: L132\n\n        rewardToken.transferFrom(msg.sender, this, _rewardAmount);\n\n        emit OwnerSetReward(_rewardAmount);\n",
                    "message": "StakingPool.ownerSetPoolRewards (StakingPool.sol#122-136) uses a dangerous strict equality:\n\t- require(bool,string)(poolStartTime == 0,Pool rewards already set)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": 136,
                    "vulnerability_code": "    function ownerSetPoolRewards(uint256 _rewardAmount) external onlyOwner {\n\n        require(poolStartTime == 0, \"Pool rewards already set\");\n\n        require(_rewardAmount > 0, \"Cannot create pool with zero amount\");\n\n        \n\n        //set total rewards value\n\n        totalRewards = _rewardAmount;\n\n        \n\n        poolStartTime = now;\n\n        poolEndTime = now + poolDuration;\n\n        \n\n        //transfer tokens to contract\n\n        // SWC-Unchecked Call Return Value: L132\n\n        rewardToken.transferFrom(msg.sender, this, _rewardAmount);\n\n        emit OwnerSetReward(_rewardAmount);\n",
                    "message": "StakingPool.ownerSetPoolRewards (StakingPool.sol#122-136) does not use the value returned by external calls:\n\t-rewardToken.transferFrom(msg.sender,this,_rewardAmount) (StakingPool.sol#134)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "    function stake(uint256 amount) external {\n\n        require(amount > 0, \"Cannot stake 0\");\n\n        require(now < poolEndTime, \"Staking pool is closed\"); //staking pool is closed for staking\n\n        \n\n        //add value in staking\n\n        userTotalStaking[msg.sender].totalStaking = userTotalStaking[msg.sender].totalStaking.add(amount);\n\n        \n\n        //add new stake\n\n        Stake memory newStake = Stake(amount, now, 0);\n\n        userStaking[msg.sender].push(newStake);\n\n        \n\n        //add to total staked\n\n        totalStaked = totalStaked.add(amount);\n\n        \n\n        tswap.transferFrom(msg.sender, this, amount);\n\n        emit Staked(msg.sender, amount);\n",
                    "message": "StakingPool.stake (StakingPool.sol#139-155) does not use the value returned by external calls:\n\t-tswap.transferFrom(msg.sender,this,amount) (StakingPool.sol#153)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "    function withdrawStaking(uint256 amount) external {\n\n        require(amount > 0, \"Amount can not be zero\");\n\n        require(userTotalStaking[msg.sender].totalStaking >= amount, \"You are trying to withdaw more than your stake\");\n\n        \n\n        // 1. User Accounting\n\n        Stake[] storage accountStakes = userStaking[msg.sender];\n\n        \n\n        // Redeem from most recent stake and go backwards in time.\n\n        uint256 sharesLeftToBurn = amount;\n\n        uint256 rewardAmount = 0;\n\n        while (sharesLeftToBurn > 0) {\n\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n\n            uint256 stakeTimeSec;\n\n            //check if current time is more than pool ending time\n\n            if (now > poolEndTime) {\n\n                stakeTimeSec = poolEndTime.sub(lastStake.stakingTime);\n\n                if(lastStake.lastWithdrawTime != 0){\n\n                    stakeTimeSec = poolEndTime.sub(lastStake.lastWithdrawTime);\n\n                }\n\n            } else {\n\n                stakeTimeSec = now.sub(lastStake.stakingTime);\n\n                if(lastStake.lastWithdrawTime != 0){\n\n                    stakeTimeSec = now.sub(lastStake.lastWithdrawTime);\n\n                }\n\n            }\n\n            \n\n            if (lastStake.amount <= sharesLeftToBurn) {\n\n                // fully redeem a past stake\n\n                rewardAmount = computeNewReward(rewardAmount, lastStake.amount, stakeTimeSec);\n\n                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.amount);\n\n                accountStakes.length--;\n\n            } else {\n\n                // partially redeem a past stake\n\n                rewardAmount = computeNewReward(rewardAmount, sharesLeftToBurn, stakeTimeSec);\n\n                lastStake.amount = lastStake.amount.sub(sharesLeftToBurn);\n\n                lastStake.lastWithdrawTime = now;\n\n                sharesLeftToBurn = 0;\n\n            }\n\n        }\n\n        \n\n        //substract value in staking\n\n        userTotalStaking[msg.sender].totalStaking = userTotalStaking[msg.sender].totalStaking.sub(amount);\n\n        \n\n        //substract from total staked\n\n        totalStaked = totalStaked.sub(amount);\n\n        \n\n        //update user rewards info\n\n        userRewardInfo[msg.sender].totalWithdrawn = userRewardInfo[msg.sender].totalWithdrawn.add(rewardAmount);\n\n        userRewardInfo[msg.sender].lastWithdrawTime = now;\n\n        \n\n        //update total rewards withdrawn\n\n        rewardsWithdrawn = rewardsWithdrawn.add(rewardAmount);\n\n        \n\n        //transfer rewards and tokens\n\n        // SWC-Unchecked Call Return Value: L262\n\n        rewardToken.transfer(msg.sender, rewardAmount);\n\n        tswap.transfer(msg.sender, amount);\n\n        \n\n        emit RewardWithdrawal(msg.sender, rewardAmount);\n\n        emit StakingWithdrawal(msg.sender, amount);\n",
                    "message": "StakingPool.withdrawStaking (StakingPool.sol#209-269) does not use the value returned by external calls:\n\t-rewardToken.transfer(msg.sender,rewardAmount) (StakingPool.sol#264)\n\t-tswap.transfer(msg.sender,amount) (StakingPool.sol#265)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function withdrawRewardsOnly() external {\n\n        uint256 _rwdAmount = calculateReward(msg.sender);\n\n        require(_rwdAmount > 0, \"You do not have enough rewards\");\n\n        \n\n        // 1. User Accounting\n\n        Stake[] storage accountStakes = userStaking[msg.sender];\n\n        \n\n        // Redeem from most recent stake and go backwards in time.\n\n        uint256 rewardAmount = 0;\n\n        uint256 i = accountStakes.length;\n\n        while (i > 0) {\n\n            Stake storage userStake = accountStakes[i - 1];\n\n            uint256 stakeTimeSec;\n\n            \n\n            //check if current time is more than pool ending time\n\n            if (now > poolEndTime) {\n\n                stakeTimeSec = poolEndTime.sub(userStake.stakingTime);\n\n                if(userStake.lastWithdrawTime != 0){\n\n                    stakeTimeSec = poolEndTime.sub(userStake.lastWithdrawTime);\n\n                }\n\n            } else {\n\n                stakeTimeSec = now.sub(userStake.stakingTime);\n\n                if(userStake.lastWithdrawTime != 0){\n\n                    stakeTimeSec = now.sub(userStake.lastWithdrawTime);\n\n                }\n\n            }\n\n            \n\n            // fully redeem a past stake\n\n            rewardAmount = computeNewReward(rewardAmount, userStake.amount, stakeTimeSec);\n\n            userStake.lastWithdrawTime = now;\n\n            i--;\n\n        }\n\n        \n\n        //update user rewards info\n\n        userRewardInfo[msg.sender].totalWithdrawn = userRewardInfo[msg.sender].totalWithdrawn.add(rewardAmount);\n\n        userRewardInfo[msg.sender].lastWithdrawTime = now;\n\n        \n\n        //update total rewards withdrawn\n\n        rewardsWithdrawn = rewardsWithdrawn.add(rewardAmount);\n\n        \n\n        //transfer rewards\n\n        rewardToken.transfer(msg.sender, rewardAmount);\n\n        emit RewardWithdrawal(msg.sender, rewardAmount);\n",
                    "message": "StakingPool.withdrawRewardsOnly (StakingPool.sol#272-315) does not use the value returned by external calls:\n\t-rewardToken.transfer(msg.sender,rewardAmount) (StakingPool.sol#313)\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ownerSetPoolRewards(uint256 _rewardAmount) external onlyOwner {\n",
                    "message": "Parameter '_rewardAmount' of StakingPool.ownerSetPoolRewards (StakingPool.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function computeNewReward(uint256 _rewardAmount, uint256 _stakedAmount, uint256 _stakeTimeSec) private view returns (uint256 _reward) {\n",
                    "message": "Parameter '_rewardAmount' of StakingPool.computeNewReward (StakingPool.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function computeNewReward(uint256 _rewardAmount, uint256 _stakedAmount, uint256 _stakeTimeSec) private view returns (uint256 _reward) {\n",
                    "message": "Parameter '_stakedAmount' of StakingPool.computeNewReward (StakingPool.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function computeNewReward(uint256 _rewardAmount, uint256 _stakedAmount, uint256 _stakeTimeSec) private view returns (uint256 _reward) {\n",
                    "message": "Parameter '_stakeTimeSec' of StakingPool.computeNewReward (StakingPool.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calculateReward(address _userAddress) public view returns (uint256 _reward) {\n",
                    "message": "Parameter '_userAddress' of StakingPool.calculateReward (StakingPool.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStakingAmount(address _userAddress) external constant returns (uint256 _stakedAmount) {\n",
                    "message": "Parameter '_userAddress' of StakingPool.getStakingAmount (StakingPool.sol#318) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPoolDuration(uint256 _poolDuration) external onlyOwner {\n",
                    "message": "Parameter '_poolDuration' of StakingPool.setPoolDuration (StakingPool.sol#349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTswapAddress(address _address) external onlyOwner {\n",
                    "message": "Parameter '_address' of StakingPool.setTswapAddress (StakingPool.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRewardTokenAddress(address _address) external onlyOwner {\n",
                    "message": "Parameter '_address' of StakingPool.setRewardTokenAddress (StakingPool.sol#366) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        tswap = Ierc20(0xf823eA01D48F7Fb36b4b319f21dae404Ac86Bb8d);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        rewardToken = Ierc20(0xdE55ea8232e0B1615d762eFCB17Cb2D7df164727);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                accountStakes.length--;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getStakingAmount(address _userAddress) external constant returns (uint256 _stakedAmount) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalStaked() external constant returns ( uint256 _totalStaked) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalRewards() external constant returns ( uint256 _totalRewards) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPoolDuration() external constant returns (uint256 _poolDuration) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSwapAddress() external constant returns (address _swapAddress) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return mul(div(d,m),m);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPoolDuration(uint256 _poolDuration) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTswapAddress(address _address) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setRewardTokenAddress(address _address) external onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 poolDuration;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 totalRewards;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 rewardsWithdrawn;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 poolStartTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 poolEndTime;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 totalStaked;\n",
                    "message": null
                }
            ]
        }
    }
}