{
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/util/TestUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n\n    require(_data.length == 64);\n\n    assembly {\n\n      sender := mload(add(0x20, _data))\n\n      wei_sent := mload(add(0x40, _data))\n\n    }\n",
                    "message": "TestUtils.parseStorageExceptionData (TestUtils.sol#7-13) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n\n    require(_data.length == 64);\n\n    assembly {\n\n      sender := mload(add(0x20, _data))\n\n      wei_sent := mload(add(0x40, _data))\n\n    }\n",
                    "message": "TestUtils.parseStorageExceptionData uses assembly (TestUtils.sol#7-13)\n\t- TestUtils.sol#9-13\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n\n    require(_data.length == 64);\n\n    assembly {\n\n      sender := mload(add(0x20, _data))\n\n      wei_sent := mload(add(0x40, _data))\n\n    }\n",
                    "message": "TestUtils.parseStorageExceptionData (TestUtils.sol#7-13) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in TestUtils.sol:\n\t- pragma solidity^0.4.23 (TestUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n",
                    "message": "Parameter '_data' of TestUtils.parseStorageExceptionData (TestUtils.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/util/AppMockUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_56"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 40,
                    "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](25);\n\n    // pay\n\n    selectors[0] = this.pay0.selector;\n\n    selectors[1] = this.pay1.selector;\n\n    selectors[2] = this.pay2.selector;\n\n    // std\n\n    selectors[3] = this.std0.selector;\n\n    selectors[4] = this.std1.selector;\n\n    selectors[5] = this.std2.selector;\n\n    // emit\n\n    selectors[6] = this.emit0.selector;\n\n    selectors[7] = this.emit1top0.selector;\n\n    selectors[8] = this.emit1top0data.selector;\n\n    selectors[9] = this.emit1top4data.selector;\n\n    selectors[10] = this.emit2top1data.selector;\n\n    selectors[11] = this.emit2top4.selector;\n\n    // mix\n\n    selectors[12] = this.req0.selector;\n\n    selectors[13] = this.req1.selector;\n\n    selectors[14] = this.req2.selector;\n\n    selectors[15] = this.req3.selector;\n\n    selectors[16] = this.reqs0.selector;\n\n    selectors[17] = this.reqs1.selector;\n\n    selectors[18] = this.reqs2.selector;\n\n    selectors[19] = this.reqs3.selector;\n\n    // inv\n\n    selectors[20] = this.inv1.selector;\n\n    selectors[21] = this.inv2.selector;\n\n    // rev\n\n    selectors[22] = this.rev0.selector;\n\n    selectors[23] = this.rev1.selector;\n\n    selectors[24] = this.rev2.selector;\n",
                    "message": "AppMockUtil.getSelectors (AppMockUtil.sol#7-40) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppMockUtil.sol:\n\t- pragma solidity^0.4.23 (AppMockUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.pay1 (AppMockUtil.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, address) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.pay2 (AppMockUtil.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, address) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.pay2 (AppMockUtil.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.std1 (AppMockUtil.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.std1 (AppMockUtil.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.std2 (AppMockUtil.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.std2 (AppMockUtil.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.std2 (AppMockUtil.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.std2 (AppMockUtil.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit1top0data (AppMockUtil.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit1top4data (AppMockUtil.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.emit1top4data (AppMockUtil.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.emit1top4data (AppMockUtil.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.emit1top4data (AppMockUtil.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.emit1top4data (AppMockUtil.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit2top1data (AppMockUtil.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.emit2top1data (AppMockUtil.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.emit2top1data (AppMockUtil.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit2top4 (AppMockUtil.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.emit2top4 (AppMockUtil.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.emit2top4 (AppMockUtil.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.emit2top4 (AppMockUtil.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req0 (AppMockUtil.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req1 (AppMockUtil.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.req1 (AppMockUtil.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.req1 (AppMockUtil.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req2 (AppMockUtil.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.req2 (AppMockUtil.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.req2 (AppMockUtil.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req3 (AppMockUtil.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.req3 (AppMockUtil.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.reqs0 (AppMockUtil.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs0 (AppMockUtil.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs0 (AppMockUtil.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs0 (AppMockUtil.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '' of AppMockUtil.reqs1 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs1 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs1 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs1 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.reqs1 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_4' of AppMockUtil.reqs1 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_5' of AppMockUtil.reqs1 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '' of AppMockUtil.reqs2 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs2 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs2 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs2 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.reqs2 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '' of AppMockUtil.reqs3 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs3 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs3 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs3 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.reqs3 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_4' of AppMockUtil.reqs3 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_5' of AppMockUtil.reqs3 (AppMockUtil.sol#77) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/util/AppInitUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInit (AppInitUtil.sol#21-26) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInstanceCreated (AppInitUtil.sol#28-34) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInit uses assembly (AppInitUtil.sol#21-26)\n\t- AppInitUtil.sol#22-26\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInstanceCreated uses assembly (AppInitUtil.sol#28-34)\n\t- AppInitUtil.sol#29-34\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.init (AppInitUtil.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initInvalid() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initInvalid (AppInitUtil.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initNullAction() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initNullAction (AppInitUtil.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initThrowsAction() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initThrowsAction (AppInitUtil.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initEmits(bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initEmits (AppInitUtil.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initPays(address) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initPays (AppInitUtil.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initStores (AppInitUtil.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInit (AppInitUtil.sol#21-26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInstanceCreated (AppInitUtil.sol#28-34) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppInitUtil.sol:\n\t- pragma solidity^0.4.23 (AppInitUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initEmits(bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppInitUtil.initEmits (AppInitUtil.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initPays(address) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppInitUtil.initPays (AppInitUtil.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppInitUtil.initStores (AppInitUtil.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppInitUtil.initStores (AppInitUtil.sol#19) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/util/scriptExec/AppMockUtilContext.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_113"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.pay0 (AppMockUtilContext.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.std0 (AppMockUtilContext.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.std1 (AppMockUtilContext.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.std2 (AppMockUtilContext.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit0 (AppMockUtilContext.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit1top0 (AppMockUtilContext.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit1top0data (AppMockUtilContext.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req0 (AppMockUtilContext.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req1 (AppMockUtilContext.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req2 (AppMockUtilContext.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req3 (AppMockUtilContext.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function reqs0(\n\n    address, address, address, address,\n\n    bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs0 (AppMockUtilContext.sol#34-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "  function reqs1(\n\n    address, uint,\n\n    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs1 (AppMockUtilContext.sol#38-41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function reqs2(\n\n    address, uint, bytes32[4] memory,\n\n    bytes32, bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs2 (AppMockUtilContext.sol#42-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function reqs3(\n\n    address, uint, bytes32,\n\n    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs3 (AppMockUtilContext.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.inv1 (AppMockUtilContext.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv2(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.inv2 (AppMockUtilContext.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.rev0 (AppMockUtilContext.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.rev1 (AppMockUtilContext.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppMockUtilContext.sol:\n\t- pragma solidity^0.4.23 (AppMockUtilContext.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.pay0 (AppMockUtilContext.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.std0 (AppMockUtilContext.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit0 (AppMockUtilContext.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit1top0 (AppMockUtilContext.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit1top0data (AppMockUtilContext.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req0 (AppMockUtilContext.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req0 (AppMockUtilContext.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_5' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32,\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_5' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_6' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.inv1 (AppMockUtilContext.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv2(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.inv2 (AppMockUtilContext.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.rev0 (AppMockUtilContext.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.rev1 (AppMockUtilContext.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/util/registry/RegistryUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerApp (RegistryUtil.sol#7-9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerAppVersion (RegistryUtil.sol#11-13) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryUtil.sol:\n\t- pragma solidity^0.4.23 (RegistryUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_3' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/EmitsApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(1), uint(0), uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(EMITS, uint(1), uint(0));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(1),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint(4), _t1, _t2, _t3, _t4\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(EMITS, uint(2), uint(1), _t1);\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(2), uint(4), _t1, _t2, _t3, _t4, uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (EmitsApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (EmitsApp.sol#7-12)\n\t- EmitsApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in EmitsApp.sol:\n\t- pragma solidity^0.4.23 (EmitsApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (EmitsApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes _data) external pure {\n",
                    "message": "Parameter '_data' of EmitsApp.emit1top0data (EmitsApp.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t1' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t2' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t3' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t4' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_data' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
                    "message": "Parameter '_t1' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
                    "message": "Parameter '_data1' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
                    "message": "Parameter '_data2' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t1' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t2' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t3' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t4' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/MixedApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(1), uint(1), _t1, uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(1), msg.value, _dest\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(1), uint(1), uint(_t1), uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(1), msg.value, _dest\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(2), (msg.value / 2), _dest1, (msg.value / 2), _dest2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(2), uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(PAYS, uint(1), msg.value, _dest);\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      STORES, uint(2), _loc1, _val1, _loc2, _val2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_35"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (MixedApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (MixedApp.sol#7-12)\n\t- MixedApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MixedApp.sol:\n\t- pragma solidity^0.4.23 (MixedApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (MixedApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32 _t1) external pure {\n",
                    "message": "Parameter '_t1' of MixedApp.req0 (MixedApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
                    "message": "Parameter '_dest' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
                    "message": "Parameter '_loc' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
                    "message": "Parameter '_val' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
                    "message": "Parameter '_t1' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
                    "message": "Parameter '_loc' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
                    "message": "Parameter '_val' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address _dest, bytes32 _t1) external view {\n",
                    "message": "Parameter '_dest' of MixedApp.req3 (MixedApp.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address _dest, bytes32 _t1) external view {\n",
                    "message": "Parameter '_t1' of MixedApp.req3 (MixedApp.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_dest1' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_dest2' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_t1' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_data' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_dest' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_data1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_data2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_dest' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_topics' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_data' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_loc' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_val1' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_dest' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_t1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_data' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc2' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val2' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/StdApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(STORES, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(STORES, uint(1), _location, _val));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      STORES, uint(2), _loc1, _val1, _loc2, _val2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (StdApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (StdApp.sol#7-12)\n\t- StdApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in StdApp.sol:\n\t- pragma solidity^0.4.23 (StdApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (StdApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_location' of StdApp.std1 (StdApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_val' of StdApp.std1 (StdApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc1' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val1' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc2' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val2' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/RevertHelper.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (RevertHelper.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (RevertHelper.sol#7-12)\n\t- RevertHelper.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RevertHelper.sol:\n\t- pragma solidity^0.4.23 (RevertHelper.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/InvalidApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(1), uint(5), address(this)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(0), STORES, uint(0), PAYS, uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (InvalidApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (InvalidApp.sol#7-12)\n\t- InvalidApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in InvalidApp.sol:\n\t- pragma solidity^0.4.23 (InvalidApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (InvalidApp.sol#17): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/RevertApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    revert('message');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RevertApp.sol:\n\t- pragma solidity^0.4.23 (RevertApp.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/AppInitMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      abi.encodeWithSelector(STORES, uint(1), execPermissions(msg.sender), bytes32(1))\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(THROWS, uint(4));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(1), uint(1), _t1, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(PAYS, uint(1), msg.value, _dest));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(STORES, uint(1), _location, _val));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (AppInitMock.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (AppInitMock.sol#7-12)\n\t- AppInitMock.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppInitMock.sol:\n\t- pragma solidity^0.4.23 (AppInitMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (AppInitMock.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execPermissions(address _exec) internal pure returns (bytes32 location) {\n",
                    "message": "Parameter '_exec' of AppInitMock.execPermissions (AppInitMock.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initEmits(bytes32 _t1) external pure {\n",
                    "message": "Parameter '_t1' of AppInitMock.initEmits (AppInitMock.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initPays(address _dest) external view {\n",
                    "message": "Parameter '_dest' of AppInitMock.initPays (AppInitMock.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_location' of AppInitMock.initStores (AppInitMock.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_val' of AppInitMock.initStores (AppInitMock.sol#60) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodePacked(temp, bytes4(0xffffffff)));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    location = keccak256(_exec, EXEC_PERMISSIONS);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/PayableApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(PAYS, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(PAYS, uint(1), (msg.value), _dest));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(2), (msg.value / 2), _dest1, (msg.value / 2), _dest2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (PayableApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (PayableApp.sol#7-12)\n\t- PayableApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in PayableApp.sol:\n\t- pragma solidity^0.4.23 (PayableApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (PayableApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address _dest) external view {\n",
                    "message": "Parameter '_dest' of PayableApp.pay1 (PayableApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address _dest1, address _dest2) external view {\n",
                    "message": "Parameter '_dest1' of PayableApp.pay2 (PayableApp.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address _dest1, address _dest2) external view {\n",
                    "message": "Parameter '_dest2' of PayableApp.pay2 (PayableApp.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/application/functions/ApplicationMockFuncLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "    function mockFn() public pure returns (bytes32[] store_data) {\n\n        store_data = new bytes32[](4);\n",
                    "message": "ApplicationMockFuncLib.mockFn (ApplicationMockFuncLib.sol#8-10) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ApplicationMockFuncLib.sol:\n\t- pragma solidity^0.4.21 (ApplicationMockFuncLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mockFn() public pure returns (bytes32[] store_data) {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/application/functions/init/ApplicationMockInit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init() public pure {}\n",
                    "message": "ApplicationMockInit.init (ApplicationMockInit.sol#8) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ApplicationMockInit.sol:\n\t- pragma solidity^0.4.21 (ApplicationMockInit.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/application/functions/init/MockAppThree.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function funcOneAppThree() public pure returns (bytes4) {\n\n    return bytes4(0x0141b47e);\n",
                    "message": "MockAppThree.funcOneAppThree (MockAppThree.sol#7-9) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MockAppThree.sol:\n\t- pragma solidity^0.4.23 (MockAppThree.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return bytes4(0x0141b47e);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/application/functions/init/MockAppTwo.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MockAppTwo.sol:\n\t- pragma solidity^0.4.23 (MockAppTwo.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/application/functions/init/MockAppOne.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function funcOneAppOne() public pure returns (bytes4) {\n\n    return bytes4(0x65096456);\n",
                    "message": "MockAppOne.funcOneAppOne (MockAppOne.sol#7-9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function funcTwoAppOne() public pure returns (bytes4) {\n\n    return bytes4(0xc77e14f6);\n",
                    "message": "MockAppOne.funcTwoAppOne (MockAppOne.sol#12-14) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MockAppOne.sol:\n\t- pragma solidity^0.4.23 (MockAppOne.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return bytes4(0x65096456);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return bytes4(0xc77e14f6);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/test/mock/application/functions/init/ApplicationMockNonDefaultInit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(bytes) public pure {}\n",
                    "message": "ApplicationMockNonDefaultInit.init (ApplicationMockNonDefaultInit.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "    function initSel() public pure returns (bytes4) {\n\n        return bytes4(keccak256(\"init(bytes)\"));\n",
                    "message": "ApplicationMockNonDefaultInit.initSel (ApplicationMockNonDefaultInit.sol#10-12) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ApplicationMockNonDefaultInit.sol:\n\t- pragma solidity^0.4.21 (ApplicationMockNonDefaultInit.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(bytes) public pure {}\n",
                    "message": "Parameter '' of ApplicationMockNonDefaultInit.init (ApplicationMockNonDefaultInit.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(bytes) public pure {}\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) public restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.23 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/core/ScriptExec.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_storage != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_51"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 121,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "ScriptExec.exec (ScriptExec.sol#102-121) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (ScriptExec.sol#110)\n\t- address(msg.sender).transfer(address(this).balance) (ScriptExec.sol#120)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 131,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction (ScriptExec.sol#126-131) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn (ScriptExec.sol#157-171) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n\n    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n\n    (exec_id, version) = StorageInterface(app_storage).createInstance(\n\n      msg.sender, _app_name, provider, registry_exec_id, _init_calldata\n\n    );\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    app_instances[_app_name].push(exec_id);\n\n    Instance memory inst = Instance(\n\n      provider, registry_exec_id, exec_id, _app_name, version\n\n    );\n\n    instance_info[exec_id] = inst;\n\n    deployed_instances[msg.sender].push(inst);\n\n    // Emit event -\n\n    emit AppInstanceCreated(msg.sender, exec_id, _app_name, version);\n",
                    "message": "Reentrancy in ScriptExec.createAppInstance (ScriptExec.sol#183-198):\n\tExternal calls:\n\t- (exec_id,version) = StorageInterface(app_storage).createInstance(msg.sender,_app_name,provider,registry_exec_id,_init_calldata) (ScriptExec.sol#185-187)\n\tState variables written after the call(s):\n\t- app_instances (ScriptExec.sol#190)\n\t- deployed_by (ScriptExec.sol#189)\n\t- deployed_instances (ScriptExec.sol#195)\n\t- instance_info (ScriptExec.sol#194)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 131,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction uses assembly (ScriptExec.sol#126-131)\n\t- ScriptExec.sol#127-131\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = ERR;\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(_exec_id, message);\n",
                    "message": "ScriptExec.checkErrors uses assembly (ScriptExec.sol#134-154)\n\t- ScriptExec.sol#138-150\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn uses assembly (ScriptExec.sol#157-171)\n\t- ScriptExec.sol#159-170\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": "ScriptExec.fallback (ScriptExec.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n\n    require(_app_storage != 0, 'Invalid input');\n\n    exec_admin = _exec_admin;\n\n    app_storage = _app_storage;\n\n    provider = _provider;\n\n\n\n    if (exec_admin == 0)\n\n      exec_admin = msg.sender;\n",
                    "message": "ScriptExec.configure (ScriptExec.sol#81-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n\n    registry_exec_id = _exec_id;\n",
                    "message": "ScriptExec.setRegistryExecID (ScriptExec.sol#206-208) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n\n    provider = _provider;\n",
                    "message": "ScriptExec.setProvider (ScriptExec.sol#214-216) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 222,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n\n    require(_admin != 0);\n\n    exec_admin = _admin;\n",
                    "message": "ScriptExec.setAdmin (ScriptExec.sol#219-222) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n\n    return app_instances[_app_name];\n",
                    "message": "ScriptExec.getInstances (ScriptExec.sol#227-229) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n\n    return deployed_instances[_deployer].length;\n",
                    "message": "ScriptExec.getDeployedLength (ScriptExec.sol#236-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "  function getRegistryImplementation() public view returns (address indx, address implementation) {\n\n    indx = StorageInterface(app_storage).getIndex(registry_exec_id);\n\n    implementation = StorageInterface(app_storage).getTarget(registry_exec_id, REGISTER_APP_SEL);\n",
                    "message": "ScriptExec.getRegistryImplementation (ScriptExec.sol#248-251) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n\n  returns (address index, bytes4[] memory functions, address[] memory implementations) {\n\n    Instance memory app = instance_info[_exec_id];\n\n    index = StorageInterface(app_storage).getIndex(app.current_registry_exec_id);\n\n    (index, functions, implementations) = RegistryInterface(index).getVersionImplementation(\n\n      app_storage, app.current_registry_exec_id, app.current_provider, app.app_name, app.version_name\n\n    );\n",
                    "message": "ScriptExec.getInstanceImplementation (ScriptExec.sol#260-267) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ScriptExec.sol:\n\t- pragma solidity^0.4.23 (ScriptExec.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (ScriptExec.sol#18): it allows old versions\n\t- pragma solidity^0.4.23 (ScriptExec.sol#29): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 121,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in ScriptExec.exec (ScriptExec.sol#102-121):\n\t-address(app_storage).call.value(msg.value)(abi.encodeWithSelector(EXEC_SEL,msg.sender,_exec_id,_calldata)) == false ScriptExec.sol#104-112\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (ScriptExec.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (ScriptExec.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (ScriptExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (ScriptExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (ScriptExec.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_exec_admin' of ScriptExec.configure (ScriptExec.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_app_storage' of ScriptExec.configure (ScriptExec.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_provider' of ScriptExec.configure (ScriptExec.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.exec (ScriptExec.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_calldata' of ScriptExec.exec (ScriptExec.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.checkErrors (ScriptExec.sol#134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.createAppInstance (ScriptExec.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_init_calldata' of ScriptExec.createAppInstance (ScriptExec.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.setRegistryExecID (ScriptExec.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n",
                    "message": "Parameter '_provider' of ScriptExec.setProvider (ScriptExec.sol#214) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n",
                    "message": "Parameter '_admin' of ScriptExec.setAdmin (ScriptExec.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.getInstances (ScriptExec.sol#227) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n",
                    "message": "Parameter '_deployer' of ScriptExec.getDeployedLength (ScriptExec.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n",
                    "message": "Parameter '_exec_id' of ScriptExec.getInstanceImplementation (ScriptExec.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public app_storage;\n",
                    "message": "Variable 'ScriptExec.app_storage' (ScriptExec.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public registry_exec_id;\n",
                    "message": "Variable 'ScriptExec.registry_exec_id' (ScriptExec.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public exec_admin;\n",
                    "message": "Variable 'ScriptExec.exec_admin' (ScriptExec.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => address) public deployed_by;\n",
                    "message": "Variable 'ScriptExec.deployed_by' (ScriptExec.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Instance) public instance_info;\n",
                    "message": "Variable 'ScriptExec.instance_info' (ScriptExec.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Instance[]) public deployed_instances;\n",
                    "message": "Variable 'ScriptExec.deployed_instances' (ScriptExec.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => bytes32[]) public app_instances;\n",
                    "message": "Variable 'ScriptExec.app_instances' (ScriptExec.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/core/Proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    proxy_admin = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    app_storage = StorageInterface(_storage);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    registry_exec_id = _registry_exec_id;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    provider = _provider;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    app_name = _app_name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_22"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_exec_id;\n",
                    "message": "Proxy.app_exec_id (Proxy.sol#31) is never initialized. It is used in:\n\t- checkErrors (Proxy.sol#56-76)\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () external payable { }\n",
                    "message": "Contract locking ether found in Proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (Proxy.sol#41)\n\t - exec (Proxy.sol#53)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function checkErrors() internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = bytes4(keccak256('Error(string)'));\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(app_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(app_exec_id, message);\n",
                    "message": "Proxy.checkErrors uses assembly (Proxy.sol#56-76)\n\t- Proxy.sol#60-72\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_exec_id;\n",
                    "message": "Proxy.app_exec_id should be constant (Proxy.sol#31)\nProxy.app_index should be constant (Proxy.sol#32)\nProxy.app_version should be constant (Proxy.sol#30)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Proxy.sol:\n\t- pragma solidity^0.4.23 (Proxy.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (Proxy.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (Proxy.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (Proxy.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (Proxy.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (Proxy.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (Proxy.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_storage' of Proxy. (Proxy.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_registry_exec_id' of Proxy. (Proxy.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_provider' of Proxy. (Proxy.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_app_name' of Proxy. (Proxy.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public proxy_admin;\n",
                    "message": "Variable 'Proxy.proxy_admin' (Proxy.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  StorageInterface public app_storage;\n",
                    "message": "Variable 'Proxy.app_storage' (Proxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public registry_exec_id;\n",
                    "message": "Variable 'Proxy.registry_exec_id' (Proxy.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_name;\n",
                    "message": "Variable 'Proxy.app_name' (Proxy.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_version;\n",
                    "message": "Variable 'Proxy.app_version' (Proxy.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_exec_id;\n",
                    "message": "Variable 'Proxy.app_exec_id' (Proxy.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public app_index;\n",
                    "message": "Variable 'Proxy.app_index' (Proxy.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant EXEC_SEL = bytes4(keccak256('exec(address,bytes32,bytes)'));\n",
                    "message": "Proxy.EXEC_SEL (Proxy.sol#35) is never used in Proxy\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/core/Contract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected Contract.execute()');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - stores');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - emits');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - pays');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_INC or VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_SET &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_INC &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_DEC\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_81"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are nonzero -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize (Contract.sol#71-108) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize (Contract.sol#119-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit (Contract.sol#155-167) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr (Contract.sol#183-185) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem (Contract.sol#188-190) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction (Contract.sol#193-198) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer (Contract.sol#219-232) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID (Contract.sol#276-279) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender (Contract.sol#282-285) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read (Contract.sol#291-294) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      // SWC-Code With No Effects: L334\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.storing (Contract.sol#363-387) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _field;\n",
                    "message": "Contract.set (Contract.sol#390-413) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.to (Contract.sol#416-431) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.increase (Contract.sol#451-477) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.decrease (Contract.sol#479-505) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 531,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.by (Contract.sol#507-531) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt > uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.byMaximum (Contract.sol#534-560) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.emitting (Contract.sol#564-587) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Contract.sol#589-622) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Contract.sol#624-659) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": 697,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Contract.sol#661-697) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Contract.sol#699-736) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": 776,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Contract.sol#738-776) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": 803,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.paying (Contract.sol#780-803) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": 829,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _amount;\n",
                    "message": "Contract.pay (Contract.sol#806-829) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.toAcc (Contract.sol#832-847) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": 852,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected (Contract.sol#850-852) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 861,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted (Contract.sol#855-861) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored (Contract.sol#864-870) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": 879,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid (Contract.sol#873-879) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are nonzero -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize uses assembly (Contract.sol#71-108)\n\t- Contract.sol#77-91\n\t- Contract.sol#95-106\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize uses assembly (Contract.sol#119-139)\n\t- Contract.sol#124-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit uses assembly (Contract.sol#155-167)\n\t- Contract.sol#160-167\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr uses assembly (Contract.sol#183-185)\n\t- Contract.sol#184-185\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem uses assembly (Contract.sol#188-190)\n\t- Contract.sol#189-190\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction uses assembly (Contract.sol#193-198)\n\t- Contract.sol#197-198\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer uses assembly (Contract.sol#219-232)\n\t- Contract.sol#220-232\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID uses assembly (Contract.sol#276-279)\n\t- Contract.sol#277-278\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender uses assembly (Contract.sol#282-285)\n\t- Contract.sol#283-284\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read uses assembly (Contract.sol#291-294)\n\t- Contract.sol#293-294\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      // SWC-Code With No Effects: L334\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.storing uses assembly (Contract.sol#363-387)\n\t- Contract.sol#365-387\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _field;\n",
                    "message": "Contract.set uses assembly (Contract.sol#390-413)\n\t- Contract.sol#391-412\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.to uses assembly (Contract.sol#416-431)\n\t- Contract.sol#417-431\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.increase uses assembly (Contract.sol#451-477)\n\t- Contract.sol#454-476\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.decrease uses assembly (Contract.sol#479-505)\n\t- Contract.sol#482-504\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 531,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.by uses assembly (Contract.sol#507-531)\n\t- Contract.sol#517-531\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt > uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.byMaximum uses assembly (Contract.sol#534-560)\n\t- Contract.sol#546-560\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.emitting uses assembly (Contract.sol#564-587)\n\t- Contract.sol#566-587\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Contract.sol#589-622)\n\t- Contract.sol#590-622\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Contract.sol#624-659)\n\t- Contract.sol#625-659\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": 697,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Contract.sol#661-697)\n\t- Contract.sol#662-697\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Contract.sol#699-736)\n\t- Contract.sol#700-736\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": 776,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Contract.sol#738-776)\n\t- Contract.sol#739-776\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": 803,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.paying uses assembly (Contract.sol#780-803)\n\t- Contract.sol#782-803\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": 829,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _amount;\n",
                    "message": "Contract.pay uses assembly (Contract.sol#806-829)\n\t- Contract.sol#807-828\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.toAcc uses assembly (Contract.sol#832-847)\n\t- Contract.sol#833-847\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": 852,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected uses assembly (Contract.sol#850-852)\n\t- Contract.sol#851-852\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 861,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted uses assembly (Contract.sol#855-861)\n\t- Contract.sol#860-861\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored uses assembly (Contract.sol#864-870)\n\t- Contract.sol#869-870\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": 879,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid uses assembly (Contract.sol#873-879)\n\t- Contract.sol#878-879\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Contract.sol:\n\t- pragma solidity^0.4.23 (Contract.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (Contract.sol#46): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": "Parameter '_script_exec' of Contract.authorize (Contract.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checks(function () pure _check) conditions(validState, validState) internal pure {\n",
                    "message": "Parameter '_check' of Contract.checks (Contract.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": "Parameter '_location' of Contract.read (Contract.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": "Parameter '_field' of Contract.set (Contract.sol#390) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '' of Contract.to (Contract.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Contract.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Contract.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Contract.sol#439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Contract.sol#439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Contract.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Contract.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.increase (Contract.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.decrease (Contract.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.by (Contract.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.by (Contract.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.byMaximum (Contract.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.byMaximum (Contract.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": "Parameter '_amount' of Contract.pay (Contract.sol#806) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": "Parameter '' of Contract.toAcc (Contract.sol#832) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
                    "message": "Contract.THROWS (Contract.sol#301) is never used in Contract\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!authorized)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (stored() != 0 || currentAction() == STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (emitted() != 0 || currentAction() == EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (paid() != 0 || currentAction() == PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.STORE_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_AMT)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.EMIT_LOG)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (expected() == NextFunction.VAL_DEC)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() == NextFunction.VAL_DEC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validState() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function startBuffer() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize() internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    data = keccak256(_location, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0xc0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0x40) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { action := mload(0xe0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { exec_id := mload(0x80) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { addr := mload(0xa0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data := sload(data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { next := mload(0x100) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_emitted := mload(0x140) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_stored := mload(0x120) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_paid := mload(0x160) }\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/core/AbstractStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint log_size = 32 + (32 * (1 + topics.length)) + data.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint log_size = 32 + (32 * (1 + topics.length)) + data.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(target != address(0), 'Uninitialized application');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('No state change occured');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr_bound >= _ptr + 64, 'Malformed returndata - invalid size');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_emitted == 0, 'Duplicate action: EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_emitted != 0, 'Unfulfilled action: EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_stored == 0, 'Duplicate action: STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_stored != 0, 'Unfulfilled action: STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_paid == 0, 'Duplicate action: PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_paid != 0, 'Unfulfilled action: PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert('Malformed returndata - unknown action');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index != address(0) && index != address(this), 'Registry application not found');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(version != bytes32(0), 'Invalid version name');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index != address(0), 'Invalid index address');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(selectors.length == implementations.length && selectors.length != 0, 'Invalid implementation length');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(selectors[i] != 0 && implementations[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert('PAYS: invalid destination');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index != address(0) && index != address(this), 'Registry application not found');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(selectors.length == implementations.length && selectors.length != 0, 'Invalid implementation length');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(selectors[i] != 0 && implementations[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('No state change occured');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      n_paid++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      n_stored++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      n_emitted++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr_bound >= _ptr + 64, 'Malformed returndata - invalid size');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert('Malformed returndata - unknown action');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(selectors[i] != 0 && implementations[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_84"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.createInstance (AbstractStorage.sol#75-106) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (AbstractStorage.sol#105)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n\n    // Ensure valid input and input size - minimum 4 bytes\n\n    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n\n\n\n    // Get the target address associated with the given exec id\n\n    address target = getTarget(_exec_id, getSelector(_calldata));\n\n    require(target != address(0), 'Uninitialized application');\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(_exec_id, _sender);\n\n\n\n    // Execute application and commit returned data to storage -\n\n    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    (n_emitted, n_paid, n_stored) = executeAppReturn(_exec_id);\n\n\n\n    // If no events were emitted, no wei was forwarded, and no storage was changed, revert -\n\n    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n\n      revert('No state change occured');\n\n\n\n    // Emit event -\n\n    emit ApplicationExecution(_exec_id, target);\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.exec (AbstractStorage.sol#119-144) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (AbstractStorage.sol#143)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.createInstance (AbstractStorage.sol#75-106) uses delegatecall to a input-controlled function id\n\trequire(bool,string)(address(index).delegatecall(_calldata) == false,Unsafe execution) (AbstractStorage.sol#93)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n\n    // Ensure valid input and input size - minimum 4 bytes\n\n    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n\n\n\n    // Get the target address associated with the given exec id\n\n    address target = getTarget(_exec_id, getSelector(_calldata));\n\n    require(target != address(0), 'Uninitialized application');\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(_exec_id, _sender);\n\n\n\n    // Execute application and commit returned data to storage -\n\n    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    (n_emitted, n_paid, n_stored) = executeAppReturn(_exec_id);\n\n\n\n    // If no events were emitted, no wei was forwarded, and no storage was changed, revert -\n\n    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n\n      revert('No state change occured');\n\n\n\n    // Emit event -\n\n    emit ApplicationExecution(_exec_id, target);\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.exec (AbstractStorage.sol#119-144) uses delegatecall to a input-controlled function id\n\trequire(bool,string)(address(target).delegatecall(_calldata) == false,Unsafe execution) (AbstractStorage.sol#131)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 288,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n\n    bytes32 seed = APP_IDX_ADDR;\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getIndex (AbstractStorage.sol#283-288) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n\n    bytes32 seed = keccak256(_selector, 'implementation');\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getTarget (AbstractStorage.sol#291-296) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n\n    assembly {\n\n      sel := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "AbstractStorage.getSelector (AbstractStorage.sol#319-326) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 352,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n\n    assembly {\n\n      // returndatasize must be minimum 96 bytes (offset, length, and requestor)\n\n      if lt(returndatasize, 0x60) {\n\n        mstore(0, 'Insufficient return size')\n\n        revert(0, 0x20)\n\n      }\n\n      // Get memory location to which returndata will be copied\n\n      _returndata_ptr := msize\n\n      // Copy returned data to pointer location\n\n      returndatacopy(_returndata_ptr, 0, returndatasize)\n\n      // Get maximum memory location value for returndata\n\n      ptr_bounds := add(_returndata_ptr, returndatasize)\n\n      // Set new free-memory pointer to point after the returndata in memory\n\n      // Returndata is automatically 32-bytes padded\n\n      mstore(0x40, add(0x20, ptr_bounds))\n\n    }\n",
                    "message": "AbstractStorage.getReturnedData (AbstractStorage.sol#335-352) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": 362,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n\n    assembly { length := mload(_ptr) }\n",
                    "message": "AbstractStorage.getLength (AbstractStorage.sol#360-362) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 368,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n\n    assert(getAction(_ptr) == THROWS);\n\n    assembly { revert(_ptr, returndatasize) }\n",
                    "message": "AbstractStorage.doThrow (AbstractStorage.sol#365-368) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "AbstractStorage.getAction (AbstractStorage.sol#544-549) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": 578,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n\n    _location = keccak256(_location, _exec_id);\n\n    assembly { data_read := sload(_location) }\n",
                    "message": "AbstractStorage.read (AbstractStorage.sol#575-578) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": 593,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n\n    data_read = new bytes32[](_locations.length);\n\n    for (uint i = 0; i < _locations.length; i++) {\n\n      bytes32 location = keccak256(_locations[i], _exec_id);\n\n      bytes32 val;\n\n      assembly { val := sload(location) }\n\n      data_read[i] = val;\n\n    }\n",
                    "message": "AbstractStorage.readMulti (AbstractStorage.sol#585-593) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 action;\n",
                    "message": "action in AbstractStorage.executeAppReturn (AbstractStorage.sol#202) is a local variable never initialiazed\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address(pay_to).transfer(amt);\n",
                    "message": "AbstractStorage.doPay has external calls inside a loop:\n\t- address(pay_to).transfer(amt) (AbstractStorage.sol#403)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Reentrancy in AbstractStorage.createInstance (AbstractStorage.sol#75-106):\n\tExternal calls:\n\t- (index,version) = setImplementation(new_exec_id,_app_name,_provider,_registry_id) (AbstractStorage.sol#87)\n\tState variables written after the call(s):\n\t- exec_id (AbstractStorage.sol#90)\n\t- sender (AbstractStorage.sol#90)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 288,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n\n    bytes32 seed = APP_IDX_ADDR;\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getIndex uses assembly (AbstractStorage.sol#283-288)\n\t- AbstractStorage.sol#286-287\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n\n    bytes32 seed = keccak256(_selector, 'implementation');\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getTarget uses assembly (AbstractStorage.sol#291-296)\n\t- AbstractStorage.sol#294-295\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n\n    function (bytes32, bytes32, bytes32) puts;\n\n    assembly { puts := putMap }\n\n    puts(_exec_id, _seed, _val);\n",
                    "message": "AbstractStorage.put uses assembly (AbstractStorage.sol#306-310)\n\t- AbstractStorage.sol#308-309\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n\n    assembly {\n\n      sel := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "AbstractStorage.getSelector uses assembly (AbstractStorage.sol#319-326)\n\t- AbstractStorage.sol#320-326\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 352,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n\n    assembly {\n\n      // returndatasize must be minimum 96 bytes (offset, length, and requestor)\n\n      if lt(returndatasize, 0x60) {\n\n        mstore(0, 'Insufficient return size')\n\n        revert(0, 0x20)\n\n      }\n\n      // Get memory location to which returndata will be copied\n\n      _returndata_ptr := msize\n\n      // Copy returned data to pointer location\n\n      returndatacopy(_returndata_ptr, 0, returndatasize)\n\n      // Get maximum memory location value for returndata\n\n      ptr_bounds := add(_returndata_ptr, returndatasize)\n\n      // Set new free-memory pointer to point after the returndata in memory\n\n      // Returndata is automatically 32-bytes padded\n\n      mstore(0x40, add(0x20, ptr_bounds))\n\n    }\n",
                    "message": "AbstractStorage.getReturnedData uses assembly (AbstractStorage.sol#335-352)\n\t- AbstractStorage.sol#336-352\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": 362,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n\n    assembly { length := mload(_ptr) }\n",
                    "message": "AbstractStorage.getLength uses assembly (AbstractStorage.sol#360-362)\n\t- AbstractStorage.sol#361-362\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": 368,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n\n    assert(getAction(_ptr) == THROWS);\n\n    assembly { revert(_ptr, returndatasize) }\n",
                    "message": "AbstractStorage.doThrow uses assembly (AbstractStorage.sol#365-368)\n\t- AbstractStorage.sol#367-368\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": 412,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n\n    // Ensure ETH was sent with the call\n\n    require(msg.value > 0);\n\n    assert(getAction(_ptr) == PAYS);\n\n    _ptr += 4;\n\n    // Get number of destinations\n\n    uint num_destinations = getLength(_ptr);\n\n    _ptr += 32;\n\n    address pay_to;\n\n    uint amt;\n\n    // Loop over PAYS actions and process each one\n\n    while (_ptr <= _ptr_bound && n_paid < num_destinations) {\n\n      // Get the payment destination and amount from the pointer\n\n      assembly {\n\n        amt := mload(_ptr)\n\n        pay_to := mload(add(0x20, _ptr))\n\n      }\n\n      // Invalid address was passed as a payment destination - throw\n\n      if (pay_to == address(0) || pay_to == address(this))\n\n        revert('PAYS: invalid destination');\n\n\n\n      // Forward ETH and increment n_paid\n\n      address(pay_to).transfer(amt);\n\n      n_paid++;\n\n      // Increment pointer\n\n      _ptr += 64;\n\n      // Emit event\n\n      emit DeliveredPayment(_exec_id, pay_to, amt);\n\n    }\n\n    ptr = _ptr;\n\n    assert(n_paid == num_destinations);\n",
                    "message": "AbstractStorage.doPay uses assembly (AbstractStorage.sol#381-412)\n\t- AbstractStorage.sol#394-399\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n\n    assert(getAction(_ptr) == STORES && _exec_id != bytes32(0));\n\n    _ptr += 4;\n\n    // Get number of locations to which data will be stored\n\n    uint num_locations = getLength(_ptr);\n\n    _ptr += 32;\n\n    bytes32 location;\n\n    bytes32 value;\n\n    // Loop over STORES actions and process each one\n\n    while (_ptr <= _ptr_bound && n_stored < num_locations) {\n\n      // Get storage location and value to store from the pointer\n\n      assembly {\n\n        location := mload(_ptr)\n\n        value := mload(add(0x20, _ptr))\n\n      }\n\n      // Store the data to the location hashed with the exec id\n\n      store(_exec_id, location, value);\n\n      // Increment n_stored and pointer\n\n      n_stored++;\n\n      _ptr += 64;\n\n    }\n\n    ptr = _ptr;\n\n    require(n_stored == num_locations);\n",
                    "message": "AbstractStorage.doStore uses assembly (AbstractStorage.sol#427-450)\n\t- AbstractStorage.sol#438-443\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n\n    assert(getAction(_ptr) == EMITS);\n\n    _ptr += 4;\n\n    // Converts number of events that will be emitted\n\n    uint num_events = getLength(_ptr);\n\n    _ptr += 32;\n\n    bytes32[] memory topics;\n\n    bytes memory data;\n\n    // Loop over EMITS actions and process each one\n\n    while (_ptr <= _ptr_bound && n_emitted < num_events) {\n\n      // Get array of topics and additional data from the pointer\n\n      assembly {\n\n        topics := _ptr\n\n        data := add(add(_ptr, 0x20), mul(0x20, mload(topics)))\n\n      }\n\n      // Get size of the Event's data in memory\n\n      uint log_size = 32 + (32 * (1 + topics.length)) + data.length;\n\n      assembly {\n\n        switch mload(topics)                // topics.length\n\n          case 0 {\n\n            // Log Event.data array with no topics\n\n            log0(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data)                   // data.length\n\n            )\n\n          }\n\n          case 1 {\n\n            // Log Event.data array with 1 topic\n\n            log1(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics))      // topics[0]\n\n            )\n\n          }\n\n          case 2 {\n\n            // Log Event.data array with 2 topics\n\n            log2(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics)),     // topics[0]\n\n              mload(add(0x40, topics))      // topics[1]\n\n            )\n\n          }\n\n          case 3 {\n\n            // Log Event.data array with 3 topics\n\n            log3(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics)),     // topics[0]\n\n              mload(add(0x40, topics)),     // topics[1]\n\n              mload(add(0x60, topics))      // topics[2]\n\n            )\n\n          }\n\n          case 4 {\n\n            // Log Event.data array with 4 topics\n\n            log4(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics)),     // topics[0]\n\n              mload(add(0x40, topics)),     // topics[1]\n\n              mload(add(0x60, topics)),     // topics[2]\n\n              mload(add(0x80, topics))      // topics[3]\n\n            )\n\n          }\n\n          default {\n\n            // Events must have 4 or fewer topics\n\n            mstore(0, 'EMITS: invalid topic count')\n\n            revert(0, 0x20)\n\n          }\n\n      }\n\n      // Event emitted - increment n_emitted and pointer\n\n      n_emitted++;\n\n      _ptr += log_size;\n\n    }\n\n    ptr = _ptr;\n\n    require(n_emitted == num_events);\n",
                    "message": "AbstractStorage.doEmit uses assembly (AbstractStorage.sol#465-541)\n\t- AbstractStorage.sol#476-481\n\t- AbstractStorage.sol#482-536\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "AbstractStorage.getAction uses assembly (AbstractStorage.sol#544-549)\n\t- AbstractStorage.sol#545-549\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": 566,
                    "vulnerability_code": "  function store(bytes32 _exec_id, bytes32 _location, bytes32 _data) internal {\n\n    // Get true location to store data to - hash of location hashed with exec id\n\n    _location = keccak256(_location, _exec_id);\n\n    // Store data at location\n\n    assembly { sstore(_location, _data) }\n",
                    "message": "AbstractStorage.store uses assembly (AbstractStorage.sol#561-566)\n\t- AbstractStorage.sol#565-566\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": 578,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n\n    _location = keccak256(_location, _exec_id);\n\n    assembly { data_read := sload(_location) }\n",
                    "message": "AbstractStorage.read uses assembly (AbstractStorage.sol#575-578)\n\t- AbstractStorage.sol#577-578\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": 593,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n\n    data_read = new bytes32[](_locations.length);\n\n    for (uint i = 0; i < _locations.length; i++) {\n\n      bytes32 location = keccak256(_locations[i], _exec_id);\n\n      bytes32 val;\n\n      assembly { val := sload(location) }\n\n      data_read[i] = val;\n\n    }\n",
                    "message": "AbstractStorage.readMulti uses assembly (AbstractStorage.sol#585-593)\n\t- AbstractStorage.sol#590-591\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AbstractStorage.sol:\n\t- pragma solidity^0.4.23 (AbstractStorage.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (AbstractStorage.sol#14): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in AbstractStorage.createInstance (AbstractStorage.sol#75-106):\n\t-require(bool,string)(address(index).delegatecall(_calldata) == false,Unsafe execution) AbstractStorage.sol#93\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n\n    // Ensure valid input and input size - minimum 4 bytes\n\n    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n\n\n\n    // Get the target address associated with the given exec id\n\n    address target = getTarget(_exec_id, getSelector(_calldata));\n\n    require(target != address(0), 'Uninitialized application');\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(_exec_id, _sender);\n\n\n\n    // Execute application and commit returned data to storage -\n\n    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    (n_emitted, n_paid, n_stored) = executeAppReturn(_exec_id);\n\n\n\n    // If no events were emitted, no wei was forwarded, and no storage was changed, revert -\n\n    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n\n      revert('No state change occured');\n\n\n\n    // Emit event -\n\n    emit ApplicationExecution(_exec_id, target);\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in AbstractStorage.exec (AbstractStorage.sol#119-144):\n\t-require(bool,string)(address(target).delegatecall(_calldata) == false,Unsafe execution) AbstractStorage.sol#131\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (AbstractStorage.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (AbstractStorage.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (AbstractStorage.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistry(address _registry_idx, address _implementation) external returns (bytes32) {\n",
                    "message": "Parameter '_registry_idx' of AbstractStorage.createRegistry (AbstractStorage.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistry(address _registry_idx, address _implementation) external returns (bytes32) {\n",
                    "message": "Parameter '_implementation' of AbstractStorage.createRegistry (AbstractStorage.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_sender' of AbstractStorage.createInstance (AbstractStorage.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of AbstractStorage.createInstance (AbstractStorage.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_provider' of AbstractStorage.createInstance (AbstractStorage.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_registry_id' of AbstractStorage.createInstance (AbstractStorage.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_calldata' of AbstractStorage.createInstance (AbstractStorage.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_sender' of AbstractStorage.exec (AbstractStorage.sol#119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.exec (AbstractStorage.sol#119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_calldata' of AbstractStorage.exec (AbstractStorage.sol#119) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeAppReturn(bytes32 _exec_id) internal returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.executeAppReturn (AbstractStorage.sol#185) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_new_exec_id' of AbstractStorage.setImplementation (AbstractStorage.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of AbstractStorage.setImplementation (AbstractStorage.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_provider' of AbstractStorage.setImplementation (AbstractStorage.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_registry_id' of AbstractStorage.setImplementation (AbstractStorage.sol#246) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.getIndex (AbstractStorage.sol#283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.getTarget (AbstractStorage.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n",
                    "message": "Parameter '_selector' of AbstractStorage.getTarget (AbstractStorage.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMap(Map storage _map, bytes32 _seed) internal view returns (bytes32) {\n",
                    "message": "Parameter '_map' of AbstractStorage.readMap (AbstractStorage.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMap(Map storage _map, bytes32 _seed) internal view returns (bytes32) {\n",
                    "message": "Parameter '_seed' of AbstractStorage.readMap (AbstractStorage.sol#301) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.put (AbstractStorage.sol#306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_seed' of AbstractStorage.put (AbstractStorage.sol#306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_val' of AbstractStorage.put (AbstractStorage.sol#306) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function putMap(Map storage _map, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_map' of AbstractStorage.putMap (AbstractStorage.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function putMap(Map storage _map, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_seed' of AbstractStorage.putMap (AbstractStorage.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function putMap(Map storage _map, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_val' of AbstractStorage.putMap (AbstractStorage.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doThrow (AbstractStorage.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.doPay (AbstractStorage.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doPay (AbstractStorage.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": "Parameter '_ptr_bound' of AbstractStorage.doPay (AbstractStorage.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doStore (AbstractStorage.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": "Parameter '_ptr_bound' of AbstractStorage.doStore (AbstractStorage.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.doStore (AbstractStorage.sol#427) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doEmit (AbstractStorage.sol#465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": "Parameter '_ptr_bound' of AbstractStorage.doEmit (AbstractStorage.sol#465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setContext(bytes32 _exec_id, address _sender) internal {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.setContext (AbstractStorage.sol#553) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setContext(bytes32 _exec_id, address _sender) internal {\n",
                    "message": "Parameter '_sender' of AbstractStorage.setContext (AbstractStorage.sol#553) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function store(bytes32 _exec_id, bytes32 _location, bytes32 _data) internal {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.store (AbstractStorage.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function store(bytes32 _exec_id, bytes32 _location, bytes32 _data) internal {\n",
                    "message": "Parameter '_location' of AbstractStorage.store (AbstractStorage.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.read (AbstractStorage.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": "Parameter '_location' of AbstractStorage.read (AbstractStorage.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.readMulti (AbstractStorage.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": "Parameter '_locations' of AbstractStorage.readMulti (AbstractStorage.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private exec_id;\n",
                    "message": "Variable 'AbstractStorage.exec_id' (AbstractStorage.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_paid < num_destinations) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_stored < num_locations) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_emitted < num_events) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= ptr_bound && (action = getAction(_ptr)) != 0x0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private exec_id;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private nonce;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      } else if (action == PAYS) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (pay_to == address(0) || pay_to == address(this))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeAppReturn(bytes32 _exec_id) internal returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TRANSFER_IN_LOOP",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_paid < num_destinations) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(msg.sender, EXEC_PERMISSIONS), bytes32(1));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(REG_APP, 'implementation'), bytes32(_implementation));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(REG_APP_VER, 'implementation'), bytes32(_implementation));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      seed = keccak256(selectors[i], 'implementation');\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 seed = keccak256(_selector, 'implementation');\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _location = keccak256(_location, _exec_id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _location = keccak256(_location, _exec_id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bytes32 location = keccak256(_locations[i], _exec_id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getter := readMap }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getter := readMap }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { puts := putMap }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { length := mload(_ptr) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { revert(_ptr, returndatasize) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { sstore(_location, _data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data_read := sload(_location) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly { val := sload(location) }\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/registry/RegistryIdx.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected Contract.execute()');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - stores');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - emits');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - pays');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_INC or VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_SET &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_INC &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_DEC\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1019,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1025,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_123"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are nonzero -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize (RegistryIdx.sol#71-108) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize (RegistryIdx.sol#119-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit (RegistryIdx.sol#155-167) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr (RegistryIdx.sol#183-185) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem (RegistryIdx.sol#188-190) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction (RegistryIdx.sol#193-198) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer (RegistryIdx.sol#219-232) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID (RegistryIdx.sol#276-279) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender (RegistryIdx.sol#282-285) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read (RegistryIdx.sol#291-294) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      // SWC-Code With No Effects: L334\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.storing (RegistryIdx.sol#363-387) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _field;\n",
                    "message": "Contract.set (RegistryIdx.sol#390-413) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.to (RegistryIdx.sol#416-431) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.increase (RegistryIdx.sol#451-477) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.decrease (RegistryIdx.sol#479-505) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 531,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.by (RegistryIdx.sol#507-531) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt > uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.byMaximum (RegistryIdx.sol#534-560) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.emitting (RegistryIdx.sol#564-587) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (RegistryIdx.sol#589-622) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (RegistryIdx.sol#624-659) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": 697,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (RegistryIdx.sol#661-697) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (RegistryIdx.sol#699-736) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": 776,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (RegistryIdx.sol#738-776) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": 803,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.paying (RegistryIdx.sol#780-803) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": 829,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _amount;\n",
                    "message": "Contract.pay (RegistryIdx.sol#806-829) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.toAcc (RegistryIdx.sol#832-847) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": 852,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected (RegistryIdx.sol#850-852) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 861,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted (RegistryIdx.sol#855-861) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored (RegistryIdx.sol#864-870) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": 879,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid (RegistryIdx.sol#873-879) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 897,
                    "vulnerability_to_line": 899,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr (RegistryIdx.sol#897-899) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 901,
                    "vulnerability_to_line": 903,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr (RegistryIdx.sol#901-903) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": 907,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr (RegistryIdx.sol#905-907) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are nonzero -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize uses assembly (RegistryIdx.sol#71-108)\n\t- RegistryIdx.sol#77-91\n\t- RegistryIdx.sol#95-106\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize uses assembly (RegistryIdx.sol#119-139)\n\t- RegistryIdx.sol#124-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit uses assembly (RegistryIdx.sol#155-167)\n\t- RegistryIdx.sol#160-167\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr uses assembly (RegistryIdx.sol#183-185)\n\t- RegistryIdx.sol#184-185\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem uses assembly (RegistryIdx.sol#188-190)\n\t- RegistryIdx.sol#189-190\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction uses assembly (RegistryIdx.sol#193-198)\n\t- RegistryIdx.sol#197-198\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer uses assembly (RegistryIdx.sol#219-232)\n\t- RegistryIdx.sol#220-232\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID uses assembly (RegistryIdx.sol#276-279)\n\t- RegistryIdx.sol#277-278\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender uses assembly (RegistryIdx.sol#282-285)\n\t- RegistryIdx.sol#283-284\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read uses assembly (RegistryIdx.sol#291-294)\n\t- RegistryIdx.sol#293-294\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      // SWC-Code With No Effects: L334\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.storing uses assembly (RegistryIdx.sol#363-387)\n\t- RegistryIdx.sol#365-387\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _field;\n",
                    "message": "Contract.set uses assembly (RegistryIdx.sol#390-413)\n\t- RegistryIdx.sol#391-412\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.to uses assembly (RegistryIdx.sol#416-431)\n\t- RegistryIdx.sol#417-431\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.increase uses assembly (RegistryIdx.sol#451-477)\n\t- RegistryIdx.sol#454-476\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.decrease uses assembly (RegistryIdx.sol#479-505)\n\t- RegistryIdx.sol#482-504\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 531,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.by uses assembly (RegistryIdx.sol#507-531)\n\t- RegistryIdx.sol#517-531\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt > uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.byMaximum uses assembly (RegistryIdx.sol#534-560)\n\t- RegistryIdx.sol#546-560\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.emitting uses assembly (RegistryIdx.sol#564-587)\n\t- RegistryIdx.sol#566-587\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#589-622)\n\t- RegistryIdx.sol#590-622\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#624-659)\n\t- RegistryIdx.sol#625-659\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": 697,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#661-697)\n\t- RegistryIdx.sol#662-697\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#699-736)\n\t- RegistryIdx.sol#700-736\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": 776,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#738-776)\n\t- RegistryIdx.sol#739-776\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": 803,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.paying uses assembly (RegistryIdx.sol#780-803)\n\t- RegistryIdx.sol#782-803\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": 829,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _amount;\n",
                    "message": "Contract.pay uses assembly (RegistryIdx.sol#806-829)\n\t- RegistryIdx.sol#807-828\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.toAcc uses assembly (RegistryIdx.sol#832-847)\n\t- RegistryIdx.sol#833-847\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": 852,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected uses assembly (RegistryIdx.sol#850-852)\n\t- RegistryIdx.sol#851-852\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 861,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted uses assembly (RegistryIdx.sol#855-861)\n\t- RegistryIdx.sol#860-861\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored uses assembly (RegistryIdx.sol#864-870)\n\t- RegistryIdx.sol#869-870\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": 879,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid uses assembly (RegistryIdx.sol#873-879)\n\t- RegistryIdx.sol#878-879\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 897,
                    "vulnerability_to_line": 899,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr uses assembly (RegistryIdx.sol#897-899)\n\t- RegistryIdx.sol#898-899\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 901,
                    "vulnerability_to_line": 903,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr uses assembly (RegistryIdx.sol#901-903)\n\t- RegistryIdx.sol#902-903\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": 907,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr uses assembly (RegistryIdx.sol#905-907)\n\t- RegistryIdx.sol#906-907\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryIdx.sol:\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#46): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#884): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#893): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#912): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": "Parameter '_script_exec' of Contract.authorize (RegistryIdx.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checks(function () pure _check) conditions(validState, validState) internal pure {\n",
                    "message": "Parameter '_check' of Contract.checks (RegistryIdx.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": "Parameter '_location' of Contract.read (RegistryIdx.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": "Parameter '_field' of Contract.set (RegistryIdx.sol#390) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '' of Contract.to (RegistryIdx.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (RegistryIdx.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (RegistryIdx.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (RegistryIdx.sol#439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (RegistryIdx.sol#439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (RegistryIdx.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (RegistryIdx.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.increase (RegistryIdx.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.decrease (RegistryIdx.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.by (RegistryIdx.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.by (RegistryIdx.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.byMaximum (RegistryIdx.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.byMaximum (RegistryIdx.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": "Parameter '_amount' of Contract.pay (RegistryIdx.sol#806) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": "Parameter '' of Contract.toAcc (RegistryIdx.sol#832) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 887,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 exec_id, bytes32 location) external view returns (bytes32 data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.read (RegistryIdx.sol#887) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 888,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 exec_id, bytes32[] locations) external view returns (bytes32[] data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.readMulti (RegistryIdx.sol#888) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 924,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execPermissions(address _exec) internal pure returns (bytes32)\n",
                    "message": "Parameter '_exec' of RegistryIdx.execPermissions (RegistryIdx.sol#924) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 940,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registeredApps(address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.registeredApps (RegistryIdx.sol#940) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.appBase (RegistryIdx.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 944,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.appBase (RegistryIdx.sol#944) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionList(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.appVersionList (RegistryIdx.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionList(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.appVersionList (RegistryIdx.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionBase (RegistryIdx.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionBase (RegistryIdx.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionBase (RegistryIdx.sol#952) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionIndex (RegistryIdx.sol#956) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionIndex (RegistryIdx.sol#956) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionIndex (RegistryIdx.sol#956) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionSelectors (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionSelectors (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionSelectors (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionAddresses (RegistryIdx.sol#964) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionAddresses (RegistryIdx.sol#964) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 964,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionAddresses (RegistryIdx.sol#964) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getApplications(address _storage, bytes32 _exec_id, address _provider) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_storage' of RegistryIdx.getApplications (RegistryIdx.sol#968) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getApplications(address _storage, bytes32 _exec_id, address _provider) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getApplications (RegistryIdx.sol#968) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getApplications(address _storage, bytes32 _exec_id, address _provider) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_provider' of RegistryIdx.getApplications (RegistryIdx.sol#968) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_storage' of RegistryIdx.getVersions (RegistryIdx.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getVersions (RegistryIdx.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_provider' of RegistryIdx.getVersions (RegistryIdx.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_app' of RegistryIdx.getVersions (RegistryIdx.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_storage' of RegistryIdx.getLatestVersion (RegistryIdx.sol#996) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getLatestVersion (RegistryIdx.sol#996) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_provider' of RegistryIdx.getLatestVersion (RegistryIdx.sol#996) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 996,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_app' of RegistryIdx.getLatestVersion (RegistryIdx.sol#996) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_storage' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_provider' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_app' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_version' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#1008) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
                    "message": "Contract.THROWS (RegistryIdx.sol#301) is never used in Contract\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 897,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 901,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!authorized)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (stored() != 0 || currentAction() == STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (emitted() != 0 || currentAction() == EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (paid() != 0 || currentAction() == PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.STORE_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_AMT)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.EMIT_LOG)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (expected() == NextFunction.VAL_DEC)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() == NextFunction.VAL_DEC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validState() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function startBuffer() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 897,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 901,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize() internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    data = keccak256(_location, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 925,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_exec, EXEC_PERMISSIONS); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 941,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(bytes32(_provider), 'app_list'); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(_provider), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 945,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(_provider), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 949,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('versions', appBase(_app, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_version, 'version', appBase(_app, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 957,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('index', versionBase(_app, _version, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 961,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('selectors', versionBase(_app, _version, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 965,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('addresses', versionBase(_app, _version, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0xc0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0x40) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { action := mload(0xe0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { exec_id := mload(0x80) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { addr := mload(0xa0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data := sload(data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { next := mload(0x100) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_emitted := mload(0x140) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_stored := mload(0x120) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_paid := mload(0x160) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 898,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 902,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 906,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/registry/RegistryExec.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_storage != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != 0, 'Invalid response from storage');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_65"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 121,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "ScriptExec.exec (RegistryExec.sol#102-121) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExec.sol#110)\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExec.sol#120)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 131,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction (RegistryExec.sol#126-131) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn (RegistryExec.sol#157-171) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n\n    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n\n    (exec_id, version) = StorageInterface(app_storage).createInstance(\n\n      msg.sender, _app_name, provider, registry_exec_id, _init_calldata\n\n    );\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    app_instances[_app_name].push(exec_id);\n\n    Instance memory inst = Instance(\n\n      provider, registry_exec_id, exec_id, _app_name, version\n\n    );\n\n    instance_info[exec_id] = inst;\n\n    deployed_instances[msg.sender].push(inst);\n\n    // Emit event -\n\n    emit AppInstanceCreated(msg.sender, exec_id, _app_name, version);\n",
                    "message": "Reentrancy in ScriptExec.createAppInstance (RegistryExec.sol#183-198):\n\tExternal calls:\n\t- (exec_id,version) = StorageInterface(app_storage).createInstance(msg.sender,_app_name,provider,registry_exec_id,_init_calldata) (RegistryExec.sol#185-187)\n\tState variables written after the call(s):\n\t- app_instances (RegistryExec.sol#190)\n\t- deployed_by (RegistryExec.sol#189)\n\t- deployed_instances (RegistryExec.sol#195)\n\t- instance_info (RegistryExec.sol#194)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n\n    // Validate input -\n\n    require(_index != 0 && _implementation != 0, 'Invalid input');\n\n\n\n    // Creates a registry from storage and returns the registry exec id -\n\n    exec_id = StorageInterface(app_storage).createRegistry(_index, _implementation);\n\n\n\n    // Ensure a valid execution id returned from storage -\n\n    require(exec_id != 0, 'Invalid response from storage');\n\n\n\n    // If there is not already a default registry exec id set, set it\n\n    if (registry_exec_id == 0)\n\n      registry_exec_id = exec_id;\n\n\n\n    // Create Registry struct in memory -\n\n    Registry memory reg = Registry(_index, _implementation);\n\n\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    registry_instance_info[exec_id] = reg;\n\n    deployed_registry_instances[msg.sender].push(reg);\n\n    // Emit event -\n\n    emit RegistryInstanceCreated(msg.sender, exec_id, _index, _implementation);\n",
                    "message": "Reentrancy in RegistryExec.createRegistryInstance (RegistryExec.sol#298-321):\n\tExternal calls:\n\t- exec_id = StorageInterface(app_storage).createRegistry(_index,_implementation) (RegistryExec.sol#303)\n\tState variables written after the call(s):\n\t- deployed_by (RegistryExec.sol#316)\n\t- deployed_registry_instances (RegistryExec.sol#318)\n\t- registry_exec_id (RegistryExec.sol#310)\n\t- registry_instance_info (RegistryExec.sol#317)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 131,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction uses assembly (RegistryExec.sol#126-131)\n\t- RegistryExec.sol#127-131\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = ERR;\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(_exec_id, message);\n",
                    "message": "ScriptExec.checkErrors uses assembly (RegistryExec.sol#134-154)\n\t- RegistryExec.sol#138-150\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn uses assembly (RegistryExec.sol#157-171)\n\t- RegistryExec.sol#159-170\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": "ScriptExec.fallback (RegistryExec.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n\n    require(_app_storage != 0, 'Invalid input');\n\n    exec_admin = _exec_admin;\n\n    app_storage = _app_storage;\n\n    provider = _provider;\n\n\n\n    if (exec_admin == 0)\n\n      exec_admin = msg.sender;\n",
                    "message": "ScriptExec.configure (RegistryExec.sol#81-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n\n    registry_exec_id = _exec_id;\n",
                    "message": "ScriptExec.setRegistryExecID (RegistryExec.sol#206-208) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n\n    provider = _provider;\n",
                    "message": "ScriptExec.setProvider (RegistryExec.sol#214-216) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 222,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n\n    require(_admin != 0);\n\n    exec_admin = _admin;\n",
                    "message": "ScriptExec.setAdmin (RegistryExec.sol#219-222) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": 229,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n\n    return app_instances[_app_name];\n",
                    "message": "ScriptExec.getInstances (RegistryExec.sol#227-229) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": 238,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n\n    return deployed_instances[_deployer].length;\n",
                    "message": "ScriptExec.getDeployedLength (RegistryExec.sol#236-238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "  function getRegistryImplementation() public view returns (address indx, address implementation) {\n\n    indx = StorageInterface(app_storage).getIndex(registry_exec_id);\n\n    implementation = StorageInterface(app_storage).getTarget(registry_exec_id, REGISTER_APP_SEL);\n",
                    "message": "ScriptExec.getRegistryImplementation (RegistryExec.sol#248-251) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": 267,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n\n  returns (address index, bytes4[] memory functions, address[] memory implementations) {\n\n    Instance memory app = instance_info[_exec_id];\n\n    index = StorageInterface(app_storage).getIndex(app.current_registry_exec_id);\n\n    (index, functions, implementations) = RegistryInterface(index).getVersionImplementation(\n\n      app_storage, app.current_registry_exec_id, app.current_provider, app.app_name, app.version_name\n\n    );\n",
                    "message": "ScriptExec.getInstanceImplementation (RegistryExec.sol#260-267) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryExec.sol:\n\t- pragma solidity^0.4.23 (RegistryExec.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#18): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#29): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#272): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 121,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in ScriptExec.exec (RegistryExec.sol#102-121):\n\t-address(app_storage).call.value(msg.value)(abi.encodeWithSelector(EXEC_SEL,msg.sender,_exec_id,_calldata)) == false RegistryExec.sol#104-112\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (RegistryExec.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (RegistryExec.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (RegistryExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (RegistryExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (RegistryExec.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_exec_admin' of ScriptExec.configure (RegistryExec.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_app_storage' of ScriptExec.configure (RegistryExec.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_provider' of ScriptExec.configure (RegistryExec.sol#81) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.exec (RegistryExec.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_calldata' of ScriptExec.exec (RegistryExec.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.checkErrors (RegistryExec.sol#134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.createAppInstance (RegistryExec.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_init_calldata' of ScriptExec.createAppInstance (RegistryExec.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.setRegistryExecID (RegistryExec.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n",
                    "message": "Parameter '_provider' of ScriptExec.setProvider (RegistryExec.sol#214) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n",
                    "message": "Parameter '_admin' of ScriptExec.setAdmin (RegistryExec.sol#219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.getInstances (RegistryExec.sol#227) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n",
                    "message": "Parameter '_deployer' of ScriptExec.getDeployedLength (RegistryExec.sol#236) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n",
                    "message": "Parameter '_exec_id' of ScriptExec.getInstanceImplementation (RegistryExec.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public app_storage;\n",
                    "message": "Variable 'ScriptExec.app_storage' (RegistryExec.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public registry_exec_id;\n",
                    "message": "Variable 'ScriptExec.registry_exec_id' (RegistryExec.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public exec_admin;\n",
                    "message": "Variable 'ScriptExec.exec_admin' (RegistryExec.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => address) public deployed_by;\n",
                    "message": "Variable 'ScriptExec.deployed_by' (RegistryExec.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Instance) public instance_info;\n",
                    "message": "Variable 'ScriptExec.instance_info' (RegistryExec.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Instance[]) public deployed_instances;\n",
                    "message": "Variable 'ScriptExec.deployed_instances' (RegistryExec.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => bytes32[]) public app_instances;\n",
                    "message": "Variable 'ScriptExec.app_instances' (RegistryExec.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
                    "message": "Parameter '_index' of RegistryExec.createRegistryInstance (RegistryExec.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
                    "message": "Parameter '_implementation' of RegistryExec.createRegistryInstance (RegistryExec.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_app_name' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_index' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_selectors' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_implementations' of RegistryExec.registerApp (RegistryExec.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_app_name' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_version_name' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_index' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_selectors' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_implementations' of RegistryExec.registerAppVersion (RegistryExec.sol#355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Registry) public registry_instance_info;\n",
                    "message": "Variable 'RegistryExec.registry_instance_info' (RegistryExec.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Registry[]) public deployed_registry_instances;\n",
                    "message": "Variable 'RegistryExec.deployed_registry_instances' (RegistryExec.sol#284) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/registry/features/Provider.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1017,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1017,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected Contract.execute()');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - stores');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - emits');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - pays');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_INC or VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"app is already registered\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 936,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"invalid input arrays\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 989,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"App has not been registered\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 992,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Version already exists\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 997,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert(\"Invalid input array lengths\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_SET &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_INC &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_DEC\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1017,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 312,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_104"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are nonzero -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize (Provider.sol#71-108) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize (Provider.sol#119-139) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit (Provider.sol#155-167) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr (Provider.sol#183-185) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem (Provider.sol#188-190) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction (Provider.sol#193-198) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer (Provider.sol#219-232) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID (Provider.sol#276-279) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender (Provider.sol#282-285) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read (Provider.sol#291-294) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      // SWC-Code With No Effects: L334\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.storing (Provider.sol#363-387) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _field;\n",
                    "message": "Contract.set (Provider.sol#390-413) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.to (Provider.sol#416-431) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.increase (Provider.sol#451-477) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.decrease (Provider.sol#479-505) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 531,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.by (Provider.sol#507-531) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt > uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.byMaximum (Provider.sol#534-560) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.emitting (Provider.sol#564-587) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Provider.sol#589-622) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Provider.sol#624-659) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": 697,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Provider.sol#661-697) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Provider.sol#699-736) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": 776,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log (Provider.sol#738-776) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": 803,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.paying (Provider.sol#780-803) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": 829,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _amount;\n",
                    "message": "Contract.pay (Provider.sol#806-829) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.toAcc (Provider.sol#832-847) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": 852,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected (Provider.sol#850-852) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 861,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted (Provider.sol#855-861) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored (Provider.sol#864-870) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": 879,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid (Provider.sol#873-879) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 108,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are nonzero -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize uses assembly (Provider.sol#71-108)\n\t- Provider.sol#77-91\n\t- Provider.sol#95-106\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 139,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize uses assembly (Provider.sol#119-139)\n\t- Provider.sol#124-138\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit uses assembly (Provider.sol#155-167)\n\t- Provider.sol#160-167\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr uses assembly (Provider.sol#183-185)\n\t- Provider.sol#184-185\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 190,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem uses assembly (Provider.sol#188-190)\n\t- Provider.sol#189-190\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": 198,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction uses assembly (Provider.sol#193-198)\n\t- Provider.sol#197-198\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer uses assembly (Provider.sol#219-232)\n\t- Provider.sol#220-232\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 279,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID uses assembly (Provider.sol#276-279)\n\t- Provider.sol#277-278\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender uses assembly (Provider.sol#282-285)\n\t- Provider.sol#283-284\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read uses assembly (Provider.sol#291-294)\n\t- Provider.sol#293-294\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 387,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      // SWC-Code With No Effects: L334\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.storing uses assembly (Provider.sol#363-387)\n\t- Provider.sol#365-387\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _field;\n",
                    "message": "Contract.set uses assembly (Provider.sol#390-413)\n\t- Provider.sol#391-412\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.to uses assembly (Provider.sol#416-431)\n\t- Provider.sol#417-431\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.increase uses assembly (Provider.sol#451-477)\n\t- Provider.sol#454-476\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 505,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return val;\n",
                    "message": "Contract.decrease uses assembly (Provider.sol#479-505)\n\t- Provider.sol#482-504\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 531,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.by uses assembly (Provider.sol#507-531)\n\t- Provider.sol#517-531\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": 560,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt > uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.byMaximum uses assembly (Provider.sol#534-560)\n\t- Provider.sol#546-560\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.emitting uses assembly (Provider.sol#564-587)\n\t- Provider.sol#566-587\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": 622,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Provider.sol#589-622)\n\t- Provider.sol#590-622\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": 659,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Provider.sol#624-659)\n\t- Provider.sol#625-659\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": 697,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Provider.sol#661-697)\n\t- Provider.sol#662-697\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": 736,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Provider.sol#699-736)\n\t- Provider.sol#700-736\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": 776,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.log uses assembly (Provider.sol#738-776)\n\t- Provider.sol#739-776\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": 803,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      mstore(0xe0, action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.paying uses assembly (Provider.sol#780-803)\n\t- Provider.sol#782-803\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": 829,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n\n    return _amount;\n",
                    "message": "Contract.pay uses assembly (Provider.sol#806-829)\n\t- Provider.sol#807-828\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": 847,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // If the free-memory pointer does not point beyond the buffer's current size, update it\n\n      if lt(mload(0x40), add(0x20, add(ptr, mload(ptr)))) {\n\n        mstore(0x40, add(0x20, add(ptr, mload(ptr))))\n\n      }\n\n    }\n",
                    "message": "Contract.toAcc uses assembly (Provider.sol#832-847)\n\t- Provider.sol#833-847\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": 852,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected uses assembly (Provider.sol#850-852)\n\t- Provider.sol#851-852\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": 861,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted uses assembly (Provider.sol#855-861)\n\t- Provider.sol#860-861\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": 870,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored uses assembly (Provider.sol#864-870)\n\t- Provider.sol#869-870\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": 879,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid uses assembly (Provider.sol#873-879)\n\t- Provider.sol#878-879\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Provider.sol:\n\t- pragma solidity^0.4.23 (Provider.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (Provider.sol#46): it allows old versions\n\t- pragma solidity^0.4.23 (Provider.sol#884): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": "Parameter '_script_exec' of Contract.authorize (Provider.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checks(function () pure _check) conditions(validState, validState) internal pure {\n",
                    "message": "Parameter '_check' of Contract.checks (Provider.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": "Parameter '_location' of Contract.read (Provider.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": "Parameter '_field' of Contract.set (Provider.sol#390) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '' of Contract.to (Provider.sol#416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Provider.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Provider.sol#434) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Provider.sol#439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Provider.sol#439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Provider.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Provider.sol#444) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.increase (Provider.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.decrease (Provider.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.by (Provider.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.by (Provider.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.byMaximum (Provider.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.byMaximum (Provider.sol#534) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": "Parameter '_amount' of Contract.pay (Provider.sol#806) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": "Parameter '' of Contract.toAcc (Provider.sol#832) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.appBase (Provider.sol#895) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionList(bytes32 _app) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.appVersionList (Provider.sol#899) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionBase (Provider.sol#903) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 903,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionBase (Provider.sol#903) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 907,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionIndex (Provider.sol#907) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 907,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionIndex (Provider.sol#907) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionSelectors (Provider.sol#911) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionSelectors (Provider.sol#911) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionAddresses (Provider.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionAddresses (Provider.sol#915) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function previousVersion(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.previousVersion (Provider.sol#919) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 919,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function previousVersion(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.previousVersion (Provider.sol#919) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 923,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionListAt(bytes32 _app, uint _index) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.appVersionListAt (Provider.sol#923) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 923,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionListAt(bytes32 _app, uint _index) internal pure returns (bytes32)\n",
                    "message": "Parameter '_index' of Provider.appVersionListAt (Provider.sol#923) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_app' of Provider.registerApp (Provider.sol#927) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_index' of Provider.registerApp (Provider.sol#927) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_selectors' of Provider.registerApp (Provider.sol#927) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_implementations' of Provider.registerApp (Provider.sol#927) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_app' of Provider.registerAppVersion (Provider.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_version' of Provider.registerAppVersion (Provider.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_index' of Provider.registerAppVersion (Provider.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_selectors' of Provider.registerAppVersion (Provider.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_implementations' of Provider.registerAppVersion (Provider.sol#982) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
                    "message": "Contract.THROWS (Provider.sol#301) is never used in Contract\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1017,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1017,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!authorized)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (stored() != 0 || currentAction() == STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (emitted() != 0 || currentAction() == EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (paid() != 0 || currentAction() == PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.STORE_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_AMT)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.EMIT_LOG)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (expected() == NextFunction.VAL_DEC)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() == NextFunction.VAL_DEC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (Contract.read(appBase(_app)) != bytes32(0))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (_selectors.length != _implementations.length || _selectors.length == 0)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 988,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (Contract.read(appBase(_app)) == bytes32(0))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 991,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (Contract.read(versionBase(_app, _version)) != bytes32(0))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 994,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validState() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function startBuffer() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 661,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 738,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 780,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 806,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 832,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registeredApps() internal pure returns (bytes32)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 895,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app) internal pure returns (bytes32)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize() internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    data = keccak256(_location, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 892,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(bytes32(Contract.sender()), 'app_list'); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(Contract.sender()), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(Contract.sender()), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 900,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('versions', appBase(_app)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_version, 'version', appBase(_app)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('index', versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('selectors', versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('addresses', versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(\"previous version\", versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0xc0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0x40) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { action := mload(0xe0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { exec_id := mload(0x80) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { addr := mload(0xa0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data := sload(data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 566,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 662,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 700,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 739,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 833,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { next := mload(0x100) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_emitted := mload(0x140) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 869,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_stored := mload(0x120) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_paid := mload(0x160) }\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/lib/ArrayUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr (ArrayUtils.sol#7-9) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr (ArrayUtils.sol#11-13) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr (ArrayUtils.sol#15-17) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr uses assembly (ArrayUtils.sol#7-9)\n\t- ArrayUtils.sol#8-9\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr uses assembly (ArrayUtils.sol#11-13)\n\t- ArrayUtils.sol#12-13\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr uses assembly (ArrayUtils.sol#15-17)\n\t- ArrayUtils.sol#16-17\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ArrayUtils.sol:\n\t- pragma solidity^0.4.23 (ArrayUtils.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/lib/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity^0.4.23 (SafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/lib/StringUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n\n    assembly {\n\n      str := mload(0x40)\n\n      mstore(str, 0x20)\n\n      mstore(add(0x20, str), _val)\n\n      mstore(0x40, add(0x40, str))\n\n    }\n",
                    "message": "StringUtils.toStr (StringUtils.sol#7-14) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n\n    assembly {\n\n      str := mload(0x40)\n\n      mstore(str, 0x20)\n\n      mstore(add(0x20, str), _val)\n\n      mstore(0x40, add(0x40, str))\n\n    }\n",
                    "message": "StringUtils.toStr uses assembly (StringUtils.sol#7-14)\n\t- StringUtils.sol#8-14\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in StringUtils.sol:\n\t- pragma solidity^0.4.23 (StringUtils.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/GetterInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in GetterInterface.sol:\n\t- pragma solidity^0.4.23 (GetterInterface.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 exec_id, bytes32 location) external view returns (bytes32 data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.read (GetterInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 exec_id, bytes32[] locations) external view returns (bytes32[] data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.readMulti (GetterInterface.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/RegistryInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryInterface.sol:\n\t- pragma solidity^0.4.23 (RegistryInterface.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (RegistryInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (RegistryInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (RegistryInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-cebb1089c417a8e26bd97a44f7234bdb9d0bd781/contracts/interfaces/StorageInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in StorageInterface.sol:\n\t- pragma solidity^0.4.23 (StorageInterface.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (StorageInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (StorageInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (StorageInterface.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (StorageInterface.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (StorageInterface.sol#12) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/test/utils/MintedCappedUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_70"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 71,
                    "vulnerability_code": "contract MintedCappedUtils {\n\n\n\n  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](19);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateTierMinimum.selector;\n\n    selectors[3] = this.createCrowdsaleTiers.selector;\n\n    selectors[4] = this.whitelistMultiForTier.selector;\n\n    selectors[5] = this.updateTierDuration.selector;\n\n\n\n    selectors[6] = this.initCrowdsaleToken.selector;\n\n    selectors[7] = this.setTransferAgentStatus.selector;\n\n    selectors[8] = this.updateMultipleReservedTokens.selector;\n\n    selectors[9] = this.removeReservedTokens.selector;\n\n    selectors[10] = this.distributeReservedTokens.selector;\n\n    selectors[11] = this.finalizeCrowdsaleAndToken.selector;\n\n    selectors[12] = this.finalizeAndDistributeToken.selector;\n\n\n\n    selectors[13] = this.buy.selector;\n\n\n\n    selectors[14] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[15] = this.transferFrom.selector;\n\n    selectors[16] = this.approve.selector;\n\n    selectors[17] = this.increaseApproval.selector;\n\n    selectors[18] = this.decreaseApproval.selector;\n\n  }\n\n\n\n  // SaleManager\n\n  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n\n  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function whitelistMultiForTier(uint, address[], uint[], uint[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  // TokenManager\n\n  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n\n  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n\n  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n\n  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Sale\n\n  function buy() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Token\n\n  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n\n  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  function init(\n\n    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n\n  }\n\n\n\n\n",
                    "message": "MintedCappedUtils (MintedCappedUtils.sol#5-71) has incorrect ERC20 function interface(s):\n\t-transfer (MintedCappedUtils.sol#58)\n\t-transferFrom (MintedCappedUtils.sol#59)\n\t-approve (MintedCappedUtils.sol#60)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](19);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateTierMinimum.selector;\n\n    selectors[3] = this.createCrowdsaleTiers.selector;\n\n    selectors[4] = this.whitelistMultiForTier.selector;\n\n    selectors[5] = this.updateTierDuration.selector;\n\n\n\n    selectors[6] = this.initCrowdsaleToken.selector;\n\n    selectors[7] = this.setTransferAgentStatus.selector;\n\n    selectors[8] = this.updateMultipleReservedTokens.selector;\n\n    selectors[9] = this.removeReservedTokens.selector;\n\n    selectors[10] = this.distributeReservedTokens.selector;\n\n    selectors[11] = this.finalizeCrowdsaleAndToken.selector;\n\n    selectors[12] = this.finalizeAndDistributeToken.selector;\n\n\n\n    selectors[13] = this.buy.selector;\n\n\n\n    selectors[14] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[15] = this.transferFrom.selector;\n\n    selectors[16] = this.approve.selector;\n\n    selectors[17] = this.increaseApproval.selector;\n\n    selectors[18] = this.decreaseApproval.selector;\n",
                    "message": "MintedCappedUtils.getSelectors (MintedCappedUtils.sol#7-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.initializeCrowdsale (MintedCappedUtils.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.finalizeCrowdsale (MintedCappedUtils.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.updateTierMinimum (MintedCappedUtils.sol#37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 39,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38-39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40-41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.updateTierDuration (MintedCappedUtils.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.setTransferAgentStatus (MintedCappedUtils.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47-48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.removeReservedTokens (MintedCappedUtils.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.distributeReservedTokens (MintedCappedUtils.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.finalizeCrowdsaleAndToken (MintedCappedUtils.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.finalizeAndDistributeToken (MintedCappedUtils.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.buy (MintedCappedUtils.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.transfer (MintedCappedUtils.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.approve (MintedCappedUtils.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.increaseApproval (MintedCappedUtils.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedUtils.decreaseApproval (MintedCappedUtils.sol#62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "  function init(\n\n    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "MintedCappedUtils.init (MintedCappedUtils.sol#64-68) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MintedCappedUtils.sol:\n\t- pragma solidity^0.4.23 (MintedCappedUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.updateTierMinimum (MintedCappedUtils.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.updateTierMinimum (MintedCappedUtils.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_1' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_2' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_3' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_4' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_5' of MintedCappedUtils.createCrowdsaleTiers (MintedCappedUtils.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '_scope_1' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '_scope_2' of MintedCappedUtils.whitelistMultiForTier (MintedCappedUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.updateTierDuration (MintedCappedUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.updateTierDuration (MintedCappedUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of MintedCappedUtils.initCrowdsaleToken (MintedCappedUtils.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.setTransferAgentStatus (MintedCappedUtils.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.setTransferAgentStatus (MintedCappedUtils.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '_scope_1' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '_scope_2' of MintedCappedUtils.updateMultipleReservedTokens (MintedCappedUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.removeReservedTokens (MintedCappedUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.distributeReservedTokens (MintedCappedUtils.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.transfer (MintedCappedUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.transfer (MintedCappedUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of MintedCappedUtils.transferFrom (MintedCappedUtils.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.approve (MintedCappedUtils.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.approve (MintedCappedUtils.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.increaseApproval (MintedCappedUtils.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.increaseApproval (MintedCappedUtils.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedUtils.decreaseApproval (MintedCappedUtils.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.decreaseApproval (MintedCappedUtils.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_0' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_1' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_2' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_3' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_4' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_5' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_6' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_7' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_8' of MintedCappedUtils.init (MintedCappedUtils.sol#65) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/test/utils/RegistryUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerApp (RegistryUtil.sol#7-9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerAppVersion (RegistryUtil.sol#11-13) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryUtil.sol:\n\t- pragma solidity^0.4.23 (RegistryUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_3' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/test/utils/TimeMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function getTime() internal view returns (uint time) {\n\n    assembly { time := sload(2) }\n\n    time = time == 0 ? now : time;\n",
                    "message": "TimeMock.getTime (TimeMock.sol#7-10) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function getTime() internal view returns (uint time) {\n\n    assembly { time := sload(2) }\n\n    time = time == 0 ? now : time;\n",
                    "message": "TimeMock.getTime uses assembly (TimeMock.sol#7-10)\n\t- TimeMock.sol#8-9\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in TimeMock.sol:\n\t- pragma solidity^0.4.23 (TimeMock.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTime() internal view returns (uint time) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { time := sload(2) }\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/test/utils/token/MintedCappedTokenMockUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_79"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 82,
                    "vulnerability_code": "contract MintedCappedTokenMockUtils {\n\n\n\n  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](23);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateTierMinimum.selector;\n\n    selectors[3] = this.createCrowdsaleTiers.selector;\n\n    selectors[4] = this.whitelistMultiForTier.selector;\n\n    selectors[5] = this.updateTierDuration.selector;\n\n\n\n    selectors[6] = this.initCrowdsaleToken.selector;\n\n    selectors[7] = this.setTransferAgentStatus.selector;\n\n    selectors[8] = this.updateMultipleReservedTokens.selector;\n\n    selectors[9] = this.removeReservedTokens.selector;\n\n    selectors[10] = this.distributeReservedTokens.selector;\n\n    selectors[11] = this.finalizeCrowdsaleAndToken.selector;\n\n    selectors[12] = this.finalizeAndDistributeToken.selector;\n\n\n\n    selectors[13] = this.buy.selector;\n\n\n\n    selectors[14] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[15] = this.transferFrom.selector;\n\n    selectors[16] = this.approve.selector;\n\n    selectors[17] = this.increaseApproval.selector;\n\n    selectors[18] = this.decreaseApproval.selector;\n\n\n\n    selectors[19] = this.setBalance.selector;\n\n    selectors[20] = this.unlockToken.selector;\n\n    selectors[21] = this.setTransferAgent.selector;\n\n    selectors[22] = this.setTotalSold.selector;\n\n  }\n\n\n\n  // Mock\n\n  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function unlockToken() public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n\n  function setTotalSold(uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  // SaleManager\n\n  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n\n  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function whitelistMultiForTier(uint, address[], uint[], uint[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  // TokenManager\n\n  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n\n  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n\n      public pure returns (bytes) { return msg.data; }\n\n  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n\n  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n\n  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Sale\n\n  function buy() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Token\n\n  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n\n  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  function init(\n\n    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n\n  }\n\n\n\n\n",
                    "message": "MintedCappedTokenMockUtils (MintedCappedTokenMockUtils.sol#5-82) has incorrect ERC20 function interface(s):\n\t-transfer (MintedCappedTokenMockUtils.sol#69)\n\t-transferFrom (MintedCappedTokenMockUtils.sol#70)\n\t-approve (MintedCappedTokenMockUtils.sol#71)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](23);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateTierMinimum.selector;\n\n    selectors[3] = this.createCrowdsaleTiers.selector;\n\n    selectors[4] = this.whitelistMultiForTier.selector;\n\n    selectors[5] = this.updateTierDuration.selector;\n\n\n\n    selectors[6] = this.initCrowdsaleToken.selector;\n\n    selectors[7] = this.setTransferAgentStatus.selector;\n\n    selectors[8] = this.updateMultipleReservedTokens.selector;\n\n    selectors[9] = this.removeReservedTokens.selector;\n\n    selectors[10] = this.distributeReservedTokens.selector;\n\n    selectors[11] = this.finalizeCrowdsaleAndToken.selector;\n\n    selectors[12] = this.finalizeAndDistributeToken.selector;\n\n\n\n    selectors[13] = this.buy.selector;\n\n\n\n    selectors[14] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[15] = this.transferFrom.selector;\n\n    selectors[16] = this.approve.selector;\n\n    selectors[17] = this.increaseApproval.selector;\n\n    selectors[18] = this.decreaseApproval.selector;\n\n\n\n    selectors[19] = this.setBalance.selector;\n\n    selectors[20] = this.unlockToken.selector;\n\n    selectors[21] = this.setTransferAgent.selector;\n\n    selectors[22] = this.setTotalSold.selector;\n",
                    "message": "MintedCappedTokenMockUtils.getSelectors (MintedCappedTokenMockUtils.sol#7-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.setBalance (MintedCappedTokenMockUtils.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unlockToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.unlockToken (MintedCappedTokenMockUtils.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.setTransferAgent (MintedCappedTokenMockUtils.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTotalSold(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.setTotalSold (MintedCappedTokenMockUtils.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.initializeCrowdsale (MintedCappedTokenMockUtils.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.finalizeCrowdsale (MintedCappedTokenMockUtils.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.updateTierMinimum (MintedCappedTokenMockUtils.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49-50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "MintedCappedTokenMockUtils.whitelistMultiForTier (MintedCappedTokenMockUtils.sol#51-52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.updateTierDuration (MintedCappedTokenMockUtils.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.initCrowdsaleToken (MintedCappedTokenMockUtils.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.setTransferAgentStatus (MintedCappedTokenMockUtils.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "MintedCappedTokenMockUtils.updateMultipleReservedTokens (MintedCappedTokenMockUtils.sol#58-59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.removeReservedTokens (MintedCappedTokenMockUtils.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.distributeReservedTokens (MintedCappedTokenMockUtils.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.finalizeCrowdsaleAndToken (MintedCappedTokenMockUtils.sol#62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.finalizeAndDistributeToken (MintedCappedTokenMockUtils.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.buy (MintedCappedTokenMockUtils.sol#66) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.transfer (MintedCappedTokenMockUtils.sol#69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.transferFrom (MintedCappedTokenMockUtils.sol#70) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.approve (MintedCappedTokenMockUtils.sol#71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.increaseApproval (MintedCappedTokenMockUtils.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "MintedCappedTokenMockUtils.decreaseApproval (MintedCappedTokenMockUtils.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": 79,
                    "vulnerability_code": "  function init(\n\n    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#75-79) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MintedCappedTokenMockUtils.sol:\n\t- pragma solidity^0.4.23 (MintedCappedTokenMockUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.setBalance (MintedCappedTokenMockUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.setBalance (MintedCappedTokenMockUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.setTransferAgent (MintedCappedTokenMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.setTransferAgent (MintedCappedTokenMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTotalSold(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.setTotalSold (MintedCappedTokenMockUtils.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.updateTierMinimum (MintedCappedTokenMockUtils.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.updateTierMinimum (MintedCappedTokenMockUtils.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_1' of MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_2' of MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_3' of MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_4' of MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": "Parameter '_scope_5' of MintedCappedTokenMockUtils.createCrowdsaleTiers (MintedCappedTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.whitelistMultiForTier (MintedCappedTokenMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.whitelistMultiForTier (MintedCappedTokenMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '_scope_1' of MintedCappedTokenMockUtils.whitelistMultiForTier (MintedCappedTokenMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": "Parameter '_scope_2' of MintedCappedTokenMockUtils.whitelistMultiForTier (MintedCappedTokenMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.updateTierDuration (MintedCappedTokenMockUtils.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.updateTierDuration (MintedCappedTokenMockUtils.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.initCrowdsaleToken (MintedCappedTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.initCrowdsaleToken (MintedCappedTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of MintedCappedTokenMockUtils.initCrowdsaleToken (MintedCappedTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.setTransferAgentStatus (MintedCappedTokenMockUtils.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.setTransferAgentStatus (MintedCappedTokenMockUtils.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.updateMultipleReservedTokens (MintedCappedTokenMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.updateMultipleReservedTokens (MintedCappedTokenMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '_scope_1' of MintedCappedTokenMockUtils.updateMultipleReservedTokens (MintedCappedTokenMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": "Parameter '_scope_2' of MintedCappedTokenMockUtils.updateMultipleReservedTokens (MintedCappedTokenMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.removeReservedTokens (MintedCappedTokenMockUtils.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.distributeReservedTokens (MintedCappedTokenMockUtils.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.transfer (MintedCappedTokenMockUtils.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.transfer (MintedCappedTokenMockUtils.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.transferFrom (MintedCappedTokenMockUtils.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.transferFrom (MintedCappedTokenMockUtils.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of MintedCappedTokenMockUtils.transferFrom (MintedCappedTokenMockUtils.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.approve (MintedCappedTokenMockUtils.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.approve (MintedCappedTokenMockUtils.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.increaseApproval (MintedCappedTokenMockUtils.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.increaseApproval (MintedCappedTokenMockUtils.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.decreaseApproval (MintedCappedTokenMockUtils.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.decreaseApproval (MintedCappedTokenMockUtils.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_0' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_1' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_2' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_3' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_4' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_5' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_6' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_7' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32, uint, uint, uint, uint, bool, bool, address\n",
                    "message": "Parameter '_scope_8' of MintedCappedTokenMockUtils.init (MintedCappedTokenMockUtils.sol#76) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unlockToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTotalSold(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierMinimum(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createCrowdsaleTiers(bytes32[], uint[], uint[], uint[], uint[], bool[], bool[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMultiForTier(uint, address[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateTierDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateMultipleReservedTokens(address[], uint[], uint[], uint[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeReservedTokens(address) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function distributeReservedTokens(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsaleAndToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeAndDistributeToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/contracts/IMintedCapped.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_82"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in IMintedCapped.sol:\n\t- pragma solidity^0.4.23 (IMintedCapped.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (IMintedCapped.sol#32): it allows old versions\n\t- pragma solidity^0.4.23 (IMintedCapped.sol#40): it allows old versions\n\t- pragma solidity^0.4.23 (IMintedCapped.sol#76): it allows old versions\n\t- pragma solidity^0.4.23 (IMintedCapped.sol#90): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.balanceOf (IMintedCapped.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.allowance (IMintedCapped.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of IToken.allowance (IMintedCapped.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transfer (IMintedCapped.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transfer (IMintedCapped.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transferFrom (IMintedCapped.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transferFrom (IMintedCapped.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IToken.transferFrom (IMintedCapped.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.approve (IMintedCapped.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.approve (IMintedCapped.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.increaseApproval (IMintedCapped.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.increaseApproval (IMintedCapped.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.decreaseApproval (IMintedCapped.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.decreaseApproval (IMintedCapped.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.name (IMintedCapped.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.name (IMintedCapped.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.symbol (IMintedCapped.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.symbol (IMintedCapped.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '' of TokenIdx.decimals (IMintedCapped.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.decimals (IMintedCapped.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.totalSupply (IMintedCapped.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.totalSupply (IMintedCapped.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.balanceOf (IMintedCapped.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.balanceOf (IMintedCapped.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.balanceOf (IMintedCapped.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.allowance (IMintedCapped.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.allowance (IMintedCapped.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.allowance (IMintedCapped.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_2' of TokenIdx.allowance (IMintedCapped.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '' of ISaleManager.getCrowdsaleTier (IMintedCapped.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of ISaleManager.getTierWhitelist (IMintedCapped.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(uint) external view returns (uint, uint);\n",
                    "message": "Parameter '' of ISaleManager.getTierStartAndEndDates (IMintedCapped.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of ISaleManager.getWhitelistStatus (IMintedCapped.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of ISaleManager.getWhitelistStatus (IMintedCapped.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '' of SaleManagerIdx.getAdmin (IMintedCapped.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getAdmin (IMintedCapped.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, bool, bool);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleInfo (IMintedCapped.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, bool, bool);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleInfo (IMintedCapped.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.isCrowdsaleFull (IMintedCapped.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.isCrowdsaleFull (IMintedCapped.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleStartAndEndTimes (IMintedCapped.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleStartAndEndTimes (IMintedCapped.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentTierInfo(address, bytes32) external view returns (bytes32, uint, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCurrentTierInfo (IMintedCapped.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentTierInfo(address, bytes32) external view returns (bytes32, uint, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCurrentTierInfo (IMintedCapped.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(address, bytes32, uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleTier (IMintedCapped.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(address, bytes32, uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleTier (IMintedCapped.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(address, bytes32, uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getCrowdsaleTier (IMintedCapped.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(address, bytes32, uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of SaleManagerIdx.getTierWhitelist (IMintedCapped.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(address, bytes32, uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getTierWhitelist (IMintedCapped.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(address, bytes32, uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getTierWhitelist (IMintedCapped.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleMaxRaise(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleMaxRaise (IMintedCapped.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleMaxRaise(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleMaxRaise (IMintedCapped.sol#66) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTierList(address, bytes32) external view returns (bytes32[]);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleTierList (IMintedCapped.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTierList(address, bytes32) external view returns (bytes32[]);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleTierList (IMintedCapped.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleUniqueBuyers (IMintedCapped.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleUniqueBuyers (IMintedCapped.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(address, bytes32, uint) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getTierStartAndEndDates (IMintedCapped.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(address, bytes32, uint) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getTierStartAndEndDates (IMintedCapped.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(address, bytes32, uint) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getTierStartAndEndDates (IMintedCapped.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getTokensSold (IMintedCapped.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getTokensSold (IMintedCapped.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getWhitelistStatus (IMintedCapped.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getWhitelistStatus (IMintedCapped.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getWhitelistStatus (IMintedCapped.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_2' of SaleManagerIdx.getWhitelistStatus (IMintedCapped.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '' of ITokenManager.getReservedDestinationInfo (IMintedCapped.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedTokenDestinationList(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of TokenManagerIdx.getReservedTokenDestinationList (IMintedCapped.sol#84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedTokenDestinationList(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_0' of TokenManagerIdx.getReservedTokenDestinationList (IMintedCapped.sol#84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address, bytes32, address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '' of TokenManagerIdx.getReservedDestinationInfo (IMintedCapped.sol#85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address, bytes32, address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '_scope_0' of TokenManagerIdx.getReservedDestinationInfo (IMintedCapped.sol#85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address, bytes32, address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '_scope_1' of TokenManagerIdx.getReservedDestinationInfo (IMintedCapped.sol#85) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_0' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_1' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_2' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_3' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_4' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_5' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_6' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_7' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, bytes32, uint, uint, uint, uint, bool, bool, address) external;\n",
                    "message": "Parameter '_scope_8' of IMintedCapped.init (IMintedCapped.sol#96) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/contracts/classes/token/IToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in IToken.sol:\n\t- pragma solidity^0.4.23 (IToken.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.balanceOf (IToken.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.allowance (IToken.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of IToken.allowance (IToken.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transfer (IToken.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transfer (IToken.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transferFrom (IToken.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transferFrom (IToken.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IToken.transferFrom (IToken.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.approve (IToken.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.approve (IToken.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.increaseApproval (IToken.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.increaseApproval (IToken.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.decreaseApproval (IToken.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.decreaseApproval (IToken.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.name (IToken.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.name (IToken.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.symbol (IToken.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.symbol (IToken.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '' of TokenIdx.decimals (IToken.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.decimals (IToken.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.totalSupply (IToken.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.totalSupply (IToken.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.balanceOf (IToken.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.balanceOf (IToken.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.balanceOf (IToken.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_2' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/contracts/classes/sale/ISale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ISale.sol:\n\t- pragma solidity^0.4.23 (ISale.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/contracts/classes/token_manager/ITokenManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ITokenManager.sol:\n\t- pragma solidity^0.4.23 (ITokenManager.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '' of ITokenManager.getReservedDestinationInfo (ITokenManager.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedTokenDestinationList(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of TokenManagerIdx.getReservedTokenDestinationList (ITokenManager.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedTokenDestinationList(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_0' of TokenManagerIdx.getReservedTokenDestinationList (ITokenManager.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address, bytes32, address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '' of TokenManagerIdx.getReservedDestinationInfo (ITokenManager.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address, bytes32, address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '_scope_0' of TokenManagerIdx.getReservedDestinationInfo (ITokenManager.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReservedDestinationInfo(address, bytes32, address) external view returns (uint, uint, uint, uint);\n",
                    "message": "Parameter '_scope_1' of TokenManagerIdx.getReservedDestinationInfo (ITokenManager.sol#12) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/MintedCappedCrowdsale/contracts/classes/sale_manager/ISaleManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_37"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ISaleManager.sol:\n\t- pragma solidity^0.4.23 (ISaleManager.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '' of ISaleManager.getCrowdsaleTier (ISaleManager.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of ISaleManager.getTierWhitelist (ISaleManager.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(uint) external view returns (uint, uint);\n",
                    "message": "Parameter '' of ISaleManager.getTierStartAndEndDates (ISaleManager.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of ISaleManager.getWhitelistStatus (ISaleManager.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of ISaleManager.getWhitelistStatus (ISaleManager.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '' of SaleManagerIdx.getAdmin (ISaleManager.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getAdmin (ISaleManager.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, bool, bool);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleInfo (ISaleManager.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, bool, bool);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleInfo (ISaleManager.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.isCrowdsaleFull (ISaleManager.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.isCrowdsaleFull (ISaleManager.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleStartAndEndTimes (ISaleManager.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleStartAndEndTimes (ISaleManager.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentTierInfo(address, bytes32) external view returns (bytes32, uint, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCurrentTierInfo (ISaleManager.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentTierInfo(address, bytes32) external view returns (bytes32, uint, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCurrentTierInfo (ISaleManager.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(address, bytes32, uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleTier (ISaleManager.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(address, bytes32, uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleTier (ISaleManager.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTier(address, bytes32, uint) external view returns (bytes32, uint, uint, uint, uint, bool, bool);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getCrowdsaleTier (ISaleManager.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(address, bytes32, uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of SaleManagerIdx.getTierWhitelist (ISaleManager.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(address, bytes32, uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getTierWhitelist (ISaleManager.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierWhitelist(address, bytes32, uint) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getTierWhitelist (ISaleManager.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleMaxRaise(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleMaxRaise (ISaleManager.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleMaxRaise(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleMaxRaise (ISaleManager.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTierList(address, bytes32) external view returns (bytes32[]);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleTierList (ISaleManager.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleTierList(address, bytes32) external view returns (bytes32[]);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleTierList (ISaleManager.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getCrowdsaleUniqueBuyers (ISaleManager.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getCrowdsaleUniqueBuyers (ISaleManager.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(address, bytes32, uint) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getTierStartAndEndDates (ISaleManager.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(address, bytes32, uint) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getTierStartAndEndDates (ISaleManager.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTierStartAndEndDates(address, bytes32, uint) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getTierStartAndEndDates (ISaleManager.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getTokensSold (ISaleManager.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getTokensSold (ISaleManager.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of SaleManagerIdx.getWhitelistStatus (ISaleManager.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of SaleManagerIdx.getWhitelistStatus (ISaleManager.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_1' of SaleManagerIdx.getWhitelistStatus (ISaleManager.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, uint, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_2' of SaleManagerIdx.getWhitelistStatus (ISaleManager.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/test/utils/DutchUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_49"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "contract DutchUtils {\n\n\n\n  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](13);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n\n  }\n\n\n\n  // Admin\n\n  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n\n  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n\n  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n\n  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n\n\n\n  // Sale\n\n  function buy() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Token\n\n  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n\n  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n\n  }\n",
                    "message": "DutchUtils (DutchUtils.sol#5-51) has incorrect ERC20 function interface(s):\n\t-transfer (DutchUtils.sol#40)\n\t-transferFrom (DutchUtils.sol#41)\n\t-approve (DutchUtils.sol#42)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](13);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n",
                    "message": "DutchUtils.getSelectors (DutchUtils.sol#7-25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.initializeCrowdsale (DutchUtils.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.finalizeCrowdsale (DutchUtils.sol#29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.updateGlobalMinContribution (DutchUtils.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.whitelistMulti (DutchUtils.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.setCrowdsaleStartandDuration (DutchUtils.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.setTransferAgentStatus (DutchUtils.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.buy (DutchUtils.sol#37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.transfer (DutchUtils.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.transferFrom (DutchUtils.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.approve (DutchUtils.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.increaseApproval (DutchUtils.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchUtils.decreaseApproval (DutchUtils.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "DutchUtils.init (DutchUtils.sol#46-50) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in DutchUtils.sol:\n\t- pragma solidity^0.4.23 (DutchUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.updateGlobalMinContribution (DutchUtils.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.whitelistMulti (DutchUtils.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.whitelistMulti (DutchUtils.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchUtils.whitelistMulti (DutchUtils.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.setCrowdsaleStartandDuration (DutchUtils.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.setCrowdsaleStartandDuration (DutchUtils.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchUtils.initCrowdsaleToken (DutchUtils.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.setTransferAgentStatus (DutchUtils.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.setTransferAgentStatus (DutchUtils.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.transfer (DutchUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.transfer (DutchUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.transferFrom (DutchUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.transferFrom (DutchUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchUtils.transferFrom (DutchUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.approve (DutchUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.approve (DutchUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.increaseApproval (DutchUtils.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.increaseApproval (DutchUtils.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchUtils.decreaseApproval (DutchUtils.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchUtils.decreaseApproval (DutchUtils.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_0' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_1' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_2' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_3' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_4' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_5' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_6' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_7' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_8' of DutchUtils.init (DutchUtils.sol#47) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/test/utils/RegistryUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerApp (RegistryUtil.sol#7-9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerAppVersion (RegistryUtil.sol#11-13) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryUtil.sol:\n\t- pragma solidity^0.4.23 (RegistryUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_3' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/test/utils/TimeMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function getTime() internal view returns (uint time) {\n\n    assembly { time := sload(2) }\n\n    time = time == 0 ? now : time;\n",
                    "message": "TimeMock.getTime (TimeMock.sol#7-10) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "  function getTime() internal view returns (uint time) {\n\n    assembly { time := sload(2) }\n\n    time = time == 0 ? now : time;\n",
                    "message": "TimeMock.getTime uses assembly (TimeMock.sol#7-10)\n\t- TimeMock.sol#8-9\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in TimeMock.sol:\n\t- pragma solidity^0.4.23 (TimeMock.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTime() internal view returns (uint time) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { time := sload(2) }\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/test/utils/token/DutchTokenMockUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_56"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "contract DutchTokenMockUtils {\n\n\n\n  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](16);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n\n\n\n    selectors[13] = this.setBalance.selector;\n\n    selectors[14] = this.unlockToken.selector;\n\n    selectors[15] = this.setTransferAgent.selector;\n\n  }\n\n\n\n  // Mock\n\n  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function unlockToken() public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n\n\n\n  // Admin\n\n  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n\n  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n\n  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n\n  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n\n\n\n  // Sale\n\n  function buy() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Token\n\n  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n\n  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n\n  }\n",
                    "message": "DutchTokenMockUtils (DutchTokenMockUtils.sol#5-60) has incorrect ERC20 function interface(s):\n\t-transfer (DutchTokenMockUtils.sol#49)\n\t-transferFrom (DutchTokenMockUtils.sol#50)\n\t-approve (DutchTokenMockUtils.sol#51)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](16);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n\n\n\n    selectors[13] = this.setBalance.selector;\n\n    selectors[14] = this.unlockToken.selector;\n\n    selectors[15] = this.setTransferAgent.selector;\n",
                    "message": "DutchTokenMockUtils.getSelectors (DutchTokenMockUtils.sol#7-29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.setBalance (DutchTokenMockUtils.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unlockToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.unlockToken (DutchTokenMockUtils.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.setTransferAgent (DutchTokenMockUtils.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.initializeCrowdsale (DutchTokenMockUtils.sol#37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.finalizeCrowdsale (DutchTokenMockUtils.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.updateGlobalMinContribution (DutchTokenMockUtils.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.whitelistMulti (DutchTokenMockUtils.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.setCrowdsaleStartandDuration (DutchTokenMockUtils.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.initCrowdsaleToken (DutchTokenMockUtils.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.setTransferAgentStatus (DutchTokenMockUtils.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.buy (DutchTokenMockUtils.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.transfer (DutchTokenMockUtils.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.transferFrom (DutchTokenMockUtils.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.approve (DutchTokenMockUtils.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.increaseApproval (DutchTokenMockUtils.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchTokenMockUtils.decreaseApproval (DutchTokenMockUtils.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "DutchTokenMockUtils.init (DutchTokenMockUtils.sol#55-59) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in DutchTokenMockUtils.sol:\n\t- pragma solidity^0.4.23 (DutchTokenMockUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.setBalance (DutchTokenMockUtils.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.setBalance (DutchTokenMockUtils.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.setTransferAgent (DutchTokenMockUtils.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.setTransferAgent (DutchTokenMockUtils.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.updateGlobalMinContribution (DutchTokenMockUtils.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.whitelistMulti (DutchTokenMockUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.whitelistMulti (DutchTokenMockUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchTokenMockUtils.whitelistMulti (DutchTokenMockUtils.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.setCrowdsaleStartandDuration (DutchTokenMockUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.setCrowdsaleStartandDuration (DutchTokenMockUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.initCrowdsaleToken (DutchTokenMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.initCrowdsaleToken (DutchTokenMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchTokenMockUtils.initCrowdsaleToken (DutchTokenMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.setTransferAgentStatus (DutchTokenMockUtils.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.setTransferAgentStatus (DutchTokenMockUtils.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.transfer (DutchTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.transfer (DutchTokenMockUtils.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.transferFrom (DutchTokenMockUtils.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.transferFrom (DutchTokenMockUtils.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchTokenMockUtils.transferFrom (DutchTokenMockUtils.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.approve (DutchTokenMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.approve (DutchTokenMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.increaseApproval (DutchTokenMockUtils.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.increaseApproval (DutchTokenMockUtils.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchTokenMockUtils.decreaseApproval (DutchTokenMockUtils.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.decreaseApproval (DutchTokenMockUtils.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_0' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_1' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_2' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_3' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_4' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_5' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_6' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_7' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_8' of DutchTokenMockUtils.init (DutchTokenMockUtils.sol#56) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setBalance(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function unlockToken() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/test/utils/sale/DutchSaleMockUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_58"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "contract DutchSaleMockUtils {\n\n\n\n  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](17);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n\n\n\n    selectors[13] = this.setTokensRemaining.selector;\n\n    selectors[14] = this.updateGlobalMin.selector;\n\n    selectors[15] = this.setSaleIsWhitelisted.selector;\n\n    selectors[16] = this.setStartAndEndPrices.selector;\n\n  }\n\n\n\n  // Mock\n\n  function setTokensRemaining(uint) public pure returns (bytes) { return msg.data; }\n\n  function updateGlobalMin(uint) public pure returns (bytes) { return msg.data; }\n\n  function setSaleIsWhitelisted(bool) public pure returns (bytes) { return msg.data; }\n\n  function setStartAndEndPrices(uint, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  // Admin\n\n  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n\n  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n\n  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n\n  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n\n  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n\n  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n\n\n\n  // Sale\n\n  function buy() public pure returns (bytes) { return msg.data; }\n\n\n\n  // Token\n\n  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n\n  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n\n\n\n  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n\n  }\n",
                    "message": "DutchSaleMockUtils (DutchSaleMockUtils.sol#5-62) has incorrect ERC20 function interface(s):\n\t-transfer (DutchSaleMockUtils.sol#51)\n\t-transferFrom (DutchSaleMockUtils.sol#52)\n\t-approve (DutchSaleMockUtils.sol#53)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](17);\n\n\n\n    selectors[0] = this.initializeCrowdsale.selector;\n\n    selectors[1] = this.finalizeCrowdsale.selector;\n\n    selectors[2] = this.updateGlobalMinContribution.selector;\n\n    selectors[3] = this.whitelistMulti.selector;\n\n    selectors[4] = this.setCrowdsaleStartandDuration.selector;\n\n    selectors[5] = this.initCrowdsaleToken.selector;\n\n    selectors[6] = this.setTransferAgentStatus.selector;\n\n\n\n    selectors[7] = this.buy.selector;\n\n\n\n    selectors[8] = bytes4(keccak256('transfer(address,uint256)'));\n\n    selectors[9] = this.transferFrom.selector;\n\n    selectors[10] = this.approve.selector;\n\n    selectors[11] = this.increaseApproval.selector;\n\n    selectors[12] = this.decreaseApproval.selector;\n\n\n\n    selectors[13] = this.setTokensRemaining.selector;\n\n    selectors[14] = this.updateGlobalMin.selector;\n\n    selectors[15] = this.setSaleIsWhitelisted.selector;\n\n    selectors[16] = this.setStartAndEndPrices.selector;\n",
                    "message": "DutchSaleMockUtils.getSelectors (DutchSaleMockUtils.sol#7-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTokensRemaining(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.setTokensRemaining (DutchSaleMockUtils.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMin(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.updateGlobalMin (DutchSaleMockUtils.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setSaleIsWhitelisted(bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.setSaleIsWhitelisted (DutchSaleMockUtils.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setStartAndEndPrices(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.setStartAndEndPrices (DutchSaleMockUtils.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.initializeCrowdsale (DutchSaleMockUtils.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.finalizeCrowdsale (DutchSaleMockUtils.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.updateGlobalMinContribution (DutchSaleMockUtils.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.whitelistMulti (DutchSaleMockUtils.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.setCrowdsaleStartandDuration (DutchSaleMockUtils.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.initCrowdsaleToken (DutchSaleMockUtils.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.setTransferAgentStatus (DutchSaleMockUtils.sol#45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.buy (DutchSaleMockUtils.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.transfer (DutchSaleMockUtils.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.transferFrom (DutchSaleMockUtils.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.approve (DutchSaleMockUtils.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.increaseApproval (DutchSaleMockUtils.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "DutchSaleMockUtils.decreaseApproval (DutchSaleMockUtils.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "  function init(\n\n    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n\n  ) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "DutchSaleMockUtils.init (DutchSaleMockUtils.sol#57-61) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in DutchSaleMockUtils.sol:\n\t- pragma solidity^0.4.23 (DutchSaleMockUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTokensRemaining(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.setTokensRemaining (DutchSaleMockUtils.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMin(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.updateGlobalMin (DutchSaleMockUtils.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setSaleIsWhitelisted(bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.setSaleIsWhitelisted (DutchSaleMockUtils.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setStartAndEndPrices(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.setStartAndEndPrices (DutchSaleMockUtils.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setStartAndEndPrices(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.setStartAndEndPrices (DutchSaleMockUtils.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.updateGlobalMinContribution (DutchSaleMockUtils.sol#41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.whitelistMulti (DutchSaleMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.whitelistMulti (DutchSaleMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchSaleMockUtils.whitelistMulti (DutchSaleMockUtils.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.setCrowdsaleStartandDuration (DutchSaleMockUtils.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.setCrowdsaleStartandDuration (DutchSaleMockUtils.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.initCrowdsaleToken (DutchSaleMockUtils.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.initCrowdsaleToken (DutchSaleMockUtils.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchSaleMockUtils.initCrowdsaleToken (DutchSaleMockUtils.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.setTransferAgentStatus (DutchSaleMockUtils.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.setTransferAgentStatus (DutchSaleMockUtils.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.transfer (DutchSaleMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.transfer (DutchSaleMockUtils.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.transferFrom (DutchSaleMockUtils.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.transferFrom (DutchSaleMockUtils.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of DutchSaleMockUtils.transferFrom (DutchSaleMockUtils.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.approve (DutchSaleMockUtils.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.approve (DutchSaleMockUtils.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.increaseApproval (DutchSaleMockUtils.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.increaseApproval (DutchSaleMockUtils.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of DutchSaleMockUtils.decreaseApproval (DutchSaleMockUtils.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.decreaseApproval (DutchSaleMockUtils.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_0' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_1' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_2' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_3' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_4' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_5' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_6' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_7' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, uint, uint, uint, uint, uint, bool, address, bool\n",
                    "message": "Parameter '_scope_8' of DutchSaleMockUtils.init (DutchSaleMockUtils.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTokensRemaining(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMin(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setSaleIsWhitelisted(bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setStartAndEndPrices(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initializeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function finalizeCrowdsale() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateGlobalMinContribution(uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function whitelistMulti(address[], uint[], uint[]) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCrowdsaleStartandDuration(uint, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initCrowdsaleToken(bytes32, bytes32, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgentStatus(address, bool) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buy() public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) public pure returns (bytes) { return msg.data; }\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/contracts/IDutchCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_60"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in IDutchCrowdsale.sol:\n\t- pragma solidity^0.4.23 (IDutchCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (IDutchCrowdsale.sol#32): it allows old versions\n\t- pragma solidity^0.4.23 (IDutchCrowdsale.sol#40): it allows old versions\n\t- pragma solidity^0.4.23 (IDutchCrowdsale.sol#68): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.balanceOf (IDutchCrowdsale.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.allowance (IDutchCrowdsale.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of IToken.allowance (IDutchCrowdsale.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transfer (IDutchCrowdsale.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transfer (IDutchCrowdsale.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transferFrom (IDutchCrowdsale.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transferFrom (IDutchCrowdsale.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IToken.transferFrom (IDutchCrowdsale.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.approve (IDutchCrowdsale.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.approve (IDutchCrowdsale.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.increaseApproval (IDutchCrowdsale.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.increaseApproval (IDutchCrowdsale.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.decreaseApproval (IDutchCrowdsale.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.decreaseApproval (IDutchCrowdsale.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.name (IDutchCrowdsale.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.name (IDutchCrowdsale.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.symbol (IDutchCrowdsale.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.symbol (IDutchCrowdsale.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '' of TokenIdx.decimals (IDutchCrowdsale.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.decimals (IDutchCrowdsale.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.totalSupply (IDutchCrowdsale.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.totalSupply (IDutchCrowdsale.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.balanceOf (IDutchCrowdsale.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.balanceOf (IDutchCrowdsale.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.balanceOf (IDutchCrowdsale.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.allowance (IDutchCrowdsale.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.allowance (IDutchCrowdsale.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.allowance (IDutchCrowdsale.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_2' of TokenIdx.allowance (IDutchCrowdsale.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of IAdmin.getWhitelistStatus (IDutchCrowdsale.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '' of AdminIdx.getAdmin (IDutchCrowdsale.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getAdmin (IDutchCrowdsale.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, uint, bool, bool, bool);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleInfo (IDutchCrowdsale.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, uint, bool, bool, bool);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleInfo (IDutchCrowdsale.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '' of AdminIdx.isCrowdsaleFull (IDutchCrowdsale.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.isCrowdsaleFull (IDutchCrowdsale.sol#57) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleStartAndEndTimes (IDutchCrowdsale.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleStartAndEndTimes (IDutchCrowdsale.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStatus(address, bytes32) external view returns (uint, uint, uint, uint, uint, uint, bool);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleStatus (IDutchCrowdsale.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStatus(address, bytes32) external view returns (uint, uint, uint, uint, uint, uint, bool);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleStatus (IDutchCrowdsale.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of AdminIdx.getTokensSold (IDutchCrowdsale.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getTokensSold (IDutchCrowdsale.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleWhitelist(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleWhitelist (IDutchCrowdsale.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleWhitelist(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleWhitelist (IDutchCrowdsale.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of AdminIdx.getWhitelistStatus (IDutchCrowdsale.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getWhitelistStatus (IDutchCrowdsale.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_1' of AdminIdx.getWhitelistStatus (IDutchCrowdsale.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleUniqueBuyers (IDutchCrowdsale.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleUniqueBuyers (IDutchCrowdsale.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_0' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_1' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_2' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_3' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_4' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_5' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_6' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_7' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init(address, uint, uint, uint, uint, uint, uint, bool, address, bool) external;\n",
                    "message": "Parameter '_scope_8' of IDutchCrowdsale.init (IDutchCrowdsale.sol#73) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/contracts/classes/token/IToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in IToken.sol:\n\t- pragma solidity^0.4.23 (IToken.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.balanceOf (IToken.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '' of IToken.allowance (IToken.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of IToken.allowance (IToken.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transfer (IToken.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transfer (IToken.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.transferFrom (IToken.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.transferFrom (IToken.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address, address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_1' of IToken.transferFrom (IToken.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.approve (IToken.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.approve (IToken.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.increaseApproval (IToken.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.increaseApproval (IToken.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '' of IToken.decreaseApproval (IToken.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decreaseApproval(address, uint) external returns (bool);\n",
                    "message": "Parameter '_scope_0' of IToken.decreaseApproval (IToken.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.name (IToken.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function name(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.name (IToken.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '' of TokenIdx.symbol (IToken.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function symbol(address, bytes32) external view returns (bytes32);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.symbol (IToken.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '' of TokenIdx.decimals (IToken.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decimals(address, bytes32) external view returns (uint8);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.decimals (IToken.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.totalSupply (IToken.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.totalSupply (IToken.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.balanceOf (IToken.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.balanceOf (IToken.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address, bytes32, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.balanceOf (IToken.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_1' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address, bytes32, address, address) external view returns (uint);\n",
                    "message": "Parameter '_scope_2' of TokenIdx.allowance (IToken.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/contracts/classes/sale/ISale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ISale.sol:\n\t- pragma solidity^0.4.23 (ISale.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "auth-os-applications-2840b97dea33c8cf455a67b2b9c7229e2cda1843/TokenWizard/crowdsale/DutchCrowdsale/contracts/classes/admin/IAdmin.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in IAdmin.sol:\n\t- pragma solidity^0.4.23 (IAdmin.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of IAdmin.getWhitelistStatus (IAdmin.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '' of AdminIdx.getAdmin (IAdmin.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAdmin(address, bytes32) external view returns (address);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getAdmin (IAdmin.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, uint, bool, bool, bool);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleInfo (IAdmin.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleInfo(address, bytes32) external view returns (uint, address, uint, bool, bool, bool);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleInfo (IAdmin.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '' of AdminIdx.isCrowdsaleFull (IAdmin.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull(address, bytes32) external view returns (bool, uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.isCrowdsaleFull (IAdmin.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleStartAndEndTimes (IAdmin.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStartAndEndTimes(address, bytes32) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleStartAndEndTimes (IAdmin.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStatus(address, bytes32) external view returns (uint, uint, uint, uint, uint, uint, bool);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleStatus (IAdmin.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleStatus(address, bytes32) external view returns (uint, uint, uint, uint, uint, uint, bool);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleStatus (IAdmin.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of AdminIdx.getTokensSold (IAdmin.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokensSold(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getTokensSold (IAdmin.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleWhitelist(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleWhitelist (IAdmin.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleWhitelist(address, bytes32) external view returns (uint, address[]);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleWhitelist (IAdmin.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '' of AdminIdx.getWhitelistStatus (IAdmin.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getWhitelistStatus (IAdmin.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getWhitelistStatus(address, bytes32, address) external view returns (uint, uint);\n",
                    "message": "Parameter '_scope_1' of AdminIdx.getWhitelistStatus (IAdmin.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '' of AdminIdx.getCrowdsaleUniqueBuyers (IAdmin.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCrowdsaleUniqueBuyers(address, bytes32) external view returns (uint);\n",
                    "message": "Parameter '_scope_0' of AdminIdx.getCrowdsaleUniqueBuyers (IAdmin.sol#26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/util/TestUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n\n    require(_data.length == 64);\n\n    assembly {\n\n      sender := mload(add(0x20, _data))\n\n      wei_sent := mload(add(0x40, _data))\n\n    }\n",
                    "message": "TestUtils.parseStorageExceptionData (TestUtils.sol#7-13) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n\n    require(_data.length == 64);\n\n    assembly {\n\n      sender := mload(add(0x20, _data))\n\n      wei_sent := mload(add(0x40, _data))\n\n    }\n",
                    "message": "TestUtils.parseStorageExceptionData uses assembly (TestUtils.sol#7-13)\n\t- TestUtils.sol#9-13\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n\n    require(_data.length == 64);\n\n    assembly {\n\n      sender := mload(add(0x20, _data))\n\n      wei_sent := mload(add(0x40, _data))\n\n    }\n",
                    "message": "TestUtils.parseStorageExceptionData (TestUtils.sol#7-13) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in TestUtils.sol:\n\t- pragma solidity^0.4.23 (TestUtils.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n",
                    "message": "Parameter '_data' of TestUtils.parseStorageExceptionData (TestUtils.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseStorageExceptionData(bytes memory _data) public pure returns (address sender, uint wei_sent) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/util/AppMockUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_60"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 43,
                    "vulnerability_code": "  function getSelectors() public pure returns (bytes4[] memory selectors) {\n\n    selectors = new bytes4[](27);\n\n    // pay\n\n    selectors[0] = this.pay0.selector;\n\n    selectors[1] = this.pay1.selector;\n\n    selectors[2] = this.pay2.selector;\n\n    // std\n\n    selectors[3] = this.std0.selector;\n\n    selectors[4] = this.std1.selector;\n\n    selectors[5] = this.std2.selector;\n\n    // emit\n\n    selectors[6] = this.emit0.selector;\n\n    selectors[7] = this.emit1top0.selector;\n\n    selectors[8] = this.emit1top0data.selector;\n\n    selectors[9] = this.emit1top4data.selector;\n\n    selectors[10] = this.emit2top1data.selector;\n\n    selectors[11] = this.emit2top4.selector;\n\n    // mix\n\n    selectors[12] = this.req0.selector;\n\n    selectors[13] = this.req1.selector;\n\n    selectors[14] = this.req2.selector;\n\n    selectors[15] = this.req3.selector;\n\n    selectors[16] = this.reqs0.selector;\n\n    selectors[17] = this.reqs1.selector;\n\n    selectors[18] = this.reqs2.selector;\n\n    selectors[19] = this.reqs3.selector;\n\n    // inv\n\n    selectors[20] = this.inv1.selector;\n\n    selectors[21] = this.inv2.selector;\n\n    // rev\n\n    selectors[22] = this.rev0.selector;\n\n    selectors[23] = this.rev1.selector;\n\n    selectors[24] = this.rev2.selector;\n\n    // update\n\n    selectors[25] = this.updateInstance.selector;\n\n    selectors[26] = this.updateExec.selector;\n",
                    "message": "AppMockUtil.getSelectors (AppMockUtil.sol#7-43) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppMockUtil.sol:\n\t- pragma solidity^0.4.23 (AppMockUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.pay1 (AppMockUtil.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, address) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.pay2 (AppMockUtil.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, address) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.pay2 (AppMockUtil.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.std1 (AppMockUtil.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.std1 (AppMockUtil.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.std2 (AppMockUtil.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.std2 (AppMockUtil.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.std2 (AppMockUtil.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.std2 (AppMockUtil.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit1top0data (AppMockUtil.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit1top4data (AppMockUtil.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.emit1top4data (AppMockUtil.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.emit1top4data (AppMockUtil.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.emit1top4data (AppMockUtil.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.emit1top4data (AppMockUtil.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit2top1data (AppMockUtil.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.emit2top1data (AppMockUtil.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.emit2top1data (AppMockUtil.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.emit2top4 (AppMockUtil.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.emit2top4 (AppMockUtil.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.emit2top4 (AppMockUtil.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.emit2top4 (AppMockUtil.sol#64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req0 (AppMockUtil.sol#68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req1 (AppMockUtil.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.req1 (AppMockUtil.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.req1 (AppMockUtil.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req2 (AppMockUtil.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.req2 (AppMockUtil.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.req2 (AppMockUtil.sol#70) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.req3 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.req3 (AppMockUtil.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.reqs0 (AppMockUtil.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs0 (AppMockUtil.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs0 (AppMockUtil.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address, address, bytes32, bytes) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs0 (AppMockUtil.sol#72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '' of AppMockUtil.reqs1 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs1 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs1 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs1 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.reqs1 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_4' of AppMockUtil.reqs1 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_5' of AppMockUtil.reqs1 (AppMockUtil.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '' of AppMockUtil.reqs2 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs2 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs2 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs2 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32[4], bytes, bytes32, bytes32\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.reqs2 (AppMockUtil.sol#77) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '' of AppMockUtil.reqs3 (AppMockUtil.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.reqs3 (AppMockUtil.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.reqs3 (AppMockUtil.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_2' of AppMockUtil.reqs3 (AppMockUtil.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_3' of AppMockUtil.reqs3 (AppMockUtil.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_4' of AppMockUtil.reqs3 (AppMockUtil.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, bytes32, bytes, bytes32, bytes32, bytes32, bytes32\n",
                    "message": "Parameter '_scope_5' of AppMockUtil.reqs3 (AppMockUtil.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.updateInstance (AppMockUtil.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtil.updateInstance (AppMockUtil.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(bytes32, bytes32, bytes32) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtil.updateInstance (AppMockUtil.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateExec(address) external pure returns (bytes) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtil.updateExec (AppMockUtil.sol#97) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/util/AppInitUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInit (AppInitUtil.sol#21-26) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInstanceCreated (AppInitUtil.sol#28-34) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInit uses assembly (AppInitUtil.sol#21-26)\n\t- AppInitUtil.sol#22-26\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInstanceCreated uses assembly (AppInitUtil.sol#28-34)\n\t- AppInitUtil.sol#29-34\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function init() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.init (AppInitUtil.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initInvalid() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initInvalid (AppInitUtil.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initNullAction() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initNullAction (AppInitUtil.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initThrowsAction() public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initThrowsAction (AppInitUtil.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initEmits(bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initEmits (AppInitUtil.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initPays(address) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initPays (AppInitUtil.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppInitUtil.initStores (AppInitUtil.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n\n    assembly {\n\n      exec := mload(add(0x20, _data))\n\n      updater := mload(add(0x40, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInit (AppInitUtil.sol#21-26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n\n    assembly {\n\n      storage_addr := mload(add(0x20, _data))\n\n      app := mload(add(0x40, _data))\n\n      version := mload(add(0x60, _data))\n\n    }\n",
                    "message": "AppInitUtil.parseInstanceCreated (AppInitUtil.sol#28-34) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppInitUtil.sol:\n\t- pragma solidity^0.4.23 (AppInitUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initEmits(bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppInitUtil.initEmits (AppInitUtil.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initPays(address) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppInitUtil.initPays (AppInitUtil.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppInitUtil.initStores (AppInitUtil.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32, bytes32) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppInitUtil.initStores (AppInitUtil.sol#19) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInit(bytes memory _data) public pure returns (address exec, address updater) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function parseInstanceCreated(bytes memory _data) public pure returns (address storage_addr, bytes32 app, bytes32 version) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/util/scriptExec/AppMockUtilContext.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_113"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.pay0 (AppMockUtilContext.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.std0 (AppMockUtilContext.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.std1 (AppMockUtilContext.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.std2 (AppMockUtilContext.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit0 (AppMockUtilContext.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit1top0 (AppMockUtilContext.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit1top0data (AppMockUtilContext.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req0 (AppMockUtilContext.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req1 (AppMockUtilContext.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req2 (AppMockUtilContext.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.req3 (AppMockUtilContext.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function reqs0(\n\n    address, address, address, address,\n\n    bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs0 (AppMockUtilContext.sol#34-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "  function reqs1(\n\n    address, uint,\n\n    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs1 (AppMockUtilContext.sol#38-41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "  function reqs2(\n\n    address, uint, bytes32[4] memory,\n\n    bytes32, bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs2 (AppMockUtilContext.sol#42-45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "  function reqs3(\n\n    address, uint, bytes32,\n\n    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "AppMockUtilContext.reqs3 (AppMockUtilContext.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.inv1 (AppMockUtilContext.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv2(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.inv2 (AppMockUtilContext.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.rev0 (AppMockUtilContext.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.rev1 (AppMockUtilContext.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppMockUtilContext.sol:\n\t- pragma solidity^0.4.23 (AppMockUtilContext.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.pay0 (AppMockUtilContext.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.pay1 (AppMockUtilContext.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address, uint, address, uint, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.pay2 (AppMockUtilContext.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.std0 (AppMockUtilContext.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.std1 (AppMockUtilContext.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std2(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.std2 (AppMockUtilContext.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit0 (AppMockUtilContext.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit1top0 (AppMockUtilContext.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit1top0data (AppMockUtilContext.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.emit1top4data (AppMockUtilContext.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.emit2top1data (AppMockUtilContext.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32, bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.emit2top4 (AppMockUtilContext.sol#26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req0 (AppMockUtilContext.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req0 (AppMockUtilContext.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address, uint, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.req1 (AppMockUtilContext.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32, bytes32, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.req2 (AppMockUtilContext.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address, uint, bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.req3 (AppMockUtilContext.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, address, address, address,\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs0 (AppMockUtilContext.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_5' of AppMockUtilContext.reqs1 (AppMockUtilContext.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32[4] memory,\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs2 (AppMockUtilContext.sol#44) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32,\n",
                    "message": "Parameter '' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32,\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address, uint, bytes32,\n",
                    "message": "Parameter '_scope_1' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_2' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_3' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_4' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_5' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32, bytes32, bytes32, bytes32, bytes memory\n",
                    "message": "Parameter '_scope_6' of AppMockUtilContext.reqs3 (AppMockUtilContext.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.inv1 (AppMockUtilContext.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function inv2(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.inv2 (AppMockUtilContext.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev0(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.rev0 (AppMockUtilContext.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev1(bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.rev1 (AppMockUtilContext.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function rev2(bytes32, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.rev2 (AppMockUtilContext.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws1(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.throws1 (AppMockUtilContext.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '' of AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function throws2(bytes memory, bytes memory) public pure returns (bytes memory) { return msg.data; }\n",
                    "message": "Parameter '_scope_0' of AppMockUtilContext.throws2 (AppMockUtilContext.sol#62) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/util/registry/RegistryUtil.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerApp (RegistryUtil.sol#7-9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n\n    return msg.data;\n",
                    "message": "RegistryUtil.registerAppVersion (RegistryUtil.sol#11-13) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryUtil.sol:\n\t- pragma solidity^0.4.23 (RegistryUtil.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerApp (RegistryUtil.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_0' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_1' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_2' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": "Parameter '_scope_3' of RegistryUtil.registerAppVersion (RegistryUtil.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32, bytes32, address, bytes4[], address[]) public pure returns (bytes memory) {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/EmitsApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(1), uint(0), uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(EMITS, uint(1), uint(0));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(1),\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint(4), _t1, _t2, _t3, _t4\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(EMITS, uint(2), uint(1), _t1);\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(2), uint(4), _t1, _t2, _t3, _t4, uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (EmitsApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (EmitsApp.sol#7-12)\n\t- EmitsApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in EmitsApp.sol:\n\t- pragma solidity^0.4.23 (EmitsApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (EmitsApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top0data(bytes _data) external pure {\n",
                    "message": "Parameter '_data' of EmitsApp.emit1top0data (EmitsApp.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t1' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t2' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t3' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_t4' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit1top4data(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4, bytes _data) external pure {\n",
                    "message": "Parameter '_data' of EmitsApp.emit1top4data (EmitsApp.sol#40) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
                    "message": "Parameter '_t1' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
                    "message": "Parameter '_data1' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top1data(bytes32 _t1, bytes _data1, bytes _data2) external pure {\n",
                    "message": "Parameter '_data2' of EmitsApp.emit2top1data (EmitsApp.sol#49) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t1' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t2' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t3' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emit2top4(bytes32 _t1, bytes32 _t2, bytes32 _t3, bytes32 _t4) external pure {\n",
                    "message": "Parameter '_t4' of EmitsApp.emit2top4 (EmitsApp.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/MixedApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(1), uint(1), _t1, uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(1), msg.value, _dest\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(1), uint(1), uint(_t1), uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(1), msg.value, _dest\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(2), (msg.value / 2), _dest1, (msg.value / 2), _dest2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(2), uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(PAYS, uint(1), msg.value, _dest);\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      STORES, uint(2), _loc1, _val1, _loc2, _val2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_35"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (MixedApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (MixedApp.sol#7-12)\n\t- MixedApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MixedApp.sol:\n\t- pragma solidity^0.4.23 (MixedApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (MixedApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req0(bytes32 _t1) external pure {\n",
                    "message": "Parameter '_t1' of MixedApp.req0 (MixedApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
                    "message": "Parameter '_dest' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
                    "message": "Parameter '_loc' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req1(address _dest, bytes32 _loc, bytes32 _val) external view {\n",
                    "message": "Parameter '_val' of MixedApp.req1 (MixedApp.sol#37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
                    "message": "Parameter '_t1' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
                    "message": "Parameter '_loc' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req2(bytes32 _t1, bytes32 _loc, bytes32 _val) external pure {\n",
                    "message": "Parameter '_val' of MixedApp.req2 (MixedApp.sol#45) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address _dest, bytes32 _t1) external view {\n",
                    "message": "Parameter '_dest' of MixedApp.req3 (MixedApp.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function req3(address _dest, bytes32 _t1) external view {\n",
                    "message": "Parameter '_t1' of MixedApp.req3 (MixedApp.sol#53) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_dest1' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_dest2' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_t1' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function reqs0(address _dest1, address _dest2, bytes32 _t1, bytes _data) external view {\n",
                    "message": "Parameter '_data' of MixedApp.reqs0 (MixedApp.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_dest' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_data1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_data2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val1' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes _data1, bytes _data2, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val2' of MixedApp.reqs1 (MixedApp.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_dest' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_topics' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_data' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_loc' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32[4] _topics, bytes _data, bytes32 _loc, bytes32 _val1\n",
                    "message": "Parameter '_val1' of MixedApp.reqs2 (MixedApp.sol#86) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_dest' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_t1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_data' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val1' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc2' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dest, bytes32 _t1, bytes _data, bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val2' of MixedApp.reqs3 (MixedApp.sol#107) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/StdApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(STORES, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(STORES, uint(1), _location, _val));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      STORES, uint(2), _loc1, _val1, _loc2, _val2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (StdApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (StdApp.sol#7-12)\n\t- StdApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in StdApp.sol:\n\t- pragma solidity^0.4.23 (StdApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (StdApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_location' of StdApp.std1 (StdApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function std1(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_val' of StdApp.std1 (StdApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc1' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val1' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_loc2' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 _loc1, bytes32 _val1, bytes32 _loc2, bytes32 _val2\n",
                    "message": "Parameter '_val2' of StdApp.std2 (StdApp.sol#35) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/RevertHelper.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (RevertHelper.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (RevertHelper.sol#7-12)\n\t- RevertHelper.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RevertHelper.sol:\n\t- pragma solidity^0.4.23 (RevertHelper.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/InvalidApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(1), uint(5), address(this)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      EMITS, uint(0), STORES, uint(0), PAYS, uint(0)\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (InvalidApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (InvalidApp.sol#7-12)\n\t- InvalidApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in InvalidApp.sol:\n\t- pragma solidity^0.4.23 (InvalidApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (InvalidApp.sol#17): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/RevertApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    revert('message');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RevertApp.sol:\n\t- pragma solidity^0.4.23 (RevertApp.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/AppInitMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      abi.encodeWithSelector(STORES, uint(1), execPermissions(msg.sender), bytes32(1))\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes memory temp = abi.encodeWithSelector(THROWS, uint(4));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(EMITS, uint(1), uint(1), _t1, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(PAYS, uint(1), msg.value, _dest));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(STORES, uint(1), _location, _val));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (AppInitMock.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (AppInitMock.sol#7-12)\n\t- AppInitMock.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AppInitMock.sol:\n\t- pragma solidity^0.4.23 (AppInitMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (AppInitMock.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execPermissions(address _exec) internal pure returns (bytes32 location) {\n",
                    "message": "Parameter '_exec' of AppInitMock.execPermissions (AppInitMock.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initEmits(bytes32 _t1) external pure {\n",
                    "message": "Parameter '_t1' of AppInitMock.initEmits (AppInitMock.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initPays(address _dest) external view {\n",
                    "message": "Parameter '_dest' of AppInitMock.initPays (AppInitMock.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_location' of AppInitMock.initStores (AppInitMock.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initStores(bytes32 _location, bytes32 _val) external pure {\n",
                    "message": "Parameter '_val' of AppInitMock.initStores (AppInitMock.sol#60) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodePacked(temp, bytes4(0xffffffff)));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    location = keccak256(_exec, EXEC_PERMISSIONS);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/PayableApp.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(PAYS, uint(0)));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(PAYS, uint(1), (msg.value), _dest));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    RevertHelper.revertBytes(abi.encodeWithSelector(\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      PAYS, uint(2), (msg.value / 2), _dest1, (msg.value / 2), _dest2\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                },
                {
                    "name": "use-abi-encodecall-instead-of-encodewithselector",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ));\n",
                    "message": "To guarantee arguments type safety it is recommended to use `abi.encodeCall` instead of `abi.encodeWithSelector`."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes (PayableApp.sol#7-12) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n\n    assembly {\n\n      mstore(sub(_in, 0x20), 0x20)\n\n      revert (sub(_in, 0x20), add(0x40, mload(_in)))\n\n    }\n",
                    "message": "RevertHelper.revertBytes uses assembly (PayableApp.sol#7-12)\n\t- PayableApp.sol#8-12\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in PayableApp.sol:\n\t- pragma solidity^0.4.23 (PayableApp.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (PayableApp.sol#17): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay1(address _dest) external view {\n",
                    "message": "Parameter '_dest' of PayableApp.pay1 (PayableApp.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address _dest1, address _dest2) external view {\n",
                    "message": "Parameter '_dest1' of PayableApp.pay2 (PayableApp.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay2(address _dest1, address _dest2) external view {\n",
                    "message": "Parameter '_dest2' of PayableApp.pay2 (PayableApp.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function revertBytes(bytes memory _in) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/application/functions/ApplicationMockFuncLib.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 10,
                    "vulnerability_code": "    function mockFn() public pure returns (bytes32[] store_data) {\n\n        store_data = new bytes32[](4);\n",
                    "message": "ApplicationMockFuncLib.mockFn (ApplicationMockFuncLib.sol#8-10) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ApplicationMockFuncLib.sol:\n\t- pragma solidity^0.4.21 (ApplicationMockFuncLib.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mockFn() public pure returns (bytes32[] store_data) {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/application/functions/init/ApplicationMockInit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init() public pure {}\n",
                    "message": "ApplicationMockInit.init (ApplicationMockInit.sol#8) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ApplicationMockInit.sol:\n\t- pragma solidity^0.4.21 (ApplicationMockInit.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/application/functions/init/MockAppThree.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function funcOneAppThree() public pure returns (bytes4) {\n\n    return bytes4(0x0141b47e);\n",
                    "message": "MockAppThree.funcOneAppThree (MockAppThree.sol#7-9) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MockAppThree.sol:\n\t- pragma solidity^0.4.23 (MockAppThree.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return bytes4(0x0141b47e);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/application/functions/init/MockAppTwo.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MockAppTwo.sol:\n\t- pragma solidity^0.4.23 (MockAppTwo.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/application/functions/init/MockAppOne.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function funcOneAppOne() public pure returns (bytes4) {\n\n    return bytes4(0x65096456);\n",
                    "message": "MockAppOne.funcOneAppOne (MockAppOne.sol#7-9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function funcTwoAppOne() public pure returns (bytes4) {\n\n    return bytes4(0xc77e14f6);\n",
                    "message": "MockAppOne.funcTwoAppOne (MockAppOne.sol#12-14) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MockAppOne.sol:\n\t- pragma solidity^0.4.23 (MockAppOne.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return bytes4(0x65096456);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    return bytes4(0xc77e14f6);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/mock/application/functions/init/ApplicationMockNonDefaultInit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(bytes) public pure {}\n",
                    "message": "ApplicationMockNonDefaultInit.init (ApplicationMockNonDefaultInit.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "    function initSel() public pure returns (bytes4) {\n\n        return bytes4(keccak256(\"init(bytes)\"));\n",
                    "message": "ApplicationMockNonDefaultInit.initSel (ApplicationMockNonDefaultInit.sol#10-12) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in ApplicationMockNonDefaultInit.sol:\n\t- pragma solidity^0.4.21 (ApplicationMockNonDefaultInit.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(bytes) public pure {}\n",
                    "message": "Parameter '' of ApplicationMockNonDefaultInit.init (ApplicationMockNonDefaultInit.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(bytes) public pure {}\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/test/registry/RegistryExecMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage == 0, \"ScriptExec already configured\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_storage != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != 0, 'Invalid response from storage');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_version != 0, 'invalid latest version');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != this.registerApp.selector &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != this.registerAppVersion.selector &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != UPDATE_INST_SEL &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != UPDATE_EXEC_SEL\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_80"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 301,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Get function selector from calldata -\n\n    bytes4 sel = getSelector(_calldata);\n\n    // Ensure no registry functions are being called -\n\n    require(\n\n      sel != this.registerApp.selector &&\n\n      sel != this.registerAppVersion.selector &&\n\n      sel != UPDATE_INST_SEL &&\n\n      sel != UPDATE_EXEC_SEL\n\n    );\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "RegistryExecMock.exec (RegistryExecMock.sol#272-301) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExecMock.sol#290)\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExecMock.sol#300)\n"
                },
                {
                    "name": "shadowing-state",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant EXEC_SEL = bytes4(keccak256('exec(address,bytes32,bytes)'));\n",
                    "message": "RegistryExecMock.EXEC_SEL (RegistryExecMock.sol#263) shadows:\n\t- ScriptExecMock.EXEC_SEL (RegistryExecMock.sol#87)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExecMock.getAction (RegistryExecMock.sol#101-106) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExecMock.checkReturn (RegistryExecMock.sol#132-146) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n\n    assembly {\n\n      selector := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "RegistryExecMock.getSelector (RegistryExecMock.sol#304-311) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 447,
                    "vulnerability_code": "  function updateAppInstance(bytes32 _exec_id) external returns (bool success) {\n\n    // Validate input. Only the original deployer can update an application -\n\n    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n\n\n\n    // Get instance metadata from exec id -\n\n    Instance memory inst = instance_info[_exec_id];\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the execution id, and\n\n    // the calldata to update the application -\n\n    if(address(app_storage).call(\n\n      abi.encodeWithSelector(EXEC_SEL,            // 'exec' selector\n\n        inst.current_provider,                    // application provider address\n\n        _exec_id,                                 // execution id to update\n\n        abi.encodeWithSelector(UPDATE_INST_SEL,   // calldata for Registry updateInstance function\n\n          inst.app_name,                          // name of the applcation used by the instance\n\n          inst.version_name,                      // name of the current version of the application\n\n          inst.current_registry_exec_id           // registry exec id when the instance was instantiated\n\n        )\n\n      )\n\n    ) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      return false;\n\n    }\n\n    // Check returned data to ensure state was correctly changed in AbstractStorage -\n\n    success = checkReturn();\n\n    // If execution failed, revert state and return an error message -\n\n    require(success, 'Execution failed');\n\n\n\n    // If execution was successful, the version was updated. Get the latest version\n\n    // and set the exec id instance info -\n\n    address registry_idx = StorageInterface(app_storage).getIndex(inst.current_registry_exec_id);\n\n    bytes32 latest_version  = RegistryInterface(registry_idx).getLatestVersion(\n\n      app_storage,\n\n      inst.current_registry_exec_id,\n\n      inst.current_provider,\n\n      inst.app_name\n\n    );\n\n    // Ensure nonzero latest version -\n\n    require(latest_version != 0, 'invalid latest version');\n\n    // Set current version -\n\n    instance_info[_exec_id].version_name = latest_version;\n",
                    "message": "Reentrancy in RegistryExecMock.updateAppInstance (RegistryExecMock.sol#405-447):\n\tExternal calls:\n\t- registry_idx = StorageInterface(app_storage).getIndex(inst.current_registry_exec_id) (RegistryExecMock.sol#436)\n\t- latest_version = RegistryInterface(registry_idx).getLatestVersion(app_storage,inst.current_registry_exec_id,inst.current_provider,inst.app_name) (RegistryExecMock.sol#437-442)\n\tState variables written after the call(s):\n\t- instance_info (RegistryExecMock.sol#446)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n\n    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n\n    (exec_id, version) = StorageInterface(app_storage).createInstance(\n\n      msg.sender, _app_name, provider, registry_exec_id, _init_calldata\n\n    );\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    app_instances[_app_name].push(exec_id);\n\n    Instance memory inst = Instance(\n\n      provider, registry_exec_id, exec_id, _app_name, version\n\n    );\n\n    instance_info[exec_id] = inst;\n\n    deployed_instances[msg.sender].push(inst);\n\n    // Emit event -\n\n    emit AppInstanceCreated(msg.sender, exec_id, _app_name, version);\n",
                    "message": "Reentrancy in ScriptExecMock.createAppInstance (RegistryExecMock.sol#158-173):\n\tExternal calls:\n\t- (exec_id,version) = StorageInterface(app_storage).createInstance(msg.sender,_app_name,provider,registry_exec_id,_init_calldata) (RegistryExecMock.sol#160-162)\n\tState variables written after the call(s):\n\t- app_instances (RegistryExecMock.sol#165)\n\t- deployed_by (RegistryExecMock.sol#164)\n\t- deployed_instances (RegistryExecMock.sol#170)\n\t- instance_info (RegistryExecMock.sol#169)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 344,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n\n    // Validate input -\n\n    require(_index != 0 && _implementation != 0, 'Invalid input');\n\n\n\n    // Creates a registry from storage and returns the registry exec id -\n\n    exec_id = StorageInterface(app_storage).createRegistry(_index, _implementation);\n\n\n\n    // Ensure a valid execution id returned from storage -\n\n    require(exec_id != 0, 'Invalid response from storage');\n\n\n\n    // If there is not already a default registry exec id set, set it\n\n    if (registry_exec_id == 0)\n\n      registry_exec_id = exec_id;\n\n\n\n    // Create Registry struct in memory -\n\n    Registry memory reg = Registry(_index, _implementation);\n\n\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    registry_instance_info[exec_id] = reg;\n\n    deployed_registry_instances[msg.sender].push(reg);\n\n    // Emit event -\n\n    emit RegistryInstanceCreated(msg.sender, exec_id, _index, _implementation);\n",
                    "message": "Reentrancy in RegistryExecMock.createRegistryInstance (RegistryExecMock.sol#321-344):\n\tExternal calls:\n\t- exec_id = StorageInterface(app_storage).createRegistry(_index,_implementation) (RegistryExecMock.sol#326)\n\tState variables written after the call(s):\n\t- deployed_by (RegistryExecMock.sol#339)\n\t- deployed_registry_instances (RegistryExecMock.sol#341)\n\t- registry_exec_id (RegistryExecMock.sol#333)\n\t- registry_instance_info (RegistryExecMock.sol#340)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExecMock.getAction uses assembly (RegistryExecMock.sol#101-106)\n\t- RegistryExecMock.sol#102-106\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = ERR;\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(_exec_id, message);\n",
                    "message": "ScriptExecMock.checkErrors uses assembly (RegistryExecMock.sol#109-129)\n\t- RegistryExecMock.sol#113-125\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 146,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExecMock.checkReturn uses assembly (RegistryExecMock.sol#132-146)\n\t- RegistryExecMock.sol#134-145\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n\n    assembly {\n\n      selector := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "RegistryExecMock.getSelector uses assembly (RegistryExecMock.sol#304-311)\n\t- RegistryExecMock.sol#305-311\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": "ScriptExecMock.fallback (RegistryExecMock.sol#66) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 83,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n\n    require(app_storage == 0, \"ScriptExec already configured\");\n\n    require(_app_storage != 0, 'Invalid input');\n\n    exec_admin = _exec_admin;\n\n    app_storage = _app_storage;\n\n    provider = _provider;\n\n\n\n    if (exec_admin == 0)\n\n      exec_admin = msg.sender;\n",
                    "message": "ScriptExecMock.configure (RegistryExecMock.sol#74-83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n\n    registry_exec_id = _exec_id;\n",
                    "message": "ScriptExecMock.setRegistryExecID (RegistryExecMock.sol#181-183) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n\n    provider = _provider;\n",
                    "message": "ScriptExecMock.setProvider (RegistryExecMock.sol#189-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n\n    require(_admin != 0);\n\n    exec_admin = _admin;\n",
                    "message": "ScriptExecMock.setAdmin (RegistryExecMock.sol#194-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n\n    return app_instances[_app_name];\n",
                    "message": "ScriptExecMock.getInstances (RegistryExecMock.sol#202-204) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n\n    return deployed_instances[_deployer].length;\n",
                    "message": "ScriptExecMock.getDeployedLength (RegistryExecMock.sol#211-213) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": 226,
                    "vulnerability_code": "  function getRegistryImplementation() public view returns (address index, address implementation) {\n\n    index = StorageInterface(app_storage).getIndex(registry_exec_id);\n\n    implementation = StorageInterface(app_storage).getTarget(registry_exec_id, REGISTER_APP_SEL);\n",
                    "message": "ScriptExecMock.getRegistryImplementation (RegistryExecMock.sol#223-226) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 242,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n\n  returns (address index, bytes4[] memory functions, address[] memory implementations) {\n\n    Instance memory app = instance_info[_exec_id];\n\n    index = StorageInterface(app_storage).getIndex(app.current_registry_exec_id);\n\n    (index, functions, implementations) = RegistryInterface(index).getVersionImplementation(\n\n      app_storage, app.current_registry_exec_id, app.current_provider, app.app_name, app.version_name\n\n    );\n",
                    "message": "ScriptExecMock.getInstanceImplementation (RegistryExecMock.sol#235-242) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryExecMock.sol:\n\t- pragma solidity^0.4.23 (RegistryExecMock.sol#3): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": 301,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Get function selector from calldata -\n\n    bytes4 sel = getSelector(_calldata);\n\n    // Ensure no registry functions are being called -\n\n    require(\n\n      sel != this.registerApp.selector &&\n\n      sel != this.registerAppVersion.selector &&\n\n      sel != UPDATE_INST_SEL &&\n\n      sel != UPDATE_EXEC_SEL\n\n    );\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in RegistryExecMock.exec (RegistryExecMock.sol#272-301):\n\t-address(app_storage).call.value(msg.value)(abi.encodeWithSelector(EXEC_SEL,msg.sender,_exec_id,_calldata)) == false RegistryExecMock.sol#284-292\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 447,
                    "vulnerability_code": "  function updateAppInstance(bytes32 _exec_id) external returns (bool success) {\n\n    // Validate input. Only the original deployer can update an application -\n\n    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n\n\n\n    // Get instance metadata from exec id -\n\n    Instance memory inst = instance_info[_exec_id];\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the execution id, and\n\n    // the calldata to update the application -\n\n    if(address(app_storage).call(\n\n      abi.encodeWithSelector(EXEC_SEL,            // 'exec' selector\n\n        inst.current_provider,                    // application provider address\n\n        _exec_id,                                 // execution id to update\n\n        abi.encodeWithSelector(UPDATE_INST_SEL,   // calldata for Registry updateInstance function\n\n          inst.app_name,                          // name of the applcation used by the instance\n\n          inst.version_name,                      // name of the current version of the application\n\n          inst.current_registry_exec_id           // registry exec id when the instance was instantiated\n\n        )\n\n      )\n\n    ) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      return false;\n\n    }\n\n    // Check returned data to ensure state was correctly changed in AbstractStorage -\n\n    success = checkReturn();\n\n    // If execution failed, revert state and return an error message -\n\n    require(success, 'Execution failed');\n\n\n\n    // If execution was successful, the version was updated. Get the latest version\n\n    // and set the exec id instance info -\n\n    address registry_idx = StorageInterface(app_storage).getIndex(inst.current_registry_exec_id);\n\n    bytes32 latest_version  = RegistryInterface(registry_idx).getLatestVersion(\n\n      app_storage,\n\n      inst.current_registry_exec_id,\n\n      inst.current_provider,\n\n      inst.app_name\n\n    );\n\n    // Ensure nonzero latest version -\n\n    require(latest_version != 0, 'invalid latest version');\n\n    // Set current version -\n\n    instance_info[_exec_id].version_name = latest_version;\n",
                    "message": "Low level call in RegistryExecMock.updateAppInstance (RegistryExecMock.sol#405-447):\n\t-address(app_storage).call(abi.encodeWithSelector(EXEC_SEL,inst.current_provider,_exec_id,abi.encodeWithSelector(UPDATE_INST_SEL,inst.app_name,inst.version_name,inst.current_registry_exec_id))) == false RegistryExecMock.sol#414-428\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 477,
                    "vulnerability_code": "  function updateAppExec(bytes32 _exec_id, address _new_exec_addr) external returns (bool success) {\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the execution id, and\n\n    // the calldata to migrate the script exec address -\n\n    if(address(app_storage).call(\n\n      abi.encodeWithSelector(EXEC_SEL,                            // 'exec' selector\n\n        msg.sender,                                               // sender address\n\n        _exec_id,                                                 // execution id to update\n\n        abi.encodeWithSelector(UPDATE_EXEC_SEL, _new_exec_addr)   // calldata for Registry updateExec\n\n      )\n\n    ) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      return false;\n\n    }\n\n    // Check returned data to ensure state was correctly changed in AbstractStorage -\n\n    success = checkReturn();\n\n    // If execution failed, revert state and return an error message -\n\n    require(success, 'Execution failed');\n",
                    "message": "Low level call in RegistryExecMock.updateAppExec (RegistryExecMock.sol#459-477):\n\t-address(app_storage).call(abi.encodeWithSelector(EXEC_SEL,msg.sender,_exec_id,abi.encodeWithSelector(UPDATE_EXEC_SEL,_new_exec_addr))) == false RegistryExecMock.sol#462-472\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (RegistryExecMock.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (RegistryExecMock.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (RegistryExecMock.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (RegistryExecMock.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(address _sender, bytes32 _exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) external\n",
                    "message": "Parameter '_exec_id' of StorageInterface.updateInstance (RegistryExecMock.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(address _sender, bytes32 _exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) external\n",
                    "message": "Parameter '_app_name' of StorageInterface.updateInstance (RegistryExecMock.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(address _sender, bytes32 _exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) external\n",
                    "message": "Parameter '_registry_id' of StorageInterface.updateInstance (RegistryExecMock.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateExec(bytes32 exec_id, address new_exec) external;\n",
                    "message": "Parameter 'exec_id' of StorageInterface.updateExec (RegistryExecMock.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateExec(bytes32 exec_id, address new_exec) external;\n",
                    "message": "Parameter 'new_exec' of StorageInterface.updateExec (RegistryExecMock.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (RegistryExecMock.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (RegistryExecMock.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (RegistryExecMock.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (RegistryExecMock.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (RegistryExecMock.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (RegistryExecMock.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (RegistryExecMock.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (RegistryExecMock.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_exec_admin' of ScriptExecMock.configure (RegistryExecMock.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_app_storage' of ScriptExecMock.configure (RegistryExecMock.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_provider' of ScriptExecMock.configure (RegistryExecMock.sol#74) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success);\n",
                    "message": "Parameter '_exec_id' of ScriptExecMock.exec (RegistryExecMock.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n",
                    "message": "Parameter '_exec_id' of ScriptExecMock.checkErrors (RegistryExecMock.sol#109) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of ScriptExecMock.createAppInstance (RegistryExecMock.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_init_calldata' of ScriptExecMock.createAppInstance (RegistryExecMock.sol#158) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n",
                    "message": "Parameter '_exec_id' of ScriptExecMock.setRegistryExecID (RegistryExecMock.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n",
                    "message": "Parameter '_provider' of ScriptExecMock.setProvider (RegistryExecMock.sol#189) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n",
                    "message": "Parameter '_admin' of ScriptExecMock.setAdmin (RegistryExecMock.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_app_name' of ScriptExecMock.getInstances (RegistryExecMock.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n",
                    "message": "Parameter '_deployer' of ScriptExecMock.getDeployedLength (RegistryExecMock.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n",
                    "message": "Parameter '_exec_id' of ScriptExecMock.getInstanceImplementation (RegistryExecMock.sol#235) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public app_storage;\n",
                    "message": "Variable 'ScriptExecMock.app_storage' (RegistryExecMock.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public registry_exec_id;\n",
                    "message": "Variable 'ScriptExecMock.registry_exec_id' (RegistryExecMock.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public exec_admin;\n",
                    "message": "Variable 'ScriptExecMock.exec_admin' (RegistryExecMock.sol#33) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => address) public deployed_by;\n",
                    "message": "Variable 'ScriptExecMock.deployed_by' (RegistryExecMock.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Instance) public instance_info;\n",
                    "message": "Variable 'ScriptExecMock.instance_info' (RegistryExecMock.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Instance[]) public deployed_instances;\n",
                    "message": "Variable 'ScriptExecMock.deployed_instances' (RegistryExecMock.sol#50) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => bytes32[]) public app_instances;\n",
                    "message": "Variable 'ScriptExecMock.app_instances' (RegistryExecMock.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of RegistryExecMock.exec (RegistryExecMock.sol#272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_calldata' of RegistryExecMock.exec (RegistryExecMock.sol#272) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
                    "message": "Parameter '_index' of RegistryExecMock.createRegistryInstance (RegistryExecMock.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
                    "message": "Parameter '_implementation' of RegistryExecMock.createRegistryInstance (RegistryExecMock.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_app_name' of RegistryExecMock.registerApp (RegistryExecMock.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_index' of RegistryExecMock.registerApp (RegistryExecMock.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_selectors' of RegistryExecMock.registerApp (RegistryExecMock.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_implementations' of RegistryExecMock.registerApp (RegistryExecMock.sol#353) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_app_name' of RegistryExecMock.registerAppVersion (RegistryExecMock.sol#378) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_version_name' of RegistryExecMock.registerAppVersion (RegistryExecMock.sol#378) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_index' of RegistryExecMock.registerAppVersion (RegistryExecMock.sol#378) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_selectors' of RegistryExecMock.registerAppVersion (RegistryExecMock.sol#378) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_implementations' of RegistryExecMock.registerAppVersion (RegistryExecMock.sol#378) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateAppInstance(bytes32 _exec_id) external returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of RegistryExecMock.updateAppInstance (RegistryExecMock.sol#405) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateAppExec(bytes32 _exec_id, address _new_exec_addr) external returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of RegistryExecMock.updateAppExec (RegistryExecMock.sol#459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateAppExec(bytes32 _exec_id, address _new_exec_addr) external returns (bool success) {\n",
                    "message": "Parameter '_new_exec_addr' of RegistryExecMock.updateAppExec (RegistryExecMock.sol#459) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Registry) public registry_instance_info;\n",
                    "message": "Variable 'RegistryExecMock.registry_instance_info' (RegistryExecMock.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Registry[]) public deployed_registry_instances;\n",
                    "message": "Variable 'RegistryExecMock.deployed_registry_instances' (RegistryExecMock.sol#255) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ScriptExecMock {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) public restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.23 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/core/ScriptExec.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage == 0, \"ScriptExec already configured\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_storage != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_50"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction (ScriptExec.sol#107-112) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn (ScriptExec.sol#138-152) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": "Contract locking ether found in ScriptExec.sol:\n\tContract ScriptExec has payable functions:\n\t - fallback (ScriptExec.sol#72)\n\t - exec (ScriptExec.sol#102)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n\n    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n\n    (exec_id, version) = StorageInterface(app_storage).createInstance(\n\n      msg.sender, _app_name, provider, registry_exec_id, _init_calldata\n\n    );\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    app_instances[_app_name].push(exec_id);\n\n    Instance memory inst = Instance(\n\n      provider, registry_exec_id, exec_id, _app_name, version\n\n    );\n\n    instance_info[exec_id] = inst;\n\n    deployed_instances[msg.sender].push(inst);\n\n    // Emit event -\n\n    emit AppInstanceCreated(msg.sender, exec_id, _app_name, version);\n",
                    "message": "Reentrancy in ScriptExec.createAppInstance (ScriptExec.sol#164-179):\n\tExternal calls:\n\t- (exec_id,version) = StorageInterface(app_storage).createInstance(msg.sender,_app_name,provider,registry_exec_id,_init_calldata) (ScriptExec.sol#166-168)\n\tState variables written after the call(s):\n\t- app_instances (ScriptExec.sol#171)\n\t- deployed_by (ScriptExec.sol#170)\n\t- deployed_instances (ScriptExec.sol#176)\n\t- instance_info (ScriptExec.sol#175)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction uses assembly (ScriptExec.sol#107-112)\n\t- ScriptExec.sol#108-112\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = ERR;\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(_exec_id, message);\n",
                    "message": "ScriptExec.checkErrors uses assembly (ScriptExec.sol#115-135)\n\t- ScriptExec.sol#119-131\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn uses assembly (ScriptExec.sol#138-152)\n\t- ScriptExec.sol#140-151\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": "ScriptExec.fallback (ScriptExec.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n\n    require(app_storage == 0, \"ScriptExec already configured\");\n\n    require(_app_storage != 0, 'Invalid input');\n\n    exec_admin = _exec_admin;\n\n    app_storage = _app_storage;\n\n    provider = _provider;\n\n\n\n    if (exec_admin == 0)\n\n      exec_admin = msg.sender;\n",
                    "message": "ScriptExec.configure (ScriptExec.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n\n    registry_exec_id = _exec_id;\n",
                    "message": "ScriptExec.setRegistryExecID (ScriptExec.sol#187-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n\n    provider = _provider;\n",
                    "message": "ScriptExec.setProvider (ScriptExec.sol#195-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n\n    require(_admin != 0);\n\n    exec_admin = _admin;\n",
                    "message": "ScriptExec.setAdmin (ScriptExec.sol#200-203) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n\n    return app_instances[_app_name];\n",
                    "message": "ScriptExec.getInstances (ScriptExec.sol#208-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n\n    return deployed_instances[_deployer].length;\n",
                    "message": "ScriptExec.getDeployedLength (ScriptExec.sol#217-219) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function getRegistryImplementation() public view returns (address index, address implementation) {\n\n    index = StorageInterface(app_storage).getIndex(registry_exec_id);\n\n    implementation = StorageInterface(app_storage).getTarget(registry_exec_id, REGISTER_APP_SEL);\n",
                    "message": "ScriptExec.getRegistryImplementation (ScriptExec.sol#229-232) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n\n  returns (address index, bytes4[] memory functions, address[] memory implementations) {\n\n    Instance memory app = instance_info[_exec_id];\n\n    index = StorageInterface(app_storage).getIndex(app.current_registry_exec_id);\n\n    (index, functions, implementations) = RegistryInterface(index).getVersionImplementation(\n\n      app_storage, app.current_registry_exec_id, app.current_provider, app.app_name, app.version_name\n\n    );\n",
                    "message": "ScriptExec.getInstanceImplementation (ScriptExec.sol#241-248) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ScriptExec.sol:\n\t- pragma solidity^0.4.23 (ScriptExec.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (ScriptExec.sol#18): it allows old versions\n\t- pragma solidity^0.4.23 (ScriptExec.sol#29): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (ScriptExec.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (ScriptExec.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (ScriptExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (ScriptExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (ScriptExec.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (ScriptExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (ScriptExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_exec_admin' of ScriptExec.configure (ScriptExec.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_app_storage' of ScriptExec.configure (ScriptExec.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_provider' of ScriptExec.configure (ScriptExec.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success);\n",
                    "message": "Parameter '_exec_id' of ScriptExec.exec (ScriptExec.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.checkErrors (ScriptExec.sol#115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.createAppInstance (ScriptExec.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_init_calldata' of ScriptExec.createAppInstance (ScriptExec.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.setRegistryExecID (ScriptExec.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n",
                    "message": "Parameter '_provider' of ScriptExec.setProvider (ScriptExec.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n",
                    "message": "Parameter '_admin' of ScriptExec.setAdmin (ScriptExec.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.getInstances (ScriptExec.sol#208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n",
                    "message": "Parameter '_deployer' of ScriptExec.getDeployedLength (ScriptExec.sol#217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n",
                    "message": "Parameter '_exec_id' of ScriptExec.getInstanceImplementation (ScriptExec.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public app_storage;\n",
                    "message": "Variable 'ScriptExec.app_storage' (ScriptExec.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public registry_exec_id;\n",
                    "message": "Variable 'ScriptExec.registry_exec_id' (ScriptExec.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public exec_admin;\n",
                    "message": "Variable 'ScriptExec.exec_admin' (ScriptExec.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => address) public deployed_by;\n",
                    "message": "Variable 'ScriptExec.deployed_by' (ScriptExec.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Instance) public instance_info;\n",
                    "message": "Variable 'ScriptExec.instance_info' (ScriptExec.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Instance[]) public deployed_instances;\n",
                    "message": "Variable 'ScriptExec.deployed_instances' (ScriptExec.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => bytes32[]) public app_instances;\n",
                    "message": "Variable 'ScriptExec.app_instances' (ScriptExec.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant EXEC_SEL = bytes4(keccak256('exec(address,bytes32,bytes)'));\n",
                    "message": "ScriptExec.EXEC_SEL (ScriptExec.sol#93) is never used in ScriptExec\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ScriptExec {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/core/Proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    proxy_admin = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    app_storage = StorageInterface(_storage);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    registry_exec_id = _registry_exec_id;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    provider = _provider;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    app_name = _app_name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_24"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_exec_id;\n",
                    "message": "Proxy.app_exec_id (Proxy.sol#31) is never initialized. It is used in:\n\t- checkErrors (Proxy.sol#58-78)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n\n    assembly {\n\n      selector := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "Proxy.getSelector (Proxy.sol#81-88) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 43,
                    "vulnerability_code": "  function () external payable {\n\n    require(msg.sender == address(app_storage));\n",
                    "message": "Contract locking ether found in Proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (Proxy.sol#41-43)\n\t - exec (Proxy.sol#55)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "  function checkErrors() internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = bytes4(keccak256('Error(string)'));\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(app_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(app_exec_id, message);\n",
                    "message": "Proxy.checkErrors uses assembly (Proxy.sol#58-78)\n\t- Proxy.sol#62-74\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n\n    assembly {\n\n      selector := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "Proxy.getSelector uses assembly (Proxy.sol#81-88)\n\t- Proxy.sol#82-88\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_exec_id;\n",
                    "message": "Proxy.app_exec_id should be constant (Proxy.sol#31)\nProxy.app_index should be constant (Proxy.sol#32)\nProxy.app_version should be constant (Proxy.sol#30)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Proxy.sol:\n\t- pragma solidity^0.4.23 (Proxy.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (Proxy.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (Proxy.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (Proxy.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (Proxy.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (Proxy.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (Proxy.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_storage' of Proxy. (Proxy.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_registry_exec_id' of Proxy. (Proxy.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_provider' of Proxy. (Proxy.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor (address _storage, bytes32 _registry_exec_id, address _provider, bytes32 _app_name) public {\n",
                    "message": "Parameter '_app_name' of Proxy. (Proxy.sol#46) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public proxy_admin;\n",
                    "message": "Variable 'Proxy.proxy_admin' (Proxy.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  StorageInterface public app_storage;\n",
                    "message": "Variable 'Proxy.app_storage' (Proxy.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public registry_exec_id;\n",
                    "message": "Variable 'Proxy.registry_exec_id' (Proxy.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_name;\n",
                    "message": "Variable 'Proxy.app_name' (Proxy.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_version;\n",
                    "message": "Variable 'Proxy.app_version' (Proxy.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public app_exec_id;\n",
                    "message": "Variable 'Proxy.app_exec_id' (Proxy.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public app_index;\n",
                    "message": "Variable 'Proxy.app_index' (Proxy.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant EXEC_SEL = bytes4(keccak256('exec(address,bytes32,bytes)'));\n",
                    "message": "Proxy.EXEC_SEL (Proxy.sol#35) is never used in Proxy\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/core/Contract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected Contract.execute()');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - stores');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - emits');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - pays');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_INC or VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_SET &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_INC &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_DEC\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_83"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // Initialize memory\n\n    initialize();\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize (Contract.sol#71-91) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 122,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize (Contract.sol#102-122) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit (Contract.sol#138-150) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr (Contract.sol#166-168) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem (Contract.sol#171-173) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction (Contract.sol#176-181) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer (Contract.sol#202-215) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID (Contract.sol#259-262) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 268,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender (Contract.sol#265-268) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read (Contract.sol#274-277) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.storing (Contract.sol#346-366) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _field;\n",
                    "message": "Contract.set (Contract.sol#369-390) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.to (Contract.sol#393-406) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.increase (Contract.sol#426-450) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.decrease (Contract.sol#452-476) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.by (Contract.sol#478-500) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt >= uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.byMaximum (Contract.sol#503-527) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.emitting (Contract.sol#531-551) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 584,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Contract.sol#553-584) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Contract.sol#586-619) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 655,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Contract.sol#621-655) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Contract.sol#657-692) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 730,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Contract.sol#694-730) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 754,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.paying (Contract.sol#734-754) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _amount;\n",
                    "message": "Contract.pay (Contract.sol#757-778) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.toAcc (Contract.sol#781-794) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "  function setFreeMem() private pure {\n\n    assembly { mstore(0x40, msize) }\n",
                    "message": "Contract.setFreeMem (Contract.sol#797-799) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": 804,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected (Contract.sol#802-804) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": 813,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted (Contract.sol#807-813) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": 822,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored (Contract.sol#816-822) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid (Contract.sol#825-831) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // Initialize memory\n\n    initialize();\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize uses assembly (Contract.sol#71-91)\n\t- Contract.sol#78-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 122,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize uses assembly (Contract.sol#102-122)\n\t- Contract.sol#107-121\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit uses assembly (Contract.sol#138-150)\n\t- Contract.sol#143-150\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr uses assembly (Contract.sol#166-168)\n\t- Contract.sol#167-168\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem uses assembly (Contract.sol#171-173)\n\t- Contract.sol#172-173\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction uses assembly (Contract.sol#176-181)\n\t- Contract.sol#180-181\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer uses assembly (Contract.sol#202-215)\n\t- Contract.sol#203-215\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID uses assembly (Contract.sol#259-262)\n\t- Contract.sol#260-261\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 268,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender uses assembly (Contract.sol#265-268)\n\t- Contract.sol#266-267\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read uses assembly (Contract.sol#274-277)\n\t- Contract.sol#276-277\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.storing uses assembly (Contract.sol#346-366)\n\t- Contract.sol#348-365\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _field;\n",
                    "message": "Contract.set uses assembly (Contract.sol#369-390)\n\t- Contract.sol#370-388\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.to uses assembly (Contract.sol#393-406)\n\t- Contract.sol#394-405\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.increase uses assembly (Contract.sol#426-450)\n\t- Contract.sol#429-448\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.decrease uses assembly (Contract.sol#452-476)\n\t- Contract.sol#455-474\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.by uses assembly (Contract.sol#478-500)\n\t- Contract.sol#488-499\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt >= uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.byMaximum uses assembly (Contract.sol#503-527)\n\t- Contract.sol#515-526\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.emitting uses assembly (Contract.sol#531-551)\n\t- Contract.sol#533-550\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 584,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Contract.sol#553-584)\n\t- Contract.sol#554-583\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Contract.sol#586-619)\n\t- Contract.sol#587-618\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 655,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Contract.sol#621-655)\n\t- Contract.sol#622-654\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Contract.sol#657-692)\n\t- Contract.sol#658-691\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 730,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Contract.sol#694-730)\n\t- Contract.sol#695-729\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 754,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.paying uses assembly (Contract.sol#734-754)\n\t- Contract.sol#736-753\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _amount;\n",
                    "message": "Contract.pay uses assembly (Contract.sol#757-778)\n\t- Contract.sol#758-776\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.toAcc uses assembly (Contract.sol#781-794)\n\t- Contract.sol#782-793\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "  function setFreeMem() private pure {\n\n    assembly { mstore(0x40, msize) }\n",
                    "message": "Contract.setFreeMem uses assembly (Contract.sol#797-799)\n\t- Contract.sol#798-799\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": 804,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected uses assembly (Contract.sol#802-804)\n\t- Contract.sol#803-804\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": 813,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted uses assembly (Contract.sol#807-813)\n\t- Contract.sol#812-813\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": 822,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored uses assembly (Contract.sol#816-822)\n\t- Contract.sol#821-822\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid uses assembly (Contract.sol#825-831)\n\t- Contract.sol#830-831\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Contract.sol:\n\t- pragma solidity^0.4.23 (Contract.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (Contract.sol#46): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": "Parameter '_script_exec' of Contract.authorize (Contract.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checks(function () pure _check) conditions(validState, validState) internal pure {\n",
                    "message": "Parameter '_check' of Contract.checks (Contract.sol#132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": "Parameter '_location' of Contract.read (Contract.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": "Parameter '_field' of Contract.set (Contract.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '' of Contract.to (Contract.sol#393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Contract.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Contract.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Contract.sol#414) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Contract.sol#414) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Contract.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Contract.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.increase (Contract.sol#426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.decrease (Contract.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.by (Contract.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.by (Contract.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.byMaximum (Contract.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.byMaximum (Contract.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": "Parameter '_amount' of Contract.pay (Contract.sol#757) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": "Parameter '' of Contract.toAcc (Contract.sol#781) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
                    "message": "Contract.THROWS (Contract.sol#284) is never used in Contract\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!authorized)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (stored() != 0 || currentAction() == STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (emitted() != 0 || currentAction() == EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (paid() != 0 || currentAction() == PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.STORE_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_AMT)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.EMIT_LOG)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (expected() == NextFunction.VAL_DEC)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() == NextFunction.VAL_DEC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validState() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function startBuffer() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setFreeMem() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize() internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    data = keccak256(_location, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0xc0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0x40) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { action := mload(0xe0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { exec_id := mload(0x80) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { addr := mload(0xa0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data := sload(data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { mstore(0x40, msize) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { next := mload(0x100) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 812,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_emitted := mload(0x140) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_stored := mload(0x120) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_paid := mload(0x160) }\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/core/AbstractStorage.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint log_size = 32 + (32 * (1 + topics.length)) + data.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 491,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint log_size = 32 + (32 * (1 + topics.length)) + data.length;\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(target != address(0), 'Uninitialized application');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('No state change occured');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr_bound >= _ptr + 64, 'Malformed returndata - invalid size');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_emitted == 0, 'Duplicate action: EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_emitted != 0, 'Unfulfilled action: EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_stored == 0, 'Duplicate action: STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_stored != 0, 'Unfulfilled action: STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_paid == 0, 'Duplicate action: PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(n_paid != 0, 'Unfulfilled action: PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert('Malformed returndata - unknown action');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index != address(0) && index != address(this), 'Registry application not found');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(version != bytes32(0), 'Invalid version name');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index != address(0), 'Invalid index address');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(selectors.length == implementations.length && selectors.length != 0, 'Invalid implementation length');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(selectors[i] != 0 && implementations[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert('PAYS: invalid destination');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(index != address(0) && index != address(this), 'Registry application not found');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(selectors.length == implementations.length && selectors.length != 0, 'Invalid implementation length');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(selectors[i] != 0 && implementations[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('No state change occured');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      n_paid++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      n_stored++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      n_emitted++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr_bound >= _ptr + 64, 'Malformed returndata - invalid size');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        revert('Malformed returndata - unknown action');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(selectors[i] != 0 && implementations[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_82"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.createInstance (AbstractStorage.sol#83-114) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (AbstractStorage.sol#113)\n"
                },
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n\n    // Ensure valid input and input size - minimum 4 bytes\n\n    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n\n\n\n    // Get the target address associated with the given exec id\n\n    address target = getTarget(_exec_id, getSelector(_calldata));\n\n    require(target != address(0), 'Uninitialized application');\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(_exec_id, _sender);\n\n\n\n    // Execute application and commit returned data to storage -\n\n    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    (n_emitted, n_paid, n_stored) = executeAppReturn(_exec_id);\n\n\n\n    // If no events were emitted, no wei was forwarded, and no storage was changed, revert -\n\n    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n\n      revert('No state change occured');\n\n\n\n    // Emit event -\n\n    emit ApplicationExecution(_exec_id, target);\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.exec (AbstractStorage.sol#127-152) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (AbstractStorage.sol#151)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.createInstance (AbstractStorage.sol#83-114) uses delegatecall to a input-controlled function id\n\trequire(bool,string)(address(index).delegatecall(_calldata) == false,Unsafe execution) (AbstractStorage.sol#101)\n"
                },
                {
                    "name": "controlled-delegatecall",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n\n    // Ensure valid input and input size - minimum 4 bytes\n\n    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n\n\n\n    // Get the target address associated with the given exec id\n\n    address target = getTarget(_exec_id, getSelector(_calldata));\n\n    require(target != address(0), 'Uninitialized application');\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(_exec_id, _sender);\n\n\n\n    // Execute application and commit returned data to storage -\n\n    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    (n_emitted, n_paid, n_stored) = executeAppReturn(_exec_id);\n\n\n\n    // If no events were emitted, no wei was forwarded, and no storage was changed, revert -\n\n    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n\n      revert('No state change occured');\n\n\n\n    // Emit event -\n\n    emit ApplicationExecution(_exec_id, target);\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "AbstractStorage.exec (AbstractStorage.sol#127-152) uses delegatecall to a input-controlled function id\n\trequire(bool,string)(address(target).delegatecall(_calldata) == false,Unsafe execution) (AbstractStorage.sol#139)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n\n    bytes32 seed = APP_IDX_ADDR;\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getIndex (AbstractStorage.sol#291-296) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n\n    bytes32 seed = keccak256(_selector, 'implementation');\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getTarget (AbstractStorage.sol#299-304) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n\n    assembly {\n\n      sel := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "AbstractStorage.getSelector (AbstractStorage.sol#327-334) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 362,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n\n    assembly {\n\n      // returndatasize must be minimum 96 bytes (offset, length, and requestor)\n\n      if lt(returndatasize, 0x60) {\n\n        mstore(0, 0x20)\n\n        mstore(0x20, 24)\n\n        mstore(0x40, 'Insufficient return size')\n\n        revert(0, 0x60)\n\n      }\n\n      // Get memory location to which returndata will be copied\n\n      _returndata_ptr := msize\n\n      // Copy returned data to pointer location\n\n      returndatacopy(_returndata_ptr, 0, returndatasize)\n\n      // Get maximum memory location value for returndata\n\n      ptr_bounds := add(_returndata_ptr, returndatasize)\n\n      // Set new free-memory pointer to point after the returndata in memory\n\n      // Returndata is automatically 32-bytes padded\n\n      mstore(0x40, add(0x20, ptr_bounds))\n\n    }\n",
                    "message": "AbstractStorage.getReturnedData (AbstractStorage.sol#343-362) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": 372,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n\n    assembly { length := mload(_ptr) }\n",
                    "message": "AbstractStorage.getLength (AbstractStorage.sol#370-372) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": 378,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n\n    assert(getAction(_ptr) == THROWS);\n\n    assembly { revert(_ptr, returndatasize) }\n",
                    "message": "AbstractStorage.doThrow (AbstractStorage.sol#375-378) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "AbstractStorage.getAction (AbstractStorage.sol#554-559) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n\n    _location = keccak256(_location, _exec_id);\n\n    assembly { data_read := sload(_location) }\n",
                    "message": "AbstractStorage.read (AbstractStorage.sol#585-588) is declared view but contains assembly code\n"
                },
                {
                    "name": "uninitialized-local",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes4 action;\n",
                    "message": "action in AbstractStorage.executeAppReturn (AbstractStorage.sol#210) is a local variable never initialiazed\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address(pay_to).transfer(amt);\n",
                    "message": "AbstractStorage.doPay has external calls inside a loop:\n\t- address(pay_to).transfer(amt) (AbstractStorage.sol#413)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Reentrancy in AbstractStorage.createInstance (AbstractStorage.sol#83-114):\n\tExternal calls:\n\t- (index,version) = setImplementation(new_exec_id,_app_name,_provider,_registry_id) (AbstractStorage.sol#95)\n\tState variables written after the call(s):\n\t- exec_id (AbstractStorage.sol#98)\n\t- sender (AbstractStorage.sol#98)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": 296,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n\n    bytes32 seed = APP_IDX_ADDR;\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getIndex uses assembly (AbstractStorage.sol#291-296)\n\t- AbstractStorage.sol#294-295\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n\n    bytes32 seed = keccak256(_selector, 'implementation');\n\n    function (bytes32, bytes32) view returns (address) getter;\n\n    assembly { getter := readMap }\n\n    return getter(_exec_id, seed);\n",
                    "message": "AbstractStorage.getTarget uses assembly (AbstractStorage.sol#299-304)\n\t- AbstractStorage.sol#302-303\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": 318,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n\n    function (bytes32, bytes32, bytes32) puts;\n\n    assembly { puts := putMap }\n\n    puts(_exec_id, _seed, _val);\n",
                    "message": "AbstractStorage.put uses assembly (AbstractStorage.sol#314-318)\n\t- AbstractStorage.sol#316-317\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n\n    assembly {\n\n      sel := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "AbstractStorage.getSelector uses assembly (AbstractStorage.sol#327-334)\n\t- AbstractStorage.sol#328-334\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": 362,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n\n    assembly {\n\n      // returndatasize must be minimum 96 bytes (offset, length, and requestor)\n\n      if lt(returndatasize, 0x60) {\n\n        mstore(0, 0x20)\n\n        mstore(0x20, 24)\n\n        mstore(0x40, 'Insufficient return size')\n\n        revert(0, 0x60)\n\n      }\n\n      // Get memory location to which returndata will be copied\n\n      _returndata_ptr := msize\n\n      // Copy returned data to pointer location\n\n      returndatacopy(_returndata_ptr, 0, returndatasize)\n\n      // Get maximum memory location value for returndata\n\n      ptr_bounds := add(_returndata_ptr, returndatasize)\n\n      // Set new free-memory pointer to point after the returndata in memory\n\n      // Returndata is automatically 32-bytes padded\n\n      mstore(0x40, add(0x20, ptr_bounds))\n\n    }\n",
                    "message": "AbstractStorage.getReturnedData uses assembly (AbstractStorage.sol#343-362)\n\t- AbstractStorage.sol#344-362\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": 372,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n\n    assembly { length := mload(_ptr) }\n",
                    "message": "AbstractStorage.getLength uses assembly (AbstractStorage.sol#370-372)\n\t- AbstractStorage.sol#371-372\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": 378,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n\n    assert(getAction(_ptr) == THROWS);\n\n    assembly { revert(_ptr, returndatasize) }\n",
                    "message": "AbstractStorage.doThrow uses assembly (AbstractStorage.sol#375-378)\n\t- AbstractStorage.sol#377-378\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n\n    // Ensure ETH was sent with the call\n\n    require(msg.value > 0);\n\n    assert(getAction(_ptr) == PAYS);\n\n    _ptr += 4;\n\n    // Get number of destinations\n\n    uint num_destinations = getLength(_ptr);\n\n    _ptr += 32;\n\n    address pay_to;\n\n    uint amt;\n\n    // Loop over PAYS actions and process each one\n\n    while (_ptr <= _ptr_bound && n_paid < num_destinations) {\n\n      // Get the payment destination and amount from the pointer\n\n      assembly {\n\n        amt := mload(_ptr)\n\n        pay_to := mload(add(0x20, _ptr))\n\n      }\n\n      // Invalid address was passed as a payment destination - throw\n\n      if (pay_to == address(0) || pay_to == address(this))\n\n        revert('PAYS: invalid destination');\n\n\n\n      // Forward ETH and increment n_paid\n\n      address(pay_to).transfer(amt);\n\n      n_paid++;\n\n      // Increment pointer\n\n      _ptr += 64;\n\n      // Emit event\n\n      emit DeliveredPayment(_exec_id, pay_to, amt);\n\n    }\n\n    ptr = _ptr;\n\n    assert(n_paid == num_destinations);\n",
                    "message": "AbstractStorage.doPay uses assembly (AbstractStorage.sol#391-422)\n\t- AbstractStorage.sol#404-409\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": 460,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n\n    assert(getAction(_ptr) == STORES && _exec_id != bytes32(0));\n\n    _ptr += 4;\n\n    // Get number of locations to which data will be stored\n\n    uint num_locations = getLength(_ptr);\n\n    _ptr += 32;\n\n    bytes32 location;\n\n    bytes32 value;\n\n    // Loop over STORES actions and process each one\n\n    while (_ptr <= _ptr_bound && n_stored < num_locations) {\n\n      // Get storage location and value to store from the pointer\n\n      assembly {\n\n        location := mload(_ptr)\n\n        value := mload(add(0x20, _ptr))\n\n      }\n\n      // Store the data to the location hashed with the exec id\n\n      store(_exec_id, location, value);\n\n      // Increment n_stored and pointer\n\n      n_stored++;\n\n      _ptr += 64;\n\n    }\n\n    ptr = _ptr;\n\n    require(n_stored == num_locations);\n",
                    "message": "AbstractStorage.doStore uses assembly (AbstractStorage.sol#437-460)\n\t- AbstractStorage.sol#448-453\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n\n    assert(getAction(_ptr) == EMITS);\n\n    _ptr += 4;\n\n    // Converts number of events that will be emitted\n\n    uint num_events = getLength(_ptr);\n\n    _ptr += 32;\n\n    bytes32[] memory topics;\n\n    bytes memory data;\n\n    // Loop over EMITS actions and process each one\n\n    while (_ptr <= _ptr_bound && n_emitted < num_events) {\n\n      // Get array of topics and additional data from the pointer\n\n      assembly {\n\n        topics := _ptr\n\n        data := add(add(_ptr, 0x20), mul(0x20, mload(topics)))\n\n      }\n\n      // Get size of the Event's data in memory\n\n      uint log_size = 32 + (32 * (1 + topics.length)) + data.length;\n\n      assembly {\n\n        switch mload(topics)                // topics.length\n\n          case 0 {\n\n            // Log Event.data array with no topics\n\n            log0(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data)                   // data.length\n\n            )\n\n          }\n\n          case 1 {\n\n            // Log Event.data array with 1 topic\n\n            log1(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics))      // topics[0]\n\n            )\n\n          }\n\n          case 2 {\n\n            // Log Event.data array with 2 topics\n\n            log2(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics)),     // topics[0]\n\n              mload(add(0x40, topics))      // topics[1]\n\n            )\n\n          }\n\n          case 3 {\n\n            // Log Event.data array with 3 topics\n\n            log3(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics)),     // topics[0]\n\n              mload(add(0x40, topics)),     // topics[1]\n\n              mload(add(0x60, topics))      // topics[2]\n\n            )\n\n          }\n\n          case 4 {\n\n            // Log Event.data array with 4 topics\n\n            log4(\n\n              add(0x20, data),              // data(ptr)\n\n              mload(data),                  // data.length\n\n              mload(add(0x20, topics)),     // topics[0]\n\n              mload(add(0x40, topics)),     // topics[1]\n\n              mload(add(0x60, topics)),     // topics[2]\n\n              mload(add(0x80, topics))      // topics[3]\n\n            )\n\n          }\n\n          default {\n\n            // Events must have 4 or fewer topics\n\n            mstore(0, 'EMITS: invalid topic count')\n\n            revert(0, 0x20)\n\n          }\n\n      }\n\n      // Event emitted - increment n_emitted and pointer\n\n      n_emitted++;\n\n      _ptr += log_size;\n\n    }\n\n    ptr = _ptr;\n\n    require(n_emitted == num_events);\n",
                    "message": "AbstractStorage.doEmit uses assembly (AbstractStorage.sol#475-551)\n\t- AbstractStorage.sol#486-491\n\t- AbstractStorage.sol#492-546\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": 559,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "AbstractStorage.getAction uses assembly (AbstractStorage.sol#554-559)\n\t- AbstractStorage.sol#555-559\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": 576,
                    "vulnerability_code": "  function store(bytes32 _exec_id, bytes32 _location, bytes32 _data) internal {\n\n    // Get true location to store data to - hash of location hashed with exec id\n\n    _location = keccak256(_location, _exec_id);\n\n    // Store data at location\n\n    assembly { sstore(_location, _data) }\n",
                    "message": "AbstractStorage.store uses assembly (AbstractStorage.sol#571-576)\n\t- AbstractStorage.sol#575-576\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": 588,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n\n    _location = keccak256(_location, _exec_id);\n\n    assembly { data_read := sload(_location) }\n",
                    "message": "AbstractStorage.read uses assembly (AbstractStorage.sol#585-588)\n\t- AbstractStorage.sol#587-588\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in AbstractStorage.sol:\n\t- pragma solidity^0.4.23 (AbstractStorage.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (AbstractStorage.sol#14): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n\n    // Ensure valid input -\n\n    require(_sender != 0 && _app_name != 0 && _provider != 0 && _registry_id != 0 && _calldata.length >= 4, 'invalid input');\n\n\n\n    // Create new exec id by incrementing the nonce -\n\n    new_exec_id = keccak256(++nonce);\n\n\n\n    // Sanity check - verify that this exec id is not linked to an existing application -\n\n    assert(getIndex(new_exec_id) == address(0));\n\n\n\n    // Set the allowed addresses and selectors for the new instance, from the script registry -\n\n    address index;\n\n    (index, version) = setImplementation(new_exec_id, _app_name, _provider, _registry_id);\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(new_exec_id, _sender);\n\n\n\n    // Execute application, create a new exec id, and commit the returned data to storage -\n\n    require(address(index).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    // Get data returned from call revert and perform requested actions -\n\n    executeAppReturn(new_exec_id);\n\n\n\n    // Emit event\n\n    emit ApplicationInitialized(new_exec_id, index, msg.sender);\n\n\n\n    // If execution reaches this point, newly generated exec id should be valid -\n\n    assert(new_exec_id != bytes32(0));\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in AbstractStorage.createInstance (AbstractStorage.sol#83-114):\n\t-require(bool,string)(address(index).delegatecall(_calldata) == false,Unsafe execution) AbstractStorage.sol#101\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n\n    // Ensure valid input and input size - minimum 4 bytes\n\n    require(_calldata.length >= 4 && _sender != address(0) && _exec_id != bytes32(0));\n\n\n\n    // Get the target address associated with the given exec id\n\n    address target = getTarget(_exec_id, getSelector(_calldata));\n\n    require(target != address(0), 'Uninitialized application');\n\n\n\n    // Set the exec id and sender addresses for the target application -\n\n    setContext(_exec_id, _sender);\n\n\n\n    // Execute application and commit returned data to storage -\n\n    require(address(target).delegatecall(_calldata) == false, 'Unsafe execution');\n\n    (n_emitted, n_paid, n_stored) = executeAppReturn(_exec_id);\n\n\n\n    // If no events were emitted, no wei was forwarded, and no storage was changed, revert -\n\n    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n\n      revert('No state change occured');\n\n\n\n    // Emit event -\n\n    emit ApplicationExecution(_exec_id, target);\n\n\n\n    // Ensure that any additional balance is transferred back to the sender -\n\n    if (address(this).balance > 0)\n\n      address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in AbstractStorage.exec (AbstractStorage.sol#127-152):\n\t-require(bool,string)(address(target).delegatecall(_calldata) == false,Unsafe execution) AbstractStorage.sol#139\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (AbstractStorage.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (AbstractStorage.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (AbstractStorage.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (AbstractStorage.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistry(address _registry_idx, address _implementation) external returns (bytes32) {\n",
                    "message": "Parameter '_registry_idx' of AbstractStorage.createRegistry (AbstractStorage.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistry(address _registry_idx, address _implementation) external returns (bytes32) {\n",
                    "message": "Parameter '_implementation' of AbstractStorage.createRegistry (AbstractStorage.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_sender' of AbstractStorage.createInstance (AbstractStorage.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of AbstractStorage.createInstance (AbstractStorage.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_provider' of AbstractStorage.createInstance (AbstractStorage.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_registry_id' of AbstractStorage.createInstance (AbstractStorage.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address _sender, bytes32 _app_name, address _provider, bytes32 _registry_id, bytes _calldata) external payable returns (bytes32 new_exec_id, bytes32 version) {\n",
                    "message": "Parameter '_calldata' of AbstractStorage.createInstance (AbstractStorage.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_sender' of AbstractStorage.exec (AbstractStorage.sol#127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.exec (AbstractStorage.sol#127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address _sender, bytes32 _exec_id, bytes _calldata) external payable returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_calldata' of AbstractStorage.exec (AbstractStorage.sol#127) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeAppReturn(bytes32 _exec_id) internal returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.executeAppReturn (AbstractStorage.sol#193) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_new_exec_id' of AbstractStorage.setImplementation (AbstractStorage.sol#254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of AbstractStorage.setImplementation (AbstractStorage.sol#254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_provider' of AbstractStorage.setImplementation (AbstractStorage.sol#254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": "Parameter '_registry_id' of AbstractStorage.setImplementation (AbstractStorage.sol#254) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.getIndex (AbstractStorage.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.getTarget (AbstractStorage.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n",
                    "message": "Parameter '_selector' of AbstractStorage.getTarget (AbstractStorage.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMap(Map storage _map, bytes32 _seed) internal view returns (bytes32) {\n",
                    "message": "Parameter '_map' of AbstractStorage.readMap (AbstractStorage.sol#309) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMap(Map storage _map, bytes32 _seed) internal view returns (bytes32) {\n",
                    "message": "Parameter '_seed' of AbstractStorage.readMap (AbstractStorage.sol#309) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.put (AbstractStorage.sol#314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_seed' of AbstractStorage.put (AbstractStorage.sol#314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function put(bytes32 _exec_id, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_val' of AbstractStorage.put (AbstractStorage.sol#314) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function putMap(Map storage _map, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_map' of AbstractStorage.putMap (AbstractStorage.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function putMap(Map storage _map, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_seed' of AbstractStorage.putMap (AbstractStorage.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function putMap(Map storage _map, bytes32 _seed, bytes32 _val) internal {\n",
                    "message": "Parameter '_val' of AbstractStorage.putMap (AbstractStorage.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doThrow (AbstractStorage.sol#375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.doPay (AbstractStorage.sol#391) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doPay (AbstractStorage.sol#391) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": "Parameter '_ptr_bound' of AbstractStorage.doPay (AbstractStorage.sol#391) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doStore (AbstractStorage.sol#437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": "Parameter '_ptr_bound' of AbstractStorage.doStore (AbstractStorage.sol#437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.doStore (AbstractStorage.sol#437) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": "Parameter '_ptr' of AbstractStorage.doEmit (AbstractStorage.sol#475) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": "Parameter '_ptr_bound' of AbstractStorage.doEmit (AbstractStorage.sol#475) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setContext(bytes32 _exec_id, address _sender) internal {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.setContext (AbstractStorage.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setContext(bytes32 _exec_id, address _sender) internal {\n",
                    "message": "Parameter '_sender' of AbstractStorage.setContext (AbstractStorage.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function store(bytes32 _exec_id, bytes32 _location, bytes32 _data) internal {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.store (AbstractStorage.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function store(bytes32 _exec_id, bytes32 _location, bytes32 _data) internal {\n",
                    "message": "Parameter '_location' of AbstractStorage.store (AbstractStorage.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.read (AbstractStorage.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": "Parameter '_location' of AbstractStorage.read (AbstractStorage.sol#585) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": "Parameter '_exec_id' of AbstractStorage.readMulti (AbstractStorage.sol#595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": "Parameter '_locations' of AbstractStorage.readMulti (AbstractStorage.sol#595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private exec_id;\n",
                    "message": "Variable 'AbstractStorage.exec_id' (AbstractStorage.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _locations.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_paid < num_destinations) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_stored < num_locations) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_emitted < num_events) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= ptr_bound && (action = getAction(_ptr)) != 0x0) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private exec_id;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private nonce;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (n_emitted == 0 && n_paid == 0 && n_stored == 0)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      } else if (action == PAYS) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (pay_to == address(0) || pay_to == address(this))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 sel) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLength(uint _ptr) internal pure returns (uint length) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doThrow(uint _ptr) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 _exec_id) public view returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 _exec_id, bytes4 _selector) public view returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _exec_id, bytes32 _location) public view returns (bytes32 data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function executeAppReturn(bytes32 _exec_id) internal returns (uint n_emitted, uint n_paid, uint n_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setImplementation(bytes32 _new_exec_id, bytes32 _app_name, address _provider, bytes32 _registry_id) internal returns (address index, bytes32 version) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReturnedData() internal pure returns (uint ptr_bounds, uint _returndata_ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doPay(bytes32 _exec_id, uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doStore(uint _ptr, uint _ptr_bound, bytes32 _exec_id) internal returns (uint ptr, uint n_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function doEmit(uint _ptr, uint _ptr_bound) internal returns (uint ptr, uint n_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_TRANSFER_IN_LOOP",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    while (_ptr <= _ptr_bound && n_paid < num_destinations) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(msg.sender, EXEC_PERMISSIONS), bytes32(1));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(REG_APP, 'implementation'), bytes32(_implementation));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(REG_APP_VER, 'implementation'), bytes32(_implementation));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(UPDATE_INST_SEL, 'implementation'), bytes32(_implementation));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    put(new_exec_id, keccak256(UPDATE_EXEC_SEL, 'implementation'), bytes32(_implementation));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      seed = keccak256(selectors[i], 'implementation');\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 seed = keccak256(_selector, 'implementation');\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _location = keccak256(_location, _exec_id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _location = keccak256(_location, _exec_id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 _exec_id, bytes32[] _locations) public view returns (bytes32[] data_read) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getter := readMap }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { getter := readMap }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { puts := putMap }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { length := mload(_ptr) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { revert(_ptr, returndatasize) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { sstore(_location, _data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data_read := sload(_location) }\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/registry/RegistryIdx.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected Contract.execute()');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - stores');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - emits');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - pays');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_INC or VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_SET &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_INC &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_DEC\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 941,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 977,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (i = 1; i <= length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_INVOCATION_PROBLEM"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // Initialize memory\n\n    initialize();\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize (RegistryIdx.sol#71-91) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 122,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize (RegistryIdx.sol#102-122) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit (RegistryIdx.sol#138-150) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr (RegistryIdx.sol#166-168) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem (RegistryIdx.sol#171-173) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction (RegistryIdx.sol#176-181) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer (RegistryIdx.sol#202-215) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID (RegistryIdx.sol#259-262) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 268,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender (RegistryIdx.sol#265-268) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read (RegistryIdx.sol#274-277) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.storing (RegistryIdx.sol#346-366) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _field;\n",
                    "message": "Contract.set (RegistryIdx.sol#369-390) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.to (RegistryIdx.sol#393-406) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.increase (RegistryIdx.sol#426-450) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.decrease (RegistryIdx.sol#452-476) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.by (RegistryIdx.sol#478-500) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt >= uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.byMaximum (RegistryIdx.sol#503-527) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.emitting (RegistryIdx.sol#531-551) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 584,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (RegistryIdx.sol#553-584) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (RegistryIdx.sol#586-619) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 655,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (RegistryIdx.sol#621-655) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (RegistryIdx.sol#657-692) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 730,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (RegistryIdx.sol#694-730) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 754,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.paying (RegistryIdx.sol#734-754) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _amount;\n",
                    "message": "Contract.pay (RegistryIdx.sol#757-778) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.toAcc (RegistryIdx.sol#781-794) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "  function setFreeMem() private pure {\n\n    assembly { mstore(0x40, msize) }\n",
                    "message": "Contract.setFreeMem (RegistryIdx.sol#797-799) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": 804,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected (RegistryIdx.sol#802-804) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": 813,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted (RegistryIdx.sol#807-813) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": 822,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored (RegistryIdx.sol#816-822) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid (RegistryIdx.sol#825-831) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr (RegistryIdx.sol#849-851) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": 855,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr (RegistryIdx.sol#853-855) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": 859,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr (RegistryIdx.sol#857-859) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // Initialize memory\n\n    initialize();\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize uses assembly (RegistryIdx.sol#71-91)\n\t- RegistryIdx.sol#78-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 122,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize uses assembly (RegistryIdx.sol#102-122)\n\t- RegistryIdx.sol#107-121\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit uses assembly (RegistryIdx.sol#138-150)\n\t- RegistryIdx.sol#143-150\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr uses assembly (RegistryIdx.sol#166-168)\n\t- RegistryIdx.sol#167-168\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem uses assembly (RegistryIdx.sol#171-173)\n\t- RegistryIdx.sol#172-173\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction uses assembly (RegistryIdx.sol#176-181)\n\t- RegistryIdx.sol#180-181\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer uses assembly (RegistryIdx.sol#202-215)\n\t- RegistryIdx.sol#203-215\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID uses assembly (RegistryIdx.sol#259-262)\n\t- RegistryIdx.sol#260-261\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 268,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender uses assembly (RegistryIdx.sol#265-268)\n\t- RegistryIdx.sol#266-267\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read uses assembly (RegistryIdx.sol#274-277)\n\t- RegistryIdx.sol#276-277\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.storing uses assembly (RegistryIdx.sol#346-366)\n\t- RegistryIdx.sol#348-365\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _field;\n",
                    "message": "Contract.set uses assembly (RegistryIdx.sol#369-390)\n\t- RegistryIdx.sol#370-388\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.to uses assembly (RegistryIdx.sol#393-406)\n\t- RegistryIdx.sol#394-405\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.increase uses assembly (RegistryIdx.sol#426-450)\n\t- RegistryIdx.sol#429-448\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.decrease uses assembly (RegistryIdx.sol#452-476)\n\t- RegistryIdx.sol#455-474\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.by uses assembly (RegistryIdx.sol#478-500)\n\t- RegistryIdx.sol#488-499\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt >= uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.byMaximum uses assembly (RegistryIdx.sol#503-527)\n\t- RegistryIdx.sol#515-526\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.emitting uses assembly (RegistryIdx.sol#531-551)\n\t- RegistryIdx.sol#533-550\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 584,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#553-584)\n\t- RegistryIdx.sol#554-583\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#586-619)\n\t- RegistryIdx.sol#587-618\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 655,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#621-655)\n\t- RegistryIdx.sol#622-654\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#657-692)\n\t- RegistryIdx.sol#658-691\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 730,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (RegistryIdx.sol#694-730)\n\t- RegistryIdx.sol#695-729\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 754,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.paying uses assembly (RegistryIdx.sol#734-754)\n\t- RegistryIdx.sol#736-753\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _amount;\n",
                    "message": "Contract.pay uses assembly (RegistryIdx.sol#757-778)\n\t- RegistryIdx.sol#758-776\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.toAcc uses assembly (RegistryIdx.sol#781-794)\n\t- RegistryIdx.sol#782-793\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "  function setFreeMem() private pure {\n\n    assembly { mstore(0x40, msize) }\n",
                    "message": "Contract.setFreeMem uses assembly (RegistryIdx.sol#797-799)\n\t- RegistryIdx.sol#798-799\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": 804,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected uses assembly (RegistryIdx.sol#802-804)\n\t- RegistryIdx.sol#803-804\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": 813,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted uses assembly (RegistryIdx.sol#807-813)\n\t- RegistryIdx.sol#812-813\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": 822,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored uses assembly (RegistryIdx.sol#816-822)\n\t- RegistryIdx.sol#821-822\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid uses assembly (RegistryIdx.sol#825-831)\n\t- RegistryIdx.sol#830-831\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": 851,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr uses assembly (RegistryIdx.sol#849-851)\n\t- RegistryIdx.sol#850-851\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": 855,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr uses assembly (RegistryIdx.sol#853-855)\n\t- RegistryIdx.sol#854-855\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": 859,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr uses assembly (RegistryIdx.sol#857-859)\n\t- RegistryIdx.sol#858-859\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryIdx.sol:\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#46): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#836): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#845): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryIdx.sol#864): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": "Parameter '_script_exec' of Contract.authorize (RegistryIdx.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checks(function () pure _check) conditions(validState, validState) internal pure {\n",
                    "message": "Parameter '_check' of Contract.checks (RegistryIdx.sol#132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": "Parameter '_location' of Contract.read (RegistryIdx.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": "Parameter '_field' of Contract.set (RegistryIdx.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '' of Contract.to (RegistryIdx.sol#393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (RegistryIdx.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (RegistryIdx.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (RegistryIdx.sol#414) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (RegistryIdx.sol#414) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (RegistryIdx.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (RegistryIdx.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.increase (RegistryIdx.sol#426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.decrease (RegistryIdx.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.by (RegistryIdx.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.by (RegistryIdx.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.byMaximum (RegistryIdx.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.byMaximum (RegistryIdx.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": "Parameter '_amount' of Contract.pay (RegistryIdx.sol#757) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": "Parameter '' of Contract.toAcc (RegistryIdx.sol#781) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 exec_id, bytes32 location) external view returns (bytes32 data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.read (RegistryIdx.sol#839) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 exec_id, bytes32[] locations) external view returns (bytes32[] data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.readMulti (RegistryIdx.sol#840) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 876,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execPermissions(address _exec) internal pure returns (bytes32)\n",
                    "message": "Parameter '_exec' of RegistryIdx.execPermissions (RegistryIdx.sol#876) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 892,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registeredApps(address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.registeredApps (RegistryIdx.sol#892) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.appBase (RegistryIdx.sol#896) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.appBase (RegistryIdx.sol#896) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 900,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionList(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.appVersionList (RegistryIdx.sol#900) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 900,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionList(bytes32 _app, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.appVersionList (RegistryIdx.sol#900) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionBase (RegistryIdx.sol#904) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionBase (RegistryIdx.sol#904) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 904,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionBase (RegistryIdx.sol#904) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionIndex (RegistryIdx.sol#908) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionIndex (RegistryIdx.sol#908) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionIndex (RegistryIdx.sol#908) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionSelectors (RegistryIdx.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionSelectors (RegistryIdx.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionSelectors (RegistryIdx.sol#912) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of RegistryIdx.versionAddresses (RegistryIdx.sol#916) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of RegistryIdx.versionAddresses (RegistryIdx.sol#916) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version, address _provider) internal pure returns (bytes32)\n",
                    "message": "Parameter '_provider' of RegistryIdx.versionAddresses (RegistryIdx.sol#916) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getApplications(address _storage, bytes32 _exec_id, address _provider) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_storage' of RegistryIdx.getApplications (RegistryIdx.sol#920) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getApplications(address _storage, bytes32 _exec_id, address _provider) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getApplications (RegistryIdx.sol#920) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 920,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getApplications(address _storage, bytes32 _exec_id, address _provider) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_provider' of RegistryIdx.getApplications (RegistryIdx.sol#920) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_storage' of RegistryIdx.getVersions (RegistryIdx.sol#934) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getVersions (RegistryIdx.sol#934) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_provider' of RegistryIdx.getVersions (RegistryIdx.sol#934) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersions(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_app' of RegistryIdx.getVersions (RegistryIdx.sol#934) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_storage' of RegistryIdx.getLatestVersion (RegistryIdx.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getLatestVersion (RegistryIdx.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_provider' of RegistryIdx.getLatestVersion (RegistryIdx.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 948,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address _storage, bytes32 _exec_id, address _provider, bytes32 _app) external view returns (bytes32) {\n",
                    "message": "Parameter '_app' of RegistryIdx.getLatestVersion (RegistryIdx.sol#948) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_storage' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_exec_id' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_provider' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_app' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 960,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address _storage, bytes32 _exec_id, address _provider, bytes32 _app, bytes32 _version) external view\n",
                    "message": "Parameter '_version' of RegistryIdx.getVersionImplementation (RegistryIdx.sol#960) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
                    "message": "Contract.THROWS (RegistryIdx.sol#284) is never used in Contract\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!authorized)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (stored() != 0 || currentAction() == STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (emitted() != 0 || currentAction() == EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (paid() != 0 || currentAction() == PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.STORE_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_AMT)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.EMIT_LOG)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (expected() == NextFunction.VAL_DEC)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() == NextFunction.VAL_DEC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validState() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function startBuffer() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setFreeMem() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 853,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 857,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize() internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    data = keccak256(_location, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 877,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_exec, EXEC_PERMISSIONS); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 893,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(bytes32(_provider), 'app_list'); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 897,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(_provider), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 897,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(_provider), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 901,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('versions', appBase(_app, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_version, 'version', appBase(_app, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('index', versionBase(_app, _version, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 913,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('selectors', versionBase(_app, _version, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 917,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('addresses', versionBase(_app, _version, _provider)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0xc0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0x40) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { action := mload(0xe0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { exec_id := mload(0x80) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { addr := mload(0xa0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data := sload(data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { mstore(0x40, msize) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { next := mload(0x100) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 812,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_emitted := mload(0x140) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_stored := mload(0x120) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_paid := mload(0x160) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 854,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 858,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/registry/RegistryExec.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage == 0, \"ScriptExec already configured\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_storage != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != 0, 'Invalid response from storage');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_version != 0, 'invalid latest version');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id] && address(this) != _new_exec_addr && _new_exec_addr != 0, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'Execution failed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != this.registerApp.selector &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != this.registerAppVersion.selector &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != UPDATE_INST_SEL &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      sel != UPDATE_EXEC_SEL\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_index != 0 && _implementation != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _version_name != 0 && _index != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_selectors.length == _implementations.length && _selectors.length != 0, 'Invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(app_storage != 0 && registry_exec_id != 0 && provider != 0, 'Invalid state');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(emitted == 0 && paid == 0 && stored != 0, 'Invalid state change');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id] && address(this) != _new_exec_addr && _new_exec_addr != 0, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_75"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Get function selector from calldata -\n\n    bytes4 sel = getSelector(_calldata);\n\n    // Ensure no registry functions are being called -\n\n    require(\n\n      sel != this.registerApp.selector &&\n\n      sel != this.registerAppVersion.selector &&\n\n      sel != UPDATE_INST_SEL &&\n\n      sel != UPDATE_EXEC_SEL\n\n    );\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "RegistryExec.exec (RegistryExec.sol#282-311) sends eth to arbitrary user\n\tDangerous calls:\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExec.sol#300)\n\t- address(msg.sender).transfer(address(this).balance) (RegistryExec.sol#310)\n"
                },
                {
                    "name": "shadowing-state",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant EXEC_SEL = bytes4(keccak256('exec(address,bytes32,bytes)'));\n",
                    "message": "RegistryExec.EXEC_SEL (RegistryExec.sol#273) shadows:\n\t- ScriptExec.EXEC_SEL (RegistryExec.sol#93)\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction (RegistryExec.sol#107-112) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn (RegistryExec.sol#138-152) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n\n    assembly {\n\n      selector := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "RegistryExec.getSelector (RegistryExec.sol#314-321) is declared view but contains assembly code\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 457,
                    "vulnerability_code": "  function updateAppInstance(bytes32 _exec_id) external returns (bool success) {\n\n    // Validate input. Only the original deployer can update an application -\n\n    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n\n\n\n    // Get instance metadata from exec id -\n\n    Instance memory inst = instance_info[_exec_id];\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the execution id, and\n\n    // the calldata to update the application -\n\n    if(address(app_storage).call(\n\n      abi.encodeWithSelector(EXEC_SEL,            // 'exec' selector\n\n        inst.current_provider,                    // application provider address\n\n        _exec_id,                                 // execution id to update\n\n        abi.encodeWithSelector(UPDATE_INST_SEL,   // calldata for Registry updateInstance function\n\n          inst.app_name,                          // name of the applcation used by the instance\n\n          inst.version_name,                      // name of the current version of the application\n\n          inst.current_registry_exec_id           // registry exec id when the instance was instantiated\n\n        )\n\n      )\n\n    ) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      return false;\n\n    }\n\n    // Check returned data to ensure state was correctly changed in AbstractStorage -\n\n    success = checkReturn();\n\n    // If execution failed, revert state and return an error message -\n\n    require(success, 'Execution failed');\n\n\n\n    // If execution was successful, the version was updated. Get the latest version\n\n    // and set the exec id instance info -\n\n    address registry_idx = StorageInterface(app_storage).getIndex(inst.current_registry_exec_id);\n\n    bytes32 latest_version  = RegistryInterface(registry_idx).getLatestVersion(\n\n      app_storage,\n\n      inst.current_registry_exec_id,\n\n      inst.current_provider,\n\n      inst.app_name\n\n    );\n\n    // Ensure nonzero latest version -\n\n    require(latest_version != 0, 'invalid latest version');\n\n    // Set current version -\n\n    instance_info[_exec_id].version_name = latest_version;\n",
                    "message": "Reentrancy in RegistryExec.updateAppInstance (RegistryExec.sol#415-457):\n\tExternal calls:\n\t- registry_idx = StorageInterface(app_storage).getIndex(inst.current_registry_exec_id) (RegistryExec.sol#446)\n\t- latest_version = RegistryInterface(registry_idx).getLatestVersion(app_storage,inst.current_registry_exec_id,inst.current_provider,inst.app_name) (RegistryExec.sol#447-452)\n\tState variables written after the call(s):\n\t- instance_info (RegistryExec.sol#456)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n\n    require(_app_name != 0 && _init_calldata.length >= 4, 'invalid input');\n\n    (exec_id, version) = StorageInterface(app_storage).createInstance(\n\n      msg.sender, _app_name, provider, registry_exec_id, _init_calldata\n\n    );\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    app_instances[_app_name].push(exec_id);\n\n    Instance memory inst = Instance(\n\n      provider, registry_exec_id, exec_id, _app_name, version\n\n    );\n\n    instance_info[exec_id] = inst;\n\n    deployed_instances[msg.sender].push(inst);\n\n    // Emit event -\n\n    emit AppInstanceCreated(msg.sender, exec_id, _app_name, version);\n",
                    "message": "Reentrancy in ScriptExec.createAppInstance (RegistryExec.sol#164-179):\n\tExternal calls:\n\t- (exec_id,version) = StorageInterface(app_storage).createInstance(msg.sender,_app_name,provider,registry_exec_id,_init_calldata) (RegistryExec.sol#166-168)\n\tState variables written after the call(s):\n\t- app_instances (RegistryExec.sol#171)\n\t- deployed_by (RegistryExec.sol#170)\n\t- deployed_instances (RegistryExec.sol#176)\n\t- instance_info (RegistryExec.sol#175)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": 354,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n\n    // Validate input -\n\n    require(_index != 0 && _implementation != 0, 'Invalid input');\n\n\n\n    // Creates a registry from storage and returns the registry exec id -\n\n    exec_id = StorageInterface(app_storage).createRegistry(_index, _implementation);\n\n\n\n    // Ensure a valid execution id returned from storage -\n\n    require(exec_id != 0, 'Invalid response from storage');\n\n\n\n    // If there is not already a default registry exec id set, set it\n\n    if (registry_exec_id == 0)\n\n      registry_exec_id = exec_id;\n\n\n\n    // Create Registry struct in memory -\n\n    Registry memory reg = Registry(_index, _implementation);\n\n\n\n    // Set various app metadata values -\n\n    deployed_by[exec_id] = msg.sender;\n\n    registry_instance_info[exec_id] = reg;\n\n    deployed_registry_instances[msg.sender].push(reg);\n\n    // Emit event -\n\n    emit RegistryInstanceCreated(msg.sender, exec_id, _index, _implementation);\n",
                    "message": "Reentrancy in RegistryExec.createRegistryInstance (RegistryExec.sol#331-354):\n\tExternal calls:\n\t- exec_id = StorageInterface(app_storage).createRegistry(_index,_implementation) (RegistryExec.sol#336)\n\tState variables written after the call(s):\n\t- deployed_by (RegistryExec.sol#349)\n\t- deployed_registry_instances (RegistryExec.sol#351)\n\t- registry_exec_id (RegistryExec.sol#343)\n\t- registry_instance_info (RegistryExec.sol#350)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n\n    assembly {\n\n      // Get the first 4 bytes stored at the pointer, and clean the rest of the bytes remaining\n\n      action := and(mload(_ptr), 0xffffffff00000000000000000000000000000000000000000000000000000000)\n\n    }\n",
                    "message": "ScriptExec.getAction uses assembly (RegistryExec.sol#107-112)\n\t- RegistryExec.sol#108-112\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n\n    // If the returned data begins with selector 'Error(string)', get the contained message -\n\n    string memory message;\n\n    bytes4 err_sel = ERR;\n\n    assembly {\n\n      // Get pointer to free memory, place returned data at pointer, and update free memory pointer\n\n      let ptr := mload(0x40)\n\n      returndatacopy(ptr, 0, returndatasize)\n\n      mstore(0x40, add(ptr, returndatasize))\n\n\n\n      // Check value at pointer for equality with Error selector -\n\n      if eq(mload(ptr), and(err_sel, 0xffffffff00000000000000000000000000000000000000000000000000000000)) {\n\n        message := add(0x24, ptr)\n\n      }\n\n    }\n\n    // If no returned message exists, emit a default error message. Otherwise, emit the error message\n\n    if (bytes(message).length == 0)\n\n      emit StorageException(_exec_id, \"No error recieved\");\n\n    else\n\n      emit StorageException(_exec_id, message);\n",
                    "message": "ScriptExec.checkErrors uses assembly (RegistryExec.sol#115-135)\n\t- RegistryExec.sol#119-131\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 152,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n\n    success = false;\n\n    assembly {\n\n      // returndata size must be 0x60 bytes\n\n      if eq(returndatasize, 0x60) {\n\n        // Copy returned data to pointer and check that at least one value is nonzero\n\n        let ptr := mload(0x40)\n\n        returndatacopy(ptr, 0, returndatasize)\n\n        if iszero(iszero(mload(ptr))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x20, ptr)))) { success := 1 }\n\n        if iszero(iszero(mload(add(0x40, ptr)))) { success := 1 }\n\n      }\n\n    }\n\n    return success;\n",
                    "message": "ScriptExec.checkReturn uses assembly (RegistryExec.sol#138-152)\n\t- RegistryExec.sol#140-151\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n\n    assembly {\n\n      selector := and(\n\n        mload(add(0x20, _calldata)),\n\n        0xffffffff00000000000000000000000000000000000000000000000000000000\n\n      )\n\n    }\n",
                    "message": "RegistryExec.getSelector uses assembly (RegistryExec.sol#314-321)\n\t- RegistryExec.sol#315-321\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": "ScriptExec.fallback (RegistryExec.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 89,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n\n    require(app_storage == 0, \"ScriptExec already configured\");\n\n    require(_app_storage != 0, 'Invalid input');\n\n    exec_admin = _exec_admin;\n\n    app_storage = _app_storage;\n\n    provider = _provider;\n\n\n\n    if (exec_admin == 0)\n\n      exec_admin = msg.sender;\n",
                    "message": "ScriptExec.configure (RegistryExec.sol#80-89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n\n    registry_exec_id = _exec_id;\n",
                    "message": "ScriptExec.setRegistryExecID (RegistryExec.sol#187-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": 197,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n\n    provider = _provider;\n",
                    "message": "ScriptExec.setProvider (RegistryExec.sol#195-197) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n\n    require(_admin != 0);\n\n    exec_admin = _admin;\n",
                    "message": "ScriptExec.setAdmin (RegistryExec.sol#200-203) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 210,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n\n    return app_instances[_app_name];\n",
                    "message": "ScriptExec.getInstances (RegistryExec.sol#208-210) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n\n    return deployed_instances[_deployer].length;\n",
                    "message": "ScriptExec.getDeployedLength (RegistryExec.sol#217-219) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": 232,
                    "vulnerability_code": "  function getRegistryImplementation() public view returns (address index, address implementation) {\n\n    index = StorageInterface(app_storage).getIndex(registry_exec_id);\n\n    implementation = StorageInterface(app_storage).getTarget(registry_exec_id, REGISTER_APP_SEL);\n",
                    "message": "ScriptExec.getRegistryImplementation (RegistryExec.sol#229-232) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n\n  returns (address index, bytes4[] memory functions, address[] memory implementations) {\n\n    Instance memory app = instance_info[_exec_id];\n\n    index = StorageInterface(app_storage).getIndex(app.current_registry_exec_id);\n\n    (index, functions, implementations) = RegistryInterface(index).getVersionImplementation(\n\n      app_storage, app.current_registry_exec_id, app.current_provider, app.app_name, app.version_name\n\n    );\n",
                    "message": "ScriptExec.getInstanceImplementation (RegistryExec.sol#241-248) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryExec.sol:\n\t- pragma solidity^0.4.23 (RegistryExec.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#18): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#29): it allows old versions\n\t- pragma solidity^0.4.23 (RegistryExec.sol#253): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n\n    // Get function selector from calldata -\n\n    bytes4 sel = getSelector(_calldata);\n\n    // Ensure no registry functions are being called -\n\n    require(\n\n      sel != this.registerApp.selector &&\n\n      sel != this.registerAppVersion.selector &&\n\n      sel != UPDATE_INST_SEL &&\n\n      sel != UPDATE_EXEC_SEL\n\n    );\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the app exec id, and the calldata to forward -\n\n    if (address(app_storage).call.value(msg.value)(abi.encodeWithSelector(\n\n      EXEC_SEL, msg.sender, _exec_id, _calldata\n\n    )) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      // Return unspent wei to sender\n\n      address(msg.sender).transfer(address(this).balance);\n\n      return false;\n\n    }\n\n\n\n    // Get returned data\n\n    success = checkReturn();\n\n    // If execution failed,\n\n    require(success, 'Execution failed');\n\n\n\n    // Transfer any returned wei back to the sender\n\n    address(msg.sender).transfer(address(this).balance);\n",
                    "message": "Low level call in RegistryExec.exec (RegistryExec.sol#282-311):\n\t-address(app_storage).call.value(msg.value)(abi.encodeWithSelector(EXEC_SEL,msg.sender,_exec_id,_calldata)) == false RegistryExec.sol#294-302\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 457,
                    "vulnerability_code": "  function updateAppInstance(bytes32 _exec_id) external returns (bool success) {\n\n    // Validate input. Only the original deployer can update an application -\n\n    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id], 'invalid sender or input');\n\n\n\n    // Get instance metadata from exec id -\n\n    Instance memory inst = instance_info[_exec_id];\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the execution id, and\n\n    // the calldata to update the application -\n\n    if(address(app_storage).call(\n\n      abi.encodeWithSelector(EXEC_SEL,            // 'exec' selector\n\n        inst.current_provider,                    // application provider address\n\n        _exec_id,                                 // execution id to update\n\n        abi.encodeWithSelector(UPDATE_INST_SEL,   // calldata for Registry updateInstance function\n\n          inst.app_name,                          // name of the applcation used by the instance\n\n          inst.version_name,                      // name of the current version of the application\n\n          inst.current_registry_exec_id           // registry exec id when the instance was instantiated\n\n        )\n\n      )\n\n    ) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      return false;\n\n    }\n\n    // Check returned data to ensure state was correctly changed in AbstractStorage -\n\n    success = checkReturn();\n\n    // If execution failed, revert state and return an error message -\n\n    require(success, 'Execution failed');\n\n\n\n    // If execution was successful, the version was updated. Get the latest version\n\n    // and set the exec id instance info -\n\n    address registry_idx = StorageInterface(app_storage).getIndex(inst.current_registry_exec_id);\n\n    bytes32 latest_version  = RegistryInterface(registry_idx).getLatestVersion(\n\n      app_storage,\n\n      inst.current_registry_exec_id,\n\n      inst.current_provider,\n\n      inst.app_name\n\n    );\n\n    // Ensure nonzero latest version -\n\n    require(latest_version != 0, 'invalid latest version');\n\n    // Set current version -\n\n    instance_info[_exec_id].version_name = latest_version;\n",
                    "message": "Low level call in RegistryExec.updateAppInstance (RegistryExec.sol#415-457):\n\t-address(app_storage).call(abi.encodeWithSelector(EXEC_SEL,inst.current_provider,_exec_id,abi.encodeWithSelector(UPDATE_INST_SEL,inst.app_name,inst.version_name,inst.current_registry_exec_id))) == false RegistryExec.sol#424-438\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 490,
                    "vulnerability_code": "  function updateAppExec(bytes32 _exec_id, address _new_exec_addr) external returns (bool success) {\n\n    // Validate input. Only the original deployer can migrate the script exec address -\n\n    require(_exec_id != 0 && msg.sender == deployed_by[_exec_id] && address(this) != _new_exec_addr && _new_exec_addr != 0, 'invalid input');\n\n\n\n    // Call 'exec' in AbstractStorage, passing in the sender's address, the execution id, and\n\n    // the calldata to migrate the script exec address -\n\n    if(address(app_storage).call(\n\n      abi.encodeWithSelector(EXEC_SEL,                            // 'exec' selector\n\n        msg.sender,                                               // sender address\n\n        _exec_id,                                                 // execution id to update\n\n        abi.encodeWithSelector(UPDATE_EXEC_SEL, _new_exec_addr)   // calldata for Registry updateExec\n\n      )\n\n    ) == false) {\n\n      // Call failed - emit error message from storage and return 'false'\n\n      checkErrors(_exec_id);\n\n      return false;\n\n    }\n\n    // Check returned data to ensure state was correctly changed in AbstractStorage -\n\n    success = checkReturn();\n\n    // If execution failed, revert state and return an error message -\n\n    require(success, 'Execution failed');\n",
                    "message": "Low level call in RegistryExec.updateAppExec (RegistryExec.sol#469-490):\n\t-address(app_storage).call(abi.encodeWithSelector(EXEC_SEL,msg.sender,_exec_id,abi.encodeWithSelector(UPDATE_EXEC_SEL,_new_exec_addr))) == false RegistryExec.sol#475-485\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (RegistryExec.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (RegistryExec.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (RegistryExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (RegistryExec.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (RegistryExec.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (RegistryExec.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (RegistryExec.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_exec_admin' of ScriptExec.configure (RegistryExec.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_app_storage' of ScriptExec.configure (RegistryExec.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function configure(address _exec_admin, address _app_storage, address _provider) public {\n",
                    "message": "Parameter '_provider' of ScriptExec.configure (RegistryExec.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success);\n",
                    "message": "Parameter '_exec_id' of ScriptExec.exec (RegistryExec.sol#102) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkErrors(bytes32 _exec_id) internal {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.checkErrors (RegistryExec.sol#115) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.createAppInstance (RegistryExec.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createAppInstance(bytes32 _app_name, bytes _init_calldata) external returns (bytes32 exec_id, bytes32 version) {\n",
                    "message": "Parameter '_init_calldata' of ScriptExec.createAppInstance (RegistryExec.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRegistryExecID(bytes32 _exec_id) public onlyAdmin() {\n",
                    "message": "Parameter '_exec_id' of ScriptExec.setRegistryExecID (RegistryExec.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setProvider(address _provider) public onlyAdmin() {\n",
                    "message": "Parameter '_provider' of ScriptExec.setProvider (RegistryExec.sol#195) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setAdmin(address _admin) public onlyAdmin() {\n",
                    "message": "Parameter '_admin' of ScriptExec.setAdmin (RegistryExec.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstances(bytes32 _app_name) public view returns (bytes32[] memory) {\n",
                    "message": "Parameter '_app_name' of ScriptExec.getInstances (RegistryExec.sol#208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getDeployedLength(address _deployer) public view returns (uint) {\n",
                    "message": "Parameter '_deployer' of ScriptExec.getDeployedLength (RegistryExec.sol#217) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getInstanceImplementation(bytes32 _exec_id) public view\n",
                    "message": "Parameter '_exec_id' of ScriptExec.getInstanceImplementation (RegistryExec.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public app_storage;\n",
                    "message": "Variable 'ScriptExec.app_storage' (RegistryExec.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 public registry_exec_id;\n",
                    "message": "Variable 'ScriptExec.registry_exec_id' (RegistryExec.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public exec_admin;\n",
                    "message": "Variable 'ScriptExec.exec_admin' (RegistryExec.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => address) public deployed_by;\n",
                    "message": "Variable 'ScriptExec.deployed_by' (RegistryExec.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Instance) public instance_info;\n",
                    "message": "Variable 'ScriptExec.instance_info' (RegistryExec.sol#54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Instance[]) public deployed_instances;\n",
                    "message": "Variable 'ScriptExec.deployed_instances' (RegistryExec.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => bytes32[]) public app_instances;\n",
                    "message": "Variable 'ScriptExec.app_instances' (RegistryExec.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of RegistryExec.exec (RegistryExec.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(bytes32 _exec_id, bytes _calldata) external payable returns (bool success) {\n",
                    "message": "Parameter '_calldata' of RegistryExec.exec (RegistryExec.sol#282) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
                    "message": "Parameter '_index' of RegistryExec.createRegistryInstance (RegistryExec.sol#331) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createRegistryInstance(address _index, address _implementation) external onlyAdmin() returns (bytes32 exec_id) {\n",
                    "message": "Parameter '_implementation' of RegistryExec.createRegistryInstance (RegistryExec.sol#331) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_app_name' of RegistryExec.registerApp (RegistryExec.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_index' of RegistryExec.registerApp (RegistryExec.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_selectors' of RegistryExec.registerApp (RegistryExec.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_implementations' of RegistryExec.registerApp (RegistryExec.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_app_name' of RegistryExec.registerAppVersion (RegistryExec.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_version_name' of RegistryExec.registerAppVersion (RegistryExec.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_index' of RegistryExec.registerAppVersion (RegistryExec.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_selectors' of RegistryExec.registerAppVersion (RegistryExec.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app_name, bytes32 _version_name, address _index, bytes4[] _selectors, address[] _implementations) external onlyAdmin() {\n",
                    "message": "Parameter '_implementations' of RegistryExec.registerAppVersion (RegistryExec.sol#388) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateAppInstance(bytes32 _exec_id) external returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of RegistryExec.updateAppInstance (RegistryExec.sol#415) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateAppExec(bytes32 _exec_id, address _new_exec_addr) external returns (bool success) {\n",
                    "message": "Parameter '_exec_id' of RegistryExec.updateAppExec (RegistryExec.sol#469) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateAppExec(bytes32 _exec_id, address _new_exec_addr) external returns (bool success) {\n",
                    "message": "Parameter '_new_exec_addr' of RegistryExec.updateAppExec (RegistryExec.sol#469) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (bytes32 => Registry) public registry_instance_info;\n",
                    "message": "Variable 'RegistryExec.registry_instance_info' (RegistryExec.sol#263) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping (address => Registry[]) public deployed_registry_instances;\n",
                    "message": "Variable 'RegistryExec.deployed_registry_instances' (RegistryExec.sol#265) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ScriptExec {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAction(uint _ptr) internal pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkReturn() internal pure returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getSelector(bytes memory _calldata) internal pure returns (bytes4 selector) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function () public payable { }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/registry/features/Provider.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (i = 0; i < latest_selectors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected Contract.execute()');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - stores');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - emits');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Duplicate request - pays');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_INC or VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Expected VAL_DEC');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 897,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"app is already registered\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 900,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"invalid input arrays\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 953,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"App has not been registered\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 956,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Version already exists\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 961,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert(\"Invalid input array lengths\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _current_version != 0 && _registry_id != 0, 'invalid input');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1011,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(current_selectors.length != 0, 'invalid current version');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1015,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_version != _current_version, 'current version is already latest');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1016,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_version != 0, 'invalid latest version');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_idx != 0, 'invalid version idx address');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_selectors.length != 0 && latest_selectors.length == latest_impl.length, 'invalid implementation specification');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(latest_selectors[i] != 0 && latest_impl[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1056,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_new_exec_addr != 0, 'invalid replacement');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1007,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_app_name != 0 && _current_version != 0 && _registry_id != 0, 'invalid input');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_selectors.length != 0 && latest_selectors.length == latest_impl.length, 'invalid implementation specification');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(latest_selectors[i] != 0 && latest_impl[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid buffer pointer');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_SET &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_INC &&\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      expected() != NextFunction.VAL_DEC\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1030,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < current_selectors.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (i = 0; i < latest_selectors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected STORES');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected EMITS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Invalid current action - expected PAYS');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected storage destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) revert('Unexpected function order - expected storage value to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment destination to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected payment amount to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert('Unexpected function order - expected event to be pushed');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1015,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_version != _current_version, 'current version is already latest');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1024,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(latest_selectors.length != 0 && latest_selectors.length == latest_impl.length, 'invalid implementation specification');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(latest_selectors[i] != 0 && latest_impl[i] != 0, 'invalid input - expected nonzero implementation');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "SmartBugs was invoked with option 'main', but the filename did not match any contract"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // Initialize memory\n\n    initialize();\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize (Provider.sol#71-91) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 122,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize (Provider.sol#102-122) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit (Provider.sol#138-150) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr (Provider.sol#166-168) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem (Provider.sol#171-173) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction (Provider.sol#176-181) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer (Provider.sol#202-215) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID (Provider.sol#259-262) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 268,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender (Provider.sol#265-268) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read (Provider.sol#274-277) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.storing (Provider.sol#346-366) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _field;\n",
                    "message": "Contract.set (Provider.sol#369-390) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.to (Provider.sol#393-406) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.increase (Provider.sol#426-450) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.decrease (Provider.sol#452-476) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.by (Provider.sol#478-500) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt >= uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.byMaximum (Provider.sol#503-527) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.emitting (Provider.sol#531-551) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 584,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Provider.sol#553-584) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Provider.sol#586-619) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 655,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Provider.sol#621-655) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Provider.sol#657-692) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 730,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log (Provider.sol#694-730) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 754,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.paying (Provider.sol#734-754) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _amount;\n",
                    "message": "Contract.pay (Provider.sol#757-778) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.toAcc (Provider.sol#781-794) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "  function setFreeMem() private pure {\n\n    assembly { mstore(0x40, msize) }\n",
                    "message": "Contract.setFreeMem (Provider.sol#797-799) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": 804,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected (Provider.sol#802-804) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": 813,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted (Provider.sol#807-813) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": 822,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored (Provider.sol#816-822) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid (Provider.sol#825-831) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function registryRead(bytes32 _location, bytes32 _registry_id) internal view returns (bytes32 value) {\n\n    _location = keccak256(_location, _registry_id);\n\n    assembly { value := sload(_location) }\n",
                    "message": "Provider.registryRead (Provider.sol#1073-1076) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n\n    // Initialize memory\n\n    initialize();\n\n\n\n    // Check that the sender is authorized as a script exec contract for this exec id\n\n    bytes32 perms = EXEC_PERMISSIONS;\n\n    bool authorized;\n\n    assembly {\n\n      // Place the script exec address at 0, and the exec permissions seed after it\n\n      mstore(0, _script_exec)\n\n      mstore(0x20, perms)\n\n      // Hash the resulting 0x34 bytes, and place back into memory at 0\n\n      mstore(0, keccak256(0x0c, 0x34))\n\n      // Place the exec id after the hash -\n\n      mstore(0x20, mload(0x80))\n\n      // Hash the previous hash with the execution id, and check the result\n\n      authorized := sload(keccak256(0, 0x40))\n\n    }\n\n    if (!authorized)\n\n      revert(\"Sender is not authorized as a script exec address\");\n",
                    "message": "Contract.authorize uses assembly (Provider.sol#71-91)\n\t- Provider.sol#78-89\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": 122,
                    "vulnerability_code": "  function initialize() internal view {\n\n    // No memory should have been allocated yet - expect the free memory pointer\n\n    // to point to 0x80 - and throw if it does not\n\n    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n\n    // Next, set up memory for execution\n\n    assembly {\n\n      mstore(0x80, sload(0))     // Execution id, read from storage\n\n      mstore(0xa0, sload(1))     // Original sender address, read from storage\n\n      mstore(0xc0, 0)            // Pointer to storage buffer\n\n      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n\n      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n\n      mstore(0x120, 0)           // Number of storage slots written to in buffer\n\n      mstore(0x140, 0)           // Number of events pushed to buffer\n\n      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n\n\n\n      // Update free memory pointer -\n\n      mstore(0x40, 0x180)\n\n    }\n\n    // Ensure that the sender and execution id returned from storage are expected values -\n\n    assert(execID() != bytes32(0) && sender() != address(0));\n",
                    "message": "Contract.initialize uses assembly (Provider.sol#102-122)\n\t- Provider.sol#107-121\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n\n    // Check value of storage buffer pointer - should be at least 0x180\n\n    bytes32 ptr = buffPtr();\n\n    require(ptr >= 0x180, \"Invalid buffer pointer\");\n\n\n\n    assembly {\n\n      // Get the size of the buffer\n\n      let size := mload(add(0x20, ptr))\n\n      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n\n      // Revert to storage\n\n      revert(ptr, add(0x40, size))\n\n    }\n",
                    "message": "Contract.commit uses assembly (Provider.sol#138-150)\n\t- Provider.sol#143-150\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0xc0) }\n",
                    "message": "Contract.buffPtr uses assembly (Provider.sol#166-168)\n\t- Provider.sol#167-168\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n\n    assembly { ptr := mload(0x40) }\n",
                    "message": "Contract.freeMem uses assembly (Provider.sol#171-173)\n\t- Provider.sol#172-173\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n\n    if (buffPtr() == bytes32(0))\n\n      return bytes4(0);\n\n\n\n    assembly { action := mload(0xe0) }\n",
                    "message": "Contract.currentAction uses assembly (Provider.sol#176-181)\n\t- Provider.sol#180-181\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "  function startBuffer() private pure {\n\n    assembly {\n\n      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n\n      let ptr := msize()\n\n      mstore(0xc0, ptr)\n\n      // Clear bytes at pointer -\n\n      mstore(ptr, 0)            // temp ptr\n\n      mstore(add(0x20, ptr), 0) // buffer length\n\n      // Update free memory pointer -\n\n      mstore(0x40, add(0x40, ptr))\n\n      // Set expected next function to 'NONE' -\n\n      mstore(0x100, 1)\n\n    }\n",
                    "message": "Contract.startBuffer uses assembly (Provider.sol#202-215)\n\t- Provider.sol#203-215\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n\n    assembly { exec_id := mload(0x80) }\n\n    require(exec_id != bytes32(0), \"Execution id overwritten, or not read\");\n",
                    "message": "Contract.execID uses assembly (Provider.sol#259-262)\n\t- Provider.sol#260-261\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 268,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n\n    assembly { addr := mload(0xa0) }\n\n    require(addr != address(0), \"Sender address overwritten, or not read\");\n",
                    "message": "Contract.sender uses assembly (Provider.sol#265-268)\n\t- Provider.sol#266-267\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": 277,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n\n    data = keccak256(_location, execID());\n\n    assembly { data := sload(data) }\n",
                    "message": "Contract.read uses assembly (Provider.sol#274-277)\n\t- Provider.sol#276-277\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n\n    bytes4 action_req = STORES;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the STORES action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (STORES) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.storing uses assembly (Provider.sol#346-366)\n\t- Provider.sol#348-365\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_SET\n\n      mstore(0x100, 3)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _field;\n",
                    "message": "Contract.set uses assembly (Provider.sol#369-390)\n\t- Provider.sol#370-388\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": 406,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.to uses assembly (Provider.sol#393-406)\n\t- Provider.sol#394-405\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_INC\n\n      mstore(0x100, 4)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.increase uses assembly (Provider.sol#426-450)\n\t- Provider.sol#429-448\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": 476,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n\n    // Read value stored at the location in storage -\n\n    val = keccak256(_field, execID());\n\n    assembly {\n\n      val := sload(val)\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - VAL_DEC\n\n      mstore(0x100, 5)\n\n      // Increment STORES action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of storage slots pushed to -\n\n      mstore(0x120, add(1, mload(0x120)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return val;\n",
                    "message": "Contract.decrease uses assembly (Provider.sol#452-476)\n\t- Provider.sol#455-474\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n\n    // If it is VAL_DEC, perform safe-sub on the value\n\n    if (expected() == NextFunction.VAL_INC)\n\n      _amt = _amt.add(uint(_val));\n\n    else if (expected() == NextFunction.VAL_DEC)\n\n      _amt = uint(_val).sub(_amt);\n\n    else\n\n      revert('Expected VAL_INC or VAL_DEC');\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.by uses assembly (Provider.sol#478-500)\n\t- Provider.sol#488-499\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": 527,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n\n    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n\n    // _val and _amt, to a minimum of 0\n\n    if (expected() == NextFunction.VAL_DEC) {\n\n      if (_amt >= uint(_val))\n\n        _amt = 0;\n\n      else\n\n        _amt = uint(_val).sub(_amt);\n\n    } else {\n\n      revert('Expected VAL_DEC');\n\n    }\n\n\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push storage value to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - STORE_DEST\n\n      mstore(0x100, 2)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.byMaximum uses assembly (Provider.sol#503-527)\n\t- Provider.sol#515-526\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n\n    bytes4 action_req = EMITS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (EMITS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - EMIT_LOG\n\n      mstore(0x100, 6)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.emitting uses assembly (Provider.sol#531-551)\n\t- Provider.sol#533-550\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": 584,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 0 to the end of the buffer - event will have 0 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x40 plus the original length\n\n        mstore(ptr, add(0x40, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Provider.sol#553-584)\n\t- Provider.sol#554-583\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 1 to the end of the buffer - event will have 1 topic\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n\n      // Push topic to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x60 plus the original length\n\n        mstore(ptr, add(0x60, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Provider.sol#586-619)\n\t- Provider.sol#587-618\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 655,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 2 to the end of the buffer - event will have 2 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0x80 plus the original length\n\n        mstore(ptr, add(0x80, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Provider.sol#621-655)\n\t- Provider.sol#622-654\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": 692,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 3 to the end of the buffer - event will have 3 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xa0 plus the original length\n\n        mstore(ptr, add(0xa0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Provider.sol#657-692)\n\t- Provider.sol#658-691\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": 730,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push 4 to the end of the buffer - event will have 4 topics\n\n      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n\n      // Push topics to end of buffer\n\n      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n\n      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n\n      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n\n      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n\n      // If _data is zero, set data size to 0 in buffer and push -\n\n      if eq(_data, 0) {\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n\n        // Increment buffer length - 0xc0 plus the original length\n\n        mstore(ptr, add(0xc0, mload(ptr)))\n\n      }\n\n      // If _data is not zero, set size to 0x20 and push to buffer -\n\n      if iszero(eq(_data, 0)) {\n\n        // Push data size (0x20) to the end of the buffer\n\n        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n\n        // Push data to the end of the buffer\n\n        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n\n        // Increment buffer length - 0xe0 plus the original length\n\n        mstore(ptr, add(0xe0, mload(ptr)))\n\n      }\n\n      // Increment EMITS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of events pushed to buffer -\n\n      mstore(0x140, add(1, mload(0x140)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.log uses assembly (Provider.sol#694-730)\n\t- Provider.sol#695-729\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": 754,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n\n    bytes4 action_req = PAYS;\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push requestor to the end of buffer, as well as to the 'current action' slot -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n\n      // Push '0' to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n\n      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n\n      // Increment buffer length - 0x24 plus the previous length\n\n      mstore(ptr, add(0x24, mload(ptr)))\n\n      // Set the current action being executed (PAYS) -\n\n      mstore(0xe0, action_req)\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n      // Set a pointer to the length of the current request within the buffer\n\n      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.paying uses assembly (Provider.sol#734-754)\n\t- Provider.sol#736-753\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": 778,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment amount to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_DEST\n\n      mstore(0x100, 7)\n\n      // Increment PAYS action length -\n\n      mstore(\n\n        mload(sub(ptr, 0x20)),\n\n        add(1, mload(mload(sub(ptr, 0x20))))\n\n      )\n\n      // Update number of payment destinations to be pushed to -\n\n      mstore(0x160, add(1, mload(0x160)))\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n\n    return _amount;\n",
                    "message": "Contract.pay uses assembly (Provider.sol#757-778)\n\t- Provider.sol#758-776\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n\n    assembly {\n\n      // Get pointer to buffer length -\n\n      let ptr := add(0x20, mload(0xc0))\n\n      // Push payment destination to the end of the buffer -\n\n      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n\n      // Increment buffer length - 0x20 plus the previous length\n\n      mstore(ptr, add(0x20, mload(ptr)))\n\n      // Set the expected next function - PAY_AMT\n\n      mstore(0x100, 8)\n\n    }\n\n    // Update free memory pointer\n\n    setFreeMem();\n",
                    "message": "Contract.toAcc uses assembly (Provider.sol#781-794)\n\t- Provider.sol#782-793\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": 799,
                    "vulnerability_code": "  function setFreeMem() private pure {\n\n    assembly { mstore(0x40, msize) }\n",
                    "message": "Contract.setFreeMem uses assembly (Provider.sol#797-799)\n\t- Provider.sol#798-799\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": 804,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n\n    assembly { next := mload(0x100) }\n",
                    "message": "Contract.expected uses assembly (Provider.sol#802-804)\n\t- Provider.sol#803-804\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": 813,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number emitted from buffer -\n\n    assembly { num_emitted := mload(0x140) }\n",
                    "message": "Contract.emitted uses assembly (Provider.sol#807-813)\n\t- Provider.sol#812-813\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": 822,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number stored from buffer -\n\n    assembly { num_stored := mload(0x120) }\n",
                    "message": "Contract.stored uses assembly (Provider.sol#816-822)\n\t- Provider.sol#821-822\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": 831,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n\n    if (buffPtr() == bytes32(0))\n\n      return 0;\n\n\n\n    // Load number paid from buffer -\n\n    assembly { num_paid := mload(0x160) }\n",
                    "message": "Contract.paid uses assembly (Provider.sol#825-831)\n\t- Provider.sol#830-831\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": 1076,
                    "vulnerability_code": "  function registryRead(bytes32 _location, bytes32 _registry_id) internal view returns (bytes32 value) {\n\n    _location = keccak256(_location, _registry_id);\n\n    assembly { value := sload(_location) }\n",
                    "message": "Provider.registryRead uses assembly (Provider.sol#1073-1076)\n\t- Provider.sol#1075-1076\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in Provider.sol:\n\t- pragma solidity^0.4.23 (Provider.sol#3): it allows old versions\n\t- pragma solidity^0.4.23 (Provider.sol#46): it allows old versions\n\t- pragma solidity^0.4.23 (Provider.sol#836): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": "Parameter '_script_exec' of Contract.authorize (Provider.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checks(function () pure _check) conditions(validState, validState) internal pure {\n",
                    "message": "Parameter '_check' of Contract.checks (Provider.sol#132) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": "Parameter '_location' of Contract.read (Provider.sol#274) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": "Parameter '_field' of Contract.set (Provider.sol#369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '' of Contract.to (Provider.sol#393) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Provider.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, uint _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Provider.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Provider.sol#414) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, address _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Provider.sol#414) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_field' of Contract.to (Provider.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32 _field, bool _val) internal pure {\n",
                    "message": "Parameter '_val' of Contract.to (Provider.sol#419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.increase (Provider.sol#426) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": "Parameter '_field' of Contract.decrease (Provider.sol#452) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.by (Provider.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.by (Provider.sol#478) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_val' of Contract.byMaximum (Provider.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": "Parameter '_amt' of Contract.byMaximum (Provider.sol#503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": "Parameter '_amount' of Contract.pay (Provider.sol#757) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": "Parameter '' of Contract.toAcc (Provider.sol#781) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 847,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execPermissions(address _exec) internal pure returns (bytes32)\n",
                    "message": "Parameter '_exec' of Provider.execPermissions (Provider.sol#847) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 851,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appSelectors(bytes4 _selector) internal pure returns (bytes32)\n",
                    "message": "Parameter '_selector' of Provider.appSelectors (Provider.sol#851) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.appBase (Provider.sol#859) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionList(bytes32 _app) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.appVersionList (Provider.sol#863) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionBase (Provider.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionBase(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionBase (Provider.sol#867) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionIndex (Provider.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 871,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionIndex(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionIndex (Provider.sol#871) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionSelectors (Provider.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionSelectors(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionSelectors (Provider.sol#875) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.versionAddresses (Provider.sol#879) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function versionAddresses(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.versionAddresses (Provider.sol#879) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 883,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function previousVersion(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.previousVersion (Provider.sol#883) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 883,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function previousVersion(bytes32 _app, bytes32 _version) internal pure returns (bytes32)\n",
                    "message": "Parameter '_version' of Provider.previousVersion (Provider.sol#883) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 887,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionListAt(bytes32 _app, uint _index) internal pure returns (bytes32)\n",
                    "message": "Parameter '_app' of Provider.appVersionListAt (Provider.sol#887) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 887,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appVersionListAt(bytes32 _app, uint _index) internal pure returns (bytes32)\n",
                    "message": "Parameter '_index' of Provider.appVersionListAt (Provider.sol#887) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_app' of Provider.registerApp (Provider.sol#891) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_index' of Provider.registerApp (Provider.sol#891) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_selectors' of Provider.registerApp (Provider.sol#891) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 891,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerApp(bytes32 _app, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_implementations' of Provider.registerApp (Provider.sol#891) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_app' of Provider.registerAppVersion (Provider.sol#946) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_version' of Provider.registerAppVersion (Provider.sol#946) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_index' of Provider.registerAppVersion (Provider.sol#946) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_selectors' of Provider.registerAppVersion (Provider.sol#946) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 946,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registerAppVersion(bytes32 _app, bytes32 _version, address _index, bytes4[] _selectors, address[] _implementations) external view {\n",
                    "message": "Parameter '_implementations' of Provider.registerAppVersion (Provider.sol#946) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(bytes32 _app_name, bytes32 _current_version, bytes32 _registry_id) external view {\n",
                    "message": "Parameter '_app_name' of Provider.updateInstance (Provider.sol#1002) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(bytes32 _app_name, bytes32 _current_version, bytes32 _registry_id) external view {\n",
                    "message": "Parameter '_current_version' of Provider.updateInstance (Provider.sol#1002) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1002,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateInstance(bytes32 _app_name, bytes32 _current_version, bytes32 _registry_id) external view {\n",
                    "message": "Parameter '_registry_id' of Provider.updateInstance (Provider.sol#1002) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateExec(address _new_exec_addr) external view {\n",
                    "message": "Parameter '_new_exec_addr' of Provider.updateExec (Provider.sol#1051) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registryRead(bytes32 _location, bytes32 _registry_id) internal view returns (bytes32 value) {\n",
                    "message": "Parameter '_location' of Provider.registryRead (Provider.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registryRead(bytes32 _location, bytes32 _registry_id) internal view returns (bytes32 value) {\n",
                    "message": "Parameter '_registry_id' of Provider.registryRead (Provider.sol#1073) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1087,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(bytes32 _app, bytes32 _registry_id) internal view returns (bytes32) {\n",
                    "message": "Parameter '_app' of Provider.getLatestVersion (Provider.sol#1087) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1087,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(bytes32 _app, bytes32 _registry_id) internal view returns (bytes32) {\n",
                    "message": "Parameter '_registry_id' of Provider.getLatestVersion (Provider.sol#1087) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionIndex(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (address) {\n",
                    "message": "Parameter '_app' of Provider.getVersionIndex (Provider.sol#1101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionIndex(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (address) {\n",
                    "message": "Parameter '_version' of Provider.getVersionIndex (Provider.sol#1101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionIndex(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (address) {\n",
                    "message": "Parameter '_registry_id' of Provider.getVersionIndex (Provider.sol#1101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementations(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (address[] memory impl) {\n",
                    "message": "Parameter '_app' of Provider.getVersionImplementations (Provider.sol#1113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementations(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (address[] memory impl) {\n",
                    "message": "Parameter '_version' of Provider.getVersionImplementations (Provider.sol#1113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementations(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (address[] memory impl) {\n",
                    "message": "Parameter '_registry_id' of Provider.getVersionImplementations (Provider.sol#1113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionSelectors(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (bytes4[] memory sels) {\n",
                    "message": "Parameter '_app' of Provider.getVersionSelectors (Provider.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionSelectors(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (bytes4[] memory sels) {\n",
                    "message": "Parameter '_version' of Provider.getVersionSelectors (Provider.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionSelectors(bytes32 _app, bytes32 _version, bytes32 _registry_id) internal view returns (bytes4[] memory sels) {\n",
                    "message": "Parameter '_registry_id' of Provider.getVersionSelectors (Provider.sol#1133) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes4 internal constant THROWS = bytes4(keccak256('Error(string)'));\n",
                    "message": "Contract.THROWS (Provider.sol#284) is never used in Contract\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(freeMem() == 0x80, \"Memory allocated prior to execution\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ptr >= 0x180, \"Invalid buffer pointer\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1031,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      Contract.set(appSelectors(current_selectors[i])).to(address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1030,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < current_selectors.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (i = 0; i < latest_selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registryRead(bytes32 _location, bytes32 _registry_id) internal view returns (bytes32 value) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < _selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1030,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < current_selectors.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (i = 0; i < latest_selectors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (!authorized)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (freeMem() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (buffPtr() != 0 && buffPtr() < 0x180)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (currentAction() != PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (stored() != 0 || currentAction() == STORES)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (emitted() != 0 || currentAction() == EMITS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (paid() != 0 || currentAction() == PAYS)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.STORE_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_DEST)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.PAY_AMT)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() != NextFunction.EMIT_LOG)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (expected() == NextFunction.VAL_DEC)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (expected() == NextFunction.VAL_DEC) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 896,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (Contract.read(appBase(_app)) != bytes32(0))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 899,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (_selectors.length != _implementations.length || _selectors.length == 0)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 952,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (Contract.read(appBase(_app)) == bytes32(0))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 955,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (Contract.read(versionBase(_app, _version)) != bytes32(0))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 958,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function commit() conditions(validState, none) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function validState() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function buffPtr() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function freeMem() private pure returns (bytes32 ptr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function currentAction() private pure returns (bytes4 action) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function startBuffer() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function execID() internal pure returns (bytes32 exec_id) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sender() internal pure returns (address addr) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function storing() conditions(validStoreBuff, isStoring) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 393,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 586,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 734,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paying() conditions(validPayBuff, isPaying) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 757,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 781,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 797,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setFreeMem() private pure {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 802,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function expected() private pure returns (NextFunction next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function emitted() internal pure returns (uint num_emitted) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function stored() internal pure returns (uint num_stored) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function paid() internal pure returns (uint num_paid) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registeredApps() internal pure returns (bytes32)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function appBase(bytes32 _app) internal pure returns (bytes32)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function authorize(address _script_exec) internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function initialize() internal view {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 _location) internal view returns (bytes32 data) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function registryRead(bytes32 _location, bytes32 _registry_id) internal view returns (bytes32 value) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    data = keccak256(_location, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    val = keccak256(_field, execID());\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_exec, keccak256('script_exec_permissions')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_selector, 'implementation'); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 856,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(bytes32(Contract.sender()), 'app_list'); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(Contract.sender()), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_app, keccak256(bytes32(Contract.sender()), 'app_base')); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('versions', appBase(_app)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 868,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(_version, 'version', appBase(_app)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 872,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('index', versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 876,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('selectors', versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256('addresses', versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    { return keccak256(\"previous version\", versionBase(_app, _version)); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1074,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _location = keccak256(_location, _registry_id);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0xc0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { ptr := mload(0x40) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { action := mload(0xe0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { exec_id := mload(0x80) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { addr := mload(0xa0) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { data := sload(data) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 622,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 736,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 758,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { mstore(0x40, msize) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { next := mload(0x100) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 812,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_emitted := mload(0x140) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 821,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_stored := mload(0x120) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { num_paid := mload(0x160) }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { value := sload(_location) }\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/lib/ArrayUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr (ArrayUtils.sol#7-9) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr (ArrayUtils.sol#11-13) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr (ArrayUtils.sol#15-17) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 9,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toBytes4Arr uses assembly (ArrayUtils.sol#7-9)\n\t- ArrayUtils.sol#8-9\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toAddressArr uses assembly (ArrayUtils.sol#11-13)\n\t- ArrayUtils.sol#12-13\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n\n    assembly { _conv := _arr }\n",
                    "message": "ArrayUtils.toUintArr uses assembly (ArrayUtils.sol#15-17)\n\t- ArrayUtils.sol#16-17\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in ArrayUtils.sol:\n\t- pragma solidity^0.4.23 (ArrayUtils.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly { _conv := _arr }\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/lib/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, \"Overflow - Multiplication\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(b <= a, \"Underflow - Subtraction\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, \"Overflow - Addition\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity^0.4.23 (SafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/lib/StringUtils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n\n    assembly {\n\n      str := mload(0x40)\n\n      mstore(str, 0x20)\n\n      mstore(add(0x20, str), _val)\n\n      mstore(0x40, add(0x40, str))\n\n    }\n",
                    "message": "StringUtils.toStr (StringUtils.sol#7-14) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n\n    assembly {\n\n      str := mload(0x40)\n\n      mstore(str, 0x20)\n\n      mstore(add(0x20, str), _val)\n\n      mstore(0x40, add(0x40, str))\n\n    }\n",
                    "message": "StringUtils.toStr uses assembly (StringUtils.sol#7-14)\n\t- StringUtils.sol#8-14\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in StringUtils.sol:\n\t- pragma solidity^0.4.23 (StringUtils.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function toStr(bytes32 _val) internal pure returns (string memory str) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/interfaces/GetterInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in GetterInterface.sol:\n\t- pragma solidity^0.4.23 (GetterInterface.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function read(bytes32 exec_id, bytes32 location) external view returns (bytes32 data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.read (GetterInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function readMulti(bytes32 exec_id, bytes32[] locations) external view returns (bytes32[] data);\n",
                    "message": "Parameter 'exec_id' of GetterInterface.readMulti (GetterInterface.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/interfaces/RegistryInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in RegistryInterface.sol:\n\t- pragma solidity^0.4.23 (RegistryInterface.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getLatestVersion (RegistryInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getLatestVersion (RegistryInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestVersion(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getLatestVersion (RegistryInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'stor_addr' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'exec_id' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'app_name' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getVersionImplementation(address stor_addr, bytes32 exec_id, address provider, bytes32 app_name, bytes32 version_name)\n",
                    "message": "Parameter 'version_name' of RegistryInterface.getVersionImplementation (RegistryInterface.sol#8) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    },
    "core-dev/contracts/interfaces/StorageInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in StorageInterface.sol:\n\t- pragma solidity^0.4.23 (StorageInterface.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTarget(bytes32 exec_id, bytes4 selector)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getTarget (StorageInterface.sol#6) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getIndex(bytes32 exec_id) external view returns (address index);\n",
                    "message": "Parameter 'exec_id' of StorageInterface.getIndex (StorageInterface.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'app_name' of StorageInterface.createInstance (StorageInterface.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createInstance(address sender, bytes32 app_name, address provider, bytes32 registry_exec_id, bytes calldata)\n",
                    "message": "Parameter 'registry_exec_id' of StorageInterface.createInstance (StorageInterface.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function exec(address sender, bytes32 exec_id, bytes calldata)\n",
                    "message": "Parameter 'exec_id' of StorageInterface.exec (StorageInterface.sol#12) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                }
            ]
        }
    }
}