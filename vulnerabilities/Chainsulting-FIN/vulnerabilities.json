{
    "FinToken/FinToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_35"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction totalSupply() public view returns (uint256);\n",
                    "message": "ERC20Basic.totalSupply (FinToken.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "\tfunction totalSupply() public view returns (uint256) {\n\n\t\treturn totalSupply_;\n",
                    "message": "BasicToken.totalSupply (FinToken.sol#83-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (FinToken.sol#64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": 109,
                    "vulnerability_code": "\tfunction balanceOf(address _owner) public view returns (uint256) {\n\n\t\treturn balances[_owner];\n",
                    "message": "BasicToken.balanceOf (FinToken.sol#107-109) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (FinToken.sol#118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 178,
                    "vulnerability_code": "\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\n\t\treturn allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (FinToken.sol#176-178) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n\n\t\tallowed[msg.sender][_spender] = _value;\n\n\t\temit Approval(msg.sender, _spender, _value);\n\n\t\treturn true;\n",
                    "message": "StandardToken.approve (FinToken.sol#164-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (FinToken.sol#120) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": 194,
                    "vulnerability_code": "\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n\t\treturn true;\n",
                    "message": "StandardToken.increaseApproval (FinToken.sol#190-194) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": 215,
                    "vulnerability_code": "\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n\t\tuint oldValue = allowed[msg.sender][_spender];\n\n\t\tif (_subtractedValue > oldValue) {\n\n\t\t\tallowed[msg.sender][_spender] = 0;\n\n\t\t} else {\n\n\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n\t\t}\n\n\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n\t\treturn true;\n",
                    "message": "StandardToken.decreaseApproval (FinToken.sol#206-215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": 266,
                    "vulnerability_code": "\tfunction addVerificatorAddress(address addr) public onlyOwner {\n\n\t\tverificatorAddresses[addr] = true;\n\n\t\temit AddVerificator(addr);\n",
                    "message": "FinToken.addVerificatorAddress (FinToken.sol#263-266) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "\tfunction removeVerificatorAddress(address addr) public onlyOwner {\n\n\t\tdelete verificatorAddresses[addr];\n\n\t\temit RemoveVerificator(addr);\n",
                    "message": "FinToken.removeVerificatorAddress (FinToken.sol#268-271) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "\tfunction addVerifiedAddress(address addr) public onlyVerificator {\n\n\t\tverifiedAddresses[addr] = true;\n\n\t\temit AddVerified(msg.sender, addr);\n",
                    "message": "FinToken.addVerifiedAddress (FinToken.sol#277-280) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 285,
                    "vulnerability_code": "\tfunction removeVerifiedAddress(address addr) public onlyVerificator {\n\n\t\tdelete verifiedAddresses[addr];\n\n\t\temit RemoveVerified(msg.sender, addr);\n",
                    "message": "FinToken.removeVerifiedAddress (FinToken.sol#282-285) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": "Detected issues with version pragma in FinToken.sol:\n\t- pragma solidity^0.4.21 (FinToken.sol#8): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (FinToken.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (FinToken.sol#92) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (FinToken.sol#92) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (FinToken.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (FinToken.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (FinToken.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (FinToken.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (FinToken.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (FinToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (FinToken.sol#164) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (FinToken.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (FinToken.sol#190) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (FinToken.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (FinToken.sol#206) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public onlyVerified(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of FinToken.transfer (FinToken.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public onlyVerified(msg.sender, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of FinToken.transfer (FinToken.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyVerified(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_from' of FinToken.transferFrom (FinToken.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyVerified(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_to' of FinToken.transferFrom (FinToken.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyVerified(_from, _to) returns (bool) {\n",
                    "message": "Parameter '_value' of FinToken.transferFrom (FinToken.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "\tfunction FinToken() public {\n\n\t\towner = msg.sender;\n\n\t\ttotalSupply_ = INITIAL_SUPPLY;\n\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\n\t\temit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n",
                    "message": "Function 'FinToken.FinToken' (FinToken.sol#256-261) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction isVerificator(address addr) public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction isVerified(address addr) public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public onlyVerified(msg.sender, _to) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyVerified(_from, _to) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transfer(address _to, uint256 _value) public onlyVerified(msg.sender, _to) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyVerified(_from, _to) returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.21;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tusing SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tmapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tuint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    }
}