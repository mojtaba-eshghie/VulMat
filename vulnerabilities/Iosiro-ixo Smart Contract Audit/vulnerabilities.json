{
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "    function setCompleted(uint completed) public restricted {\n\n        last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "    function upgrade(address new_address) public restricted {\n\n        Migrations upgraded = Migrations(new_address);\n\n        upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.18 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "    function Migrations() public {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/mocks/MockProjectWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public called = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sender = _sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        receiver = _receiver;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        amt = _amt;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender == _sender, \"sender mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(receiver == _receiver, \"receiver mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amt == _amt, \"amt mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (MockProjectWallet.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n\n    {\n\n        require(sender == _sender, \"sender mismatch\");\n\n        require(receiver == _receiver, \"receiver mismatch\");\n\n        require(amt == _amt, \"amt mismatch\");\n\n        called = called + 1;\n\n        return true;\n",
                    "message": "MockProjectWallet.transfer (MockProjectWallet.sol#28-35) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Parameter '_sender' of MockProjectWallet. (MockProjectWallet.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Parameter '_receiver' of MockProjectWallet. (MockProjectWallet.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Parameter '_amt' of MockProjectWallet. (MockProjectWallet.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n",
                    "message": "Parameter '_sender' of MockProjectWallet.transfer (MockProjectWallet.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n",
                    "message": "Parameter '_receiver' of MockProjectWallet.transfer (MockProjectWallet.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n",
                    "message": "Parameter '_amt' of MockProjectWallet.transfer (MockProjectWallet.sol#28) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address receiver;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 amt;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/token/ERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (ERC20.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (ERC20.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ERC20.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (ERC20.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (ERC20.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ERC20.sol#16) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/token/IxoERC20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract IxoERC20Token is ERC20, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / _a == _b, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b > 0, \"SafeMath failure\"); // Solidity only automatically asserts when dividing by 0\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b <= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[msg.sender], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[_from], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_50"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public decimals = 8;\n",
                    "message": "IxoERC20Token.decimals should be constant (IxoERC20Token.sol#180)\nIxoERC20Token.name should be constant (IxoERC20Token.sol#178)\nIxoERC20Token.symbol should be constant (IxoERC20Token.sol#179)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (IxoERC20Token.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (IxoERC20Token.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (IxoERC20Token.sol#136) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
                    "message": "IxoERC20Token.totalSupply (IxoERC20Token.sol#232-234) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (IxoERC20Token.sol#138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 243,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "IxoERC20Token.balanceOf (IxoERC20Token.sol#241-243) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (IxoERC20Token.sol#140) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n    )\n\n    public view returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n",
                    "message": "IxoERC20Token.allowance (IxoERC20Token.sol#251-258) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n\n        require(_value <= balances[msg.sender], \"Not enough funds\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transfer (IxoERC20Token.sol#265-273) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (IxoERC20Token.sol#142) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (IxoERC20Token.sol#144) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 288,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.approve (IxoERC20Token.sol#284-288) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public returns (bool)\n\n    {\n\n        require(_value <= balances[_from], \"Not enough funds\");\n\n        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transferFrom (IxoERC20Token.sol#296-312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (IxoERC20Token.sol#146) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n\n        _setMinter(_newMinter);\n",
                    "message": "IxoERC20Token.setMinter (IxoERC20Token.sol#194-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 227,
                    "vulnerability_code": "    function mint(\n\n        address _to,\n\n        uint256 _amount\n\n        )\n\n    public hasMintPermission returns (bool)\n\n    {\n\n        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n\n\n\n        totalSupply_ = totalSupply_.add(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n\n\n        emit Mint(_to, _amount);\n\n        emit Transfer(address(0), _to, _amount);\n\n\t\t\t\t\n\n        return true;\n",
                    "message": "IxoERC20Token.mint (IxoERC20Token.sol#212-227) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "    function increaseApproval(\n\n        address _spender,\n\n        uint256 _addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        allowed[msg.sender][_spender] = (\n\n            allowed[msg.sender][_spender].add(_addedValue));\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.increaseApproval (IxoERC20Token.sol#323-334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 360,
                    "vulnerability_code": "    function decreaseApproval(\n\n        address _spender,\n\n        uint256 _subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue >= oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.decreaseApproval (IxoERC20Token.sol#345-360) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (IxoERC20Token.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (IxoERC20Token.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (IxoERC20Token.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.mul (IxoERC20Token.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.mul (IxoERC20Token.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.div (IxoERC20Token.sol#93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.div (IxoERC20Token.sol#93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.sub (IxoERC20Token.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.sub (IxoERC20Token.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.add (IxoERC20Token.sol#114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.add (IxoERC20Token.sol#114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of IxoERC20Token.balanceOf (IxoERC20Token.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of IxoERC20Token.allowance (IxoERC20Token.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender\n",
                    "message": "Parameter '_spender' of IxoERC20Token.allowance (IxoERC20Token.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of IxoERC20Token.transfer (IxoERC20Token.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.transfer (IxoERC20Token.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of IxoERC20Token.approve (IxoERC20Token.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.approve (IxoERC20Token.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of IxoERC20Token.transferFrom (IxoERC20Token.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.transferFrom (IxoERC20Token.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _value\n",
                    "message": "Parameter '_value' of IxoERC20Token.transferFrom (IxoERC20Token.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token.setMinter (IxoERC20Token.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n\n        minter = _newMinter;\n",
                    "message": "Function 'IxoERC20Token._setMinter' (IxoERC20Token.sol#202-204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token._setMinter (IxoERC20Token.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.mint (IxoERC20Token.sol#213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of IxoERC20Token.mint (IxoERC20Token.sol#214) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.increaseApproval (IxoERC20Token.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _addedValue\n",
                    "message": "Parameter '_addedValue' of IxoERC20Token.increaseApproval (IxoERC20Token.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.decreaseApproval (IxoERC20Token.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _subtractedValue\n",
                    "message": "Parameter '_subtractedValue' of IxoERC20Token.decreaseApproval (IxoERC20Token.sol#347) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public CAP = 10000000000 * (10 ** decimals); // 10,000,000,000\n",
                    "message": "Variable 'IxoERC20Token.CAP' (IxoERC20Token.sol#181) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/auth/AuthContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ProjectWalletAuthoriser is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract AuthContract is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        members = _members;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        quorum = _quorum;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isMember[members[i]] = true;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isMember[members[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isMember[members[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isMember[msg.sender], \"Not a member\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!actions[_tx].triggered, \"Transaction already triggered\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tx != 0, \"Invalid transaction id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_target != address(0), \"Invalid target\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_sender != address(0), \"Invalid sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_receiver != address(0), \"Invalid receiver\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amt >= 0, \"Invalid amount\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_27"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        // SWC-Unchecked Call Return Value: L38\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (AuthContract.sol#105-115) does not use the value returned by external calls:\n\t-ProjectWallet(_sender).transfer(_receiver,_amt) (AuthContract.sol#114)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n\n        actions[_tx].triggered = true;\n\n        ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender, actions[_tx].receiver, actions[_tx].amt);\n",
                    "message": "AuthContract._trigger (AuthContract.sol#205-208) does not use the value returned by external calls:\n\t-ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender,actions[_tx].receiver,actions[_tx].amt) (AuthContract.sol#207)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (AuthContract.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (AuthContract.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (AuthContract.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n\n    {\n\n        authoriser = _authoriser;\n",
                    "message": "ProjectWalletAuthoriser.setAuthoriser (AuthContract.sol#94-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        // SWC-Unchecked Call Return Value: L38\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (AuthContract.sol#105-115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "    function memberCount() public view returns (uint) {\n\n        return members.length;\n",
                    "message": "AuthContract.memberCount (AuthContract.sol#168-170) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n\n        quorum = _quorum;\n",
                    "message": "AuthContract.setQuorum (AuthContract.sol#172-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "    function validate(\n\n        bytes32  _tx,\n\n        address  _target,\n\n        address  _sender,\n\n        address  _receiver,\n\n        uint256  _amt\n\n    ) public onlyMembers returns (bool) {\n\n        require(_tx != 0, \"Invalid transaction id\");\n\n        require(_target != address(0), \"Invalid target\");\n\n        require(_sender != address(0), \"Invalid sender\");\n\n        require(_receiver != address(0), \"Invalid receiver\");\n\n        require(_amt >= 0, \"Invalid amount\");\n\n        actions[_tx].target = _target;\n\n        actions[_tx].sender = _sender;\n\n        actions[_tx].receiver = _receiver;\n\n        actions[_tx].amt = _amt;\n\n        actions[_tx].triggered = false;\n\n        actions[_tx].confirmations = actions[_tx].confirmations + 1;\n\n\n\n        emit Confirmed(_tx, msg.sender);\n\n\n\n        if(actions[_tx].confirmations >= quorum){\n\n            _trigger(_tx);\n\n            emit Triggered(_tx);\n\n        }\n\n\n\n        return true;\n",
                    "message": "AuthContract.validate (AuthContract.sol#176-203) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (AuthContract.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (AuthContract.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (AuthContract.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": "Parameter '_authoriser' of ProjectWalletAuthoriser.setAuthoriser (AuthContract.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _sender, \n",
                    "message": "Parameter '_sender' of ProjectWalletAuthoriser.transfer (AuthContract.sol#106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver, \n",
                    "message": "Parameter '_receiver' of ProjectWalletAuthoriser.transfer (AuthContract.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of ProjectWalletAuthoriser.transfer (AuthContract.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": "Parameter '_members' of AuthContract. (AuthContract.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": "Parameter '_quorum' of AuthContract. (AuthContract.sol#146) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n",
                    "message": "Parameter '_quorum' of AuthContract.setQuorum (AuthContract.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32  _tx,\n",
                    "message": "Parameter '_tx' of AuthContract.validate (AuthContract.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address  _target,\n",
                    "message": "Parameter '_target' of AuthContract.validate (AuthContract.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address  _sender,\n",
                    "message": "Parameter '_sender' of AuthContract.validate (AuthContract.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address  _receiver,\n",
                    "message": "Parameter '_receiver' of AuthContract.validate (AuthContract.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256  _amt\n",
                    "message": "Parameter '_amt' of AuthContract.validate (AuthContract.sol#181) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n\n        actions[_tx].triggered = true;\n\n        ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender, actions[_tx].receiver, actions[_tx].amt);\n",
                    "message": "Function 'AuthContract._trigger' (AuthContract.sol#205-208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n",
                    "message": "Parameter '_tx' of AuthContract._trigger (AuthContract.sol#205) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/utils/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (Ownable.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (Ownable.sol#52-54) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (Ownable.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (Ownable.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (Ownable.sol#60) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/utils/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / _a == _b, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b > 0, \"SafeMath failure\"); // Solidity only automatically asserts when dividing by 0\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b <= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.mul (SafeMath.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.mul (SafeMath.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.div (SafeMath.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.div (SafeMath.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.sub (SafeMath.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.sub (SafeMath.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.add (SafeMath.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.add (SafeMath.sol#48) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/project/ProjectWalletFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletFactory.sol#77-85) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (ProjectWalletFactory.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWalletFactory.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletFactory.sol#77-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (ProjectWalletFactory.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (ProjectWalletFactory.sol#18) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ProjectWalletFactory.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (ProjectWalletFactory.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (ProjectWalletFactory.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ProjectWalletFactory.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        address wallet = new BasicProjectWallet(_token, _authoriser, _name);\n\n        return wallet;\n",
                    "message": "ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101-105) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver,\n",
                    "message": "Parameter '_receiver' of BasicProjectWallet.transfer (ProjectWalletFactory.sol#78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of BasicProjectWallet.transfer (ProjectWalletFactory.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_token' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_authoriser' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_name' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_token' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_authoriser' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/project/ProjectWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWallet.sol#7) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/project/BasicProjectWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (BasicProjectWallet.sol#77-85) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (BasicProjectWallet.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (BasicProjectWallet.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (BasicProjectWallet.sol#77-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (BasicProjectWallet.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (BasicProjectWallet.sol#18) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (BasicProjectWallet.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (BasicProjectWallet.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (BasicProjectWallet.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (BasicProjectWallet.sol#26) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver,\n",
                    "message": "Parameter '_receiver' of BasicProjectWallet.transfer (BasicProjectWallet.sol#78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of BasicProjectWallet.transfer (BasicProjectWallet.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_token' of BasicProjectWallet. (BasicProjectWallet.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_authoriser' of BasicProjectWallet. (BasicProjectWallet.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_name' of BasicProjectWallet. (BasicProjectWallet.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/project/ProjectWalletRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract IxoERC20Token is ERC20, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ProjectWalletRegistry is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        factory = _factory;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / _a == _b, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b > 0, \"SafeMath failure\"); // Solidity only automatically asserts when dividing by 0\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b <= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[msg.sender], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[_from], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(factory != address(0), \"Invalid factory\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_74"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletRegistry.sol#143-151) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (ProjectWalletRegistry.sol#150)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": 503,
                    "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n\n        address newWallet = ProjectWalletFactory(factory).createWallet(token, authoriser, _name);\n\n        wallets[_name] = newWallet;\n",
                    "message": "Reentrancy in ProjectWalletRegistry._createWallet (ProjectWalletRegistry.sol#500-503):\n\tExternal calls:\n\t- newWallet = ProjectWalletFactory(factory).createWallet(token,authoriser,_name) (ProjectWalletRegistry.sol#501)\n\tState variables written after the call(s):\n\t- wallets (ProjectWalletRegistry.sol#502)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public decimals = 8;\n",
                    "message": "IxoERC20Token.decimals should be constant (ProjectWalletRegistry.sol#257)\nIxoERC20Token.name should be constant (ProjectWalletRegistry.sol#255)\nIxoERC20Token.symbol should be constant (ProjectWalletRegistry.sol#256)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (ProjectWalletRegistry.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (ProjectWalletRegistry.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletRegistry.sol#143-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWalletRegistry.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
                    "message": "IxoERC20Token.totalSupply (ProjectWalletRegistry.sol#309-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (ProjectWalletRegistry.sol#82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (ProjectWalletRegistry.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "IxoERC20Token.balanceOf (ProjectWalletRegistry.sol#318-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n    )\n\n    public view returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n",
                    "message": "IxoERC20Token.allowance (ProjectWalletRegistry.sol#328-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ProjectWalletRegistry.sol#86) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (ProjectWalletRegistry.sol#88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n\n        require(_value <= balances[msg.sender], \"Not enough funds\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transfer (ProjectWalletRegistry.sol#342-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.approve (ProjectWalletRegistry.sol#361-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (ProjectWalletRegistry.sol#90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ProjectWalletRegistry.sol#92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": 389,
                    "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public returns (bool)\n\n    {\n\n        require(_value <= balances[_from], \"Not enough funds\");\n\n        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#373-389) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        address wallet = new BasicProjectWallet(_token, _authoriser, _name);\n\n        return wallet;\n",
                    "message": "ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167-171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n\n        _setMinter(_newMinter);\n",
                    "message": "IxoERC20Token.setMinter (ProjectWalletRegistry.sol#271-273) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function mint(\n\n        address _to,\n\n        uint256 _amount\n\n        )\n\n    public hasMintPermission returns (bool)\n\n    {\n\n        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n\n\n\n        totalSupply_ = totalSupply_.add(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n\n\n        emit Mint(_to, _amount);\n\n        emit Transfer(address(0), _to, _amount);\n\n\t\t\t\t\n\n        return true;\n",
                    "message": "IxoERC20Token.mint (ProjectWalletRegistry.sol#289-304) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 411,
                    "vulnerability_code": "    function increaseApproval(\n\n        address _spender,\n\n        uint256 _addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        allowed[msg.sender][_spender] = (\n\n            allowed[msg.sender][_spender].add(_addedValue));\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#400-411) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function decreaseApproval(\n\n        address _spender,\n\n        uint256 _subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue >= oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#422-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n\n        require(factory != address(0), \"Invalid factory\");\n\n        factory = _factory;\n",
                    "message": "ProjectWalletRegistry.setFactory (ProjectWalletRegistry.sol#470-473) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 486,
                    "vulnerability_code": "    function ensureWallet(bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        if(wallets[_name] == address(0)) {\n\n            _createWallet(_name);\n\n        }\n\n        address wallet = wallets[_name];\n\n        return wallet;\n",
                    "message": "ProjectWalletRegistry.ensureWallet (ProjectWalletRegistry.sol#479-486) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function walletOf(bytes32 _name) public view returns (address) {\n\n        return wallets[_name];\n",
                    "message": "ProjectWalletRegistry.walletOf (ProjectWalletRegistry.sol#492-494) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (ProjectWalletRegistry.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (ProjectWalletRegistry.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (ProjectWalletRegistry.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver,\n",
                    "message": "Parameter '_receiver' of BasicProjectWallet.transfer (ProjectWalletRegistry.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of BasicProjectWallet.transfer (ProjectWalletRegistry.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_token' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_authoriser' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_name' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_token' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_authoriser' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.mul (ProjectWalletRegistry.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.mul (ProjectWalletRegistry.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.div (ProjectWalletRegistry.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.div (ProjectWalletRegistry.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.sub (ProjectWalletRegistry.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.sub (ProjectWalletRegistry.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.add (ProjectWalletRegistry.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.add (ProjectWalletRegistry.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of IxoERC20Token.balanceOf (ProjectWalletRegistry.sol#318) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of IxoERC20Token.allowance (ProjectWalletRegistry.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender\n",
                    "message": "Parameter '_spender' of IxoERC20Token.allowance (ProjectWalletRegistry.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of IxoERC20Token.transfer (ProjectWalletRegistry.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.transfer (ProjectWalletRegistry.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of IxoERC20Token.approve (ProjectWalletRegistry.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.approve (ProjectWalletRegistry.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _value\n",
                    "message": "Parameter '_value' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token.setMinter (ProjectWalletRegistry.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n\n        minter = _newMinter;\n",
                    "message": "Function 'IxoERC20Token._setMinter' (ProjectWalletRegistry.sol#279-281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token._setMinter (ProjectWalletRegistry.sol#279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.mint (ProjectWalletRegistry.sol#290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of IxoERC20Token.mint (ProjectWalletRegistry.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _addedValue\n",
                    "message": "Parameter '_addedValue' of IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#423) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _subtractedValue\n",
                    "message": "Parameter '_subtractedValue' of IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public CAP = 10000000000 * (10 ** decimals); // 10,000,000,000\n",
                    "message": "Variable 'IxoERC20Token.CAP' (ProjectWalletRegistry.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Parameter '_token' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Parameter '_authoriser' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Parameter '_factory' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n",
                    "message": "Parameter '_factory' of ProjectWalletRegistry.setFactory (ProjectWalletRegistry.sol#470) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ensureWallet(bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletRegistry.ensureWallet (ProjectWalletRegistry.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function walletOf(bytes32 _name) public view returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletRegistry.walletOf (ProjectWalletRegistry.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": 503,
                    "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n\n        address newWallet = ProjectWalletFactory(factory).createWallet(token, authoriser, _name);\n\n        wallets[_name] = newWallet;\n",
                    "message": "Function 'ProjectWalletRegistry._createWallet' (ProjectWalletRegistry.sol#500-503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n",
                    "message": "Parameter '_name' of ProjectWalletRegistry._createWallet (ProjectWalletRegistry.sol#500) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private factory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => address) private wallets;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-417c40f1bd6600e5d1d8b49d136f2b97a098591c/contracts/project/ProjectWalletAuthoriser.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ProjectWalletAuthoriser is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        // SWC-Unchecked Call Return Value: L38\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#105-115) does not use the value returned by external calls:\n\t-ProjectWallet(_sender).transfer(_receiver,_amt) (ProjectWalletAuthoriser.sol#114)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (ProjectWalletAuthoriser.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (ProjectWalletAuthoriser.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWalletAuthoriser.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n\n    {\n\n        authoriser = _authoriser;\n",
                    "message": "ProjectWalletAuthoriser.setAuthoriser (ProjectWalletAuthoriser.sol#94-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        // SWC-Unchecked Call Return Value: L38\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#105-115) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (ProjectWalletAuthoriser.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (ProjectWalletAuthoriser.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (ProjectWalletAuthoriser.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": "Parameter '_authoriser' of ProjectWalletAuthoriser.setAuthoriser (ProjectWalletAuthoriser.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _sender, \n",
                    "message": "Parameter '_sender' of ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver, \n",
                    "message": "Parameter '_receiver' of ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#108) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "    function setCompleted(uint completed) public restricted {\n\n        last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "    function upgrade(address new_address) public restricted {\n\n        Migrations upgraded = Migrations(new_address);\n\n        upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.18 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "    function Migrations() public {\n\n        owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.18;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/mocks/MockProjectWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public called = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        sender = _sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        receiver = _receiver;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        amt = _amt;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender == _sender, \"sender mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(receiver == _receiver, \"receiver mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(amt == _amt, \"amt mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (MockProjectWallet.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n\n    {\n\n        require(sender == _sender, \"sender mismatch\");\n\n        require(receiver == _receiver, \"receiver mismatch\");\n\n        require(amt == _amt, \"amt mismatch\");\n\n        called = called + 1;\n\n        return true;\n",
                    "message": "MockProjectWallet.transfer (MockProjectWallet.sol#28-35) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Parameter '_sender' of MockProjectWallet. (MockProjectWallet.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Parameter '_receiver' of MockProjectWallet. (MockProjectWallet.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _sender, address _receiver, uint256 _amt) public {\n",
                    "message": "Parameter '_amt' of MockProjectWallet. (MockProjectWallet.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n",
                    "message": "Parameter '_sender' of MockProjectWallet.transfer (MockProjectWallet.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n",
                    "message": "Parameter '_receiver' of MockProjectWallet.transfer (MockProjectWallet.sol#28) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _sender, address _receiver, uint256 _amt) public returns (bool)\n",
                    "message": "Parameter '_amt' of MockProjectWallet.transfer (MockProjectWallet.sol#28) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address sender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address receiver;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 amt;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/token/ERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (ERC20.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (ERC20.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ERC20.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (ERC20.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (ERC20.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ERC20.sol#16) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/token/IxoERC20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract IxoERC20Token is ERC20, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / _a == _b, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b > 0, \"SafeMath failure\"); // Solidity only automatically asserts when dividing by 0\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b <= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[msg.sender], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[_from], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_50"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public decimals = 8;\n",
                    "message": "IxoERC20Token.decimals should be constant (IxoERC20Token.sol#180)\nIxoERC20Token.name should be constant (IxoERC20Token.sol#178)\nIxoERC20Token.symbol should be constant (IxoERC20Token.sol#179)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (IxoERC20Token.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (IxoERC20Token.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (IxoERC20Token.sol#136) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
                    "message": "IxoERC20Token.totalSupply (IxoERC20Token.sol#232-234) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (IxoERC20Token.sol#138) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 243,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "IxoERC20Token.balanceOf (IxoERC20Token.sol#241-243) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (IxoERC20Token.sol#140) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n    )\n\n    public view returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n",
                    "message": "IxoERC20Token.allowance (IxoERC20Token.sol#251-258) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n\n        require(_value <= balances[msg.sender], \"Not enough funds\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transfer (IxoERC20Token.sol#265-273) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (IxoERC20Token.sol#142) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (IxoERC20Token.sol#144) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": 288,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.approve (IxoERC20Token.sol#284-288) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 312,
                    "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public returns (bool)\n\n    {\n\n        require(_value <= balances[_from], \"Not enough funds\");\n\n        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transferFrom (IxoERC20Token.sol#296-312) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (IxoERC20Token.sol#146) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n\n        _setMinter(_newMinter);\n",
                    "message": "IxoERC20Token.setMinter (IxoERC20Token.sol#194-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": 227,
                    "vulnerability_code": "    function mint(\n\n        address _to,\n\n        uint256 _amount\n\n        )\n\n    public hasMintPermission returns (bool)\n\n    {\n\n        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n\n\n\n        totalSupply_ = totalSupply_.add(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n\n\n        emit Mint(_to, _amount);\n\n        emit Transfer(address(0), _to, _amount);\n\n\t\t\t\t\n\n        return true;\n",
                    "message": "IxoERC20Token.mint (IxoERC20Token.sol#212-227) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "    function increaseApproval(\n\n        address _spender,\n\n        uint256 _addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        allowed[msg.sender][_spender] = (\n\n            allowed[msg.sender][_spender].add(_addedValue));\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.increaseApproval (IxoERC20Token.sol#323-334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 360,
                    "vulnerability_code": "    function decreaseApproval(\n\n        address _spender,\n\n        uint256 _subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue >= oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.decreaseApproval (IxoERC20Token.sol#345-360) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (IxoERC20Token.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (IxoERC20Token.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (IxoERC20Token.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.mul (IxoERC20Token.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.mul (IxoERC20Token.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.div (IxoERC20Token.sol#93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.div (IxoERC20Token.sol#93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.sub (IxoERC20Token.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.sub (IxoERC20Token.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.add (IxoERC20Token.sol#114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.add (IxoERC20Token.sol#114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of IxoERC20Token.balanceOf (IxoERC20Token.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of IxoERC20Token.allowance (IxoERC20Token.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender\n",
                    "message": "Parameter '_spender' of IxoERC20Token.allowance (IxoERC20Token.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of IxoERC20Token.transfer (IxoERC20Token.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.transfer (IxoERC20Token.sol#265) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of IxoERC20Token.approve (IxoERC20Token.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.approve (IxoERC20Token.sol#284) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of IxoERC20Token.transferFrom (IxoERC20Token.sol#297) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.transferFrom (IxoERC20Token.sol#298) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _value\n",
                    "message": "Parameter '_value' of IxoERC20Token.transferFrom (IxoERC20Token.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token.setMinter (IxoERC20Token.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 204,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n\n        minter = _newMinter;\n",
                    "message": "Function 'IxoERC20Token._setMinter' (IxoERC20Token.sol#202-204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token._setMinter (IxoERC20Token.sol#202) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.mint (IxoERC20Token.sol#213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of IxoERC20Token.mint (IxoERC20Token.sol#214) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.increaseApproval (IxoERC20Token.sol#324) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _addedValue\n",
                    "message": "Parameter '_addedValue' of IxoERC20Token.increaseApproval (IxoERC20Token.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.decreaseApproval (IxoERC20Token.sol#346) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _subtractedValue\n",
                    "message": "Parameter '_subtractedValue' of IxoERC20Token.decreaseApproval (IxoERC20Token.sol#347) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public CAP = 10000000000 * (10 ** decimals); // 10,000,000,000\n",
                    "message": "Variable 'IxoERC20Token.CAP' (IxoERC20Token.sol#181) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/auth/AuthContract.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ProjectWalletAuthoriser is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract AuthContract is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        members = _members;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        quorum = _quorum;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isMember[members[i]] = true;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isMember[members[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isMember[members[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isMember[msg.sender], \"Not a member\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!actions[_tx].triggered, \"Transaction already triggered\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_tx != 0, \"Invalid transaction id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_target != address(0), \"Invalid target\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_sender != address(0), \"Invalid sender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_receiver != address(0), \"Invalid receiver\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amt >= 0, \"Invalid amount\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(confirmedBy[_tx][msg.sender] == false, \"Cannot confirm same transaction twice\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(actions[_tx].target == _target, \"Invalid transaction id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(actions[_tx].sender == _sender, \"Invalid transaction id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(actions[_tx].receiver == _receiver, \"Invalid transaction id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(actions[_tx].amt == _amt, \"Invalid transaction id\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(confirmedBy[_tx][msg.sender] == false, \"Cannot confirm same transaction twice\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_27"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (AuthContract.sol#105-114) does not use the value returned by external calls:\n\t-ProjectWallet(_sender).transfer(_receiver,_amt) (AuthContract.sol#113)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n\n        actions[_tx].triggered = true;\n\n        ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender, actions[_tx].receiver, actions[_tx].amt);\n",
                    "message": "AuthContract._trigger (AuthContract.sol#216-219) does not use the value returned by external calls:\n\t-ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender,actions[_tx].receiver,actions[_tx].amt) (AuthContract.sol#218)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (AuthContract.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (AuthContract.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (AuthContract.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n\n    {\n\n        authoriser = _authoriser;\n",
                    "message": "ProjectWalletAuthoriser.setAuthoriser (AuthContract.sol#94-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (AuthContract.sol#105-114) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function memberCount() public view returns (uint) {\n\n        return members.length;\n",
                    "message": "AuthContract.memberCount (AuthContract.sol#167-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n\n        quorum = _quorum;\n",
                    "message": "AuthContract.setQuorum (AuthContract.sol#171-173) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 214,
                    "vulnerability_code": "    function validate(\n\n        bytes32  _tx,\n\n        address  _target,\n\n        address  _sender,\n\n        address  _receiver,\n\n        uint256  _amt\n\n    ) public onlyMembers returns (bool) {\n\n        require(_tx != 0, \"Invalid transaction id\");\n\n        if(actions[_tx].triggered == true) {\n\n            return true;\n\n        }\n\n        require(_target != address(0), \"Invalid target\");\n\n        require(_sender != address(0), \"Invalid sender\");\n\n        require(_receiver != address(0), \"Invalid receiver\");\n\n        require(_amt >= 0, \"Invalid amount\");\n\n        require(confirmedBy[_tx][msg.sender] == false, \"Cannot confirm same transaction twice\");\n\n        if(actions[_tx].confirmations == 0) {\n\n            actions[_tx].target = _target;\n\n            actions[_tx].sender = _sender;\n\n            actions[_tx].receiver = _receiver;\n\n            actions[_tx].amt = _amt;\n\n            actions[_tx].triggered = false;\n\n        } else {\n\n            require(actions[_tx].target == _target, \"Invalid transaction id\");\n\n            require(actions[_tx].sender == _sender, \"Invalid transaction id\");\n\n            require(actions[_tx].receiver == _receiver, \"Invalid transaction id\");\n\n            require(actions[_tx].amt == _amt, \"Invalid transaction id\");\n\n        }\n\n        actions[_tx].confirmations = actions[_tx].confirmations + 1;\n\n        confirmedBy[_tx][msg.sender] = true;\n\n\n\n        emit Confirmed(_tx, msg.sender);\n\n\n\n        if(actions[_tx].confirmations >= quorum){\n\n            _trigger(_tx);\n\n            emit Triggered(_tx);\n\n        }\n\n\n\n        return true;\n",
                    "message": "AuthContract.validate (AuthContract.sol#175-214) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (AuthContract.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (AuthContract.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (AuthContract.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": "Parameter '_authoriser' of ProjectWalletAuthoriser.setAuthoriser (AuthContract.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _sender, \n",
                    "message": "Parameter '_sender' of ProjectWalletAuthoriser.transfer (AuthContract.sol#106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver, \n",
                    "message": "Parameter '_receiver' of ProjectWalletAuthoriser.transfer (AuthContract.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of ProjectWalletAuthoriser.transfer (AuthContract.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": "Parameter '_members' of AuthContract. (AuthContract.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": "Parameter '_quorum' of AuthContract. (AuthContract.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n",
                    "message": "Parameter '_quorum' of AuthContract.setQuorum (AuthContract.sol#171) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes32  _tx,\n",
                    "message": "Parameter '_tx' of AuthContract.validate (AuthContract.sol#176) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address  _target,\n",
                    "message": "Parameter '_target' of AuthContract.validate (AuthContract.sol#177) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address  _sender,\n",
                    "message": "Parameter '_sender' of AuthContract.validate (AuthContract.sol#178) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address  _receiver,\n",
                    "message": "Parameter '_receiver' of AuthContract.validate (AuthContract.sol#179) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256  _amt\n",
                    "message": "Parameter '_amt' of AuthContract.validate (AuthContract.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": 219,
                    "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n\n        actions[_tx].triggered = true;\n\n        ProjectWalletAuthoriser(actions[_tx].target).transfer(actions[_tx].sender, actions[_tx].receiver, actions[_tx].amt);\n",
                    "message": "Function 'AuthContract._trigger' (AuthContract.sol#216-219) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _trigger(bytes32 _tx) internal onlyMembers onlyActive(_tx) {\n",
                    "message": "Parameter '_tx' of AuthContract._trigger (AuthContract.sol#216) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < members.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setQuorum(uint _quorum) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] _members, uint _quorum) public {\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/utils/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (Ownable.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (Ownable.sol#52-54) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (Ownable.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (Ownable.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (Ownable.sol#60) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/utils/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / _a == _b, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b > 0, \"SafeMath failure\"); // Solidity only automatically asserts when dividing by 0\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b <= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.mul (SafeMath.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.mul (SafeMath.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.div (SafeMath.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.div (SafeMath.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.sub (SafeMath.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.sub (SafeMath.sol#38) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.add (SafeMath.sol#48) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.add (SafeMath.sol#48) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/project/ProjectWalletFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletFactory.sol#77-85) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (ProjectWalletFactory.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWalletFactory.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletFactory.sol#77-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (ProjectWalletFactory.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (ProjectWalletFactory.sol#18) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ProjectWalletFactory.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (ProjectWalletFactory.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (ProjectWalletFactory.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ProjectWalletFactory.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 105,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        address wallet = new BasicProjectWallet(_token, _authoriser, _name);\n\n        return wallet;\n",
                    "message": "ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101-105) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver,\n",
                    "message": "Parameter '_receiver' of BasicProjectWallet.transfer (ProjectWalletFactory.sol#78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of BasicProjectWallet.transfer (ProjectWalletFactory.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_token' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_authoriser' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_name' of BasicProjectWallet. (ProjectWalletFactory.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_token' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_authoriser' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletFactory.createWallet (ProjectWalletFactory.sol#101) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/project/ProjectWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWallet.sol#7) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/project/BasicProjectWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (BasicProjectWallet.sol#77-85) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (BasicProjectWallet.sol#84)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (BasicProjectWallet.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 85,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (BasicProjectWallet.sol#77-85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (BasicProjectWallet.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (BasicProjectWallet.sol#18) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (BasicProjectWallet.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (BasicProjectWallet.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (BasicProjectWallet.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (BasicProjectWallet.sol#26) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver,\n",
                    "message": "Parameter '_receiver' of BasicProjectWallet.transfer (BasicProjectWallet.sol#78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of BasicProjectWallet.transfer (BasicProjectWallet.sol#79) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_token' of BasicProjectWallet. (BasicProjectWallet.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_authoriser' of BasicProjectWallet. (BasicProjectWallet.sol#58) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_name' of BasicProjectWallet. (BasicProjectWallet.sol#58) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/project/ProjectWalletRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract IxoERC20Token is ERC20, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ProjectWalletRegistry is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        token = _token;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        authoriser = _authoriser;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        factory = _factory;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 192,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / _a == _b, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b > 0, \"SafeMath failure\"); // Solidity only automatically asserts when dividing by 0\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_b <= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= _a, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"SafeMath failure\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == minter, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[msg.sender], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= balances[_from], \"Not enough funds\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_to != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(factory != address(0), \"Invalid factory\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 480,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_name[0] != 0, \"Invalid name\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_74"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletRegistry.sol#143-151) does not use the value returned by external calls:\n\t-ERC20(token).transfer(_receiver,_amt) (ProjectWalletRegistry.sol#150)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": 503,
                    "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n\n        address newWallet = ProjectWalletFactory(factory).createWallet(token, authoriser, _name);\n\n        wallets[_name] = newWallet;\n",
                    "message": "Reentrancy in ProjectWalletRegistry._createWallet (ProjectWalletRegistry.sol#500-503):\n\tExternal calls:\n\t- newWallet = ProjectWalletFactory(factory).createWallet(token,authoriser,_name) (ProjectWalletRegistry.sol#501)\n\tState variables written after the call(s):\n\t- wallets (ProjectWalletRegistry.sol#502)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public decimals = 8;\n",
                    "message": "IxoERC20Token.decimals should be constant (ProjectWalletRegistry.sol#257)\nIxoERC20Token.name should be constant (ProjectWalletRegistry.sol#255)\nIxoERC20Token.symbol should be constant (ProjectWalletRegistry.sol#256)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (ProjectWalletRegistry.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (ProjectWalletRegistry.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function transfer(\n\n        address _receiver,\n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ERC20(token).transfer(_receiver, _amt);\n",
                    "message": "BasicProjectWallet.transfer (ProjectWalletRegistry.sol#143-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWalletRegistry.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return totalSupply_;\n",
                    "message": "IxoERC20Token.totalSupply (ProjectWalletRegistry.sol#309-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256);\n",
                    "message": "ERC20.totalSupply (ProjectWalletRegistry.sol#82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _who) public view returns (uint256);\n",
                    "message": "ERC20.balanceOf (ProjectWalletRegistry.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n\n        return balances[_owner];\n",
                    "message": "IxoERC20Token.balanceOf (ProjectWalletRegistry.sol#318-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function allowance(\n\n        address _owner,\n\n        address _spender\n\n    )\n\n    public view returns (uint256)\n\n    {\n\n        return allowed[_owner][_spender];\n",
                    "message": "IxoERC20Token.allowance (ProjectWalletRegistry.sol#328-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (ProjectWalletRegistry.sol#86) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transfer (ProjectWalletRegistry.sol#88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n\n        require(_value <= balances[msg.sender], \"Not enough funds\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transfer (ProjectWalletRegistry.sol#342-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.approve (ProjectWalletRegistry.sol#361-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.approve (ProjectWalletRegistry.sol#90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (ProjectWalletRegistry.sol#92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": 389,
                    "vulnerability_code": "    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    )\n\n    public returns (bool)\n\n    {\n\n        require(_value <= balances[_from], \"Not enough funds\");\n\n        require(_value <= allowed[_from][msg.sender], \"Not approved\");\n\n        require(_to != address(0), \"Can't transfer to 0x0\");\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#373-389) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        address wallet = new BasicProjectWallet(_token, _authoriser, _name);\n\n        return wallet;\n",
                    "message": "ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167-171) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": 273,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n\n        _setMinter(_newMinter);\n",
                    "message": "IxoERC20Token.setMinter (ProjectWalletRegistry.sol#271-273) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": 304,
                    "vulnerability_code": "    function mint(\n\n        address _to,\n\n        uint256 _amount\n\n        )\n\n    public hasMintPermission returns (bool)\n\n    {\n\n        require(totalSupply_.add(_amount) <= CAP, \"Exceeds cap\");\n\n\n\n        totalSupply_ = totalSupply_.add(_amount);\n\n        balances[_to] = balances[_to].add(_amount);\n\n\n\n        emit Mint(_to, _amount);\n\n        emit Transfer(address(0), _to, _amount);\n\n\t\t\t\t\n\n        return true;\n",
                    "message": "IxoERC20Token.mint (ProjectWalletRegistry.sol#289-304) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": 411,
                    "vulnerability_code": "    function increaseApproval(\n\n        address _spender,\n\n        uint256 _addedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        allowed[msg.sender][_spender] = (\n\n            allowed[msg.sender][_spender].add(_addedValue));\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#400-411) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "    function decreaseApproval(\n\n        address _spender,\n\n        uint256 _subtractedValue\n\n    )\n\n    public\n\n    returns (bool)\n\n    {\n\n        uint256 oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue >= oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#422-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n\n        require(factory != address(0), \"Invalid factory\");\n\n        factory = _factory;\n",
                    "message": "ProjectWalletRegistry.setFactory (ProjectWalletRegistry.sol#470-473) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 486,
                    "vulnerability_code": "    function ensureWallet(bytes32 _name) public returns (address) {\n\n        require(_name[0] != 0, \"Invalid name\");\n\n        if(wallets[_name] == address(0)) {\n\n            _createWallet(_name);\n\n        }\n\n        address wallet = wallets[_name];\n\n        return wallet;\n",
                    "message": "ProjectWalletRegistry.ensureWallet (ProjectWalletRegistry.sol#479-486) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": 494,
                    "vulnerability_code": "    function walletOf(bytes32 _name) public view returns (address) {\n\n        return wallets[_name];\n",
                    "message": "ProjectWalletRegistry.walletOf (ProjectWalletRegistry.sol#492-494) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (ProjectWalletRegistry.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (ProjectWalletRegistry.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (ProjectWalletRegistry.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver,\n",
                    "message": "Parameter '_receiver' of BasicProjectWallet.transfer (ProjectWalletRegistry.sol#144) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of BasicProjectWallet.transfer (ProjectWalletRegistry.sol#145) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_token' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_authoriser' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, bytes32 _name) public {\n",
                    "message": "Parameter '_name' of BasicProjectWallet. (ProjectWalletRegistry.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_token' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_authoriser' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createWallet(address _token, address _authoriser, bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletFactory.createWallet (ProjectWalletRegistry.sol#167) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.mul (ProjectWalletRegistry.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.mul (ProjectWalletRegistry.sol#183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.div (ProjectWalletRegistry.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.div (ProjectWalletRegistry.sol#200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.sub (ProjectWalletRegistry.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.sub (ProjectWalletRegistry.sol#211) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_a' of SafeMath.add (ProjectWalletRegistry.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n",
                    "message": "Parameter '_b' of SafeMath.add (ProjectWalletRegistry.sol#221) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of IxoERC20Token.balanceOf (ProjectWalletRegistry.sol#318) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _owner,\n",
                    "message": "Parameter '_owner' of IxoERC20Token.allowance (ProjectWalletRegistry.sol#329) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender\n",
                    "message": "Parameter '_spender' of IxoERC20Token.allowance (ProjectWalletRegistry.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of IxoERC20Token.transfer (ProjectWalletRegistry.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.transfer (ProjectWalletRegistry.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of IxoERC20Token.approve (ProjectWalletRegistry.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of IxoERC20Token.approve (ProjectWalletRegistry.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _value\n",
                    "message": "Parameter '_value' of IxoERC20Token.transferFrom (ProjectWalletRegistry.sol#376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token.setMinter (ProjectWalletRegistry.sol#271) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n\n        minter = _newMinter;\n",
                    "message": "Function 'IxoERC20Token._setMinter' (ProjectWalletRegistry.sol#279-281) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setMinter(address _newMinter) internal {\n",
                    "message": "Parameter '_newMinter' of IxoERC20Token._setMinter (ProjectWalletRegistry.sol#279) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of IxoERC20Token.mint (ProjectWalletRegistry.sol#290) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of IxoERC20Token.mint (ProjectWalletRegistry.sol#291) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _addedValue\n",
                    "message": "Parameter '_addedValue' of IxoERC20Token.increaseApproval (ProjectWalletRegistry.sol#402) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _spender,\n",
                    "message": "Parameter '_spender' of IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#423) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _subtractedValue\n",
                    "message": "Parameter '_subtractedValue' of IxoERC20Token.decreaseApproval (ProjectWalletRegistry.sol#424) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public CAP = 10000000000 * (10 ** decimals); // 10,000,000,000\n",
                    "message": "Variable 'IxoERC20Token.CAP' (ProjectWalletRegistry.sol#258) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Parameter '_token' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Parameter '_authoriser' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _token, address _authoriser, address _factory) public {\n",
                    "message": "Parameter '_factory' of ProjectWalletRegistry. (ProjectWalletRegistry.sol#460) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n",
                    "message": "Parameter '_factory' of ProjectWalletRegistry.setFactory (ProjectWalletRegistry.sol#470) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function ensureWallet(bytes32 _name) public returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletRegistry.ensureWallet (ProjectWalletRegistry.sol#479) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 492,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function walletOf(bytes32 _name) public view returns (address) {\n",
                    "message": "Parameter '_name' of ProjectWalletRegistry.walletOf (ProjectWalletRegistry.sol#492) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": 503,
                    "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n\n        address newWallet = ProjectWalletFactory(factory).createWallet(token, authoriser, _name);\n\n        wallets[_name] = newWallet;\n",
                    "message": "Function 'ProjectWalletRegistry._createWallet' (ProjectWalletRegistry.sol#500-503) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _createWallet (bytes32 _name) internal {\n",
                    "message": "Parameter '_name' of ProjectWalletRegistry._createWallet (ProjectWalletRegistry.sol#500) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _newMinter) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 470,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFactory(address _factory) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private token;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private factory;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 452,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(bytes32 => address) private wallets;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    },
    "ixo-solidity-f7ca254108de47c3cf99f950fa329aaa57391cf0/contracts/project/ProjectWalletAuthoriser.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ProjectWalletAuthoriser is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == authoriser, \"Permission denied\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#105-114) does not use the value returned by external calls:\n\t-ProjectWallet(_sender).transfer(_receiver,_amt) (ProjectWalletAuthoriser.sol#113)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function renounceOwnership() public onlyOwner {\n\n        emit OwnershipRenounced(owner);\n\n        owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (ProjectWalletAuthoriser.sol#43-46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n\n        _transferOwnership(_newOwner);\n",
                    "message": "Ownable.transferOwnership (ProjectWalletAuthoriser.sol#52-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _receiver, uint256 _amt) public returns (bool);\n",
                    "message": "ProjectWallet.transfer (ProjectWalletAuthoriser.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n\n    {\n\n        authoriser = _authoriser;\n",
                    "message": "ProjectWalletAuthoriser.setAuthoriser (ProjectWalletAuthoriser.sol#94-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function transfer(\n\n        address _sender, \n\n        address _receiver, \n\n        uint256 _amt\n\n    )\n\n    public onlyAuthoriser\n\n    returns (bool)\n\n    {\n\n        ProjectWallet(_sender).transfer(_receiver, _amt);\n",
                    "message": "ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#105-114) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (ProjectWalletAuthoriser.sol#52) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n\n        require(_newOwner != address(0), \"Can't transfer to 0x0\");\n\n        emit OwnershipTransferred(owner, _newOwner);\n\n        owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (ProjectWalletAuthoriser.sol#60-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (ProjectWalletAuthoriser.sol#60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": "Parameter '_authoriser' of ProjectWalletAuthoriser.setAuthoriser (ProjectWalletAuthoriser.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _sender, \n",
                    "message": "Parameter '_sender' of ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#106) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _receiver, \n",
                    "message": "Parameter '_receiver' of ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#107) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amt\n",
                    "message": "Parameter '_amt' of ProjectWalletAuthoriser.transfer (ProjectWalletAuthoriser.sol#108) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthoriser(address _authoriser) public onlyOwner returns (bool)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.24;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private authoriser;\n",
                    "message": null
                }
            ]
        }
    }
}