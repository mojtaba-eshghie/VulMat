{
    "contractV2-feature-mineUpdate/contracts/DODOPrivatePool/intf/IDPPOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDPPOracle.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDPPOracle.sol#10 declares pragma solidity0.6.9\n\t- IDPPOracle.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDPPOracle.sol:\n\t- pragma solidity0.6.9 (IDPPOracle.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external returns (address);\n",
                    "message": "Function 'IDPPOracle._MT_FEE_RATE_MODEL_' (IDPPOracle.sol#26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieve(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address payable to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address token,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 amount\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/DODOPrivatePool/intf/IDPPAdmin.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDPPAdmin.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDPPAdmin.sol#10 declares pragma solidity0.6.9\n\t- IDPPAdmin.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDPPAdmin.sol:\n\t- pragma solidity0.6.9 (IDPPAdmin.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/DODOPrivatePool/intf/IOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IOracle.sol:\n\t- pragma solidity0.6.9 (IOracle.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(address base) external view returns (uint256 latestPrice,bool isValid,bool isStale,uint256 timestamp);    \n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/DODOPrivatePool/intf/IDPP.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDPP.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDPP.sol#10 declares pragma solidity0.6.9\n\t- IDPP.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDPP.sol:\n\t- pragma solidity0.6.9 (IDPP.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external returns (address);\n",
                    "message": "Function 'IDPP._MT_FEE_RATE_MODEL_' (IDPP.sol#26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieve(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address payable to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address token,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 amount\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/CrowdPooling/intf/ICP.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in ICP.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- ICP.sol#10 declares pragma solidity0.6.9\n\t- ICP.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ICP.sol:\n\t- pragma solidity0.6.9 (ICP.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata timeLine,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata valueList,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata valueList,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isOpenTWAP\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/DODOStablePool/intf/IDSP.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDSP.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDSP.sol#10 declares pragma solidity0.6.9\n\t- IDSP.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDSP.sol:\n\t- pragma solidity0.6.9 (IDSP.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDSP._BASE_TOKEN_' (IDSP.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDSP._QUOTE_TOKEN_' (IDSP.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _I_() external view returns (uint256);\n",
                    "message": "Function 'IDSP._I_' (IDSP.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external view returns (address);\n",
                    "message": "Function 'IDSP._MT_FEE_RATE_MODEL_' (IDSP.sol#31) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyShares(address to) external returns (uint256,uint256,uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/DODOVendingMachine/intf/IDVM.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDVM.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDVM.sol#10 declares pragma solidity0.6.9\n\t- IDVM.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDVM.sol:\n\t- pragma solidity0.6.9 (IDVM.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDVM._BASE_TOKEN_' (IDVM.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDVM._QUOTE_TOKEN_' (IDVM.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external returns (address);\n",
                    "message": "Function 'IDVM._MT_FEE_RATE_MODEL_' (IDVM.sol#29) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getVaultReserve() external returns (uint256 baseReserve, uint256 quoteReserve);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyShares(address to) external returns (uint256,uint256,uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IDODOV1Proxy02.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV1Proxy02.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV1Proxy02.sol#10 declares pragma solidity0.6.9\n\t- IDODOV1Proxy02.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV1Proxy02.sol:\n\t- pragma solidity0.6.9 (IDODOV1Proxy02.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IDODOV1Proxy01.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV1Proxy01.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV1Proxy01.sol#10 declares pragma solidity0.6.9\n\t- IDODOV1Proxy01.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV1Proxy01.sol:\n\t- pragma solidity0.6.9 (IDODOV1Proxy01.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IChi.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IChi.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IChi.sol#3 declares pragma solidity0.6.9\n\t- IChi.sol#4 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IChi.sol:\n\t- pragma solidity0.6.9 (IChi.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IUni.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IUni.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IUni.sol#3 declares pragma solidity0.6.9\n\t- IUni.sol#4 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IUni.sol:\n\t- pragma solidity0.6.9 (IUni.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IDODOV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV2.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV2.sol#10 declares pragma solidity0.6.9\n\t- IDODOV2.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV2.sol:\n\t- pragma solidity0.6.9 (IDODOV2.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV2._BASE_TOKEN_' (IDODOV2.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV2._QUOTE_TOKEN_' (IDODOV2.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _OWNER_() external returns (address);\n",
                    "message": "Function 'IDODOV2._OWNER_' (IDODOV2.sol#83) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPMMStateForCall() external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDODOPoolBidirection(address token0, address token1) external view returns (address[] memory, address[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyShares(address to) external returns (uint256,uint256,uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCrowdPooling() external returns (address payable newCrowdPooling);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IDODOV1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV1.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV1.sol#10 declares pragma solidity0.6.9\n\t- IDODOV1.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV1.sol:\n\t- pragma solidity0.6.9 (IDODOV1.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_CAPITAL_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDODOV1._BASE_CAPITAL_TOKEN_' (IDODOV1.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_CAPITAL_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDODOV1._QUOTE_CAPITAL_TOKEN_' (IDODOV1.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV1._BASE_TOKEN_' (IDODOV1.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV1._QUOTE_TOKEN_' (IDODOV1.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _R_STATUS_() external view returns (uint8);\n",
                    "message": "Function 'IDODOV1._R_STATUS_' (IDODOV1.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_BALANCE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._QUOTE_BALANCE_' (IDODOV1.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_BALANCE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._BASE_BALANCE_' (IDODOV1.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _K_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._K_' (IDODOV1.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._MT_FEE_RATE_' (IDODOV1.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _LP_FEE_RATE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._LP_FEE_RATE_' (IDODOV1.sol#77) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IDODOV2Proxy01.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV2Proxy01.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV2Proxy01.sol#10 declares pragma solidity0.6.9\n\t- IDODOV2Proxy01.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV2Proxy01.sol:\n\t- pragma solidity0.6.9 (IDODOV2Proxy01.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external payable returns (address newVendingMachine, uint256 shares);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external payable returns(uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/IDODOAdapter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOAdapter.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOAdapter.sol#10 declares pragma solidity0.6.9\n\t- IDODOAdapter.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOAdapter.sol:\n\t- pragma solidity0.6.9 (IDODOAdapter.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/SmartRoute/intf/ICurve.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in ICurve.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- ICurve.sol#3 declares pragma solidity0.6.9\n\t- ICurve.sol#4 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ICurve.sol:\n\t- pragma solidity0.6.9 (ICurve.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\n",
                    "message": "Function 'ICurve.get_dy_underlying' (ICurve.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\n",
                    "message": "Function 'ICurve.get_dy' (ICurve.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minDy) external;\n",
                    "message": "Function 'ICurve.exchange_underlying' (ICurve.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function underlying_coins(int128 arg0) external view returns(address out);\n",
                    "message": "Function 'ICurve.underlying_coins' (ICurve.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IERC20.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IERC20.sol#6 declares pragma solidity0.6.9\n\t- IERC20.sol#7 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IERC20.sol:\n\t- pragma solidity0.6.9 (IERC20.sol#6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/IDODOCallee.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOCallee.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOCallee.sol#10 declares pragma solidity0.6.9\n\t- IDODOCallee.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOCallee.sol:\n\t- pragma solidity0.6.9 (IDODOCallee.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "    function DVMSellShareCall(\n\n        address sender,\n\n        uint256 burnShareAmount,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DVMSellShareCall' (IDODOCallee.sol#14-20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function DVMFlashLoanCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DVMFlashLoanCall' (IDODOCallee.sol#22-27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function DPPFlashLoanCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DPPFlashLoanCall' (IDODOCallee.sol#29-34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "    function DSPFlashLoanCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DSPFlashLoanCall' (IDODOCallee.sol#36-41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "    function CPCancelCall(\n\n        address sender,\n\n        uint256 amount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.CPCancelCall' (IDODOCallee.sol#43-47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "\tfunction CPClaimBidCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.CPClaimBidCall' (IDODOCallee.sol#49-54) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/IDODOApprove.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOApprove.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOApprove.sol#10 declares pragma solidity0.6.9\n\t- IDODOApprove.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOApprove.sol:\n\t- pragma solidity0.6.9 (IDODOApprove.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/IDODOIncentiveBsc.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOIncentiveBsc.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOIncentiveBsc.sol#10 declares pragma solidity0.6.9\n\t- IDODOIncentiveBsc.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOIncentiveBsc.sol:\n\t- pragma solidity0.6.9 (IDODOIncentiveBsc.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/IWETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IWETH.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IWETH.sol#10 declares pragma solidity0.6.9\n\t- IWETH.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IWETH.sol:\n\t- pragma solidity0.6.9 (IWETH.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/IDODOApproveProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOApproveProxy.sol:\n\t- pragma solidity0.6.9 (IDODOApproveProxy.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/IOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IOracle.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IOracle.sol#10 declares pragma solidity0.6.9\n\t- IOracle.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IOracle.sol:\n\t- pragma solidity0.6.9 (IOracle.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/intf/ILockedTokenVault02.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in ILockedTokenVault02.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- ILockedTokenVault02.sol#10 declares pragma solidity0.6.9\n\t- ILockedTokenVault02.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ILockedTokenVault02.sol:\n\t- pragma solidity0.6.9 (ILockedTokenVault02.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-mineUpdate/contracts/lib/ReentrancyGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_ENTERED_, \"REENTRANT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in ReentrancyGuard.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- ReentrancyGuard.sol#10 declares pragma solidity0.6.9\n\t- ReentrancyGuard.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ReentrancyGuard.sol:\n\t- pragma solidity0.6.9 (ReentrancyGuard.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _ENTERED_;\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/lib/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _OWNER_ = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), _OWNER_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _OWNER_, \"NOT_OWNER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in Ownable.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- Ownable.sol#10 declares pragma solidity0.6.9\n\t- Ownable.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Ownable.sol:\n\t- pragma solidity0.6.9 (Ownable.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _OWNER_;\n",
                    "message": "Variable 'Ownable._OWNER_' (Ownable.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _NEW_OWNER_;\n",
                    "message": "Variable 'Ownable._NEW_OWNER_' (Ownable.sol#21) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _NEW_OWNER_ = address(0);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/lib/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"MUL_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, \"DIVIDING_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, \"SUB_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ADD_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in SafeMath.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- SafeMath.sol#10 declares pragma solidity0.6.9\n\t- SafeMath.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity0.6.9 (SafeMath.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (z < y) {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/lib/InitializableOwnable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _OWNER_, \"NOT_OWNER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in InitializableOwnable.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- InitializableOwnable.sol#10 declares pragma solidity0.6.9\n\t- InitializableOwnable.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "    function initOwner(address newOwner) public notInitialized {\n\n        _INITIALIZED_ = true;\n\n        _OWNER_ = newOwner;\n",
                    "message": "InitializableOwnable.initOwner (InitializableOwnable.sol#44-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n\n        _NEW_OWNER_ = newOwner;\n",
                    "message": "InitializableOwnable.transferOwnership (InitializableOwnable.sol#49-52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "    function claimOwnership() public {\n\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\n\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n\n        _OWNER_ = _NEW_OWNER_;\n\n        _NEW_OWNER_ = address(0);\n",
                    "message": "InitializableOwnable.claimOwnership (InitializableOwnable.sol#54-59) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in InitializableOwnable.sol:\n\t- pragma solidity0.6.9 (InitializableOwnable.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _OWNER_;\n",
                    "message": "Variable 'InitializableOwnable._OWNER_' (InitializableOwnable.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _NEW_OWNER_;\n",
                    "message": "Variable 'InitializableOwnable._NEW_OWNER_' (InitializableOwnable.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool internal _INITIALIZED_;\n",
                    "message": "Variable 'InitializableOwnable._INITIALIZED_' (InitializableOwnable.sol#22) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _NEW_OWNER_ = address(0);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/lib/CloneFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function clone(address prototype) external override returns (address proxy) {\n\n        bytes20 targetBytes = bytes20(prototype);\n\n        assembly {\n\n            let clone := mload(0x40)\n\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n            mstore(add(clone, 0x14), targetBytes)\n\n            mstore(\n\n                add(clone, 0x28),\n\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n\n            )\n\n            proxy := create(0, clone, 0x37)\n\n        }\n\n        return proxy;\n",
                    "message": "CloneFactory.clone uses assembly (CloneFactory.sol#21-34)\n\t- CloneFactory.sol#23-32\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in CloneFactory.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- CloneFactory.sol#10 declares pragma solidity0.6.9\n\t- CloneFactory.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in CloneFactory.sol:\n\t- pragma solidity0.6.9 (CloneFactory.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/external/Multicall.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n",
                    "message": "Multicall.aggregate has external calls inside a loop:\n\t- (success,ret) = calls[i].target.call(calls[i].callData) (Multicall.sol#24)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in Multicall.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- Multicall.sol#7 declares pragma solidity0.6.9\n\t- Multicall.sol#8 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n\n        blockNumber = block.number;\n\n        returnData = new bytes[](calls.length);\n\n        for(uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n\n            require(success);\n\n            returnData[i] = ret;\n\n        }\n",
                    "message": "Multicall.aggregate (Multicall.sol#20-28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "    function getEthBalance(address addr) public view returns (uint256 balance) {\n\n        balance = addr.balance;\n",
                    "message": "Multicall.getEthBalance (Multicall.sol#30-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\n\n        blockHash = blockhash(blockNumber);\n",
                    "message": "Multicall.getBlockHash (Multicall.sol#33-35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function getLastBlockHash() public view returns (bytes32 blockHash) {\n\n        blockHash = blockhash(block.number - 1);\n",
                    "message": "Multicall.getLastBlockHash (Multicall.sol#36-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n\n        timestamp = block.timestamp;\n",
                    "message": "Multicall.getCurrentBlockTimestamp (Multicall.sol#39-41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n\n        difficulty = block.difficulty;\n",
                    "message": "Multicall.getCurrentBlockDifficulty (Multicall.sol#42-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n\n        gaslimit = block.gaslimit;\n",
                    "message": "Multicall.getCurrentBlockGasLimit (Multicall.sol#45-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n\n        coinbase = block.coinbase;\n",
                    "message": "Multicall.getCurrentBlockCoinbase (Multicall.sol#48-50) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Multicall.sol:\n\t- pragma solidity0.6.9 (Multicall.sol#7): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n\n        blockNumber = block.number;\n\n        returnData = new bytes[](calls.length);\n\n        for(uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n\n            require(success);\n\n            returnData[i] = ret;\n\n        }\n",
                    "message": "Low level call in Multicall.aggregate (Multicall.sol#20-28):\n\t-(success,ret) = calls[i].target.call(calls[i].callData) Multicall.sol#24\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/external/ERC20/ChiToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < value; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < value; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken._destroyChildren has external calls inside a loop:\n\t- computeAddress2(_totalBurned + i).call() (ChiToken.sol)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.mint uses assembly (ChiToken.sol)\n\t- ChiToken.sol\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "        return totalMinted.sub(totalBurned);\n\n    }\n\n\n\n    function mint(uint256 value) public {\n",
                    "message": "IERC20.transfer (ChiToken.sol#401-405) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": 455,
                    "vulnerability_code": "            computeAddress2(_totalBurned + i).call(\"\");\n\n        }\n\n        totalBurned = _totalBurned + value;\n\n    }\n\n\n\n    function free(uint256 value) public returns (uint256)  {\n",
                    "message": "ERC20WithoutTotalSupply.transfer (ChiToken.sol#449-455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": 419,
                    "vulnerability_code": "                pop(create2(0, 0, 30, add(offset, 16))) pop(create2(0, 0, 30, add(offset, 17)))\n",
                    "message": "IERC20.approve (ChiToken.sol#418-419) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 461,
                    "vulnerability_code": "        _burn(msg.sender, value);\n\n        _destroyChildren(value);\n\n        return value;\n\n    }\n\n\n\n    function freeUpTo(uint256 value) public returns (uint256) {\n",
                    "message": "ERC20WithoutTotalSupply.approve (ChiToken.sol#455-461) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 423,
                    "vulnerability_code": "                pop(create2(0, 0, 30, add(offset, 24))) pop(create2(0, 0, 30, add(offset, 25)))\n",
                    "message": "IERC20.transferFrom (ChiToken.sol#422-423) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "        return free(Math.min(value, balanceOf(msg.sender)));\n\n    }\n\n\n\n    function freeFrom(address from, uint256 value) public returns (uint256) {\n\n        _burnFrom(from, value);\n\n        _destroyChildren(value);\n\n        return value;\n\n    }\n\n\n\n    function freeFromUpTo(address from, uint256 value) public returns (uint256) {\n",
                    "message": "ERC20WithoutTotalSupply.transferFrom (ChiToken.sol#461-471) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n",
                    "message": "IERC20.totalSupply (ChiToken.sol#387) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.totalSupply (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.mint (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.freeUpTo (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.freeFromUpTo (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n",
                    "message": "Detected issues with version pragma in ChiToken.sol:\n\t- pragma solidity^0.6.0 (ChiToken.sol#211): it allows old versions\n\t- pragma solidity^0.6.0 (ChiToken.sol#233-235): it allows old versions\n\t- pragma solidity^0.6.0 (ChiToken.sol#382): it allows old versions\n\t- pragma solidity^0.6.0 (ChiToken.sol#436): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Low level call in ChiToken._destroyChildren (ChiToken.sol):\n\t-computeAddress2(_totalBurned + i).call() ChiToken.sol\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "        return freeFrom(from, Math.min(Math.min(value, balanceOf(from)), allowance(from, msg.sender)));\n\n    }\n",
                    "message": "Function 'ERC20WithoutTotalSupply._transfer' (ChiToken.sol#471-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._approve' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._mint' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._burn' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._burnFrom' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ChiToken._destroyChildren' (ChiToken.sol) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            abi.encodePacked(bytes1(0xff), address(this), salt, bytes32(0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_CALL_WITHOUT_DATA",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            computeAddress2(_totalBurned + i).call(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public override returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            computeAddress2(_totalBurned + i).call(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/external/ERC20/TestWETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[src][msg.sender] >= wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowance[src][msg.sender] -= wad;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals = 18;\n",
                    "message": "WETH9.decimals should be constant (TestWETH.sol#16)\nWETH9.name should be constant (TestWETH.sol#14)\nWETH9.symbol should be constant (TestWETH.sol#15)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function withdraw(uint256 wad) public {\n\n        require(balanceOf[msg.sender] >= wad);\n\n        balanceOf[msg.sender] -= wad;\n\n        msg.sender.transfer(wad);\n\n        emit Withdrawal(msg.sender, wad);\n",
                    "message": "WETH9.withdraw (TestWETH.sol#39-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return address(this).balance;\n",
                    "message": "WETH9.totalSupply (TestWETH.sol#46-48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function approve(address guy, uint256 wad) public returns (bool) {\n\n        allowance[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n",
                    "message": "WETH9.approve (TestWETH.sol#50-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function transfer(address dst, uint256 wad) public returns (bool) {\n\n        return transferFrom(msg.sender, dst, wad);\n",
                    "message": "WETH9.transfer (TestWETH.sol#56-58) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in TestWETH.sol:\n\t- pragma solidity0.6.9 (TestWETH.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    fallback() external payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        deposit();\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-mineUpdate/contracts/helper/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in Migrations.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- Migrations.sol#10 declares pragma solidity0.6.9\n\t- Migrations.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "    function setCompleted(uint256 completed) public restricted {\n\n        last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#28-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "    function upgrade(address newAddress) public restricted {\n\n        Migrations upgraded = Migrations(newAddress);\n\n        upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#32-35) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity0.6.9 (Migrations.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#16) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/DODOPrivatePool/intf/IDPPOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDPPOracle.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDPPOracle.sol#10 declares pragma solidity0.6.9\n\t- IDPPOracle.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDPPOracle.sol:\n\t- pragma solidity0.6.9 (IDPPOracle.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external returns (address);\n",
                    "message": "Function 'IDPPOracle._MT_FEE_RATE_MODEL_' (IDPPOracle.sol#26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieve(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address payable to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address token,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 amount\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/DODOPrivatePool/intf/IDPPAdmin.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDPPAdmin.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDPPAdmin.sol#10 declares pragma solidity0.6.9\n\t- IDPPAdmin.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDPPAdmin.sol:\n\t- pragma solidity0.6.9 (IDPPAdmin.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/DODOPrivatePool/intf/IOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IOracle.sol:\n\t- pragma solidity0.6.9 (IOracle.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(address base) external view returns (uint256 latestPrice,bool isValid,bool isStale,uint256 timestamp);    \n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/DODOPrivatePool/intf/IDPP.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDPP.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDPP.sol#10 declares pragma solidity0.6.9\n\t- IDPP.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDPP.sol:\n\t- pragma solidity0.6.9 (IDPP.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external returns (address);\n",
                    "message": "Function 'IDPP._MT_FEE_RATE_MODEL_' (IDPP.sol#26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieve(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address payable to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address token,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 amount\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/GeneralizedFragment/intf/IFragment.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint256 totalSupply, \n",
                    "message": "IFragment.init.totalSupply (local variable @ IFragment.sol#19) shadows:\n\t- IFragment.totalSupply (function @ IFragment.sol#38)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IFragment.sol:\n\t- pragma solidity0.6.9 (IFragment.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_() external view returns (address);\n",
                    "message": "Function 'IFragment._QUOTE_' (IFragment.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _COLLATERAL_VAULT_() external view returns (address);\n",
                    "message": "Function 'IFragment._COLLATERAL_VAULT_' (IFragment.sol#34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _DVM_() external view returns (address);\n",
                    "message": "Function 'IFragment._DVM_' (IFragment.sol#36) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/CrowdPooling/intf/ICP.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in ICP.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- ICP.sol#10 declares pragma solidity0.6.9\n\t- ICP.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ICP.sol:\n\t- pragma solidity0.6.9 (ICP.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function init(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata timeLine,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata valueList,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata valueList,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bool isOpenTWAP\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/DODOStablePool/intf/IDSP.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDSP.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDSP.sol#10 declares pragma solidity0.6.9\n\t- IDSP.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDSP.sol:\n\t- pragma solidity0.6.9 (IDSP.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDSP._BASE_TOKEN_' (IDSP.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDSP._QUOTE_TOKEN_' (IDSP.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _I_() external view returns (uint256);\n",
                    "message": "Function 'IDSP._I_' (IDSP.sol#29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external view returns (address);\n",
                    "message": "Function 'IDSP._MT_FEE_RATE_MODEL_' (IDSP.sol#31) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyShares(address to) external returns (uint256,uint256,uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/DODOVendingMachine/intf/IDVM.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDVM.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDVM.sol#10 declares pragma solidity0.6.9\n\t- IDVM.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDVM.sol:\n\t- pragma solidity0.6.9 (IDVM.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDVM._BASE_TOKEN_' (IDVM.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDVM._QUOTE_TOKEN_' (IDVM.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_MODEL_() external returns (address);\n",
                    "message": "Function 'IDVM._MT_FEE_RATE_MODEL_' (IDVM.sol#29) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getVaultReserve() external returns (uint256 baseReserve, uint256 quoteReserve);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyShares(address to) external returns (uint256,uint256,uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sellShares(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external  returns (uint256 baseAmount, uint256 quoteAmount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external  returns (uint256 baseAmount, uint256 quoteAmount);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IDODOV1Proxy02.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV1Proxy02.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV1Proxy02.sol#10 declares pragma solidity0.6.9\n\t- IDODOV1Proxy02.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV1Proxy02.sol:\n\t- pragma solidity0.6.9 (IDODOV1Proxy02.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IDODOV1Proxy01.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV1Proxy01.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV1Proxy01.sol#10 declares pragma solidity0.6.9\n\t- IDODOV1Proxy01.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV1Proxy01.sol:\n\t- pragma solidity0.6.9 (IDODOV1Proxy01.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IChi.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IChi.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IChi.sol#3 declares pragma solidity0.6.9\n\t- IChi.sol#4 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IChi.sol:\n\t- pragma solidity0.6.9 (IChi.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IUni.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IUni.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IUni.sol#3 declares pragma solidity0.6.9\n\t- IUni.sol#4 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IUni.sol:\n\t- pragma solidity0.6.9 (IUni.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IDODOV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV2.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV2.sol#10 declares pragma solidity0.6.9\n\t- IDODOV2.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV2.sol:\n\t- pragma solidity0.6.9 (IDODOV2.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV2._BASE_TOKEN_' (IDODOV2.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV2._QUOTE_TOKEN_' (IDODOV2.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _OWNER_() external returns (address);\n",
                    "message": "Function 'IDODOV2._OWNER_' (IDODOV2.sol#83) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPMMStateForCall() external view returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDODOPoolBidirection(address token0, address token1) external view returns (address[] memory, address[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function buyShares(address to) external returns (uint256,uint256,uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function createCrowdPooling() external returns (address payable newCrowdPooling);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IDODOV1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV1.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV1.sol#10 declares pragma solidity0.6.9\n\t- IDODOV1.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV1.sol:\n\t- pragma solidity0.6.9 (IDODOV1.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_CAPITAL_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDODOV1._BASE_CAPITAL_TOKEN_' (IDODOV1.sol#59) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_CAPITAL_TOKEN_() external returns (address);\n",
                    "message": "Function 'IDODOV1._QUOTE_CAPITAL_TOKEN_' (IDODOV1.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV1._BASE_TOKEN_' (IDODOV1.sol#63) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_TOKEN_() external view returns (address);\n",
                    "message": "Function 'IDODOV1._QUOTE_TOKEN_' (IDODOV1.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _R_STATUS_() external view returns (uint8);\n",
                    "message": "Function 'IDODOV1._R_STATUS_' (IDODOV1.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _QUOTE_BALANCE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._QUOTE_BALANCE_' (IDODOV1.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _BASE_BALANCE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._BASE_BALANCE_' (IDODOV1.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _K_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._K_' (IDODOV1.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _MT_FEE_RATE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._MT_FEE_RATE_' (IDODOV1.sol#75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _LP_FEE_RATE_() external view returns (uint256);\n",
                    "message": "Function 'IDODOV1._LP_FEE_RATE_' (IDODOV1.sol#77) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IDODOV2Proxy01.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOV2Proxy01.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOV2Proxy01.sol#10 declares pragma solidity0.6.9\n\t- IDODOV2Proxy01.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOV2Proxy01.sol:\n\t- pragma solidity0.6.9 (IDODOV2Proxy01.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external payable returns (address newVendingMachine, uint256 shares);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external payable returns(uint256, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/IDODOAdapter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOAdapter.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOAdapter.sol#10 declares pragma solidity0.6.9\n\t- IDODOAdapter.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOAdapter.sol:\n\t- pragma solidity0.6.9 (IDODOAdapter.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/SmartRoute/intf/ICurve.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in ICurve.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- ICurve.sol#3 declares pragma solidity0.6.9\n\t- ICurve.sol#4 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ICurve.sol:\n\t- pragma solidity0.6.9 (ICurve.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\n",
                    "message": "Function 'ICurve.get_dy_underlying' (ICurve.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function get_dy(int128 i, int128 j, uint256 dx) external view returns(uint256 dy);\n",
                    "message": "Function 'ICurve.get_dy' (ICurve.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 minDy) external;\n",
                    "message": "Function 'ICurve.exchange_underlying' (ICurve.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function underlying_coins(int128 arg0) external view returns(address out);\n",
                    "message": "Function 'ICurve.underlying_coins' (ICurve.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IERC20.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IERC20.sol#6 declares pragma solidity0.6.9\n\t- IERC20.sol#7 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IERC20.sol:\n\t- pragma solidity0.6.9 (IERC20.sol#6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IDODOCallee.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IDODOCallee.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IDODOCallee.sol#10 declares pragma solidity0.6.9\n\t- IDODOCallee.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOCallee.sol:\n\t- pragma solidity0.6.9 (IDODOCallee.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "    function DVMSellShareCall(\n\n        address sender,\n\n        uint256 burnShareAmount,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DVMSellShareCall' (IDODOCallee.sol#14-20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function DVMFlashLoanCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DVMFlashLoanCall' (IDODOCallee.sol#22-27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function DPPFlashLoanCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DPPFlashLoanCall' (IDODOCallee.sol#29-34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "    function DSPFlashLoanCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.DSPFlashLoanCall' (IDODOCallee.sol#36-41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "    function CPCancelCall(\n\n        address sender,\n\n        uint256 amount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.CPCancelCall' (IDODOCallee.sol#43-47) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "\tfunction CPClaimBidCall(\n\n        address sender,\n\n        uint256 baseAmount,\n\n        uint256 quoteAmount,\n\n        bytes calldata data\n",
                    "message": "Function 'IDODOCallee.CPClaimBidCall' (IDODOCallee.sol#49-54) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 60,
                    "vulnerability_code": "    function NFTRedeemCall(\n\n        address payable assetTo,\n\n        uint256 quoteAmount,\n\n        bytes calldata\n",
                    "message": "Function 'IDODOCallee.NFTRedeemCall' (IDODOCallee.sol#56-60) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata\n",
                    "message": "Parameter '' of IDODOCallee.NFTRedeemCall (IDODOCallee.sol#59) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function NFTRedeemCall(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address payable assetTo,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 quoteAmount,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/intf/IERC721Receiver.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IERC721Receiver.sol:\n\t- pragma solidity0.6.9 (IERC721Receiver.sol#6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IDODOApprove.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOApprove.sol:\n\t- pragma solidity0.6.9 (IDODOApprove.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IWETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IWETH.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IWETH.sol#10 declares pragma solidity0.6.9\n\t- IWETH.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IWETH.sol:\n\t- pragma solidity0.6.9 (IWETH.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IFeeDistributor.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IFeeDistributor.sol:\n\t- pragma solidity0.6.9 (IFeeDistributor.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _STAKE_TOKEN_() external view returns(address);\n",
                    "message": "Function 'IFeeDistributor._STAKE_TOKEN_' (IFeeDistributor.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _STAKE_VAULT_() external view returns(address);\n",
                    "message": "Function 'IFeeDistributor._STAKE_VAULT_' (IFeeDistributor.sol#23) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IDODOApproveProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IDODOApproveProxy.sol:\n\t- pragma solidity0.6.9 (IDODOApproveProxy.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in IOracle.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- IOracle.sol#10 declares pragma solidity0.6.9\n\t- IOracle.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IOracle.sol:\n\t- pragma solidity0.6.9 (IOracle.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/intf/IERC165.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in IERC165.sol:\n\t- pragma solidity0.6.9 (IERC165.sol#6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/lib/ReentrancyGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_ENTERED_, \"REENTRANT\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in ReentrancyGuard.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- ReentrancyGuard.sol#10 declares pragma solidity0.6.9\n\t- ReentrancyGuard.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ReentrancyGuard.sol:\n\t- pragma solidity0.6.9 (ReentrancyGuard.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private _ENTERED_;\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/lib/ConstFeeRateModel.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ConstFeeRateModel.sol:\n\t- pragma solidity0.6.9 (ConstFeeRateModel.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IConstFeeRateModel.getFeeRate (ConstFeeRateModel.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(address) external view returns (uint256) {\n",
                    "message": "Parameter '' of ConstFeeRateModel.getFeeRate (ConstFeeRateModel.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public _FEE_RATE_;\n",
                    "message": "Variable 'ConstFeeRateModel._FEE_RATE_' (ConstFeeRateModel.sol#19) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/lib/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _OWNER_ = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), _OWNER_);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _OWNER_, \"NOT_OWNER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in Ownable.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- Ownable.sol#10 declares pragma solidity0.6.9\n\t- Ownable.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Ownable.sol:\n\t- pragma solidity0.6.9 (Ownable.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _OWNER_;\n",
                    "message": "Variable 'Ownable._OWNER_' (Ownable.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _NEW_OWNER_;\n",
                    "message": "Variable 'Ownable._NEW_OWNER_' (Ownable.sol#21) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _NEW_OWNER_ = address(0);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/lib/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"MUL_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, \"DIVIDING_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, \"SUB_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"ADD_ERROR\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in SafeMath.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- SafeMath.sol#10 declares pragma solidity0.6.9\n\t- SafeMath.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity0.6.9 (SafeMath.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (z < y) {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/lib/InitializableOwnable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _OWNER_, \"NOT_OWNER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in InitializableOwnable.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- InitializableOwnable.sol#10 declares pragma solidity0.6.9\n\t- InitializableOwnable.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "    function initOwner(address newOwner) public notInitialized {\n\n        _INITIALIZED_ = true;\n\n        _OWNER_ = newOwner;\n",
                    "message": "InitializableOwnable.initOwner (InitializableOwnable.sol#44-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n\n        _NEW_OWNER_ = newOwner;\n",
                    "message": "InitializableOwnable.transferOwnership (InitializableOwnable.sol#49-52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "    function claimOwnership() public {\n\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\n\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n\n        _OWNER_ = _NEW_OWNER_;\n\n        _NEW_OWNER_ = address(0);\n",
                    "message": "InitializableOwnable.claimOwnership (InitializableOwnable.sol#54-59) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in InitializableOwnable.sol:\n\t- pragma solidity0.6.9 (InitializableOwnable.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _OWNER_;\n",
                    "message": "Variable 'InitializableOwnable._OWNER_' (InitializableOwnable.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public _NEW_OWNER_;\n",
                    "message": "Variable 'InitializableOwnable._NEW_OWNER_' (InitializableOwnable.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool internal _INITIALIZED_;\n",
                    "message": "Variable 'InitializableOwnable._INITIALIZED_' (InitializableOwnable.sol#22) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _NEW_OWNER_ = address(0);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/lib/CloneFactory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function clone(address prototype) external override returns (address proxy) {\n\n        bytes20 targetBytes = bytes20(prototype);\n\n        assembly {\n\n            let clone := mload(0x40)\n\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n\n            mstore(add(clone, 0x14), targetBytes)\n\n            mstore(\n\n                add(clone, 0x28),\n\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n\n            )\n\n            proxy := create(0, clone, 0x37)\n\n        }\n\n        return proxy;\n",
                    "message": "CloneFactory.clone uses assembly (CloneFactory.sol#21-34)\n\t- CloneFactory.sol#23-32\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in CloneFactory.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- CloneFactory.sol#10 declares pragma solidity0.6.9\n\t- CloneFactory.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in CloneFactory.sol:\n\t- pragma solidity0.6.9 (CloneFactory.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/lib/RandomGenerator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _pools.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < pools.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] memory _pools) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _pools.length; i++) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            pools.push(_pools[i]);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            pools.push(_pools[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < pools.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            priceSum += IDODOMidPrice(pools[i]).getMidPrice();\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _pools.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < pools.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _pools.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < pools.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            priceSum += IDODOMidPrice(pools[i]).getMidPrice();\n",
                    "message": "RandomGenerator.random has external calls inside a loop:\n\t- priceSum += IDODOMidPrice(pools[i]).getMidPrice() (RandomGenerator.sol#32)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in RandomGenerator.sol:\n\t- pragma solidity0.6.9 (RandomGenerator.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] memory _pools) public {\n",
                    "message": "Parameter '_pools' of RandomGenerator. (RandomGenerator.sol#23) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _pools.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < pools.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _pools.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < pools.length; i++) {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/CollateralVault/intf/ICollateralVault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in ICollateralVault.sol:\n\t- pragma solidity0.6.9 (ICollateralVault.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _OWNER_() external returns (address);\n",
                    "message": "Function 'ICollateralVault._OWNER_' (ICollateralVault.sol#14) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "contractV2-feature-nft/contracts/external/Multicall.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n",
                    "message": "Multicall.aggregate has external calls inside a loop:\n\t- (success,ret) = calls[i].target.call(calls[i].callData) (Multicall.sol#24)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in Multicall.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- Multicall.sol#7 declares pragma solidity0.6.9\n\t- Multicall.sol#8 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n\n        blockNumber = block.number;\n\n        returnData = new bytes[](calls.length);\n\n        for(uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n\n            require(success);\n\n            returnData[i] = ret;\n\n        }\n",
                    "message": "Multicall.aggregate (Multicall.sol#20-28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "    function getEthBalance(address addr) public view returns (uint256 balance) {\n\n        balance = addr.balance;\n",
                    "message": "Multicall.getEthBalance (Multicall.sol#30-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\n\n        blockHash = blockhash(blockNumber);\n",
                    "message": "Multicall.getBlockHash (Multicall.sol#33-35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "    function getLastBlockHash() public view returns (bytes32 blockHash) {\n\n        blockHash = blockhash(block.number - 1);\n",
                    "message": "Multicall.getLastBlockHash (Multicall.sol#36-38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\n\n        timestamp = block.timestamp;\n",
                    "message": "Multicall.getCurrentBlockTimestamp (Multicall.sol#39-41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\n\n        difficulty = block.difficulty;\n",
                    "message": "Multicall.getCurrentBlockDifficulty (Multicall.sol#42-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": 47,
                    "vulnerability_code": "    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n\n        gaslimit = block.gaslimit;\n",
                    "message": "Multicall.getCurrentBlockGasLimit (Multicall.sol#45-47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": 50,
                    "vulnerability_code": "    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n\n        coinbase = block.coinbase;\n",
                    "message": "Multicall.getCurrentBlockCoinbase (Multicall.sol#48-50) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Multicall.sol:\n\t- pragma solidity0.6.9 (Multicall.sol#7): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 28,
                    "vulnerability_code": "    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n\n        blockNumber = block.number;\n\n        returnData = new bytes[](calls.length);\n\n        for(uint256 i = 0; i < calls.length; i++) {\n\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n\n            require(success);\n\n            returnData[i] = ret;\n\n        }\n",
                    "message": "Low level call in Multicall.aggregate (Multicall.sol#20-28):\n\t-(success,ret) = calls[i].target.call(calls[i].callData) Multicall.sol#24\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for(uint256 i = 0; i < calls.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/external/ERC20/ChiToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < value; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < value; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_21"
            ],
            "vulnerability_findings": [
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken._destroyChildren has external calls inside a loop:\n\t- computeAddress2(_totalBurned + i).call() (ChiToken.sol)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.mint uses assembly (ChiToken.sol)\n\t- ChiToken.sol\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "        return totalMinted.sub(totalBurned);\n\n    }\n\n\n\n    function mint(uint256 value) public {\n",
                    "message": "IERC20.transfer (ChiToken.sol#401-405) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": 455,
                    "vulnerability_code": "            computeAddress2(_totalBurned + i).call(\"\");\n\n        }\n\n        totalBurned = _totalBurned + value;\n\n    }\n\n\n\n    function free(uint256 value) public returns (uint256)  {\n",
                    "message": "ERC20WithoutTotalSupply.transfer (ChiToken.sol#449-455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": 419,
                    "vulnerability_code": "                pop(create2(0, 0, 30, add(offset, 16))) pop(create2(0, 0, 30, add(offset, 17)))\n",
                    "message": "IERC20.approve (ChiToken.sol#418-419) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": 461,
                    "vulnerability_code": "        _burn(msg.sender, value);\n\n        _destroyChildren(value);\n\n        return value;\n\n    }\n\n\n\n    function freeUpTo(uint256 value) public returns (uint256) {\n",
                    "message": "ERC20WithoutTotalSupply.approve (ChiToken.sol#455-461) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "        return free(Math.min(value, balanceOf(msg.sender)));\n\n    }\n\n\n\n    function freeFrom(address from, uint256 value) public returns (uint256) {\n\n        _burnFrom(from, value);\n\n        _destroyChildren(value);\n\n        return value;\n\n    }\n\n\n\n    function freeFromUpTo(address from, uint256 value) public returns (uint256) {\n",
                    "message": "ERC20WithoutTotalSupply.transferFrom (ChiToken.sol#461-471) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 423,
                    "vulnerability_code": "                pop(create2(0, 0, 30, add(offset, 24))) pop(create2(0, 0, 30, add(offset, 25)))\n",
                    "message": "IERC20.transferFrom (ChiToken.sol#422-423) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.totalSupply (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n",
                    "message": "IERC20.totalSupply (ChiToken.sol#387) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.mint (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.freeUpTo (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "ChiToken.freeFromUpTo (ChiToken.sol) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n",
                    "message": "Detected issues with version pragma in ChiToken.sol:\n\t- pragma solidity^0.6.0 (ChiToken.sol#211): it allows old versions\n\t- pragma solidity^0.6.0 (ChiToken.sol#233-235): it allows old versions\n\t- pragma solidity^0.6.0 (ChiToken.sol#382): it allows old versions\n\t- pragma solidity^0.6.0 (ChiToken.sol#436): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Low level call in ChiToken._destroyChildren (ChiToken.sol):\n\t-computeAddress2(_totalBurned + i).call() ChiToken.sol\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": 473,
                    "vulnerability_code": "        return freeFrom(from, Math.min(Math.min(value, balanceOf(from)), allowance(from, msg.sender)));\n\n    }\n",
                    "message": "Function 'ERC20WithoutTotalSupply._transfer' (ChiToken.sol#471-473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._approve' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._mint' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._burn' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ERC20WithoutTotalSupply._burnFrom' (ChiToken.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'ChiToken._destroyChildren' (ChiToken.sol) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            abi.encodePacked(bytes1(0xff), address(this), salt, bytes32(0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348))\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_CALL_WITHOUT_DATA",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            computeAddress2(_totalBurned + i).call(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public override returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            computeAddress2(_totalBurned + i).call(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 406,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/external/ERC20/TestWETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[src][msg.sender] >= wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowance[src][msg.sender] -= wad;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 public decimals = 18;\n",
                    "message": "WETH9.decimals should be constant (TestWETH.sol#16)\nWETH9.name should be constant (TestWETH.sol#14)\nWETH9.symbol should be constant (TestWETH.sol#15)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function withdraw(uint256 wad) public {\n\n        require(balanceOf[msg.sender] >= wad);\n\n        balanceOf[msg.sender] -= wad;\n\n        msg.sender.transfer(wad);\n\n        emit Withdrawal(msg.sender, wad);\n",
                    "message": "WETH9.withdraw (TestWETH.sol#39-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 48,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return address(this).balance;\n",
                    "message": "WETH9.totalSupply (TestWETH.sol#46-48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": 54,
                    "vulnerability_code": "    function approve(address guy, uint256 wad) public returns (bool) {\n\n        allowance[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n",
                    "message": "WETH9.approve (TestWETH.sol#50-54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "    function transfer(address dst, uint256 wad) public returns (bool) {\n\n        return transferFrom(msg.sender, dst, wad);\n",
                    "message": "WETH9.transfer (TestWETH.sol#56-58) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in TestWETH.sol:\n\t- pragma solidity0.6.9 (TestWETH.sol#10): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    fallback() external payable {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        deposit();\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/external/utils/Address.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(target), \"Address: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(target), \"Address: static call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(target), \"Address: delegate call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(target), \"Address: static call to non-contract\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(target), \"Address: delegate call to non-contract\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/external/utils/Context.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Context.sol:\n\t- pragma solidity0.6.9 (Context.sol#6): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function _msgSender() internal view virtual returns (address) {\n\n        return msg.sender;\n",
                    "message": "Function 'Context._msgSender' (Context.sol#19-21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "    function _msgData() internal view virtual returns (bytes calldata) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'Context._msgData' (Context.sol#23-26) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _msgData() internal view virtual returns (bytes calldata) {\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/external/utils/Strings.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(value == 0, \"Strings: hex length insufficient\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            digits++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            length++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Strings.sol:\n\t- pragma solidity0.6.9 (Strings.sol#6): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes16 private constant alphabet = \"0123456789abcdef\";\n",
                    "message": "Constant 'Strings.alphabet' (Strings.sol#12) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            buffer[i] = alphabet[value & 0xf];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes16 private constant alphabet = \"0123456789abcdef\";\n",
                    "message": null
                }
            ]
        }
    },
    "contractV2-feature-nft/contracts/helper/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in Migrations.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- Migrations.sol#10 declares pragma solidity0.6.9\n\t- Migrations.sol#11 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": 30,
                    "vulnerability_code": "    function setCompleted(uint256 completed) public restricted {\n\n        last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#28-30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "    function upgrade(address newAddress) public restricted {\n\n        Migrations upgraded = Migrations(newAddress);\n\n        upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#32-35) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity0.6.9 (Migrations.sol#10): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#16) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    }
}