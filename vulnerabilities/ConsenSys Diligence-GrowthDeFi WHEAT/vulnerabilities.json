{
    "wheat-v1-core-8360ac0a537589bb974e8a5a169bb3e7c95d2857/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tconstructor() public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t{\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\towner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "\tfunction setCompleted(uint256 _completed) public restricted\n\n\t{\n\n\t\tlast_completed_migration = _completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#24-27) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.6.0 (Migrations.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction setCompleted(uint256 _completed) public restricted\n",
                    "message": "Parameter '_completed' of Migrations.setCompleted (Migrations.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tuint256 public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#12) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                }
            ]
        }
    },
    "wheat-v1-core-8360ac0a537589bb974e8a5a169bb3e7c95d2857/contracts/IExchange.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in IExchange.sol:\n\t- pragma solidity^0.6.0 (IExchange.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                }
            ]
        }
    },
    "wheat-v1-core-8360ac0a537589bb974e8a5a169bb3e7c95d2857/contracts/interop/AutoFarmV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in AutoFarmV2.sol:\n\t- pragma solidity^0.6.0 (AutoFarmV2.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction AUTOv2() external view returns (address _auto);\n",
                    "message": "Function 'AutoFarmV2.AUTOv2' (AutoFarmV2.sol#11) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction poolInfo(uint256 _pid) external view returns (address _token, uint256 _allocPoint, uint256 _lastRewardBlock, uint256 _accAutoPerShare, address _strategy);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256 _shares, uint256 _rewardDebt);\n",
                    "message": null
                }
            ]
        }
    },
    "wheat-v1-core-8360ac0a537589bb974e8a5a169bb3e7c95d2857/contracts/interop/MasterChef.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in MasterChef.sol:\n\t- pragma solidity^0.6.0 (MasterChef.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction poolInfo(uint256 _pid) external view returns (address _lpToken, uint256 _allocPoint, uint256 _lastRewardBlock, uint256 _accCakePerShare);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256 _amount, uint256 _rewardDebt);\n",
                    "message": null
                }
            ]
        }
    },
    "wheat-v1-core-8360ac0a537589bb974e8a5a169bb3e7c95d2857/contracts/interop/Belt.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in Belt.sol:\n\t- pragma solidity^0.6.0 (Belt.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction calc_token_amount(uint256[4] calldata _amounts, bool _deposit) external view returns (uint256 _tokenAmount);\n",
                    "message": "Function 'BeltStrategyPool.calc_token_amount' (Belt.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction pool_token() external view returns (address _token);\n",
                    "message": "Function 'BeltStrategyPool.pool_token' (Belt.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction underlying_coins(int128 _index) external view returns (address _coin);\n",
                    "message": "Function 'BeltStrategyPool.underlying_coins' (Belt.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction add_liquidity(uint256[4] calldata _amounts, uint256 _minTokenAmount) external;\n",
                    "message": "Function 'BeltStrategyPool.add_liquidity' (Belt.sol#24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                }
            ]
        }
    },
    "wheat-v1-core-8360ac0a537589bb974e8a5a169bb3e7c95d2857/contracts/network/$.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in $.sol:\n\t- pragma solidity^0.6.0 ($.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "library $\n\n{\n\n\taddress constant UniswapV2_Compatible_FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\n\n\n\n\taddress constant UniswapV2_Compatible_ROUTER02 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n\n\n\taddress constant PancakeSwap_MASTERCHEF = 0x73feaa1eE314F8c655E354234017bE2193C9E24E;\n\n\n\n\taddress constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n\n\n\n\taddress constant GRO = 0x336eD56D8615271b38EcEE6F4786B55d0EE91b96;\n\n\n\n\taddress constant WHEAT = 0x3ab63309F85df5D4c3351ff8EACb87980E05Da4E;\n\n\n\n\taddress constant AUTO = 0xa184088a740c695E156F91f5cC086a06bb78b827;\n\n\n\n\taddress constant PANTHER = 0x1f546aD641B56b86fD9dCEAc473d1C7a357276B7;\n\n\n\n\taddress constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\n\n\n\n\taddress constant ETH = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\n\n\n\n\taddress constant BTCB = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c;\n\n\n\n\taddress constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n",
                    "message": "Contract '$' ($.sol#10-35) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant UniswapV2_Compatible_FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\n",
                    "message": "Constant '$.UniswapV2_Compatible_FACTORY' ($.sol#12) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant UniswapV2_Compatible_ROUTER02 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n",
                    "message": "Constant '$.UniswapV2_Compatible_ROUTER02' ($.sol#14) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant PancakeSwap_MASTERCHEF = 0x73feaa1eE314F8c655E354234017bE2193C9E24E;\n",
                    "message": "Constant '$.PancakeSwap_MASTERCHEF' ($.sol#16) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant UniswapV2_Compatible_FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant UniswapV2_Compatible_ROUTER02 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant PancakeSwap_MASTERCHEF = 0x73feaa1eE314F8c655E354234017bE2193C9E24E;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant GRO = 0x336eD56D8615271b38EcEE6F4786B55d0EE91b96;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant WHEAT = 0x3ab63309F85df5D4c3351ff8EACb87980E05Da4E;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant AUTO = 0xa184088a740c695E156F91f5cC086a06bb78b827;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant PANTHER = 0x1f546aD641B56b86fD9dCEAc473d1C7a357276B7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant ETH = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant BTCB = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant UniswapV2_Compatible_FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant UniswapV2_Compatible_ROUTER02 = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant PancakeSwap_MASTERCHEF = 0x73feaa1eE314F8c655E354234017bE2193C9E24E;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant GRO = 0x336eD56D8615271b38EcEE6F4786B55d0EE91b96;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant WHEAT = 0x3ab63309F85df5D4c3351ff8EACb87980E05Da4E;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant AUTO = 0xa184088a740c695E156F91f5cC086a06bb78b827;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant PANTHER = 0x1f546aD641B56b86fD9dCEAc473d1C7a357276B7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant ETH = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant BTCB = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\taddress constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n",
                    "message": null
                }
            ]
        }
    },
    "wheat-v1-core-8360ac0a537589bb974e8a5a169bb3e7c95d2857/contracts/modules/Math.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in Math.sol:\n\t- pragma solidity^0.6.0 (Math.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n\n\t{\n\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\n",
                    "message": "Function 'Math._min' (Math.sol#11-14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n",
                    "message": "Parameter '_amount1' of Math._min (Math.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\n",
                    "message": "Parameter '_amount2' of Math._min (Math.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n\n\t{\n\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\n",
                    "message": "Function 'Math._max' (Math.sol#16-19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n",
                    "message": "Parameter '_amount1' of Math._max (Math.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\n",
                    "message": "Parameter '_amount2' of Math._max (Math.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "\tfunction _sqrt(uint256 _y) internal pure returns (uint256 _z)\n\n\t{\n\n\t\tif (_y > 3) {\n\n\t\t\t_z = _y;\n\n\t\t\tuint256 _x = _y / 2 + 1;\n\n\t\t\twhile (_x < _z) {\n\n\t\t\t\t_z = _x;\n\n\t\t\t\t_x = (_y / _x + _x) / 2;\n\n\t\t\t}\n\n\t\t\treturn _z;\n\n\t\t}\n\n\t\tif (_y > 0) return 1;\n\n\t\treturn 0;\n",
                    "message": "Function 'Math._sqrt' (Math.sol#21-34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tfunction _sqrt(uint256 _y) internal pure returns (uint256 _z)\n",
                    "message": "Parameter '_y' of Math._sqrt (Math.sol#21) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\twhile (_x < _z) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                }
            ]
        }
    }
}