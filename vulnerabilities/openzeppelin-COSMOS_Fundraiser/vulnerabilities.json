{
    "fundraiser-lib-693cf3f32e9fd679216372876dda86fa57a3277e/src/truffle/contracts/Fundraiser.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalEther += msg.value;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\ttotalAtom += atoms;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public isHalted = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public totalEther = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public totalAtom = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_35"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 111,
                    "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n\n\t// checksum is the sha3 of the xor of the bytes32 versions of the cosmos address and the return address\n\n\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n\n\n\n\t// forward the funds to the treasurer\n\n        // SWC-Reentrancy: L92\n\n        if (!treasury.call.value(msg.value)()) throw;\n\n\n\n\t// calculate the number of atoms at the current rate\n\n\tvar atoms = msg.value * atomRate;\n\n\n\n\t// update the donor details\n\n        record[_donor] += atoms;\n\n        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n\n\n\n\t// update the totals\n\n        totalEther += msg.value;\n\n\ttotalAtom += atoms;\n\n\n\n        Received(_donor, msg.value, atomRate);\n",
                    "message": "Reentrancy in Fundraiser.donate (Fundraiser.sol#91-111):\n\tExternal calls:\n\t- ! treasury.call.value(msg.value)() (Fundraiser.sol#97)\n\tState variables written after the call(s):\n\t- record (Fundraiser.sol#103)\n\t- returnAddresses (Fundraiser.sol#104)\n\t- totalAtom (Fundraiser.sol#108)\n\t- totalEther (Fundraiser.sol#107)\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tthrow;\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#86:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#93:\n\t- Usage of \"sha3()\" should be replaced with \"keccak256()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#93:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#97:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        suicide(treasury);\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#133:\n\t- Usage of \"suicide()\" should be replaced with \"selfdestruct()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#65:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#67:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#69:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#71:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#73:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "deprecated-standards",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
                    "message": "Deprecated standard detected @ Fundraiser.sol#75:\n\t- Usage of \"throw\" should be replaced with \"revert()\"\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "    function() {\n\n\tthrow;\n",
                    "message": "Fundraiser.fallback (Fundraiser.sol#85-87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 111,
                    "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n\n\t// checksum is the sha3 of the xor of the bytes32 versions of the cosmos address and the return address\n\n\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n\n\n\n\t// forward the funds to the treasurer\n\n        // SWC-Reentrancy: L92\n\n        if (!treasury.call.value(msg.value)()) throw;\n\n\n\n\t// calculate the number of atoms at the current rate\n\n\tvar atoms = msg.value * atomRate;\n\n\n\n\t// update the donor details\n\n        record[_donor] += atoms;\n\n        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n\n\n\n\t// update the totals\n\n        totalEther += msg.value;\n\n\ttotalAtom += atoms;\n\n\n\n        Received(_donor, msg.value, atomRate);\n",
                    "message": "Fundraiser.donate (Fundraiser.sol#91-111) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    function adjustRate(uint newRate) only_admin only_during_period {\n\n\tatomRate = newRate;\n",
                    "message": "Fundraiser.adjustRate (Fundraiser.sol#115-117) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function halt() only_admin only_during_period {\n\n        isHalted = true;\n\n        Halted();\n",
                    "message": "Fundraiser.halt (Fundraiser.sol#120-123) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": 129,
                    "vulnerability_code": "    function unhalt() only_admin only_during_halted_period {\n\n        isHalted = false;\n\n        Unhalted();\n",
                    "message": "Fundraiser.unhalt (Fundraiser.sol#126-129) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function kill() only_admin only_after_period {\n\n        suicide(treasury);\n",
                    "message": "Fundraiser.kill (Fundraiser.sol#132-134) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.7;\n",
                    "message": "Detected issues with version pragma in Fundraiser.sol:\n\t- pragma solidity^0.4.7 (Fundraiser.sol#11): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": 111,
                    "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n\n\t// checksum is the sha3 of the xor of the bytes32 versions of the cosmos address and the return address\n\n\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n\n\n\n\t// forward the funds to the treasurer\n\n        // SWC-Reentrancy: L92\n\n        if (!treasury.call.value(msg.value)()) throw;\n\n\n\n\t// calculate the number of atoms at the current rate\n\n\tvar atoms = msg.value * atomRate;\n\n\n\n\t// update the donor details\n\n        record[_donor] += atoms;\n\n        returnAddresses[_donor] = _returnAddress; // XXX: overwrites\n\n\n\n\t// update the totals\n\n        totalEther += msg.value;\n\n\ttotalAtom += atoms;\n\n\n\n        Received(_donor, msg.value, atomRate);\n",
                    "message": "Low level call in Fundraiser.donate (Fundraiser.sol#91-111):\n\t-! treasury.call.value(msg.value)() Fundraiser.sol#97\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 62,
                    "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n\n        admin = _admin;\n\n        treasury = _treasury;\n\n        beginBlock = _beginBlock;\n\n        endBlock = _endBlock;\n\n\tatomRate = _atomRate;\n",
                    "message": "Function 'Fundraiser.Fundraiser' (Fundraiser.sol#56-62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
                    "message": "Parameter '_admin' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
                    "message": "Parameter '_treasury' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
                    "message": "Parameter '_beginBlock' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
                    "message": "Parameter '_endBlock' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
                    "message": "Parameter '_atomRate' of Fundraiser.Fundraiser (Fundraiser.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n",
                    "message": "Parameter '_donor' of Fundraiser.donate (Fundraiser.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n",
                    "message": "Parameter '_returnAddress' of Fundraiser.donate (Fundraiser.sol#91) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public constant dust = 1 finney; // XXX: change for production\n",
                    "message": "Constant 'Fundraiser.dust' (Fundraiser.sol#19) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
                    "message": "Modifier 'Fundraiser.only_admin' (Fundraiser.sol#65) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
                    "message": "Modifier 'Fundraiser.only_before_period' (Fundraiser.sol#67) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
                    "message": "Modifier 'Fundraiser.only_during_period' (Fundraiser.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
                    "message": "Modifier 'Fundraiser.only_during_halted_period' (Fundraiser.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
                    "message": "Modifier 'Fundraiser.only_after_period' (Fundraiser.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
                    "message": "Modifier 'Fundraiser.is_not_dust' (Fundraiser.sol#75) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_CALL_WITHOUT_DATA",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        suicide(treasury);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tthrow;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.7;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_admin { if (msg.sender != admin) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_before_period { if (block.number >= beginBlock) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_period { if (block.number < beginBlock || block.number >= endBlock || isHalted) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_during_halted_period { if (block.number < beginBlock || block.number >= endBlock || !isHalted) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier only_after_period { if (block.number < endBlock) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    modifier is_not_dust { if (msg.value < dust) throw; _; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\tif (!(sha3(bytes32(_donor)^bytes32(_returnAddress)) == checksum)) throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!treasury.call.value(msg.value)()) throw;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function Fundraiser(address _admin, address _treasury, uint _beginBlock, uint _endBlock, uint _atomRate) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function donate(address _donor, address _returnAddress, bytes32 checksum) payable only_during_period is_not_dust {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function adjustRate(uint newRate) only_admin only_during_period {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function halt() only_admin only_during_period {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unhalt() only_admin only_during_halted_period {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function kill() only_admin only_after_period {\n",
                    "message": null
                }
            ]
        }
    },
    "fundraiser-lib-693cf3f32e9fd679216372876dda86fa57a3277e/src/truffle/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.4 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Migrations() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted {\n",
                    "message": null
                }
            ]
        }
    }
}