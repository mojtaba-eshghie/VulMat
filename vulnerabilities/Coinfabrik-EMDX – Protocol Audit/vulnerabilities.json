{
    "perpetual-protocol-emdx-main/src/interface/IPriceFeed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in IPriceFeed.sol:\n\t- pragma solidity0.6.9 (IPriceFeed.sol#4-6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "perpetual-protocol-emdx-main/src/interface/IPerpToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in IPerpToken.sol:\n\t- pragma solidity0.6.9 (IPerpToken.sol#4-6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "perpetual-protocol-emdx-main/src/interface/gnosis/MultiSigWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in MultiSigWallet.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- MultiSigWallet.sol#4-5 declares pragma solidity0.6.9\n\t- MultiSigWallet.sol#5-7 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in MultiSigWallet.sol:\n\t- pragma solidity0.6.9 (MultiSigWallet.sol#4-5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "perpetual-protocol-emdx-main/src/bridge/external/IAMB.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in IAMB.sol:\n\t- pragma solidity0.6.9 (IAMB.sol#4-6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function requireToPassMessage(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _gas\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (bytes32);\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/bridge/external/IMultiTokenMediator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in IMultiTokenMediator.sol:\n\t- pragma solidity0.6.9 (IMultiTokenMediator.sol#4-6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "perpetual-protocol-emdx-main/src/mock/TetherToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "abstract contract BasicToken is Ownable, ERC20Basic {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "abstract contract BlackList is Ownable, BasicToken {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public basisPointsRate = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public maximumFee = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _initialSupply,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory _symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _decimals\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _totalSupply = _initialSupply;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = _symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        decimals = _decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_51"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "abstract contract ERC20Basic {\n\n    uint256 public _totalSupply;\n\n\n\n    function totalSupply() public view virtual returns (uint256);\n\n\n\n    function balanceOf(address who) public view virtual returns (uint256);\n\n\n\n    function transfer(address to, uint256 value) public virtual;\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n",
                    "message": "ERC20Basic (TetherToken.sol#85-97) has incorrect ERC20 function interface(s):\n\t-transfer (TetherToken.sol#92-94)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "abstract contract ERC20 is ERC20Basic {\n\n    function allowance(address owner, address spender) public view virtual returns (uint256);\n\n\n\n    function transferFrom(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) public virtual;\n\n\n\n    function approve(address spender, uint256 value) public virtual;\n\n\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n\n\n",
                    "message": "ERC20 (TetherToken.sol#101-115) has incorrect ERC20 function interface(s):\n\t-transferFrom (TetherToken.sol#104-110)\n\t-approve (TetherToken.sol#110-112)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "abstract contract BasicToken is Ownable, ERC20Basic {\n\n    using SafeMath for uint256;\n\n\n\n    mapping(address => uint256) public balances;\n\n\n\n    // additional variables for use if transaction fees ever became necessary\n\n    uint256 public basisPointsRate = 0;\n\n    uint256 public maximumFee = 0;\n\n\n\n    /**\n\n     * @dev Fix for the ERC20 short address attack.\n\n     */\n\n    modifier onlyPayloadSize(uint256 size) {\n\n        require(!(msg.data.length < size + 4));\n\n        _;\n\n    }\n\n\n\n    /**\n\n     * @dev transfer token for a specified address\n\n     * @param _to The address to transfer to.\n\n     * @param _value The amount to be transferred.\n\n     */\n\n    function transfer(address _to, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n\n        uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        uint256 sendAmount = _value.sub(fee);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            emit Transfer(msg.sender, owner, fee);\n\n        }\n\n        emit Transfer(msg.sender, _to, sendAmount);\n\n    }\n\n\n\n    function balanceOf(address _owner) public view virtual override returns (uint256 balance) {\n\n        return balances[_owner];\n\n    }\n\n}\n\n\n",
                    "message": "BasicToken (TetherToken.sol#119-161) has incorrect ERC20 function interface(s):\n\t-transfer (TetherToken.sol#141-156)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "abstract contract StandardToken is BasicToken, ERC20 {\n\n    mapping(address => mapping(address => uint256)) public allowed;\n\n\n\n    uint256 public constant MAX_UINT = 2**256 - 1;\n\n\n\n    /**\n\n     * @dev Transfer tokens from one address to another\n\n     * @param _from address The address which you want to send tokens from\n\n     * @param _to address The address which you want to transfer to\n\n     * @param _value uint the amount of tokens to be transferred\n\n     */\n\n\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    ) public virtual override onlyPayloadSize(3 * 32) {\n\n        uint256 _allowance = allowed[_from][msg.sender];\n\n\n\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n\n        // if (_value > _allowance) throw;\n\n\n\n        uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n\n        if (fee > maximumFee) {\n\n            fee = maximumFee;\n\n        }\n\n        if (_allowance < MAX_UINT) {\n\n            allowed[_from][msg.sender] = _allowance.sub(_value);\n\n        }\n\n        uint256 sendAmount = _value.sub(fee);\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(sendAmount);\n\n        if (fee > 0) {\n\n            balances[owner] = balances[owner].add(fee);\n\n            Transfer(_from, owner, fee);\n\n        }\n\n        Transfer(_from, _to, sendAmount);\n\n    }\n\n\n\n    /**\n\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n     * @param _spender The address which will spend the funds.\n\n     * @param _value The amount of tokens to be spent.\n\n     */\n\n    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n\n        // To change the approve amount you first have to reduce the addresses`\n\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n\n        //  already 0 to mitigate the race condition described here:\n\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n\n\n\n        allowed[msg.sender][_spender] = _value;\n\n        Approval(msg.sender, _spender, _value);\n\n    }\n\n\n\n    function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\n\n        return allowed[_owner][_spender];\n\n    }\n\n}\n\n\n",
                    "message": "StandardToken (TetherToken.sol#168-228) has incorrect ERC20 function interface(s):\n\t-transferFrom (TetherToken.sol#180-207)\n\t-approve (TetherToken.sol#212-223)\n"
                },
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": 481,
                    "vulnerability_code": "contract TetherToken is Pausable, StandardToken, BlackList {\n\n    string public name;\n\n    string public symbol;\n\n    uint256 public decimals;\n\n    address public upgradedAddress;\n\n    bool public deprecated;\n\n\n\n    //  The contract can be initialized with a number of tokens\n\n    //  All the tokens are deposited to the owner address\n\n    //\n\n    // @param _balance Initial supply of the contract\n\n    // @param _name Token Name\n\n    // @param _symbol Token symbol\n\n    // @param _decimals Token decimals\n\n    constructor(\n\n        uint256 _initialSupply,\n\n        string memory _name,\n\n        string memory _symbol,\n\n        uint256 _decimals\n\n    ) public {\n\n        _totalSupply = _initialSupply;\n\n        name = _name;\n\n        symbol = _symbol;\n\n        decimals = _decimals;\n\n        balances[owner] = _initialSupply;\n\n        deprecated = false;\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function transfer(address _to, uint256 _value) public override whenNotPaused {\n\n        require(!isBlackListed[msg.sender]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n\n        } else {\n\n            return super.transfer(_to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function transferFrom(\n\n        address _from,\n\n        address _to,\n\n        uint256 _value\n\n    ) public override whenNotPaused {\n\n        require(!isBlackListed[_from]);\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n\n        } else {\n\n            return super.transferFrom(_from, _to, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function balanceOf(address who) public view override returns (uint256) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n\n        } else {\n\n            return super.balanceOf(who);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n\n        if (deprecated) {\n\n            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n\n        } else {\n\n            return super.approve(_spender, _value);\n\n        }\n\n    }\n\n\n\n    // Forward ERC20 methods to upgraded contract if this one is deprecated\n\n\n\n    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).allowance(_owner, _spender);\n\n        } else {\n\n            return super.allowance(_owner, _spender);\n\n        }\n\n    }\n\n\n\n    // deprecate current contract in favour of a new one\n\n    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n\n    }\n\n\n\n    // deprecate current contract if favour of a new one\n\n\n\n    function totalSupply() public view override returns (uint256) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n\n    }\n\n\n\n    // Issue a new amount of tokens\n\n    // these tokens are deposited into the owner address\n\n    //\n\n    // @param _amount Number of tokens to be issued\n\n    function issue(uint256 amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n\n    }\n\n\n\n    // Redeem tokens.\n\n    // These tokens are withdrawn from the owner address\n\n    // if the balance must be enough to cover the redeem\n\n    // or the call will fail.\n\n    // @param _amount Number of tokens to be issued\n\n    function redeem(uint256 amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n\n    }\n\n\n\n    function setParams(uint256 newBasisPoints, uint256 newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n\n    }\n\n\n\n    // Called when new token are issued\n\n    event Issue(uint256 amount);\n\n\n\n    // Called when tokens are redeemed\n\n    event Redeem(uint256 amount);\n\n\n\n    // Called when contract is deprecated\n\n    event Deprecate(address newAddress);\n\n\n\n    // Called if contract ever adds fees\n\n    event Params(uint256 feeBasisPoints, uint256 maxFee);\n",
                    "message": "TetherToken (TetherToken.sol#331-481) has incorrect ERC20 function interface(s):\n\t-transfer (TetherToken.sol#361-370)\n\t-transferFrom (TetherToken.sol#372-385)\n\t-approve (TetherToken.sol#397-405)\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 8,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in TetherToken.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- TetherToken.sol#7-8 declares pragma solidity0.6.9\n\t- TetherToken.sol#8-10 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public onlyOwner {\n\n        if (newOwner != address(0)) {\n\n            owner = newOwner;\n\n        }\n\n    }\n",
                    "message": "Ownable.transferOwnership (TetherToken.sol#73-78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": 90,
                    "vulnerability_code": "    function totalSupply() public view virtual returns (uint256);\n\n\n",
                    "message": "ERC20Basic.totalSupply (TetherToken.sol#88-90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": 432,
                    "vulnerability_code": "    function totalSupply() public view override returns (uint256) {\n\n        if (deprecated) {\n\n            return StandardToken(upgradedAddress).totalSupply();\n\n        } else {\n\n            return _totalSupply;\n\n        }\n\n    }\n\n\n",
                    "message": "TetherToken.totalSupply (TetherToken.sol#424-432) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function pause() public onlyOwner whenNotPaused {\n\n        paused = true;\n\n        Pause();\n\n    }\n\n\n",
                    "message": "Pausable.pause (TetherToken.sol#257-262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": 269,
                    "vulnerability_code": "    function unpause() public onlyOwner whenPaused {\n\n        paused = false;\n\n        Unpause();\n\n    }\n",
                    "message": "Pausable.unpause (TetherToken.sol#265-269) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 288,
                    "vulnerability_code": "    function addBlackList(address _evilUser) public onlyOwner {\n\n        isBlackListed[_evilUser] = true;\n\n        AddedBlackList(_evilUser);\n\n    }\n\n\n",
                    "message": "BlackList.addBlackList (TetherToken.sol#283-288) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 293,
                    "vulnerability_code": "    function removeBlackList(address _clearedUser) public onlyOwner {\n\n        isBlackListed[_clearedUser] = false;\n\n        RemovedBlackList(_clearedUser);\n\n    }\n\n\n",
                    "message": "BlackList.removeBlackList (TetherToken.sol#288-293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": 301,
                    "vulnerability_code": "    function destroyBlackFunds(address _blackListedUser) public onlyOwner {\n\n        require(isBlackListed[_blackListedUser]);\n\n        uint256 dirtyFunds = balanceOf(_blackListedUser);\n\n        balances[_blackListedUser] = 0;\n\n        _totalSupply -= dirtyFunds;\n\n        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n\n    }\n\n\n",
                    "message": "BlackList.destroyBlackFunds (TetherToken.sol#293-301) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 317,
                    "vulnerability_code": "    function transferByLegacy(\n\n        address from,\n\n        address to,\n\n        uint256 value\n\n    ) public virtual;\n\n\n",
                    "message": "UpgradedStandardToken.transferByLegacy (TetherToken.sol#311-317) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 324,
                    "vulnerability_code": "    function transferFromByLegacy(\n\n        address sender,\n\n        address from,\n\n        address spender,\n\n        uint256 value\n\n    ) public virtual;\n\n\n",
                    "message": "UpgradedStandardToken.transferFromByLegacy (TetherToken.sol#317-324) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 329,
                    "vulnerability_code": "    function approveByLegacy(\n\n        address from,\n\n        address spender,\n\n        uint256 value\n\n    ) public virtual;\n",
                    "message": "UpgradedStandardToken.approveByLegacy (TetherToken.sol#324-329) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": 422,
                    "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n\n        deprecated = true;\n\n        upgradedAddress = _upgradedAddress;\n\n        Deprecate(_upgradedAddress);\n\n    }\n\n\n",
                    "message": "TetherToken.deprecate (TetherToken.sol#416-422) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 436,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "    function issue(uint256 amount) public onlyOwner {\n\n        require(_totalSupply + amount > _totalSupply);\n\n        require(balances[owner] + amount > balances[owner]);\n\n\n\n        balances[owner] += amount;\n\n        _totalSupply += amount;\n\n        Issue(amount);\n\n    }\n\n\n",
                    "message": "TetherToken.issue (TetherToken.sol#436-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function redeem(uint256 amount) public onlyOwner {\n\n        require(_totalSupply >= amount);\n\n        require(balances[owner] >= amount);\n\n\n\n        _totalSupply -= amount;\n\n        balances[owner] -= amount;\n\n        Redeem(amount);\n\n    }\n\n\n",
                    "message": "TetherToken.redeem (TetherToken.sol#450-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": 470,
                    "vulnerability_code": "    function setParams(uint256 newBasisPoints, uint256 newMaxFee) public onlyOwner {\n\n        // Ensure transparency by hardcoding limit beyond which fees can never be added\n\n        require(newBasisPoints < 20);\n\n        require(newMaxFee < 50);\n\n\n\n        basisPointsRate = newBasisPoints;\n\n        maximumFee = newMaxFee.mul(10**decimals);\n\n\n\n        Params(basisPointsRate, maximumFee);\n\n    }\n\n\n",
                    "message": "TetherToken.setParams (TetherToken.sol#459-470) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 8,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in TetherToken.sol:\n\t- pragma solidity0.6.9 (TetherToken.sol#7-8): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": 87,
                    "vulnerability_code": "    uint256 public _totalSupply;\n",
                    "message": "Variable 'ERC20Basic._totalSupply' (TetherToken.sol#86-87) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view virtual override returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (TetherToken.sol#156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (TetherToken.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (TetherToken.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (TetherToken.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view virtual override returns (uint256 remaining) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (TetherToken.sol#223) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": 182,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (TetherToken.sol#181-182) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (TetherToken.sol#182-183) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 183,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "        uint256 _value\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (TetherToken.sol#183-184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (TetherToken.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (TetherToken.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBlackListStatus(address _maker) external view returns (bool) {\n",
                    "message": "Parameter '_maker' of BlackList.getBlackListStatus (TetherToken.sol#273) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addBlackList(address _evilUser) public onlyOwner {\n",
                    "message": "Parameter '_evilUser' of BlackList.addBlackList (TetherToken.sol#283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function removeBlackList(address _clearedUser) public onlyOwner {\n",
                    "message": "Parameter '_clearedUser' of BlackList.removeBlackList (TetherToken.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroyBlackFunds(address _blackListedUser) public onlyOwner {\n",
                    "message": "Parameter '_blackListedUser' of BlackList.destroyBlackFunds (TetherToken.sol#293) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public override whenNotPaused {\n",
                    "message": "Parameter '_to' of TetherToken.transfer (TetherToken.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public override whenNotPaused {\n",
                    "message": "Parameter '_value' of TetherToken.transfer (TetherToken.sol#361) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\n",
                    "message": "Parameter '_owner' of TetherToken.allowance (TetherToken.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view override returns (uint256 remaining) {\n",
                    "message": "Parameter '_spender' of TetherToken.allowance (TetherToken.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": 374,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of TetherToken.transferFrom (TetherToken.sol#373-374) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of TetherToken.transferFrom (TetherToken.sol#374-375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": 376,
                    "vulnerability_code": "        uint256 _value\n",
                    "message": "Parameter '_value' of TetherToken.transferFrom (TetherToken.sol#375-376) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_spender' of TetherToken.approve (TetherToken.sol#397) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n",
                    "message": "Parameter '_value' of TetherToken.approve (TetherToken.sol#397) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "        uint256 _initialSupply,\n",
                    "message": "Parameter '_initialSupply' of TetherToken. (TetherToken.sol#346-347) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": 348,
                    "vulnerability_code": "        string memory _name,\n",
                    "message": "Parameter '_name' of TetherToken. (TetherToken.sol#347-348) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "        string memory _symbol,\n",
                    "message": "Parameter '_symbol' of TetherToken. (TetherToken.sol#348-349) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "        uint256 _decimals\n",
                    "message": "Parameter '_decimals' of TetherToken. (TetherToken.sol#349-350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deprecate(address _upgradedAddress) public onlyOwner {\n",
                    "message": "Parameter '_upgradedAddress' of TetherToken.deprecate (TetherToken.sol#416) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public virtual override onlyPayloadSize(2 * 32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public override onlyPayloadSize(2 * 32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setParams(uint256 newBasisPoints, uint256 newMaxFee) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/mock/PerpToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory name, string memory symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = 18;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 782,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 783,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address msgSender = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 784,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msgSender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 785,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 786,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 847,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _initialSupply) public ERC20(\"Perpetual\", \"PERP\") {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _mint(msg.sender, _initialSupply);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"SafeMath: addition overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isContract(target), \"Address: call to non-contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 721,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner == _msgSender(), \"PerpFiOwnable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 824,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != address(0), \"PerpFiOwnable: zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != _owner, \"PerpFiOwnable: same as original\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 826,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner != _candidate, \"PerpFiOwnable: same as candidate\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_candidate != address(0), \"PerpFiOwnable: candidate is zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 836,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_candidate == _msgSender(), \"PerpFiOwnable: not the new owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 852,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(minters[msg.sender], \"!minter\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"Address: unable to send value, recipient may have reverted\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(sender != address(0), \"ERC20: transfer from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(account != address(0), \"ERC20: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 721,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"ERC20: approve from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 722,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"ERC20: approve to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 803,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner == _msgSender(), \"PerpFiOwnable: caller is not the owner\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 835,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_candidate != address(0), \"PerpFiOwnable: candidate is zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 675,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _beforeTokenTransfer(address(0), account, amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _beforeTokenTransfer(account, address(0), amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 816,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _candidate = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 823,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwner(address newOwner) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => uint256)) private _allowances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 471,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _candidate;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 462,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address account) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function sendValue(address payable recipient, uint256 amount) internal {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(address(this).balance >= amount, \"Address: insufficient balance\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = recipient.call{ value: amount }(\"\");\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/mock/mocks/AMBBridgeMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"execute error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "arbitrary-low-level-call",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool ret, bytes memory _) = _contract.call(_data);\n",
                    "message": "An attacker may perform call() to an arbitrary address with controlled calldata"
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in AMBBridgeMock.sol:\n\t- pragma solidity0.6.9 (AMBBridgeMock.sol#4-6): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "    function requireToPassMessage(\n\n        address _contract,\n\n        bytes calldata _data,\n\n        uint256 _gas\n\n    ) external returns (bytes32) {\n\n        (bool ret, bytes memory _) = _contract.call(_data);\n\n        if (!ret) {\n\n            revert(\"execute error\");\n\n        }\n\n        return msgId;\n\n    }\n\n\n",
                    "message": "Low level call in AMBBridgeMock.requireToPassMessage (AMBBridgeMock.sol#24-36):\n\t-(ret,_) = _contract.call(_data) AMBBridgeMock.sol#29-30\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mockSetMessageId(bytes32 _msgId) external {\n",
                    "message": "Parameter '_msgId' of AMBBridgeMock.mockSetMessageId (AMBBridgeMock.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mockSetMessageSender(address _addr) external {\n",
                    "message": "Parameter '_addr' of AMBBridgeMock.mockSetMessageSender (AMBBridgeMock.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 26,
                    "vulnerability_code": "        address _contract,\n",
                    "message": "Parameter '_contract' of AMBBridgeMock.requireToPassMessage (AMBBridgeMock.sol#25-26) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": "Parameter '_data' of AMBBridgeMock.requireToPassMessage (AMBBridgeMock.sol#26-27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool ret, bytes memory _) = _contract.call(_data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function requireToPassMessage(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address msgSender;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 msgId;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        bytes calldata _data,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _gas\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (bytes32) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool ret, bytes memory _) = _contract.call(_data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool ret, bytes memory _) = _contract.call(_data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (!ret) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"execute error\");\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/mock/mocks/BalancerMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in BalancerMock.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- BalancerMock.sol#4-5 declares pragma solidity0.6.9\n\t- BalancerMock.sol#5-7 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "    function mockSetSpotPrice(uint256 price) public {\n\n        spotPrice = price;\n\n    }\n\n\n",
                    "message": "BalancerMock.mockSetSpotPrice (BalancerMock.sol#21-25) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in BalancerMock.sol:\n\t- pragma solidity0.6.9 (BalancerMock.sol#4-5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private spotPrice = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] private currentTokens;\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/mock/mocks/L2PriceFeedMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _price) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        price = _price;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        twapPrice = _price;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "    function getTwapPrice(bytes32, uint256) public view returns (uint256) {\n\n        return twapPrice;\n\n    }\n\n\n",
                    "message": "L2PriceFeedMock.getTwapPrice (L2PriceFeedMock.sol#15-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "    function setTwapPrice(uint256 _price) public {\n\n        twapPrice = _price;\n\n    }\n\n\n",
                    "message": "L2PriceFeedMock.setTwapPrice (L2PriceFeedMock.sol#19-23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function getPrice(bytes32) public view returns (uint256) {\n\n        return price;\n\n    }\n\n\n",
                    "message": "L2PriceFeedMock.getPrice (L2PriceFeedMock.sol#23-27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 31,
                    "vulnerability_code": "    function setPrice(uint256 _price) public {\n\n        price = _price;\n\n    }\n\n\n",
                    "message": "L2PriceFeedMock.setPrice (L2PriceFeedMock.sol#27-31) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in L2PriceFeedMock.sol:\n\t- pragma solidity0.6.9 (L2PriceFeedMock.sol#4-6): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _price) public {\n",
                    "message": "Parameter '_price' of L2PriceFeedMock. (L2PriceFeedMock.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTwapPrice(bytes32, uint256) public view returns (uint256) {\n",
                    "message": "Parameter '' of L2PriceFeedMock.getTwapPrice (L2PriceFeedMock.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTwapPrice(bytes32, uint256) public view returns (uint256) {\n",
                    "message": "Parameter '_scope_0' of L2PriceFeedMock.getTwapPrice (L2PriceFeedMock.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTwapPrice(uint256 _price) public {\n",
                    "message": "Parameter '_price' of L2PriceFeedMock.setTwapPrice (L2PriceFeedMock.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(bytes32) public view returns (uint256) {\n",
                    "message": "Parameter '' of L2PriceFeedMock.getPrice (L2PriceFeedMock.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setPrice(uint256 _price) public {\n",
                    "message": "Parameter '_price' of L2PriceFeedMock.setPrice (L2PriceFeedMock.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 35,
                    "vulnerability_code": "        bytes32 _priceFeedKey,\n",
                    "message": "Parameter '_priceFeedKey' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#34-35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "        uint256 _price,\n",
                    "message": "Parameter '_price' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#35-36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "        uint256 _timestamp,\n",
                    "message": "Parameter '_timestamp' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#36-37) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": 38,
                    "vulnerability_code": "        uint256 _roundId\n",
                    "message": "Parameter '_roundId' of L2PriceFeedMock.setLatestData (L2PriceFeedMock.sol#37-38) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 price;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 twapPrice;\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/mock/mocks/PerpTokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Different versions of Solidity is used in PerpTokenMock.sol:\n\t- Version used: ['0.6.9', 'ABIEncoderV2']\n\t- PerpTokenMock.sol#4-5 declares pragma solidity0.6.9\n\t- PerpTokenMock.sol#5-7 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": 13,
                    "vulnerability_code": "    function setTotalSupply(uint256 _totalSupply) public {\n\n        totalSupply = _totalSupply;\n\n    }\n",
                    "message": "PerpTokenMock.setTotalSupply (PerpTokenMock.sol#10-13) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 5,
                    "vulnerability_code": "pragma solidity 0.6.9;\n",
                    "message": "Detected issues with version pragma in PerpTokenMock.sol:\n\t- pragma solidity0.6.9 (PerpTokenMock.sol#4-5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalSupply(uint256 _totalSupply) public {\n",
                    "message": "Parameter '_totalSupply' of PerpTokenMock.setTotalSupply (PerpTokenMock.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "perpetual-protocol-emdx-main/src/utils/BlockContext.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in BlockContext.sol:\n\t- pragma solidity0.6.9 (BlockContext.sol#4-6): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function _blockNumber() internal view virtual returns (uint256) {\n\n        return block.number;\n\n    }\n",
                    "message": "Function 'BlockContext._blockTimestamp' (BlockContext.sol#18-21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": null,
                    "vulnerability_to_line": null,
                    "vulnerability_code": null,
                    "message": "Function 'BlockContext._blockNumber' (BlockContext.sol) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "        return block.timestamp;\n\n    }\n\n\n",
                    "message": "Variable 'BlockContext.__gap' (BlockContext.sol#15-18) is not in mixedCase\n"
                },
                {
                    "name": "unused-state",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "        return block.timestamp;\n\n    }\n\n\n",
                    "message": "BlockContext.__gap (BlockContext.sol#15-18) is never used in BlockContext\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256[50] private __gap;\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/exchangeWrapper/Balancer/BPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in BPool.sol:\n\t- pragma solidity0.6.9 (BPool.sol#4-6): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "    event LOG_SWAP(\n\n        address indexed caller,\n\n        address indexed tokenIn,\n\n        address indexed tokenOut,\n\n        uint256 tokenAmountIn,\n\n        uint256 tokenAmountOut\n\n    );\n\n\n",
                    "message": "Event 'BPool.LOG_SWAP' (BPool.sol#8-16) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 18,
                    "vulnerability_code": "    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\n\n\n",
                    "message": "Event 'BPool.LOG_JOIN' (BPool.sol#16-18) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\n\n\n",
                    "message": "Event 'BPool.LOG_EXIT' (BPool.sol#18-20) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data);\n\n\n",
                    "message": "Event 'BPool.LOG_CALL' (BPool.sol#20-22) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 tokenAmountOut, uint256 spotPriceAfter);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 tokenAmountIn, uint256 spotPriceAfter);\n",
                    "message": null
                }
            ]
        }
    },
    "perpetual-protocol-emdx-main/src/exchangeWrapper/Compound/CTokenInterface.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": 6,
                    "vulnerability_code": "pragma solidity 0.6.9;\n\n\n",
                    "message": "Detected issues with version pragma in CTokenInterface.sol:\n\t- pragma solidity0.6.9 (CTokenInterface.sol#4-6): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                }
            ]
        }
    }
}