{
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Registry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        initializer = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in Registry.sol:\n\t- pragma solidity^0.5.4 (Registry.sol#3): it allows old versions\n\t- pragma solidity^0.5.4 (Registry.sol#14): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _minter) external onlyInitializer {\n",
                    "message": "Parameter '_minter' of Registry.setMinter (Registry.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCore(address _core) external onlyInitializer {\n",
                    "message": "Parameter '_core' of Registry.setCore (Registry.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOracleAggregator(address _oracleAggregator) external onlyInitializer {\n",
                    "message": "Parameter '_oracleAggregator' of Registry.setOracleAggregator (Registry.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSyntheticAggregator(address _syntheticAggregator) external onlyInitializer {\n",
                    "message": "Parameter '_syntheticAggregator' of Registry.setSyntheticAggregator (Registry.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOpiumAddress(address _opiumAddress) external onlyInitializer {\n",
                    "message": "Parameter '_opiumAddress' of Registry.setOpiumAddress (Registry.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenSpender(address _tokenSpender) external onlyInitializer {\n",
                    "message": "Parameter '_tokenSpender' of Registry.setTokenSpender (Registry.sol#90) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOpiumAddress(address _opiumAddress) external {\n",
                    "message": "Parameter '_opiumAddress' of Registry.changeOpiumAddress (Registry.sol#97) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private minter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private core;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private oracleAggregator;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private syntheticAggregator;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private opiumAddress;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private tokenSpender;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Matching/Match/LibOrder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        DOMAIN_SEPARATOR = keccak256(abi.encode(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            EIP712DOMAIN_TYPEHASH,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(\"Opium Network\"),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(\"1\"),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_signature.length == 65, \"ORDER:INVALID_SIGNATURE_LENGTH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // solium-disable-next-line arg-overflow\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return ecrecover(_hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), domainSeparator)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
                    "message": "LibEIP712.hashEIP712Message (LibOrder.sol#42-57) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 246,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // Divide the signature in r, s and v variables\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly {\n\n            r := mload(add(_signature, 32))\n\n            s := mload(add(_signature, 64))\n\n            v := byte(0, mload(add(_signature, 96)))\n\n        }\n\n\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        // If the version is correct return the signer address\n\n        if (v != 27 && v != 28) {\n\n            return (address(0));\n\n        } else {\n\n            // solium-disable-next-line arg-overflow\n\n            return ecrecover(_hash, v, r, s);\n\n        }\n",
                    "message": "LibOrder.retrieveAddress (LibOrder.sol#219-246) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), domainSeparator)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
                    "message": "LibEIP712.hashEIP712Message uses assembly (LibOrder.sol#42-57)\n\t- LibOrder.sol#45-55\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": 246,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // Divide the signature in r, s and v variables\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly {\n\n            r := mload(add(_signature, 32))\n\n            s := mload(add(_signature, 64))\n\n            v := byte(0, mload(add(_signature, 96)))\n\n        }\n\n\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        // If the version is correct return the signer address\n\n        if (v != 27 && v != 28) {\n\n            return (address(0));\n\n        } else {\n\n            // solium-disable-next-line arg-overflow\n\n            return ecrecover(_hash, v, r, s);\n\n        }\n",
                    "message": "LibOrder.retrieveAddress uses assembly (LibOrder.sol#219-246)\n\t- LibOrder.sol#228-232\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in LibOrder.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.4']\n\t- LibOrder.sol#3 declares pragma solidity^0.5.4\n\t- LibOrder.sol#62 declares pragma solidity^0.5.4\n\t- LibOrder.sol#63 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in LibOrder.sol:\n\t- pragma solidity^0.5.4 (LibOrder.sol#3): it allows old versions\n\t- pragma solidity^0.5.4 (LibOrder.sol#62): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 internal DOMAIN_SEPARATOR;\n",
                    "message": "Variable 'LibEIP712.DOMAIN_SEPARATOR' (LibOrder.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hashOrder(Order memory _order) internal pure returns (bytes32 hash) {\n",
                    "message": "Parameter '_order' of LibOrder.hashOrder (LibOrder.sol#165) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySignature(bytes32 _hash, bytes memory _signature, address _address) internal view returns (bool) {\n",
                    "message": "Parameter '_hash' of LibOrder.verifySignature (LibOrder.sol#207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySignature(bytes32 _hash, bytes memory _signature, address _address) internal view returns (bool) {\n",
                    "message": "Parameter '_signature' of LibOrder.verifySignature (LibOrder.sol#207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySignature(bytes32 _hash, bytes memory _signature, address _address) internal view returns (bool) {\n",
                    "message": "Parameter '_address' of LibOrder.verifySignature (LibOrder.sol#207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n",
                    "message": "Parameter '_hash' of LibOrder.retrieveAddress (LibOrder.sol#219) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Matching/SwaprateMatch/LibSwaprateOrder.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        DOMAIN_SEPARATOR = keccak256(abi.encode(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            EIP712DOMAIN_TYPEHASH,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(\"Opium Network\"),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(\"1\"),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_signature.length == 65, \"ORDER:INVALID_SIGNATURE_LENGTH\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (v != 27 && v != 28) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (address(0));\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 274,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        } else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            // solium-disable-next-line arg-overflow\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return ecrecover(_hash, v, r, s);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), domainSeparator)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
                    "message": "LibEIP712.hashEIP712Message (LibSwaprateOrder.sol#42-57) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // Divide the signature in r, s and v variables\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly {\n\n            r := mload(add(_signature, 32))\n\n            s := mload(add(_signature, 64))\n\n            v := byte(0, mload(add(_signature, 96)))\n\n        }\n\n\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        // If the version is correct return the signer address\n\n        if (v != 27 && v != 28) {\n\n            return (address(0));\n\n        } else {\n\n            // solium-disable-next-line arg-overflow\n\n            return ecrecover(_hash, v, r, s);\n\n        }\n",
                    "message": "LibSwaprateOrder.retrieveAddress (LibSwaprateOrder.sol#251-278) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), domainSeparator)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
                    "message": "LibEIP712.hashEIP712Message uses assembly (LibSwaprateOrder.sol#42-57)\n\t- LibSwaprateOrder.sol#45-55\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": 278,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n\n        bytes32 r;\n\n        bytes32 s;\n\n        uint8 v;\n\n\n\n        // Divide the signature in r, s and v variables\n\n        // ecrecover takes the signature parameters, and the only way to get them\n\n        // currently is to use assembly.\n\n        // solium-disable-next-line security/no-inline-assembly\n\n        assembly {\n\n            r := mload(add(_signature, 32))\n\n            s := mload(add(_signature, 64))\n\n            v := byte(0, mload(add(_signature, 96)))\n\n        }\n\n\n\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n\n        if (v < 27) {\n\n            v += 27;\n\n        }\n\n\n\n        // If the version is correct return the signer address\n\n        if (v != 27 && v != 28) {\n\n            return (address(0));\n\n        } else {\n\n            // solium-disable-next-line arg-overflow\n\n            return ecrecover(_hash, v, r, s);\n\n        }\n",
                    "message": "LibSwaprateOrder.retrieveAddress uses assembly (LibSwaprateOrder.sol#251-278)\n\t- LibSwaprateOrder.sol#260-264\n"
                },
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in LibSwaprateOrder.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.4']\n\t- LibSwaprateOrder.sol#3 declares pragma solidity^0.5.4\n\t- LibSwaprateOrder.sol#62 declares pragma solidity^0.5.4\n\t- LibSwaprateOrder.sol#63 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in LibSwaprateOrder.sol:\n\t- pragma solidity^0.5.4 (LibSwaprateOrder.sol#3): it allows old versions\n\t- pragma solidity^0.5.4 (LibSwaprateOrder.sol#62): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 internal DOMAIN_SEPARATOR;\n",
                    "message": "Variable 'LibEIP712.DOMAIN_SEPARATOR' (LibSwaprateOrder.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hashOrder(SwaprateOrder memory _order) internal pure returns (bytes32 hash) {\n",
                    "message": "Parameter '_order' of LibSwaprateOrder.hashOrder (LibSwaprateOrder.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySignature(bytes32 _hash, bytes memory _signature, address _address) internal view returns (bool) {\n",
                    "message": "Parameter '_hash' of LibSwaprateOrder.verifySignature (LibSwaprateOrder.sol#239) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySignature(bytes32 _hash, bytes memory _signature, address _address) internal view returns (bool) {\n",
                    "message": "Parameter '_signature' of LibSwaprateOrder.verifySignature (LibSwaprateOrder.sol#239) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function verifySignature(bytes32 _hash, bytes memory _signature, address _address) internal view returns (bool) {\n",
                    "message": "Parameter '_address' of LibSwaprateOrder.verifySignature (LibSwaprateOrder.sol#239) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n",
                    "message": "Parameter '_hash' of LibSwaprateOrder.retrieveAddress (LibSwaprateOrder.sol#251) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return (address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function retrieveAddress(bytes32 _hash, bytes memory _signature) private pure returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Interface/IOracleId.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in IOracleId.sol:\n\t- pragma solidity^0.5.4 (IOracleId.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/test/WETH.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(allowance[src][msg.sender] >= wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            allowance[src][msg.sender] -= wad;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8  public decimals = 18;\n",
                    "message": "WETH.decimals should be constant (WETH.sol#8)\nWETH.name should be constant (WETH.sol#6)\nWETH.symbol should be constant (WETH.sol#7)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "    function withdraw(uint wad) public {\n\n        require(balanceOf[msg.sender] >= wad);\n\n        balanceOf[msg.sender] -= wad;\n\n        msg.sender.transfer(wad);\n\n        emit Withdrawal(msg.sender, wad);\n",
                    "message": "WETH.withdraw (WETH.sol#27-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return address(this).balance;\n",
                    "message": "WETH.totalSupply (WETH.sol#34-36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 42,
                    "vulnerability_code": "    function approve(address guy, uint wad) public returns (bool) {\n\n        allowance[msg.sender][guy] = wad;\n\n        emit Approval(msg.sender, guy, wad);\n\n        return true;\n",
                    "message": "WETH.approve (WETH.sol#38-42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": 46,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool) {\n\n        return transferFrom(msg.sender, dst, wad);\n",
                    "message": "WETH.transfer (WETH.sol#44-46) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in WETH.sol:\n\t- pragma solidity^0.5.4 (WETH.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/test/TestToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        totalSupply += _amount;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = _symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        decimals = _decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        balances[msg.sender] = totalSupply;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == owner, \"Only owner can mint\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_35"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-abstract",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public totalSupply = 1000000 * 10**18;\n",
                    "message": "TestToken.totalSupply (TestToken.sol#189) shadows:\n\t- ERC20Basic.totalSupply (TestToken.sol#6)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public totalSupply;\n",
                    "message": "ERC20Basic.totalSupply should be constant (TestToken.sol#6)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address who) public view returns (uint256);\n",
                    "message": "ERC20Basic.balanceOf (TestToken.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 73,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256 balance) {\n\n        return balances[_owner];\n",
                    "message": "BasicToken.balanceOf (TestToken.sol#71-73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20Basic.transfer (TestToken.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n\n        require(_to != address(0));\n\n        require(_value <= balances[msg.sender]);\n\n\n\n        // SafeMath.sub will throw if there is not enough balance.\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(msg.sender, _to, _value);\n\n        return true;\n",
                    "message": "BasicToken.transfer (TestToken.sol#55-64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256) {\n\n        return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (TestToken.sol#142-144) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256);\n",
                    "message": "ERC20.allowance (TestToken.sol#83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public returns (bool);\n",
                    "message": "ERC20.transferFrom (TestToken.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\n        require(_to != address(0));\n\n        require(_value <= balances[_from]);\n\n        require(_value <= allowed[_from][msg.sender]);\n\n\n\n        balances[_from] = balances[_from].sub(_value);\n\n        balances[_to] = balances[_to].add(_value);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n",
                    "message": "StandardToken.transferFrom (TestToken.sol#108-118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 134,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n\n        allowed[msg.sender][_spender] = _value;\n\n        emit Approval(msg.sender, _spender, _value);\n\n        return true;\n",
                    "message": "StandardToken.approve (TestToken.sol#130-134) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "ERC20.approve (TestToken.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "StandardToken.increaseApproval (TestToken.sol#156-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 181,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n\n        uint oldValue = allowed[msg.sender][_spender];\n\n        if (_subtractedValue > oldValue) {\n\n            allowed[msg.sender][_spender] = 0;\n\n        } else {\n\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n        }\n\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n        return true;\n",
                    "message": "StandardToken.decreaseApproval (TestToken.sol#172-181) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 205,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) public {\n\n        require(msg.sender == owner, \"Only owner can mint\");\n\n        balances[_to] += _amount;\n\n        totalSupply += _amount;\n",
                    "message": "TestToken.mint (TestToken.sol#201-205) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in TestToken.sol:\n\t- pragma solidity^0.5.4 (TestToken.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (TestToken.sol#71) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (TestToken.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (TestToken.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (TestToken.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint256) {\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (TestToken.sol#142) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (TestToken.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (TestToken.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (TestToken.sol#108) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (TestToken.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (TestToken.sol#130) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (TestToken.sol#156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (TestToken.sol#156) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (TestToken.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (TestToken.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_name' of TestToken. (TestToken.sol#193) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_symbol' of TestToken. (TestToken.sol#193) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 193,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, uint8 _decimals) public {\n",
                    "message": "Parameter '_decimals' of TestToken. (TestToken.sol#193) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) public {\n",
                    "message": "Parameter '_to' of TestToken.mint (TestToken.sol#201) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _to, uint256 _amount) public {\n",
                    "message": "Parameter '_amount' of TestToken.mint (TestToken.sol#201) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint256) balances;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Lib/usingRegistry.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        initializer = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _registry) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        registry = Registry(_registry);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit RegistrySet(_registry);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in usingRegistry.sol:\n\t- pragma solidity^0.5.4 (usingRegistry.sol#3): it allows old versions\n\t- pragma solidity^0.5.4 (usingRegistry.sol#14): it allows old versions\n\t- pragma solidity^0.5.4 (usingRegistry.sol#143): it allows old versions\n\t- pragma solidity^0.5.4 (usingRegistry.sol#151): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinter(address _minter) external onlyInitializer {\n",
                    "message": "Parameter '_minter' of Registry.setMinter (usingRegistry.sol#55) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCore(address _core) external onlyInitializer {\n",
                    "message": "Parameter '_core' of Registry.setCore (usingRegistry.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOracleAggregator(address _oracleAggregator) external onlyInitializer {\n",
                    "message": "Parameter '_oracleAggregator' of Registry.setOracleAggregator (usingRegistry.sol#69) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSyntheticAggregator(address _syntheticAggregator) external onlyInitializer {\n",
                    "message": "Parameter '_syntheticAggregator' of Registry.setSyntheticAggregator (usingRegistry.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOpiumAddress(address _opiumAddress) external onlyInitializer {\n",
                    "message": "Parameter '_opiumAddress' of Registry.setOpiumAddress (usingRegistry.sol#83) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenSpender(address _tokenSpender) external onlyInitializer {\n",
                    "message": "Parameter '_tokenSpender' of Registry.setTokenSpender (usingRegistry.sol#90) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeOpiumAddress(address _opiumAddress) external {\n",
                    "message": "Parameter '_opiumAddress' of Registry.changeOpiumAddress (usingRegistry.sol#97) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "contract usingRegistryErrors {\n\n    string constant internal ERROR_USING_REGISTRY_ONLY_CORE_ALLOWED = \"USING_REGISTRY:ONLY_CORE_ALLOWED\";\n",
                    "message": "Contract 'usingRegistryErrors' (usingRegistry.sol#145-147) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": 172,
                    "vulnerability_code": "contract usingRegistry is usingRegistryErrors {\n\n    // Emitted when registry instance is set\n\n    event RegistrySet(address registry);\n\n\n\n    // Instance of Opium.Registry contract\n\n    Registry internal registry;\n\n\n\n    /// @notice This modifier restricts access to functions, which could be called only by Opium.Core\n\n    modifier onlyCore() {\n\n        require(msg.sender == registry.getCore(), ERROR_USING_REGISTRY_ONLY_CORE_ALLOWED);\n\n        _;\n\n    }\n\n\n\n    /// @notice Defines registry instance and emits appropriate event\n\n    constructor(address _registry) public {\n\n        registry = Registry(_registry);\n\n        emit RegistrySet(_registry);\n\n    }\n",
                    "message": "Contract 'usingRegistry' (usingRegistry.sol#154-172) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _registry) public {\n",
                    "message": "Parameter '_registry' of usingRegistry. (usingRegistry.sol#168) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private minter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private core;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private oracleAggregator;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private syntheticAggregator;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private opiumAddress;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private tokenSpender;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Lib/Whitelisted.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (whitelist[i] == msg.sender) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(allowed, \"Only whitelisted allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] internal whitelist;\n",
                    "message": "Whitelisted.whitelist (Whitelisted.sol#8) is never initialized. It is used in:\n\t- getWhitelist (Whitelisted.sol#31-33)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function getWhitelist() public view returns (address[] memory) {\n\n        return whitelist;\n",
                    "message": "Whitelisted.getWhitelist (Whitelisted.sol#31-33) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in Whitelisted.sol:\n\t- pragma solidity^0.5.4 (Whitelisted.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Lib/LibDerivative.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "pragma",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Different versions of Solidity is used in LibDerivative.sol:\n\t- Version used: ['ABIEncoderV2', '^0.5.4']\n\t- LibDerivative.sol#3 declares pragma solidity^0.5.4\n\t- LibDerivative.sol#4 declares pragma experimentalABIEncoderV2\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 36,
                    "vulnerability_code": "    function getDerivativeHash(Derivative memory _derivative) public pure returns (bytes32 derivativeHash) {\n\n        derivativeHash = keccak256(abi.encodePacked(\n\n            _derivative.margin,\n\n            _derivative.endTime,\n\n            _derivative.params,\n\n            _derivative.oracleId,\n\n            _derivative.token,\n\n            _derivative.syntheticId\n\n        ));\n",
                    "message": "LibDerivative.getDerivativeHash (LibDerivative.sol#27-36) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in LibDerivative.sol:\n\t- pragma solidity^0.5.4 (LibDerivative.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDerivativeHash(Derivative memory _derivative) public pure returns (bytes32 derivativeHash) {\n",
                    "message": "Parameter '_derivative' of LibDerivative.getDerivativeHash (LibDerivative.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Lib/LibEIP712.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        DOMAIN_SEPARATOR = keccak256(abi.encode(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            EIP712DOMAIN_TYPEHASH,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(\"Opium Network\"),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            keccak256(\"1\"),\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            address(this)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), domainSeparator)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
                    "message": "LibEIP712.hashEIP712Message (LibEIP712.sol#42-57) is declared view but contains assembly code\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n\n        bytes32 domainSeparator = DOMAIN_SEPARATOR;\n\n\n\n        assembly {\n\n            // Load free memory pointer\n\n            let memPtr := mload(64)\n\n\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n\n            mstore(add(memPtr, 2), domainSeparator)                                            // EIP712 domain hash\n\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n\n\n            // Compute hash\n\n            result := keccak256(memPtr, 66)\n\n        }\n\n        return result;\n",
                    "message": "LibEIP712.hashEIP712Message uses assembly (LibEIP712.sol#42-57)\n\t- LibEIP712.sol#45-55\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in LibEIP712.sol:\n\t- pragma solidity^0.5.4 (LibEIP712.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 internal DOMAIN_SEPARATOR;\n",
                    "message": "Variable 'LibEIP712.DOMAIN_SEPARATOR' (LibEIP712.sol#27) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function hashEIP712Message(bytes32 hashStruct) internal view returns (bytes32 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Lib/LibCommission.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in LibCommission.sol:\n\t- pragma solidity^0.5.4 (LibCommission.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant COMMISSION_BASE = 10000;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant OPIUM_COMMISSION_BASE = 10;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 constant OPIUM_COMMISSION_PART = 1;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Lib/WhitelistedWithGovernance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public initialized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public proposalTime = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _timeLockInterval, address _governor) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        TIME_LOCK_INTERVAL = _timeLockInterval;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governor = _governor;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit GovernorSet(governor);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (whitelist[i] == msg.sender) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(allowed, \"Only whitelisted allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governor, \"Only governor allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_whitelist.length != 0, \"Can't be empty\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(proposalTime != 0, \"Didn't proposed yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((proposalTime + TIME_LOCK_INTERVAL) < now, \"Can't commit yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function getWhitelist() public view returns (address[] memory) {\n\n        return whitelist;\n",
                    "message": "Whitelisted.getWhitelist (WhitelistedWithGovernance.sol#31-33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function proposeWhitelist(address[] memory _whitelist) public onlyGovernor {\n\n        // Restrict empty proposals\n\n        require(_whitelist.length != 0, \"Can't be empty\");\n\n\n\n        // If whitelist has never been initialized, we set whitelist right away without proposal\n\n        if (!initialized) {\n\n            initialized = true;\n\n            whitelist = _whitelist;\n\n            emit Committed(whitelist);\n\n\n\n        // Otherwise save current time as timestamp of proposal, save proposed whitelist and emit event\n\n        } else {\n\n            proposalTime = now;\n\n            proposedWhitelist = _whitelist;\n\n            emit Proposed(proposedWhitelist);\n\n        }\n",
                    "message": "WhitelistedWithGovernance.proposeWhitelist (WhitelistedWithGovernance.sol#80-96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "    function commitWhitelist() public onlyGovernor {\n\n        // Check if proposal was made\n\n        require(proposalTime != 0, \"Didn't proposed yet\");\n\n\n\n        // Check if timelock interval was passed\n\n        require((proposalTime + TIME_LOCK_INTERVAL) < now, \"Can't commit yet\");\n\n        \n\n        // Set new whitelist and emit event\n\n        whitelist = proposedWhitelist;\n\n        emit Committed(whitelist);\n\n\n\n        // Reset proposal time lock\n\n        proposalTime = 0;\n",
                    "message": "WhitelistedWithGovernance.commitWhitelist (WhitelistedWithGovernance.sol#99-112) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "    function setGovernor(address _governor) public onlyGovernor {\n\n        governor = _governor;\n\n        emit GovernorSet(governor);\n",
                    "message": "WhitelistedWithGovernance.setGovernor (WhitelistedWithGovernance.sol#116-119) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in WhitelistedWithGovernance.sol:\n\t- pragma solidity^0.5.4 (WhitelistedWithGovernance.sol#3): it allows old versions\n\t- pragma solidity^0.5.4 (WhitelistedWithGovernance.sol#38): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _timeLockInterval, address _governor) public {\n",
                    "message": "Parameter '_timeLockInterval' of WhitelistedWithGovernance. (WhitelistedWithGovernance.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _timeLockInterval, address _governor) public {\n",
                    "message": "Parameter '_governor' of WhitelistedWithGovernance. (WhitelistedWithGovernance.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proposeWhitelist(address[] memory _whitelist) public onlyGovernor {\n",
                    "message": "Parameter '_whitelist' of WhitelistedWithGovernance.proposeWhitelist (WhitelistedWithGovernance.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernor(address _governor) public onlyGovernor {\n",
                    "message": "Parameter '_governor' of WhitelistedWithGovernance.setGovernor (WhitelistedWithGovernance.sol#116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public TIME_LOCK_INTERVAL;\n",
                    "message": "Variable 'WhitelistedWithGovernance.TIME_LOCK_INTERVAL' (WhitelistedWithGovernance.sol#51) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Lib/WhitelistedWithGovernanceAndChangableTimelock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public initialized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public proposalTime = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 timelockProposalTime = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 proposedTimelock = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _timeLockInterval, address _governor) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        TIME_LOCK_INTERVAL = _timeLockInterval;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        governor = _governor;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit GovernorSet(governor);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (whitelist[i] == msg.sender) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(allowed, \"Only whitelisted allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == governor, \"Only governor allowed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_whitelist.length != 0, \"Can't be empty\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(proposalTime != 0, \"Didn't proposed yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((proposalTime + TIME_LOCK_INTERVAL) < now, \"Can't commit yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(timelockProposalTime != 0, \"Didn't proposed yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((timelockProposalTime + TIME_LOCK_INTERVAL) < now, \"Can't commit yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function getWhitelist() public view returns (address[] memory) {\n\n        return whitelist;\n",
                    "message": "Whitelisted.getWhitelist (WhitelistedWithGovernanceAndChangableTimelock.sol#31-33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function proposeWhitelist(address[] memory _whitelist) public onlyGovernor {\n\n        // Restrict empty proposals\n\n        require(_whitelist.length != 0, \"Can't be empty\");\n\n\n\n        // If whitelist has never been initialized, we set whitelist right away without proposal\n\n        if (!initialized) {\n\n            initialized = true;\n\n            whitelist = _whitelist;\n\n            emit Committed(whitelist);\n\n\n\n        // Otherwise save current time as timestamp of proposal, save proposed whitelist and emit event\n\n        } else {\n\n            proposalTime = now;\n\n            proposedWhitelist = _whitelist;\n\n            emit Proposed(proposedWhitelist);\n\n        }\n",
                    "message": "WhitelistedWithGovernance.proposeWhitelist (WhitelistedWithGovernanceAndChangableTimelock.sol#80-96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "    function commitWhitelist() public onlyGovernor {\n\n        // Check if proposal was made\n\n        require(proposalTime != 0, \"Didn't proposed yet\");\n\n\n\n        // Check if timelock interval was passed\n\n        require((proposalTime + TIME_LOCK_INTERVAL) < now, \"Can't commit yet\");\n\n        \n\n        // Set new whitelist and emit event\n\n        whitelist = proposedWhitelist;\n\n        emit Committed(whitelist);\n\n\n\n        // Reset proposal time lock\n\n        proposalTime = 0;\n",
                    "message": "WhitelistedWithGovernance.commitWhitelist (WhitelistedWithGovernanceAndChangableTimelock.sol#99-112) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "    function setGovernor(address _governor) public onlyGovernor {\n\n        governor = _governor;\n\n        emit GovernorSet(governor);\n",
                    "message": "WhitelistedWithGovernance.setGovernor (WhitelistedWithGovernanceAndChangableTimelock.sol#116-119) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "    function proposeTimelock(uint256 _timelock) public onlyGovernor {\n\n        timelockProposalTime = now;\n\n        proposedTimelock = _timelock;\n\n        emit Proposed(_timelock);\n",
                    "message": "WhitelistedWithGovernanceAndChangableTimelock.proposeTimelock (WhitelistedWithGovernanceAndChangableTimelock.sol#140-144) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": 159,
                    "vulnerability_code": "    function commitTimelock() public onlyGovernor {\n\n        // Check if proposal was made\n\n        require(timelockProposalTime != 0, \"Didn't proposed yet\");\n\n        // Check if timelock interval was passed\n\n        require((timelockProposalTime + TIME_LOCK_INTERVAL) < now, \"Can't commit yet\");\n\n        \n\n        // Set new timelock and emit event\n\n        TIME_LOCK_INTERVAL = proposedTimelock;\n\n        emit Committed(proposedTimelock);\n\n\n\n        // Reset timelock time lock\n\n        timelockProposalTime = 0;\n",
                    "message": "WhitelistedWithGovernanceAndChangableTimelock.commitTimelock (WhitelistedWithGovernanceAndChangableTimelock.sol#147-159) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in WhitelistedWithGovernanceAndChangableTimelock.sol:\n\t- pragma solidity^0.5.4 (WhitelistedWithGovernanceAndChangableTimelock.sol#3): it allows old versions\n\t- pragma solidity^0.5.4 (WhitelistedWithGovernanceAndChangableTimelock.sol#38): it allows old versions\n\t- pragma solidity^0.5.4 (WhitelistedWithGovernanceAndChangableTimelock.sol#124): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _timeLockInterval, address _governor) public {\n",
                    "message": "Parameter '_timeLockInterval' of WhitelistedWithGovernance. (WhitelistedWithGovernanceAndChangableTimelock.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint256 _timeLockInterval, address _governor) public {\n",
                    "message": "Parameter '_governor' of WhitelistedWithGovernance. (WhitelistedWithGovernanceAndChangableTimelock.sol#73) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proposeWhitelist(address[] memory _whitelist) public onlyGovernor {\n",
                    "message": "Parameter '_whitelist' of WhitelistedWithGovernance.proposeWhitelist (WhitelistedWithGovernanceAndChangableTimelock.sol#80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setGovernor(address _governor) public onlyGovernor {\n",
                    "message": "Parameter '_governor' of WhitelistedWithGovernance.setGovernor (WhitelistedWithGovernanceAndChangableTimelock.sol#116) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public TIME_LOCK_INTERVAL;\n",
                    "message": "Variable 'WhitelistedWithGovernance.TIME_LOCK_INTERVAL' (WhitelistedWithGovernanceAndChangableTimelock.sol#51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function proposeTimelock(uint256 _timelock) public onlyGovernor {\n",
                    "message": "Parameter '_timelock' of WhitelistedWithGovernanceAndChangableTimelock.proposeTimelock (WhitelistedWithGovernanceAndChangableTimelock.sol#140) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < whitelist.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 timelockProposalTime = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 proposedTimelock = 0;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Errors/MatchingErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in MatchingErrors.sol:\n\t- pragma solidity^0.5.4 (MatchingErrors.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Errors/OracleAggregatorErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in OracleAggregatorErrors.sol:\n\t- pragma solidity^0.5.4 (OracleAggregatorErrors.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Errors/SyntheticAggregatorErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in SyntheticAggregatorErrors.sol:\n\t- pragma solidity^0.5.4 (SyntheticAggregatorErrors.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Errors/usingRegistryErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in usingRegistryErrors.sol:\n\t- pragma solidity^0.5.4 (usingRegistryErrors.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": 7,
                    "vulnerability_code": "contract usingRegistryErrors {\n\n    string constant internal ERROR_USING_REGISTRY_ONLY_CORE_ALLOWED = \"USING_REGISTRY:ONLY_CORE_ALLOWED\";\n",
                    "message": "Contract 'usingRegistryErrors' (usingRegistryErrors.sol#5-7) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Errors/RegistryErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in RegistryErrors.sol:\n\t- pragma solidity^0.5.4 (RegistryErrors.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Errors/CoreErrors.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in CoreErrors.sol:\n\t- pragma solidity^0.5.4 (CoreErrors.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Helpers/HasCommission.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        author = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 public commission = 25; // 0.25% of profit\n",
                    "message": "HasCommission.commission should be constant (HasCommission.sol#10)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function getAuthorAddress() public view returns (address) {\n\n        return author;\n",
                    "message": "HasCommission.getAuthorAddress (HasCommission.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": 27,
                    "vulnerability_code": "    function getAuthorCommission() public view returns (uint256) {\n\n        return commission;\n",
                    "message": "HasCommission.getAuthorCommission (HasCommission.sol#25-27) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in HasCommission.sol:\n\t- pragma solidity^0.5.4 (HasCommission.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                }
            ]
        }
    },
    "opium-contracts-60ff6f80996b83f6ad19c35b74480fef34f7dc03/contracts/Helpers/ExecutableByThirdParty.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "    function thirdpartyExecutionAllowed(address derivativeOwner) public view returns (bool) {\n\n        return thirdpartyExecutionAllowance[derivativeOwner];\n",
                    "message": "ExecutableByThirdParty.thirdpartyExecutionAllowed (ExecutableByThirdParty.sol#13-15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function allowThirdpartyExecution(bool allow) public {\n\n        thirdpartyExecutionAllowance[msg.sender] = allow;\n",
                    "message": "ExecutableByThirdParty.allowThirdpartyExecution (ExecutableByThirdParty.sol#19-21) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": "Detected issues with version pragma in ExecutableByThirdParty.sol:\n\t- pragma solidity^0.5.4 (ExecutableByThirdParty.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => bool) thirdpartyExecutionAllowance;\n",
                    "message": null
                }
            ]
        }
    }
}