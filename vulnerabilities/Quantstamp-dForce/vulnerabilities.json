{
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/Collaterals_t.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        name = _name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = _symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _totalSupply = 10 ** (_decimals + 10);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _balances[msg.sender] = _totalSupply;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        decimals = _decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _value = 10 ** (_decimals + 5);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _transfer(msg.sender, guy, _value);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"mul : error!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b > 0, \"div : error!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b <= a, \"sub : error!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c >= a, \"add : error!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(b != 0, \"mod : error!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": 94,
                    "vulnerability_code": "    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n",
                    "message": "Collaterals_t.totalSupply (Collaterals_t.sol#92-94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n",
                    "message": "Collaterals_t.balanceOf (Collaterals_t.sol#101-103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 113,
                    "vulnerability_code": "    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowed[owner][spender];\n",
                    "message": "Collaterals_t.allowance (Collaterals_t.sol#111-113) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": 123,
                    "vulnerability_code": "    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n",
                    "message": "Collaterals_t.transfer (Collaterals_t.sol#120-123) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 137,
                    "vulnerability_code": "    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n",
                    "message": "Collaterals_t.approve (Collaterals_t.sol#134-137) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function approvex(address spender) public returns (bool) {\n\n        _approve(msg.sender, spender, uint(-1));\n\n        return true;\n",
                    "message": "Collaterals_t.approvex (Collaterals_t.sol#138-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": 155,
                    "vulnerability_code": "    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n\n        _transfer(from, to, value);\n\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n\n        return true;\n",
                    "message": "Collaterals_t.transferFrom (Collaterals_t.sol#151-155) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "contract Collaterals_t {\n\n    uint  public decimals = 18;\n\n    string public name;\n\n    string public symbol;\n\n\n\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply = 10**58; //10 billion\n\n\n\n    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n\n        name = _name;\n\n        symbol = _symbol;\n\n        _totalSupply = 10 ** (_decimals + 10);\n\n        _balances[msg.sender] = _totalSupply;\n\n        decimals = _decimals;\n\n        uint _value = 10 ** (_decimals + 5);\n\n        _transfer(msg.sender, guy, _value);\n\n    }\n\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n\n    /**\n\n     * @dev Total number of tokens in existence\n\n     */\n\n    function totalSupply() public view returns (uint256) {\n\n        return _totalSupply;\n\n    }\n\n\n\n    /**\n\n     * @dev Gets the balance of the specified address.\n\n     * @param owner The address to query the balance of.\n\n     * @return A uint256 representing the amount owned by the passed address.\n\n     */\n\n    function balanceOf(address owner) public view returns (uint256) {\n\n        return _balances[owner];\n\n    }\n\n\n\n    /**\n\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n\n     * @param owner address The address which owns the funds.\n\n     * @param spender address The address which will spend the funds.\n\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n\n     */\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n\n        return _allowed[owner][spender];\n\n    }\n\n\n\n    /**\n\n     * @dev Transfer token to a specified address\n\n     * @param to The address to transfer to.\n\n     * @param value The amount to be transferred.\n\n     */\n\n    function transfer(address to, uint256 value) public returns (bool) {\n\n        _transfer(msg.sender, to, value);\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     * @param spender The address which will spend the funds.\n\n     * @param value The amount of tokens to be spent.\n\n     */\n\n    function approve(address spender, uint256 value) public returns (bool) {\n\n        _approve(msg.sender, spender, value);\n\n        return true;\n\n    }\n\n    function approvex(address spender) public returns (bool) {\n\n        _approve(msg.sender, spender, uint(-1));\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Transfer tokens from one address to another.\n\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n\n     * and other compliant implementations may not emit the event.\n\n     * @param from address The address which you want to send tokens from\n\n     * @param to address The address which you want to transfer to\n\n     * @param value uint256 the amount of tokens to be transferred\n\n     */\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n\n        _transfer(from, to, value);\n\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n\n        return true;\n\n    }\n\n\n\n    /**\n\n     * @dev Transfer token for a specified addresses\n\n     * @param from The address to transfer from.\n\n     * @param to The address to transfer to.\n\n     * @param value The amount to be transferred.\n\n     */\n\n    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n\n    }\n\n\n\n    /**\n\n     * @dev Approve an address to spend another addresses' tokens.\n\n     * @param owner The address that owns the tokens.\n\n     * @param spender The address that will spend the tokens.\n\n     * @param value The number of tokens that can be spent.\n\n     */\n\n    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n\n        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n\n\n\n        _allowed[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n\n    }\n",
                    "message": "Contract 'Collaterals_t' (Collaterals_t.sol#66-184) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
                    "message": "Parameter '_name' of Collaterals_t. (Collaterals_t.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
                    "message": "Parameter '_symbol' of Collaterals_t. (Collaterals_t.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(string memory _name, string memory _symbol, address guy, uint  _decimals) public {\n",
                    "message": "Parameter '_decimals' of Collaterals_t. (Collaterals_t.sol#76) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "    function _transfer(address from, address to, uint256 value) internal {\n\n        require(to != address(0), \"_transfer : to address cannot be 0x0\");\n\n\n\n        _balances[from] = _balances[from].sub(value);\n\n        _balances[to] = _balances[to].add(value);\n\n        emit Transfer(from, to, value);\n",
                    "message": "Function 'Collaterals_t._transfer' (Collaterals_t.sol#163-169) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "    function _approve(address owner, address spender, uint256 value) internal {\n\n        require(spender != address(0), \"_approve : spender address cannot be 0x0\");\n\n        require(owner != address(0), \"_approve : owner address cannot be 0x0\");\n\n\n\n        _allowed[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n",
                    "message": "Function 'Collaterals_t._approve' (Collaterals_t.sol#177-183) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _totalSupply = 10**58; //10 billion\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    using SafeMath for uint256;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/ERC20SafeTransfer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
                    "message": "IERC20 (ERC20SafeTransfer.sol#9-86) has incorrect ERC20 function interface(s):\n\t-transfer (ERC20SafeTransfer.sol#25)\n\t-approve (ERC20SafeTransfer.sol#51)\n\t-transferFrom (ERC20SafeTransfer.sol#60-64)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    function doTransferOut(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transfer(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferOut uses assembly (ERC20SafeTransfer.sol#93-117)\n\t- ERC20SafeTransfer.sol#103-115\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "    function doTransferFrom(\n\n        address _token,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transferFrom(_from, _to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferFrom uses assembly (ERC20SafeTransfer.sol#119-144)\n\t- ERC20SafeTransfer.sol#130-142\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "    function doApprove(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.approve(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doApprove uses assembly (ERC20SafeTransfer.sol#146-170)\n\t- ERC20SafeTransfer.sol#156-168\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferOut (ERC20SafeTransfer.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferOut (ERC20SafeTransfer.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferOut (ERC20SafeTransfer.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferFrom (ERC20SafeTransfer.sol#123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doApprove (ERC20SafeTransfer.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doApprove (ERC20SafeTransfer.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doApprove (ERC20SafeTransfer.sol#149) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/DSWrappedToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32  public  name = \"\";\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint supply) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _supply = supply;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(bytes32 symbol_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = symbol_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _srcERC20, uint _srcDecimals, bytes32 _symbol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        srcERC20 = _srcERC20;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        srcDecimals = _srcDecimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = _symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _calMultiple();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 387,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner_ != address(0), \"invalid owner address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!stopped, \"ds-stop-is-stopped\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[src] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[src] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[guy] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_34"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256  public  decimals = 18;\n",
                    "message": "DSToken.decimals should be constant (DSWrappedToken.sol#303)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        require(owner_ != address(0), \"invalid owner address\");\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (DSWrappedToken.sol#146-153) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function setAuthority(address authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSWrappedToken.sol#155-161) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function stop() public onlyOwner note {\n\n        stopped = true;\n",
                    "message": "DSStop.stop (DSWrappedToken.sol#226-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": 231,
                    "vulnerability_code": "    function start() public onlyOwner note {\n\n        stopped = false;\n",
                    "message": "DSStop.start (DSWrappedToken.sol#229-231) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "ERC20.totalSupply (DSWrappedToken.sol#240) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 260,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _supply;\n",
                    "message": "DSTokenBase.totalSupply (DSWrappedToken.sol#258-260) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function balanceOf(address src) public view returns (uint) {\n\n        return _balances[src];\n",
                    "message": "DSTokenBase.balanceOf (DSWrappedToken.sol#261-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address guy) public view returns (uint);\n",
                    "message": "ERC20.balanceOf (DSWrappedToken.sol#241) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address src, address guy) public view returns (uint);\n",
                    "message": "ERC20.allowance (DSWrappedToken.sol#242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": 266,
                    "vulnerability_code": "    function allowance(address src, address guy) public view returns (uint) {\n\n        return _approvals[src][guy];\n",
                    "message": "DSTokenBase.allowance (DSWrappedToken.sol#264-266) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool);\n",
                    "message": "ERC20.transfer (DSWrappedToken.sol#245) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": 270,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool) {\n\n        return transferFrom(msg.sender, dst, wad);\n",
                    "message": "DSTokenBase.transfer (DSWrappedToken.sol#268-270) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function setName(bytes32 name_) public onlyOwner {\n\n        name = name_;\n",
                    "message": "DSToken.setName (DSWrappedToken.sol#309-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function approvex(address guy) public stoppable returns (bool) {\n\n        return super.approve(guy, uint(-1));\n",
                    "message": "DSToken.approvex (DSWrappedToken.sol#313-315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 399,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public auth returns (uint) {\n\n        uint _xAmount = changeByMultiple(_amount);\n\n        mint(_dst, _xAmount);\n\n\n\n        return _xAmount;\n",
                    "message": "DSWrappedToken.wrap (DSWrappedToken.sol#394-399) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "    function unwrap(address _dst, uint _xAmount) public auth returns (uint) {\n\n        burn(_dst, _xAmount);\n\n\n\n        return _xAmount;\n",
                    "message": "DSWrappedToken.unwrap (DSWrappedToken.sol#401-405) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": 429,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint) {\n\n        uint _amount = _xAmount;\n\n        uint _multiple = multiple;\n\n\n\n        if (flag)\n\n            _amount = mul(_xAmount, _multiple);\n\n        else\n\n            _amount = div(_xAmount, _multiple);\n\n\n\n        return _amount;\n",
                    "message": "DSWrappedToken.reverseByMultiple (DSWrappedToken.sol#419-429) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "    function getSrcERC20() public view returns (address) {\n\n        return srcERC20;\n",
                    "message": "DSWrappedToken.getSrcERC20 (DSWrappedToken.sol#431-433) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256                                            _supply;\n",
                    "message": "Variable 'DSTokenBase._supply' (DSWrappedToken.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256)                       _balances;\n",
                    "message": "Variable 'DSTokenBase._balances' (DSWrappedToken.sol#251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256))  _approvals;\n",
                    "message": "Variable 'DSTokenBase._approvals' (DSWrappedToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 355,
                    "vulnerability_code": "    function _mint(address guy, uint wad) internal {\n\n        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n\n\n\n        _balances[guy] = add(_balances[guy], wad);\n\n        _supply = add(_supply, wad);\n\n        emit Transfer(address(0), guy, wad);\n",
                    "message": "Function 'DSToken._mint' (DSWrappedToken.sol#349-355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": 369,
                    "vulnerability_code": "    function _burn(address guy, uint wad) internal {\n\n        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n\n        require(_balances[guy] >= wad, \"ds-token-insufficient-balance\");\n\n\n\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n\n            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n\n        }\n\n\n\n        _balances[guy] = sub(_balances[guy], wad);\n\n        _supply = sub(_supply, wad);\n\n        emit Transfer(guy, address(0), wad);\n",
                    "message": "Function 'DSToken._burn' (DSWrappedToken.sol#357-369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _srcERC20, uint _srcDecimals, bytes32 _symbol) public {\n",
                    "message": "Parameter '_srcERC20' of DSWrappedToken. (DSWrappedToken.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _srcERC20, uint _srcDecimals, bytes32 _symbol) public {\n",
                    "message": "Parameter '_srcDecimals' of DSWrappedToken. (DSWrappedToken.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _srcERC20, uint _srcDecimals, bytes32 _symbol) public {\n",
                    "message": "Parameter '_symbol' of DSWrappedToken. (DSWrappedToken.sol#382) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": 392,
                    "vulnerability_code": "    function _calMultiple() internal {\n\n        multiple = pow(10, sub(max(srcDecimals, decimals), min(srcDecimals, decimals)));\n\n        flag = (srcDecimals > decimals);\n",
                    "message": "Function 'DSWrappedToken._calMultiple' (DSWrappedToken.sol#389-392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public auth returns (uint) {\n",
                    "message": "Parameter '_dst' of DSWrappedToken.wrap (DSWrappedToken.sol#394) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public auth returns (uint) {\n",
                    "message": "Parameter '_amount' of DSWrappedToken.wrap (DSWrappedToken.sol#394) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _xAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_dst' of DSWrappedToken.unwrap (DSWrappedToken.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _xAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_xAmount' of DSWrappedToken.unwrap (DSWrappedToken.sol#401) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint) {\n",
                    "message": "Parameter '_amount' of DSWrappedToken.changeByMultiple (DSWrappedToken.sol#407) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 419,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint) {\n",
                    "message": "Parameter '_xAmount' of DSWrappedToken.reverseByMultiple (DSWrappedToken.sol#419) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address guy, uint wad) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address guy, uint wad) public stoppable returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwner(address owner_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(address authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setName(bytes32 name_) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 377,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private srcERC20;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256                                            _supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256)                       _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256))  _approvals;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/DSToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32  public  name = \"\";\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(uint supply) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _supply = supply;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(bytes32 symbol_) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        symbol = symbol_;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(owner_ != address(0), \"invalid owner address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!stopped, \"ds-stop-is-stopped\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[src] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[src] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balances[guy] >= wad, \"ds-token-insufficient-balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (src != msg.sender && _approvals[src][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[src][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_23"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256  public  decimals = 18;\n",
                    "message": "DSToken.decimals should be constant (DSToken.sol#303)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DSToken.sol#96-112) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function setOwner(address owner_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        require(owner_ != address(0), \"invalid owner address\");\n\n        owner = owner_;\n\n        emit LogSetOwner(owner);\n",
                    "message": "DSAuth.setOwner (DSToken.sol#146-153) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 161,
                    "vulnerability_code": "    function setAuthority(address authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSToken.sol#155-161) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function stop() public onlyOwner note {\n\n        stopped = true;\n",
                    "message": "DSStop.stop (DSToken.sol#226-228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": 231,
                    "vulnerability_code": "    function start() public onlyOwner note {\n\n        stopped = false;\n",
                    "message": "DSStop.start (DSToken.sol#229-231) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "ERC20.totalSupply (DSToken.sol#240) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 260,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _supply;\n",
                    "message": "DSTokenBase.totalSupply (DSToken.sol#258-260) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": 263,
                    "vulnerability_code": "    function balanceOf(address src) public view returns (uint) {\n\n        return _balances[src];\n",
                    "message": "DSTokenBase.balanceOf (DSToken.sol#261-263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address guy) public view returns (uint);\n",
                    "message": "ERC20.balanceOf (DSToken.sol#241) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address src, address guy) public view returns (uint);\n",
                    "message": "ERC20.allowance (DSToken.sol#242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": 266,
                    "vulnerability_code": "    function allowance(address src, address guy) public view returns (uint) {\n\n        return _approvals[src][guy];\n",
                    "message": "DSTokenBase.allowance (DSToken.sol#264-266) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool);\n",
                    "message": "ERC20.transfer (DSToken.sol#245) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": 270,
                    "vulnerability_code": "    function transfer(address dst, uint wad) public returns (bool) {\n\n        return transferFrom(msg.sender, dst, wad);\n",
                    "message": "DSTokenBase.transfer (DSToken.sol#268-270) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function setName(bytes32 name_) public onlyOwner {\n\n        name = name_;\n",
                    "message": "DSToken.setName (DSToken.sol#309-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function approvex(address guy) public stoppable returns (bool) {\n\n        return super.approve(guy, uint(-1));\n",
                    "message": "DSToken.approvex (DSToken.sol#313-315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": 343,
                    "vulnerability_code": "    function mint(address guy, uint wad) public auth stoppable {\n\n        _mint(guy, wad);\n",
                    "message": "DSToken.mint (DSToken.sol#341-343) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 347,
                    "vulnerability_code": "    function burn(address guy, uint wad) public auth stoppable {\n\n        _burn(guy, wad);\n",
                    "message": "DSToken.burn (DSToken.sol#345-347) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256                                            _supply;\n",
                    "message": "Variable 'DSTokenBase._supply' (DSToken.sol#250) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256)                       _balances;\n",
                    "message": "Variable 'DSTokenBase._balances' (DSToken.sol#251) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256))  _approvals;\n",
                    "message": "Variable 'DSTokenBase._approvals' (DSToken.sol#252) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 355,
                    "vulnerability_code": "    function _mint(address guy, uint wad) internal {\n\n        require(guy != address(0), \"ds-token-mint: mint to the zero address\");\n\n\n\n        _balances[guy] = add(_balances[guy], wad);\n\n        _supply = add(_supply, wad);\n\n        emit Transfer(address(0), guy, wad);\n",
                    "message": "Function 'DSToken._mint' (DSToken.sol#349-355) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": 369,
                    "vulnerability_code": "    function _burn(address guy, uint wad) internal {\n\n        require(guy != address(0), \"ds-token-burn: burn from the zero address\");\n\n        require(_balances[guy] >= wad, \"ds-token-insufficient-balance\");\n\n\n\n        if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {\n\n            require(_approvals[guy][msg.sender] >= wad, \"ds-token-insufficient-approval\");\n\n            _approvals[guy][msg.sender] = sub(_approvals[guy][msg.sender], wad);\n\n        }\n\n\n\n        _balances[guy] = sub(_balances[guy], wad);\n\n        _supply = sub(_supply, wad);\n\n        emit Transfer(guy, address(0), wad);\n",
                    "message": "Function 'DSToken._burn' (DSToken.sol#357-369) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address guy, uint wad) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address guy, uint wad) public stoppable returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setOwner(address owner_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(address authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setName(bytes32 name_) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256                                            _supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => uint256)                       _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (address => mapping (address => uint256))  _approvals;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/interfaces/IERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
                    "message": "IERC20 (IERC20.sol#9-86) has incorrect ERC20 function interface(s):\n\t-transfer (IERC20.sol#25)\n\t-approve (IERC20.sol#51)\n\t-transferFrom (IERC20.sol#60-64)\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/interfaces/IERC20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (IERC20Token.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (IERC20Token.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (IERC20Token.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (IERC20Token.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (IERC20Token.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (IERC20Token.sol#14) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/interfaces/IDSToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (IDSToken.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (IDSToken.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (IDSToken.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (IDSToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (IDSToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (IDSToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSToken.mint (IDSToken.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSToken.burn (IDSToken.sol#23) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/token/interfaces/IDSWrappedToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (IDSWrappedToken.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (IDSWrappedToken.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (IDSWrappedToken.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (IDSWrappedToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (IDSWrappedToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (IDSWrappedToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.mint (IDSWrappedToken.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.burn (IDSWrappedToken.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.wrap (IDSWrappedToken.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.unwrap (IDSWrappedToken.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.changeByMultiple (IDSWrappedToken.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.reverseByMultiple (IDSWrappedToken.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
                    "message": "IDSWrappedToken.getSrcERC20 (IDSWrappedToken.sol#28) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/update/DFUpgrader.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        iDFEngine = IDFEngine(0x0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newDFEngine != address(0), \"_newDFEngine: The address is empty\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newDFEngine != address(0), \"_newDFEngine: The address is empty\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\n",
                    "message": "IDFEngine.deposit (DFUpgrader.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\n",
                    "message": "IDFEngine.withdraw (DFUpgrader.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _sender, uint _feeTokenIdx, uint _amount) public returns (bool);\n",
                    "message": "IDFEngine.destroy (DFUpgrader.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address _sender, uint _feeTokenIdx) public returns (uint);\n",
                    "message": "IDFEngine.claim (DFUpgrader.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _sender, uint _feeTokenIdx, uint _amount) public;\n",
                    "message": "IDFEngine.oneClickMinting (DFUpgrader.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFUpgrader.sol#31-33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFUpgrader.sol#53-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFUpgrader.sol#58-61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFUpgrader.sol#63-68) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 77,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFUpgrader.sol#71-77) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function requestImplChange(address _newDFEngine) public onlyOwner {\n\n        require(_newDFEngine != address(0), \"_newDFEngine: The address is empty\");\n\n\n\n        newDFEngine = _newDFEngine;\n\n\n\n        emit ImplChangeRequested(msg.sender, _newDFEngine);\n",
                    "message": "DFUpgrader.requestImplChange (DFUpgrader.sol#135-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "    function confirmImplChange() public onlyOwner {\n\n        iDFEngine = IDFEngine(newDFEngine);\n\n\n\n        emit ImplChangeConfirmed(address(iDFEngine));\n",
                    "message": "DFUpgrader.confirmImplChange (DFUpgrader.sol#150-154) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function requestImplChange(address _newDFEngine) public onlyOwner {\n",
                    "message": "Parameter '_newDFEngine' of DFUpgrader.requestImplChange (DFUpgrader.sol#135) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address newDFEngine;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/converter/DFEngineV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 552,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 553,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _status = _NOT_ENTERED;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _usdxToken,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfStore,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfPool,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfCol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfFunds)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        initialize(_usdxToken, _dfStore, _dfPool, _dfCol, _dfFunds);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 619,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 762,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 798,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setSectionBurned(add(_burned, _amountTemp));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 804,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setSectionBurned(_minted);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 805,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.burnSectionMoveon();\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfPool.transferOutSrc(\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 888,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 629,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!initialized, \"initialize: Already initialized!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                doTransferFrom(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _token,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 655,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    depositor,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfFunds,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfFee\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"_unifiedCommission: transferFrom fee failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 666,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"Deposit: amount is invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"Withdraw: amount is invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 777,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 910,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 775,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 841,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 501,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 509,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 653,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                doTransferFrom(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 654,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    _token,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 655,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    depositor,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 656,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfFunds,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfFee\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"_unifiedCommission: transferFrom fee failed\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 660,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 910,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_42"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": 125,
                    "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
                    "message": "IERC20 (DFEngineV2.sol#48-125) has incorrect ERC20 function interface(s):\n\t-transfer (DFEngineV2.sol#64)\n\t-approve (DFEngineV2.sol#90)\n\t-transferFrom (DFEngineV2.sol#99-103)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": 721,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
                    "message": "DFEngineV2.deposit (DFEngineV2.sol#664-721) does not use the value returned by external calls:\n\t-dfPool.transferFromSender(_srcToken,_depositor,IDSWrappedToken(_tokenID).reverseByMultiple(_amount)) (DFEngineV2.sol#670)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_tokenBalance[1]) (DFEngineV2.sol#715)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": 744,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
                    "message": "DFEngineV2.withdraw (DFEngineV2.sol#723-744) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokenID).unwrap(address(dfPool),_withdrawAmount) (DFEngineV2.sol#739)\n\t-dfPool.transferOut(_srcToken,_depositor,_srcWithdrawAmount) (DFEngineV2.sol#741)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 772,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
                    "message": "DFEngineV2.claim (DFEngineV2.sol#746-772) does not use the value returned by external calls:\n\t-dfPool.transferOut(address(usdxToken),_depositor,_mintAmount) (DFEngineV2.sol#770)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": 828,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOutSrc(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
                    "message": "DFEngineV2.destroy (DFEngineV2.sol#774-828) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngineV2.sol#814)\n\t-dfPool.transferOutSrc(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngineV2.sol#815-818)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 857,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
                    "message": "DFEngineV2.oneClickMinting (DFEngineV2.sol#830-857) does not use the value returned by external calls:\n\t-dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngineV2.sol#848)\n\t-IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngineV2.sol#850)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": 899,
                    "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
                    "message": "DFEngineV2._convert (DFEngineV2.sol#859-899) does not use the value returned by external calls:\n\t-dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngineV2.sol#879)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_depositorMintTotal) (DFEngineV2.sol#897)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 704,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
                    "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],_depositorBalance[i_scope_0]) (DFEngineV2.sol#704)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 709,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
                    "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],sub(_depositorBalance[i_scope_0],_tokenBalance[0])) (DFEngineV2.sol#709)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
                    "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i_scope_0],sub(_resUSDXBalance[i_scope_0],_tokenBalance[0])) (DFEngineV2.sol#710)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]) (DFEngineV2.sol#684)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFEngineV2.sol#685)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "DFEngineV2.deposit has external calls inside a loop:\n\t- _depositorBalance[i] = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngineV2.sol#686)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 754,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "DFEngineV2.claim has external calls inside a loop:\n\t- _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]) (DFEngineV2.sol#754)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 755,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "DFEngineV2.claim has external calls inside a loop:\n\t- _depositorBalance = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngineV2.sol#755)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 761,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
                    "message": "DFEngineV2.claim has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(_resUSDXBalance,_depositorMintAmount)) (DFEngineV2.sol#761)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 762,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
                    "message": "DFEngineV2.claim has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance,_depositorMintAmount)) (DFEngineV2.sol#762)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 790,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
                    "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- (_minted,_burned,None,_tokens,_burnCW) = dfStore.getSectionData(dfStore.getBurnPosition()) (DFEngineV2.sol#790)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 814,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
                    "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngineV2.sol#814)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": 818,
                    "vulnerability_code": "                dfPool.transferOutSrc(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n",
                    "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- dfPool.transferOutSrc(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngineV2.sol#815-818)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 819,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
                    "message": "DFEngineV2.destroy has external calls inside a loop:\n\t- dfStore.setTotalCol(sub(dfStore.getTotalCol(),_tokenAmount)) (DFEngineV2.sol#819)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 847,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n",
                    "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- _srcAmount = IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW)) (DFEngineV2.sol#847)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 848,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
                    "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngineV2.sol#848)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
                    "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW))) (DFEngineV2.sol#849)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 850,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
                    "message": "DFEngineV2.oneClickMinting has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngineV2.sol#850)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 878,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
                    "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setTokenBalance(_tokens[i],sub(_tokenBalance[i],_mintAmount)) (DFEngineV2.sol#878)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
                    "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngineV2.sol#879)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 880,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
                    "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),_mintAmount)) (DFEngineV2.sol#880)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 884,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
                    "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],add(_resUSDXBalance[i],_mintAmount)) (DFEngineV2.sol#884)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 888,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
                    "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance[i],_depositorMintAmount)) (DFEngineV2.sol#888)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 889,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
                    "message": "DFEngineV2._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(add(_resUSDXBalance[i],_mintAmount),_depositorMintAmount)) (DFEngineV2.sol#889)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 906,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _colTotal = add(_colTotal, IDSToken(_tokens[i]).balanceOf(_dfCol));\n",
                    "message": "DFEngineV2.checkUSDXTotalAndColTotal has external calls inside a loop:\n\t- _colTotal = add(_colTotal,IDSToken(_tokens[i]).balanceOf(_dfCol)) (DFEngineV2.sol#906)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 156,
                    "vulnerability_code": "    function doTransferOut(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transfer(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferOut uses assembly (DFEngineV2.sol#132-156)\n\t- DFEngineV2.sol#142-154\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": 183,
                    "vulnerability_code": "    function doTransferFrom(\n\n        address _token,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transferFrom(_from, _to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferFrom uses assembly (DFEngineV2.sol#158-183)\n\t- DFEngineV2.sol#169-181\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": 209,
                    "vulnerability_code": "    function doApprove(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.approve(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doApprove uses assembly (DFEngineV2.sol#185-209)\n\t- DFEngineV2.sol#195-207\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFEngineV2.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFEngineV2.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFEngineV2.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFEngineV2.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFEngineV2.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFEngineV2.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSToken.mint (DFEngineV2.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSToken.burn (DFEngineV2.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.mint (DFEngineV2.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.burn (DFEngineV2.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.wrap (DFEngineV2.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.unwrap (DFEngineV2.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.changeByMultiple (DFEngineV2.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.reverseByMultiple (DFEngineV2.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
                    "message": "IDSWrappedToken.getSrcERC20 (DFEngineV2.sol#37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionMinted (DFEngineV2.sol#218) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFEngineV2.sol#219) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFEngineV2.sol#220) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFEngineV2.sol#221) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFEngineV2.sol#222) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionBurned (DFEngineV2.sol#224) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFEngineV2.sol#225) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFEngineV2.sol#226) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 227,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFEngineV2.sol#227) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 228,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFEngineV2.sol#228) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
                    "message": "IDFStore.getSectionToken (DFEngineV2.sol#230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
                    "message": "IDFStore.getSectionWeight (DFEngineV2.sol#231) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getSectionData (DFEngineV2.sol#232) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getBackupSectionData (DFEngineV2.sol#233) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getBackupSectionIndex (DFEngineV2.sol#234) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
                    "message": "IDFStore.setBackupSectionIndex (DFEngineV2.sol#235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setSection (DFEngineV2.sol#237) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setBackupSection (DFEngineV2.sol#238) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burnSectionMoveon() public;\n",
                    "message": "IDFStore.burnSectionMoveon (DFEngineV2.sol#239) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintingToken (DFEngineV2.sol#241) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintingToken (DFEngineV2.sol#242) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintedToken (DFEngineV2.sol#243) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintedToken (DFEngineV2.sol#244) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
                    "message": "IDFStore.getBackupToken (DFEngineV2.sol#245) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
                    "message": "IDFStore.setBackupToken (DFEngineV2.sol#246) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
                    "message": "IDFStore.getMintedTokenList (DFEngineV2.sol#247) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
                    "message": "IDFStore.getMintPosition (DFEngineV2.sol#249) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
                    "message": "IDFStore.getBurnPosition (DFEngineV2.sol#250) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
                    "message": "IDFStore.getTotalMinted (DFEngineV2.sol#252) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.addTotalMinted (DFEngineV2.sol#253) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.setTotalMinted (DFEngineV2.sol#254) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
                    "message": "IDFStore.getTotalBurned (DFEngineV2.sol#255) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.addTotalBurned (DFEngineV2.sol#256) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.setTotalBurned (DFEngineV2.sol#257) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
                    "message": "IDFStore.getMinBurnAmount (DFEngineV2.sol#258) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
                    "message": "IDFStore.setMinBurnAmount (DFEngineV2.sol#259) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getTokenBalance (DFEngineV2.sol#261) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setTokenBalance (DFEngineV2.sol#262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getResUSDXBalance (DFEngineV2.sol#263) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setResUSDXBalance (DFEngineV2.sol#264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getDepositorBalance (DFEngineV2.sol#265) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setDepositorBalance (DFEngineV2.sol#266) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
                    "message": "IDFStore.getFeeRate (DFEngineV2.sol#268) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
                    "message": "IDFStore.setFeeRate (DFEngineV2.sol#269) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 270,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
                    "message": "IDFStore.getTypeToken (DFEngineV2.sol#270) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
                    "message": "IDFStore.setTypeToken (DFEngineV2.sol#271) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
                    "message": "IDFStore.getTokenMedian (DFEngineV2.sol#272) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
                    "message": "IDFStore.setTokenMedian (DFEngineV2.sol#273) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
                    "message": "IDFStore.setTotalCol (DFEngineV2.sol#275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
                    "message": "IDFStore.getTotalCol (DFEngineV2.sol#276) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
                    "message": "IDFStore.setWrappedToken (DFEngineV2.sol#278) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
                    "message": "IDFStore.getWrappedToken (DFEngineV2.sol#279) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferOut (DFEngineV2.sol#287) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOutSrc(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferOutSrc (DFEngineV2.sol#288) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferFromSender (DFEngineV2.sol#289) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderOneClick(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferFromSenderOneClick (DFEngineV2.sol#290) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 291,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferToCol (DFEngineV2.sol#291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferFromSenderToCol (DFEngineV2.sol#292) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public;\n",
                    "message": "IDFPoolV2.approveToEngine (DFEngineV2.sol#293) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256);\n",
                    "message": "IDFPoolV2.getInterestByXToken (DFEngineV2.sol#294) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUnderlying(address _underlying) public returns (uint256);\n",
                    "message": "IDFPoolV2.getUnderlying (DFEngineV2.sol#295) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read() public view returns (bytes32);\n",
                    "message": "IMedianizer.read (DFEngineV2.sol#303) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 326,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFEngineV2.sol#324-326) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFEngineV2.sol#346-349) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": 354,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFEngineV2.sol#351-354) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFEngineV2.sol#356-361) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": 370,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFEngineV2.sol#364-370) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 494,
                    "vulnerability_to_line": 510,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFEngineV2.sol#494-510) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": 721,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
                    "message": "DFEngineV2.deposit (DFEngineV2.sol#664-721) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": 744,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
                    "message": "DFEngineV2.withdraw (DFEngineV2.sol#723-744) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": 772,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
                    "message": "DFEngineV2.claim (DFEngineV2.sol#746-772) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": 828,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOutSrc(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
                    "message": "DFEngineV2.destroy (DFEngineV2.sol#774-828) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": 857,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSenderOneClick(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
                    "message": "DFEngineV2.oneClickMinting (DFEngineV2.sol#830-857) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferOut (DFEngineV2.sol#133) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferOut (DFEngineV2.sol#134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferOut (DFEngineV2.sol#135) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#159) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#160) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferFrom (DFEngineV2.sol#162) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doApprove (DFEngineV2.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doApprove (DFEngineV2.sol#187) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doApprove (DFEngineV2.sol#188) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _usdxToken,\n",
                    "message": "Parameter '_usdxToken' of DFEngineV2. (DFEngineV2.sol#611) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfStore,\n",
                    "message": "Parameter '_dfStore' of DFEngineV2. (DFEngineV2.sol#612) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 613,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfPool,\n",
                    "message": "Parameter '_dfPool' of DFEngineV2. (DFEngineV2.sol#613) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfCol,\n",
                    "message": "Parameter '_dfCol' of DFEngineV2. (DFEngineV2.sol#614) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 615,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfFunds)\n",
                    "message": "Parameter '_dfFunds' of DFEngineV2. (DFEngineV2.sol#615) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 623,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _usdxToken,\n",
                    "message": "Parameter '_usdxToken' of DFEngineV2.initialize (DFEngineV2.sol#623) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfStore,\n",
                    "message": "Parameter '_dfStore' of DFEngineV2.initialize (DFEngineV2.sol#624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 625,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfPool,\n",
                    "message": "Parameter '_dfPool' of DFEngineV2.initialize (DFEngineV2.sol#625) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 626,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfCol,\n",
                    "message": "Parameter '_dfCol' of DFEngineV2.initialize (DFEngineV2.sol#626) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 627,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfFunds\n",
                    "message": "Parameter '_dfFunds' of DFEngineV2.initialize (DFEngineV2.sol#627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": 662,
                    "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n\n        uint rate = dfStore.getFeeRate(uint(ct));\n\n        if(rate > 0) {\n\n            address _token = dfStore.getTypeToken(_feeTokenIdx);\n\n            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n            uint dfPrice = getPrice(dfStore.getTokenMedian(_token));\n\n            uint dfFee = div(mul(mul(_amount, rate), WAD), mul(10000, dfPrice));\n\n            require(\n\n                doTransferFrom(\n\n                    _token,\n\n                    depositor,\n\n                    dfFunds,\n\n                    dfFee\n\n                ),\n\n                \"_unifiedCommission: transferFrom fee failed\"\n\n            );\n\n        }\n",
                    "message": "Function 'DFEngineV2._unifiedCommission' (DFEngineV2.sol#645-662) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngineV2._unifiedCommission (DFEngineV2.sol#645) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
                    "message": "Parameter '_amount' of DFEngineV2._unifiedCommission (DFEngineV2.sol#645) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_srcToken' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_srcAmount' of DFEngineV2.deposit (DFEngineV2.sol#664) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_srcToken' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 723,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_srcAmount' of DFEngineV2.withdraw (DFEngineV2.sol#723) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFEngineV2.claim (DFEngineV2.sol#746) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth nonReentrant returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngineV2.claim (DFEngineV2.sol#746) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n",
                    "message": "Parameter '_depositor' of DFEngineV2.destroy (DFEngineV2.sol#774) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngineV2.destroy (DFEngineV2.sol#774) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant returns (bool) {\n",
                    "message": "Parameter '_amount' of DFEngineV2.destroy (DFEngineV2.sol#774) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n",
                    "message": "Parameter '_depositor' of DFEngineV2.oneClickMinting (DFEngineV2.sol#830) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngineV2.oneClickMinting (DFEngineV2.sol#830) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 830,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth nonReentrant {\n",
                    "message": "Parameter '_amount' of DFEngineV2.oneClickMinting (DFEngineV2.sol#830) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 859,
                    "vulnerability_to_line": 899,
                    "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
                    "message": "Function 'DFEngineV2._convert' (DFEngineV2.sol#859-899) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 860,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _depositor,\n",
                    "message": "Parameter '_depositor' of DFEngineV2._convert (DFEngineV2.sol#860) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] memory _tokens,\n",
                    "message": "Parameter '_tokens' of DFEngineV2._convert (DFEngineV2.sol#861) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 862,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _mintCW,\n",
                    "message": "Parameter '_mintCW' of DFEngineV2._convert (DFEngineV2.sol#862) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _tokenBalance,\n",
                    "message": "Parameter '_tokenBalance' of DFEngineV2._convert (DFEngineV2.sol#863) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _resUSDXBalance,\n",
                    "message": "Parameter '_resUSDXBalance' of DFEngineV2._convert (DFEngineV2.sol#864) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 865,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _depositorBalance,\n",
                    "message": "Parameter '_depositorBalance' of DFEngineV2._convert (DFEngineV2.sol#865) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 866,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _step)\n",
                    "message": "Parameter '_step' of DFEngineV2._convert (DFEngineV2.sol#866) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 699,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 753,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 793,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 837,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 845,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 875,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 905,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 585,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _ENTERED = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _status;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private initialized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 195,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/converter/DFProtocol.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor () public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        iDFEngine = IDFEngine(0x0);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newDFEngine != address(0), \"_newDFEngine: The address is empty\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_newDFEngine != address(0), \"_newDFEngine: The address is empty\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_30"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "    function destroy(uint _feeTokenIdx, uint _usdxAmount) public {\n\n        iDFEngine.destroy(msg.sender, _feeTokenIdx, _usdxAmount);\n\n        emit Destroy(msg.sender, _usdxAmount);\n",
                    "message": "DFProtocol.destroy (DFProtocol.sol#186-189) does not use the value returned by external calls:\n\t-iDFEngine.destroy(msg.sender,_feeTokenIdx,_usdxAmount) (DFProtocol.sol#187)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\n",
                    "message": "IDFEngine.deposit (DFProtocol.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\n",
                    "message": "IDFEngine.withdraw (DFProtocol.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _sender, uint _feeTokenIdx, uint _amount) public returns (bool);\n",
                    "message": "IDFEngine.destroy (DFProtocol.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address _sender, uint _feeTokenIdx) public returns (uint);\n",
                    "message": "IDFEngine.claim (DFProtocol.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _sender, uint _feeTokenIdx, uint _amount) public;\n",
                    "message": "IDFEngine.oneClickMinting (DFProtocol.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFProtocol.sol#31-33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFProtocol.sol#53-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": 61,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFProtocol.sol#58-61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFProtocol.sol#63-68) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": 77,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFProtocol.sol#71-77) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": 141,
                    "vulnerability_code": "    function requestImplChange(address _newDFEngine) public onlyOwner {\n\n        require(_newDFEngine != address(0), \"_newDFEngine: The address is empty\");\n\n\n\n        newDFEngine = _newDFEngine;\n\n\n\n        emit ImplChangeRequested(msg.sender, _newDFEngine);\n",
                    "message": "DFUpgrader.requestImplChange (DFProtocol.sol#135-141) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 154,
                    "vulnerability_code": "    function confirmImplChange() public onlyOwner {\n\n        iDFEngine = IDFEngine(newDFEngine);\n\n\n\n        emit ImplChangeConfirmed(address(iDFEngine));\n",
                    "message": "DFUpgrader.confirmImplChange (DFProtocol.sol#150-154) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": 178,
                    "vulnerability_code": "    function deposit(address _tokenID, uint _feeTokenIdx, uint _tokenAmount) public returns (uint){\n\n        uint _usdxAmount = iDFEngine.deposit(msg.sender, _tokenID, _feeTokenIdx, _tokenAmount);\n\n        emit Deposit(_tokenID, msg.sender, _tokenAmount, _usdxAmount);\n\n        return _usdxAmount;\n",
                    "message": "DFProtocol.deposit (DFProtocol.sol#174-178) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 184,
                    "vulnerability_code": "    function withdraw(address _tokenID, uint _feeTokenIdx, uint _expectedAmount) public returns (uint) {\n\n        uint _actualAmount = iDFEngine.withdraw(msg.sender, _tokenID, _feeTokenIdx, _expectedAmount);\n\n        emit Withdraw(_tokenID, msg.sender, _expectedAmount, _actualAmount);\n\n        return _actualAmount;\n",
                    "message": "DFProtocol.withdraw (DFProtocol.sol#180-184) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "    function destroy(uint _feeTokenIdx, uint _usdxAmount) public {\n\n        iDFEngine.destroy(msg.sender, _feeTokenIdx, _usdxAmount);\n\n        emit Destroy(msg.sender, _usdxAmount);\n",
                    "message": "DFProtocol.destroy (DFProtocol.sol#186-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "    function claim(uint _feeTokenIdx) public returns (uint) {\n\n        uint _usdxAmount = iDFEngine.claim(msg.sender, _feeTokenIdx);\n\n        emit Claim(msg.sender, _usdxAmount);\n\n        return _usdxAmount;\n",
                    "message": "DFProtocol.claim (DFProtocol.sol#191-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function oneClickMinting(uint _feeTokenIdx, uint _usdxAmount) public {\n\n        iDFEngine.oneClickMinting(msg.sender, _feeTokenIdx, _usdxAmount);\n\n        emit OneClickMinting(msg.sender, _usdxAmount);\n",
                    "message": "DFProtocol.oneClickMinting (DFProtocol.sol#197-200) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function requestImplChange(address _newDFEngine) public onlyOwner {\n",
                    "message": "Parameter '_newDFEngine' of DFUpgrader.requestImplChange (DFProtocol.sol#135) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _tokenID, uint _feeTokenIdx, uint _tokenAmount) public returns (uint){\n",
                    "message": "Parameter '_tokenID' of DFProtocol.deposit (DFProtocol.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _tokenID, uint _feeTokenIdx, uint _tokenAmount) public returns (uint){\n",
                    "message": "Parameter '_feeTokenIdx' of DFProtocol.deposit (DFProtocol.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _tokenID, uint _feeTokenIdx, uint _tokenAmount) public returns (uint){\n",
                    "message": "Parameter '_tokenAmount' of DFProtocol.deposit (DFProtocol.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _tokenID, uint _feeTokenIdx, uint _expectedAmount) public returns (uint) {\n",
                    "message": "Parameter '_tokenID' of DFProtocol.withdraw (DFProtocol.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _tokenID, uint _feeTokenIdx, uint _expectedAmount) public returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFProtocol.withdraw (DFProtocol.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _tokenID, uint _feeTokenIdx, uint _expectedAmount) public returns (uint) {\n",
                    "message": "Parameter '_expectedAmount' of DFProtocol.withdraw (DFProtocol.sol#180) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(uint _feeTokenIdx, uint _usdxAmount) public {\n",
                    "message": "Parameter '_feeTokenIdx' of DFProtocol.destroy (DFProtocol.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(uint _feeTokenIdx, uint _usdxAmount) public {\n",
                    "message": "Parameter '_usdxAmount' of DFProtocol.destroy (DFProtocol.sol#186) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(uint _feeTokenIdx) public returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFProtocol.claim (DFProtocol.sol#191) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(uint _feeTokenIdx, uint _usdxAmount) public {\n",
                    "message": "Parameter '_feeTokenIdx' of DFProtocol.oneClickMinting (DFProtocol.sol#197) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(uint _feeTokenIdx, uint _usdxAmount) public {\n",
                    "message": "Parameter '_usdxAmount' of DFProtocol.oneClickMinting (DFProtocol.sol#197) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address newDFEngine;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/converter/DFSetting.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _dfStore) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dfStore = IDFStore(_dfStore);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 186,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_69"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionMinted (DFSetting.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFSetting.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFSetting.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFSetting.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFSetting.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionBurned (DFSetting.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFSetting.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFSetting.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFSetting.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFSetting.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
                    "message": "IDFStore.getSectionToken (DFSetting.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
                    "message": "IDFStore.getSectionWeight (DFSetting.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getSectionData (DFSetting.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getBackupSectionData (DFSetting.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getBackupSectionIndex (DFSetting.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
                    "message": "IDFStore.setBackupSectionIndex (DFSetting.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setSection (DFSetting.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setBackupSection (DFSetting.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burnSectionMoveon() public;\n",
                    "message": "IDFStore.burnSectionMoveon (DFSetting.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintingToken (DFSetting.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintingToken (DFSetting.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintedToken (DFSetting.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintedToken (DFSetting.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
                    "message": "IDFStore.getBackupToken (DFSetting.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
                    "message": "IDFStore.setBackupToken (DFSetting.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
                    "message": "IDFStore.getMintedTokenList (DFSetting.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
                    "message": "IDFStore.getMintPosition (DFSetting.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
                    "message": "IDFStore.getBurnPosition (DFSetting.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
                    "message": "IDFStore.getTotalMinted (DFSetting.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.addTotalMinted (DFSetting.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.setTotalMinted (DFSetting.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
                    "message": "IDFStore.getTotalBurned (DFSetting.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.addTotalBurned (DFSetting.sol#45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.setTotalBurned (DFSetting.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
                    "message": "IDFStore.getMinBurnAmount (DFSetting.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
                    "message": "IDFStore.setMinBurnAmount (DFSetting.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getTokenBalance (DFSetting.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setTokenBalance (DFSetting.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getResUSDXBalance (DFSetting.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setResUSDXBalance (DFSetting.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getDepositorBalance (DFSetting.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setDepositorBalance (DFSetting.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
                    "message": "IDFStore.getFeeRate (DFSetting.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
                    "message": "IDFStore.setFeeRate (DFSetting.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
                    "message": "IDFStore.getTypeToken (DFSetting.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
                    "message": "IDFStore.setTypeToken (DFSetting.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
                    "message": "IDFStore.getTokenMedian (DFSetting.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
                    "message": "IDFStore.setTokenMedian (DFSetting.sol#62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
                    "message": "IDFStore.setTotalCol (DFSetting.sol#64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
                    "message": "IDFStore.getTotalCol (DFSetting.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
                    "message": "IDFStore.setWrappedToken (DFSetting.sol#67) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
                    "message": "IDFStore.getWrappedToken (DFSetting.sol#68) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": 91,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFSetting.sol#89-91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFSetting.sol#111-114) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": 119,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFSetting.sol#116-119) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": 126,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFSetting.sol#121-126) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": 135,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFSetting.sol#129-135) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function setCommissionRate(ProcessType ct, uint rate) public auth {\n\n        dfStore.setFeeRate(uint(ct), rate);\n",
                    "message": "DFSetting.setCommissionRate (DFSetting.sol#189-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "    function setCommissionToken(TokenType ft, address _tokenID) public auth {\n\n        dfStore.setTypeToken(uint(ft), _tokenID);\n",
                    "message": "DFSetting.setCommissionToken (DFSetting.sol#194-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 201,
                    "vulnerability_code": "    function setCommissionMedian(address _tokenID, address _median) public auth {\n\n        dfStore.setTokenMedian(_tokenID, _median);\n",
                    "message": "DFSetting.setCommissionMedian (DFSetting.sol#199-201) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 206,
                    "vulnerability_code": "    function setDestroyThreshold(uint _amount) public auth {\n\n        dfStore.setMinBurnAmount(_amount);\n",
                    "message": "DFSetting.setDestroyThreshold (DFSetting.sol#204-206) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": 211,
                    "vulnerability_code": "    function updateMintSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n\n        dfStore.setSection(_wrappedTokens, _weight);\n",
                    "message": "DFSetting.updateMintSection (DFSetting.sol#209-211) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _dfStore) public {\n",
                    "message": "Parameter '_dfStore' of DFSetting. (DFSetting.sol#184) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCommissionToken(TokenType ft, address _tokenID) public auth {\n",
                    "message": "Parameter '_tokenID' of DFSetting.setCommissionToken (DFSetting.sol#194) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCommissionMedian(address _tokenID, address _median) public auth {\n",
                    "message": "Parameter '_tokenID' of DFSetting.setCommissionMedian (DFSetting.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setCommissionMedian(address _tokenID, address _median) public auth {\n",
                    "message": "Parameter '_median' of DFSetting.setCommissionMedian (DFSetting.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDestroyThreshold(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFSetting.setDestroyThreshold (DFSetting.sol#204) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMintSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
                    "message": "Parameter '_wrappedTokens' of DFSetting.updateMintSection (DFSetting.sol#209) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMintSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
                    "message": "Parameter '_weight' of DFSetting.updateMintSection (DFSetting.sol#209) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/converter/DFProtocolView.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _dfStore, address _dfCol)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dfStore = IDFStore(_dfStore);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 238,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dfCol = _dfCol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _balance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\t_xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _xAmount = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"CalcDepositorMintTotal: asset not allow.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"CalcDepositorMintTotal: asset not allow.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_111"
            ],
            "vulnerability_findings": [
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "DFProtocolView.getUSDXForDeposit has external calls inside a loop:\n\t- _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]) (DFProtocolView.sol#258)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "DFProtocolView.getUSDXForDeposit has external calls inside a loop:\n\t- _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFProtocolView.sol#259)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "DFProtocolView.getUSDXForDeposit has external calls inside a loop:\n\t- _depositorBalance[i] = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFProtocolView.sol#260)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "DFProtocolView.getUserMaxToClaim has external calls inside a loop:\n\t- _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]) (DFProtocolView.sol#286)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "DFProtocolView.getUserMaxToClaim has external calls inside a loop:\n\t- _depositorBalance = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFProtocolView.sol#287)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _balance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "DFProtocolView.getColMaxClaim has external calls inside a loop:\n\t- _balance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFProtocolView.sol#302)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.getColMaxClaim has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#303)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.getMintingSection has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#316)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.getBurningSection has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#330)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.getUserWithdrawBalance has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#343)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 344,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _withdrawBalances[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(calcWithdrawAmount(_depositor, _tokens[i]));\n",
                    "message": "DFProtocolView.getUserWithdrawBalance has external calls inside a loop:\n\t- _withdrawBalances[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(calcWithdrawAmount(_depositor,_tokens[i])) (DFProtocolView.sol#344)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\t_xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol);\n",
                    "message": "DFProtocolView.getColStatus has external calls inside a loop:\n\t- _xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol) (DFProtocolView.sol#380)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n",
                    "message": "DFProtocolView.getColStatus has external calls inside a loop:\n\t- _srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount) (DFProtocolView.sol#381)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.getColStatus has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#382)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _xAmount = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "DFProtocolView.getPoolStatus has external calls inside a loop:\n\t- _xAmount = dfStore.getTokenBalance(_tokens[i]) (DFProtocolView.sol#395)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n",
                    "message": "DFProtocolView.getPoolStatus has external calls inside a loop:\n\t- _srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount) (DFProtocolView.sol#396)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.getPoolStatus has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#397)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.calcMaxMinting has external calls inside a loop:\n\t- _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#415)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 416,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _balance = IDSWrappedToken(_srcToken).balanceOf(_depositor);\n",
                    "message": "DFProtocolView.calcMaxMinting has external calls inside a loop:\n\t- _balance = IDSWrappedToken(_srcToken).balanceOf(_depositor) (DFProtocolView.sol#416)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 417,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _step = min(div(IDSWrappedToken(_tokens[i]).changeByMultiple(_balance), _mintCW[i]), _step);\n",
                    "message": "DFProtocolView.calcMaxMinting has external calls inside a loop:\n\t- _step = min(div(IDSWrappedToken(_tokens[i]).changeByMultiple(_balance),_mintCW[i]),_step) (DFProtocolView.sol#417)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFProtocolView.getCollateralList has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFProtocolView.sol#428)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFProtocolView.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFProtocolView.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFProtocolView.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFProtocolView.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFProtocolView.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFProtocolView.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.mint (DFProtocolView.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.burn (DFProtocolView.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.wrap (DFProtocolView.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.unwrap (DFProtocolView.sol#25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.changeByMultiple (DFProtocolView.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.reverseByMultiple (DFProtocolView.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
                    "message": "IDSWrappedToken.getSrcERC20 (DFProtocolView.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionMinted (DFProtocolView.sol#37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFProtocolView.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFProtocolView.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFProtocolView.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFProtocolView.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionBurned (DFProtocolView.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFProtocolView.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFProtocolView.sol#45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFProtocolView.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFProtocolView.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
                    "message": "IDFStore.getSectionToken (DFProtocolView.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
                    "message": "IDFStore.getSectionWeight (DFProtocolView.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getSectionData (DFProtocolView.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getBackupSectionData (DFProtocolView.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getBackupSectionIndex (DFProtocolView.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
                    "message": "IDFStore.setBackupSectionIndex (DFProtocolView.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setSection (DFProtocolView.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setBackupSection (DFProtocolView.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burnSectionMoveon() public;\n",
                    "message": "IDFStore.burnSectionMoveon (DFProtocolView.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintingToken (DFProtocolView.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintingToken (DFProtocolView.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintedToken (DFProtocolView.sol#62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintedToken (DFProtocolView.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
                    "message": "IDFStore.getBackupToken (DFProtocolView.sol#64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
                    "message": "IDFStore.setBackupToken (DFProtocolView.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
                    "message": "IDFStore.getMintedTokenList (DFProtocolView.sol#66) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
                    "message": "IDFStore.getMintPosition (DFProtocolView.sol#68) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
                    "message": "IDFStore.getBurnPosition (DFProtocolView.sol#69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
                    "message": "IDFStore.getTotalMinted (DFProtocolView.sol#71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.addTotalMinted (DFProtocolView.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.setTotalMinted (DFProtocolView.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
                    "message": "IDFStore.getTotalBurned (DFProtocolView.sol#74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.addTotalBurned (DFProtocolView.sol#75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.setTotalBurned (DFProtocolView.sol#76) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
                    "message": "IDFStore.getMinBurnAmount (DFProtocolView.sol#77) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
                    "message": "IDFStore.setMinBurnAmount (DFProtocolView.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getTokenBalance (DFProtocolView.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setTokenBalance (DFProtocolView.sol#81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getResUSDXBalance (DFProtocolView.sol#82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setResUSDXBalance (DFProtocolView.sol#83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getDepositorBalance (DFProtocolView.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setDepositorBalance (DFProtocolView.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
                    "message": "IDFStore.getFeeRate (DFProtocolView.sol#87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
                    "message": "IDFStore.setFeeRate (DFProtocolView.sol#88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
                    "message": "IDFStore.getTypeToken (DFProtocolView.sol#89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
                    "message": "IDFStore.setTypeToken (DFProtocolView.sol#90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
                    "message": "IDFStore.getTokenMedian (DFProtocolView.sol#91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
                    "message": "IDFStore.setTokenMedian (DFProtocolView.sol#92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
                    "message": "IDFStore.setTotalCol (DFProtocolView.sol#94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
                    "message": "IDFStore.getTotalCol (DFProtocolView.sol#95) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
                    "message": "IDFStore.setWrappedToken (DFProtocolView.sol#97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
                    "message": "IDFStore.getWrappedToken (DFProtocolView.sol#98) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read() public view returns (bytes32);\n",
                    "message": "IMedianizer.read (DFProtocolView.sol#106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": 220,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFProtocolView.sol#204-220) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": 275,
                    "vulnerability_code": "    function getUSDXForDeposit(address _srcToken, uint _srcAmount) public view returns (uint) {\n\n        address _depositor = msg.sender;\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"CalcDepositorMintTotal: asset not allow.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        uint _depositorMintTotal;\n\n        uint _step = uint(-1);\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _step = min(div(_tokenBalance[i], _mintCW[i]), _step);\n\n        }\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _depositorMintTotal = add(_depositorMintTotal,\n\n                                    min(_depositorBalance[i], add(_resUSDXBalance[i], mul(_step, _mintCW[i])))\n\n                                    );\n\n        }\n\n\n\n        return _depositorMintTotal;\n",
                    "message": "DFProtocolView.getUSDXForDeposit (DFProtocolView.sol#241-275) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 294,
                    "vulnerability_code": "    function getUserMaxToClaim() public view returns (uint) {\n\n        address _depositor = msg.sender;\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorClaimAmount;\n\n        uint _claimAmount;\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorClaimAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _claimAmount = add(_claimAmount, _depositorClaimAmount);\n\n        }\n\n\n\n        return _claimAmount;\n",
                    "message": "DFProtocolView.getUserMaxToClaim (DFProtocolView.sol#277-294) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": 307,
                    "vulnerability_code": "    function getColMaxClaim() public view returns (address[] memory, uint[] memory) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint[] memory _balance = new uint[](_tokens.length);\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _balance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n        }\n\n\n\n        return (_srcTokens, _balance);\n",
                    "message": "DFProtocolView.getColMaxClaim (DFProtocolView.sol#296-307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function getMintingSection() public view returns(address[] memory, uint[] memory) {\n\n        uint position = dfStore.getMintPosition();\n\n        uint[] memory _weight = dfStore.getSectionWeight(position);\n\n        address[] memory _tokens = dfStore.getSectionToken(position);\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n        }\n\n\n\n        return (_srcTokens, _weight);\n",
                    "message": "DFProtocolView.getMintingSection (DFProtocolView.sol#309-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "    function getBurningSection() public view returns(address[] memory, uint[] memory) {\n\n        uint position = dfStore.getBurnPosition();\n\n        uint[] memory _weight = dfStore.getSectionWeight(position);\n\n        address[] memory _tokens = dfStore.getSectionToken(position);\n\n\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n        }\n\n\n\n        return (_srcTokens, _weight);\n",
                    "message": "DFProtocolView.getBurningSection (DFProtocolView.sol#322-334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": 348,
                    "vulnerability_code": "    function getUserWithdrawBalance() public view returns(address[] memory, uint[] memory) {\n\n        address _depositor = msg.sender;\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint[] memory _withdrawBalances = new uint[](_tokens.length);\n\n\n\n        address[] memory _srcTokens = new address[](_tokens.length);\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _withdrawBalances[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(calcWithdrawAmount(_depositor, _tokens[i]));\n\n        }\n\n\n\n        return (_srcTokens, _withdrawBalances);\n",
                    "message": "DFProtocolView.getUserWithdrawBalance (DFProtocolView.sol#336-348) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": 355,
                    "vulnerability_code": "    function getPrice(uint _tokenIdx) public view returns (uint) {\n\n        address _token = dfStore.getTypeToken(_tokenIdx);\n\n        require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n        bytes32 price = IMedianizer(dfStore.getTokenMedian(_token)).read();\n\n        return uint(price);\n",
                    "message": "DFProtocolView.getPrice (DFProtocolView.sol#350-355) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "    function getFeeRate(uint _processIdx) public view returns (uint) {\n\n        return dfStore.getFeeRate(_processIdx);\n",
                    "message": "DFProtocolView.getFeeRate (DFProtocolView.sol#357-359) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 363,
                    "vulnerability_code": "    function getDestroyThreshold() public view returns (uint) {\n\n        return dfStore.getMinBurnAmount();\n",
                    "message": "DFProtocolView.getDestroyThreshold (DFProtocolView.sol#361-363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": 386,
                    "vulnerability_code": "    function getColStatus() public view returns (address[] memory, uint[] memory) {\n\n\t\taddress[] memory _tokens = dfStore.getMintedTokenList();\n\n\t\tuint[] memory _srcBalance = new uint[](_tokens.length);\n\n\t\taddress[] memory _srcTokens = new address[](_tokens.length);\n\n\t\tuint _xAmount;\n\n\n\n\t\tfor (uint i = 0; i < _tokens.length; i++) {\n\n\t\t\t_xAmount = IDSWrappedToken(_tokens[i]).balanceOf(dfCol);\n\n\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n\n\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n\t\t}\n\n\n\n\t\treturn (_srcTokens, _srcBalance);\n",
                    "message": "DFProtocolView.getColStatus (DFProtocolView.sol#373-386) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": 401,
                    "vulnerability_code": "    function getPoolStatus() public view returns (address[] memory, uint[] memory) {\n\n\t\taddress[] memory _tokens = dfStore.getMintedTokenList();\n\n\t\tuint[] memory _srcBalance = new uint[](_tokens.length);\n\n\t\taddress[] memory _srcTokens = new address[](_tokens.length);\n\n        uint _xAmount;\n\n\n\n\t\tfor (uint i = 0; i < _tokens.length; i++) {\n\n            _xAmount = dfStore.getTokenBalance(_tokens[i]);\n\n\t\t\t_srcBalance[i] = IDSWrappedToken(_tokens[i]).reverseByMultiple(_xAmount);\n\n\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n\t\t}\n\n\n\n\t\treturn (_srcTokens, _srcBalance);\n",
                    "message": "DFProtocolView.getPoolStatus (DFProtocolView.sol#388-401) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": 421,
                    "vulnerability_code": "    function calcMaxMinting() public view returns(uint) {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint _sumMintCW;\n\n        uint _step = uint(-1);\n\n        address _depositor = msg.sender;\n\n        address _srcToken;\n\n        uint _balance;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _balance = IDSWrappedToken(_srcToken).balanceOf(_depositor);\n\n            _step = min(div(IDSWrappedToken(_tokens[i]).changeByMultiple(_balance), _mintCW[i]), _step);\n\n        }\n\n\n\n        return mul(_step, _sumMintCW);\n",
                    "message": "DFProtocolView.calcMaxMinting (DFProtocolView.sol#403-421) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 431,
                    "vulnerability_code": "    function getCollateralList() public view returns (address[] memory) {\n\n\t\taddress[] memory _tokens = dfStore.getMintedTokenList();\n\n\t\taddress[] memory _srcTokens = new address[](_tokens.length);\n\n\n\n\t\tfor (uint i = 0; i < _tokens.length; i++)\n\n\t\t\t_srcTokens[i] = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n\n\n\t\treturn _srcTokens;\n",
                    "message": "DFProtocolView.getCollateralList (DFProtocolView.sol#423-431) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": 436,
                    "vulnerability_code": "    function getCollateralBalance(address _srcToken) public view returns (uint) {\n\n\t\taddress _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        return IDSWrappedToken(_tokenID).reverseByMultiple(IDSWrappedToken(_tokenID).balanceOf(dfCol));\n",
                    "message": "DFProtocolView.getCollateralBalance (DFProtocolView.sol#433-436) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _dfStore, address _dfCol)\n",
                    "message": "Parameter '_dfStore' of DFProtocolView. (DFProtocolView.sol#234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _dfStore, address _dfCol)\n",
                    "message": "Parameter '_dfCol' of DFProtocolView. (DFProtocolView.sol#234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUSDXForDeposit(address _srcToken, uint _srcAmount) public view returns (uint) {\n",
                    "message": "Parameter '_srcToken' of DFProtocolView.getUSDXForDeposit (DFProtocolView.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 241,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUSDXForDeposit(address _srcToken, uint _srcAmount) public view returns (uint) {\n",
                    "message": "Parameter '_srcAmount' of DFProtocolView.getUSDXForDeposit (DFProtocolView.sol#241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPrice(uint _tokenIdx) public view returns (uint) {\n",
                    "message": "Parameter '_tokenIdx' of DFProtocolView.getPrice (DFProtocolView.sol#350) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(uint _processIdx) public view returns (uint) {\n",
                    "message": "Parameter '_processIdx' of DFProtocolView.getFeeRate (DFProtocolView.sol#357) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calcWithdrawAmount(address _depositor, address _tokenID) internal view returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFProtocolView.calcWithdrawAmount (DFProtocolView.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calcWithdrawAmount(address _depositor, address _tokenID) internal view returns (uint) {\n",
                    "message": "Parameter '_tokenID' of DFProtocolView.calcWithdrawAmount (DFProtocolView.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getCollateralBalance(address _srcToken) public view returns (uint) {\n",
                    "message": "Parameter '_srcToken' of DFProtocolView.getCollateralBalance (DFProtocolView.sol#433) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 301,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\t\tfor (uint i = 0; i < _tokens.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getColMaxClaim() public view returns (address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintingSection() public view returns(address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBurningSection() public view returns(address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUserWithdrawBalance() public view returns(address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 373,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getColStatus() public view returns (address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 388,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getPoolStatus() public view returns (address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/converter/DFEngine.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _usdxToken,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfStore,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfPool,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfCol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfFunds)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usdxToken = IDSToken(_usdxToken);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dfStore = IDFStore(_dfStore);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setSectionBurned(add(_burned, _amountTemp));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setSectionBurned(_minted);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.burnSectionMoveon();\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfPool.transferOut(\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 254,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"Deposit: amount is invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"Withdraw: amount is invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 568,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 637,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply <= _colTotal,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 638,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Amount of the usdx will be greater than collateral.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_usdxTotalSupply == dfStore.getTotalCol(),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"checkUSDXTotalAndColTotal : Usdx and total collateral are not equal.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_RECEIVED_SIGNAL_20"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n\n        uint rate = dfStore.getFeeRate(uint(ct));\n\n        if(rate > 0) {\n\n            address _token = dfStore.getTypeToken(_feeTokenIdx);\n\n            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n            uint dfPrice = getPrice(dfStore.getTokenMedian(_token));\n\n            uint dfFee = div(mul(mul(_amount, rate), WAD), mul(10000, dfPrice));\n\n            IDSToken(_token).transferFrom(depositor, dfFunds, dfFee);\n\n        }\n",
                    "message": "DFEngine._unifiedCommission (DFEngine.sol#381-390) does not use the value returned by external calls:\n\t-IDSToken(_token).transferFrom(depositor,dfFunds,dfFee) (DFEngine.sol#388)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
                    "message": "DFEngine.deposit (DFEngine.sol#392-449) does not use the value returned by external calls:\n\t-dfPool.transferFromSender(_srcToken,_depositor,IDSWrappedToken(_tokenID).reverseByMultiple(_amount)) (DFEngine.sol#398)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_tokenBalance[1]) (DFEngine.sol#443)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 472,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
                    "message": "DFEngine.withdraw (DFEngine.sol#451-472) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokenID).unwrap(address(dfPool),_withdrawAmount) (DFEngine.sol#467)\n\t-dfPool.transferOut(_srcToken,_depositor,_srcWithdrawAmount) (DFEngine.sol#469)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
                    "message": "DFEngine.claim (DFEngine.sol#474-500) does not use the value returned by external calls:\n\t-dfPool.transferOut(address(usdxToken),_depositor,_mintAmount) (DFEngine.sol#498)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": 556,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOut(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
                    "message": "DFEngine.destroy (DFEngine.sol#502-556) does not use the value returned by external calls:\n\t-IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngine.sol#542)\n\t-dfPool.transferOut(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngine.sol#543-546)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
                    "message": "DFEngine.oneClickMinting (DFEngine.sol#558-585) does not use the value returned by external calls:\n\t-dfPool.transferFromSender(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngine.sol#576)\n\t-IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngine.sol#578)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
                    "message": "DFEngine._convert (DFEngine.sol#587-627) does not use the value returned by external calls:\n\t-dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngine.sol#607)\n\t-dfPool.transferOut(address(usdxToken),_depositor,_depositorMintTotal) (DFEngine.sol#625)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n",
                    "message": "DFEngine.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],_depositorBalance[i_scope_0]) (DFEngine.sol#432)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n",
                    "message": "DFEngine.deposit has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i_scope_0],sub(_depositorBalance[i_scope_0],_tokenBalance[0])) (DFEngine.sol#437)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n",
                    "message": "DFEngine.deposit has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i_scope_0],sub(_resUSDXBalance[i_scope_0],_tokenBalance[0])) (DFEngine.sol#438)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n",
                    "message": "DFEngine.deposit has external calls inside a loop:\n\t- _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]) (DFEngine.sol#412)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "DFEngine.deposit has external calls inside a loop:\n\t- _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]) (DFEngine.sol#413)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "DFEngine.deposit has external calls inside a loop:\n\t- _depositorBalance[i] = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngine.sol#414)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n",
                    "message": "DFEngine.claim has external calls inside a loop:\n\t- _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]) (DFEngine.sol#482)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n",
                    "message": "DFEngine.claim has external calls inside a loop:\n\t- _depositorBalance = dfStore.getDepositorBalance(_depositor,_tokens[i]) (DFEngine.sol#483)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n",
                    "message": "DFEngine.claim has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(_resUSDXBalance,_depositorMintAmount)) (DFEngine.sol#489)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 490,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n",
                    "message": "DFEngine.claim has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance,_depositorMintAmount)) (DFEngine.sol#490)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n",
                    "message": "DFEngine.destroy has external calls inside a loop:\n\t- (_minted,_burned,None,_tokens,_burnCW) = dfStore.getSectionData(dfStore.getBurnPosition()) (DFEngine.sol#518)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 542,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n",
                    "message": "DFEngine.destroy has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).unwrap(dfCol,_tokenAmount) (DFEngine.sol#542)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": 546,
                    "vulnerability_code": "                dfPool.transferOut(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n",
                    "message": "DFEngine.destroy has external calls inside a loop:\n\t- dfPool.transferOut(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(_tokenAmount)) (DFEngine.sol#543-546)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n",
                    "message": "DFEngine.destroy has external calls inside a loop:\n\t- dfStore.setTotalCol(sub(dfStore.getTotalCol(),_tokenAmount)) (DFEngine.sol#547)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n",
                    "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- _srcAmount = IDSWrappedToken(_tokens[i_scope_0]).reverseByMultiple(div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW)) (DFEngine.sol#575)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 576,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n",
                    "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- dfPool.transferFromSender(IDSWrappedToken(_tokens[i_scope_0]).getSrcERC20(),_depositor,_srcAmount) (DFEngine.sol#576)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 577,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n",
                    "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),div(mul(_amount,_mintCW[i_scope_0]),_sumMintCW))) (DFEngine.sol#577)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n",
                    "message": "DFEngine.oneClickMinting has external calls inside a loop:\n\t- IDSWrappedToken(_tokens[i_scope_0]).wrap(dfCol,_srcAmount) (DFEngine.sol#578)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 606,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n",
                    "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setTokenBalance(_tokens[i],sub(_tokenBalance[i],_mintAmount)) (DFEngine.sol#606)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfPool.transferToCol(_tokens[i], _mintAmount);\n",
                    "message": "DFEngine._convert has external calls inside a loop:\n\t- dfPool.transferToCol(_tokens[i],_mintAmount) (DFEngine.sol#607)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n",
                    "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setTotalCol(add(dfStore.getTotalCol(),_mintAmount)) (DFEngine.sol#608)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n",
                    "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],add(_resUSDXBalance[i],_mintAmount)) (DFEngine.sol#612)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 616,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n",
                    "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setDepositorBalance(_depositor,_tokens[i],sub(_depositorBalance[i],_depositorMintAmount)) (DFEngine.sol#616)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n",
                    "message": "DFEngine._convert has external calls inside a loop:\n\t- dfStore.setResUSDXBalance(_tokens[i],sub(add(_resUSDXBalance[i],_mintAmount),_depositorMintAmount)) (DFEngine.sol#617)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 634,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _colTotal = add(_colTotal, IDSToken(_tokens[i]).balanceOf(_dfCol));\n",
                    "message": "DFEngine.checkUSDXTotalAndColTotal has external calls inside a loop:\n\t- _colTotal = add(_colTotal,IDSToken(_tokens[i]).balanceOf(_dfCol)) (DFEngine.sol#634)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFEngine.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFEngine.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFEngine.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFEngine.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFEngine.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFEngine.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSToken.mint (DFEngine.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSToken.burn (DFEngine.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.mint (DFEngine.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.burn (DFEngine.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.wrap (DFEngine.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.unwrap (DFEngine.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.changeByMultiple (DFEngine.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.reverseByMultiple (DFEngine.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
                    "message": "IDSWrappedToken.getSrcERC20 (DFEngine.sol#37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionMinted (DFEngine.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFEngine.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (DFEngine.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFEngine.sol#49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (DFEngine.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionBurned (DFEngine.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFEngine.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (DFEngine.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFEngine.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (DFEngine.sol#56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
                    "message": "IDFStore.getSectionToken (DFEngine.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
                    "message": "IDFStore.getSectionWeight (DFEngine.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getSectionData (DFEngine.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getBackupSectionData (DFEngine.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getBackupSectionIndex (DFEngine.sol#62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
                    "message": "IDFStore.setBackupSectionIndex (DFEngine.sol#63) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setSection (DFEngine.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setBackupSection (DFEngine.sol#66) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burnSectionMoveon() public;\n",
                    "message": "IDFStore.burnSectionMoveon (DFEngine.sol#67) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 69,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintingToken (DFEngine.sol#69) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintingToken (DFEngine.sol#70) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintedToken (DFEngine.sol#71) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintedToken (DFEngine.sol#72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
                    "message": "IDFStore.getBackupToken (DFEngine.sol#73) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
                    "message": "IDFStore.setBackupToken (DFEngine.sol#74) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
                    "message": "IDFStore.getMintedTokenList (DFEngine.sol#75) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
                    "message": "IDFStore.getMintPosition (DFEngine.sol#77) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
                    "message": "IDFStore.getBurnPosition (DFEngine.sol#78) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
                    "message": "IDFStore.getTotalMinted (DFEngine.sol#80) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.addTotalMinted (DFEngine.sol#81) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.setTotalMinted (DFEngine.sol#82) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
                    "message": "IDFStore.getTotalBurned (DFEngine.sol#83) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.addTotalBurned (DFEngine.sol#84) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.setTotalBurned (DFEngine.sol#85) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
                    "message": "IDFStore.getMinBurnAmount (DFEngine.sol#86) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
                    "message": "IDFStore.setMinBurnAmount (DFEngine.sol#87) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getTokenBalance (DFEngine.sol#89) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setTokenBalance (DFEngine.sol#90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getResUSDXBalance (DFEngine.sol#91) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setResUSDXBalance (DFEngine.sol#92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getDepositorBalance (DFEngine.sol#93) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setDepositorBalance (DFEngine.sol#94) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
                    "message": "IDFStore.getFeeRate (DFEngine.sol#96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
                    "message": "IDFStore.setFeeRate (DFEngine.sol#97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
                    "message": "IDFStore.getTypeToken (DFEngine.sol#98) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
                    "message": "IDFStore.setTypeToken (DFEngine.sol#99) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
                    "message": "IDFStore.getTokenMedian (DFEngine.sol#100) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
                    "message": "IDFStore.setTokenMedian (DFEngine.sol#101) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
                    "message": "IDFStore.setTotalCol (DFEngine.sol#103) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
                    "message": "IDFStore.getTotalCol (DFEngine.sol#104) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
                    "message": "IDFStore.setWrappedToken (DFEngine.sol#106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
                    "message": "IDFStore.getWrappedToken (DFEngine.sol#107) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferOut (DFEngine.sol#115) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferFromSender (DFEngine.sol#116) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferToCol (DFEngine.sol#117) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferFromSenderToCol (DFEngine.sol#118) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public;\n",
                    "message": "IDFPool.approveToEngine (DFEngine.sol#119) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read() public view returns (bytes32);\n",
                    "message": "IMedianizer.read (DFEngine.sol#127) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": 150,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFEngine.sol#148-150) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": 173,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFEngine.sol#170-173) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": 178,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFEngine.sol#175-178) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFEngine.sol#180-185) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": 194,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFEngine.sol#188-194) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 334,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFEngine.sol#318-334) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": 449,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        require(dfStore.getMintingToken(_tokenID), \"Deposit: asset is not allowed.\");\n\n\n\n        uint _amount = IDSWrappedToken(_tokenID).wrap(address(dfPool), _srcAmount);\n\n        require(_amount > 0, \"Deposit: amount is invalid.\");\n\n        dfPool.transferFromSender(_srcToken, _depositor, IDSWrappedToken(_tokenID).reverseByMultiple(_amount));\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n\n\n        uint[] memory _tokenBalance = new uint[](_tokens.length);\n\n        uint[] memory _resUSDXBalance = new uint[](_tokens.length);\n\n        uint[] memory _depositorBalance = new uint[](_tokens.length);\n\n        //For stack limit sake.\n\n        uint _misc = uint(-1);\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[i] = dfStore.getTokenBalance(_tokens[i]);\n\n            _resUSDXBalance[i] = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance[i] = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n            if (_tokenID == _tokens[i]){\n\n                _tokenBalance[i] = add(_tokenBalance[i], _amount);\n\n                _depositorBalance[i] = add(_depositorBalance[i], _amount);\n\n            }\n\n            _misc = min(div(_tokenBalance[i], _mintCW[i]), _misc);\n\n        }\n\n        if (_misc > 0) {\n\n            return _convert(_depositor, _tokens, _mintCW, _tokenBalance, _resUSDXBalance, _depositorBalance, _misc);\n\n        }\n\n        /** Just retrieve minting tokens here. If minted balance has USDX, call claim.*/\n\n        /// @dev reuse _tokenBalance[0], _tokenBalance[1] to avoid stack too deep\n\n        _tokenBalance[1] = 0;\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _tokenBalance[0] = min(_depositorBalance[i], _resUSDXBalance[i]);\n\n\n\n            if (_tokenBalance[0] == 0) {\n\n                if (_tokenID == _tokens[i]) {\n\n                    dfStore.setDepositorBalance(_depositor, _tokens[i], _depositorBalance[i]);\n\n                }\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _tokenBalance[0]));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance[i], _tokenBalance[0]));\n\n            _tokenBalance[1] = add(_tokenBalance[1], _tokenBalance[0]);\n\n        }\n\n\n\n        if (_tokenBalance[1] > 0)\n\n            dfPool.transferOut(address(usdxToken), _depositor, _tokenBalance[1]);\n\n\n\n        _misc = add(_amount, dfStore.getTokenBalance(_tokenID));\n\n        dfStore.setTokenBalance(_tokenID, _misc);\n\n\n\n        return (_tokenBalance[1]);\n",
                    "message": "DFEngine.deposit (DFEngine.sol#392-449) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": 472,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n\n        address _tokenID = dfStore.getWrappedToken(_srcToken);\n\n        uint _amount = IDSWrappedToken(_tokenID).changeByMultiple(_srcAmount);\n\n        require(_amount > 0, \"Withdraw: amount is invalid.\");\n\n\n\n        uint _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokenID);\n\n        uint _tokenBalance = dfStore.getTokenBalance(_tokenID);\n\n        uint _withdrawAmount = min(_amount, min(_tokenBalance, _depositorBalance));\n\n\n\n        if (_withdrawAmount <= 0)\n\n            return (0);\n\n\n\n        _depositorBalance = sub(_depositorBalance, _withdrawAmount);\n\n        dfStore.setDepositorBalance(_depositor, _tokenID, _depositorBalance);\n\n        dfStore.setTokenBalance(_tokenID, sub(_tokenBalance, _withdrawAmount));\n\n        _unifiedCommission(ProcessType.CT_WITHDRAW, _feeTokenIdx, _depositor, _withdrawAmount);\n\n        IDSWrappedToken(_tokenID).unwrap(address(dfPool), _withdrawAmount);\n\n        uint _srcWithdrawAmount = IDSWrappedToken(_tokenID).reverseByMultiple(_withdrawAmount);\n\n        dfPool.transferOut(_srcToken, _depositor, _srcWithdrawAmount);\n\n\n\n        return (_srcWithdrawAmount);\n",
                    "message": "DFEngine.withdraw (DFEngine.sol#451-472) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n\n        address[] memory _tokens = dfStore.getMintedTokenList();\n\n        uint _resUSDXBalance;\n\n        uint _depositorBalance;\n\n        uint _depositorMintAmount;\n\n        uint _mintAmount;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _resUSDXBalance = dfStore.getResUSDXBalance(_tokens[i]);\n\n            _depositorBalance = dfStore.getDepositorBalance(_depositor, _tokens[i]);\n\n\n\n            _depositorMintAmount = min(_resUSDXBalance, _depositorBalance);\n\n            _mintAmount = add(_mintAmount, _depositorMintAmount);\n\n\n\n            if (_depositorMintAmount > 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], sub(_resUSDXBalance, _depositorMintAmount));\n\n                dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance, _depositorMintAmount));\n\n            }\n\n        }\n\n\n\n        if (_mintAmount <= 0)\n\n            return 0;\n\n\n\n        _unifiedCommission(ProcessType.CT_CLAIM, _feeTokenIdx, _depositor, _mintAmount);\n\n        dfPool.transferOut(address(usdxToken), _depositor, _mintAmount);\n\n        return _mintAmount;\n",
                    "message": "DFEngine.claim (DFEngine.sol#474-500) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": 556,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n\n        require(_amount > 0 && (_amount % dfStore.getMinBurnAmount() == 0), \"Destroy: amount not correct.\");\n\n        require(_amount <= usdxToken.balanceOf(_depositor), \"Destroy: exceed max USDX balance.\");\n\n        require(_amount <= sub(dfStore.getTotalMinted(), dfStore.getTotalBurned()), \"Destroy: not enough to burn.\");\n\n        address[] memory _tokens;\n\n        uint[] memory _burnCW;\n\n        uint _sumBurnCW;\n\n        uint _burned;\n\n        uint _minted;\n\n        uint _burnedAmount;\n\n        uint _amountTemp = _amount;\n\n        uint _tokenAmount;\n\n\n\n        _unifiedCommission(ProcessType.CT_DESTROY, _feeTokenIdx, _depositor, _amount);\n\n\n\n        while(_amountTemp > 0) {\n\n            (_minted, _burned, , _tokens, _burnCW) = dfStore.getSectionData(dfStore.getBurnPosition());\n\n\n\n            _sumBurnCW = 0;\n\n            for (uint i = 0; i < _burnCW.length; i++) {\n\n                _sumBurnCW = add(_sumBurnCW, _burnCW[i]);\n\n            }\n\n\n\n            if (add(_burned, _amountTemp) <= _minted){\n\n                dfStore.setSectionBurned(add(_burned, _amountTemp));\n\n                _burnedAmount = _amountTemp;\n\n                _amountTemp = 0;\n\n            } else {\n\n                _burnedAmount = sub(_minted, _burned);\n\n                _amountTemp = sub(_amountTemp, _burnedAmount);\n\n                dfStore.setSectionBurned(_minted);\n\n                dfStore.burnSectionMoveon();\n\n            }\n\n\n\n            if (_burnedAmount == 0)\n\n                continue;\n\n\n\n            for (uint i = 0; i < _tokens.length; i++) {\n\n\n\n                _tokenAmount = div(mul(_burnedAmount, _burnCW[i]), _sumBurnCW);\n\n                IDSWrappedToken(_tokens[i]).unwrap(dfCol, _tokenAmount);\n\n                dfPool.transferOut(\n\n                    IDSWrappedToken(_tokens[i]).getSrcERC20(),\n\n                    _depositor,\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_tokenAmount));\n\n                dfStore.setTotalCol(sub(dfStore.getTotalCol(), _tokenAmount));\n\n            }\n\n        }\n\n\n\n        usdxToken.burn(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n\n        dfStore.addTotalBurned(_amount);\n\n\n\n        return true;\n",
                    "message": "DFEngine.destroy (DFEngine.sol#502-556) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n\n        address[] memory _tokens;\n\n        uint[] memory _mintCW;\n\n        uint _sumMintCW;\n\n        uint _srcAmount;\n\n\n\n        (, , , _tokens, _mintCW) = dfStore.getSectionData(dfStore.getMintPosition());\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n            _sumMintCW = add(_sumMintCW, _mintCW[i]);\n\n        }\n\n        require(_sumMintCW != 0, \"OneClickMinting: minting section is empty\");\n\n        require(_amount > 0 && _amount % _sumMintCW == 0, \"OneClickMinting: amount error\");\n\n\n\n        _unifiedCommission(ProcessType.CT_DEPOSIT, _feeTokenIdx, _depositor, _amount);\n\n\n\n        for (uint i = 0; i < _mintCW.length; i++) {\n\n\n\n            _srcAmount = IDSWrappedToken(_tokens[i]).reverseByMultiple(div(mul(_amount, _mintCW[i]), _sumMintCW));\n\n            dfPool.transferFromSender(IDSWrappedToken(_tokens[i]).getSrcERC20(), _depositor, _srcAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), div(mul(_amount, _mintCW[i]), _sumMintCW)));\n\n            IDSWrappedToken(_tokens[i]).wrap(dfCol, _srcAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_amount);\n\n        dfStore.addSectionMinted(_amount);\n\n        usdxToken.mint(_depositor, _amount);\n\n        checkUSDXTotalAndColTotal();\n",
                    "message": "DFEngine.oneClickMinting (DFEngine.sol#558-585) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _usdxToken,\n",
                    "message": "Parameter '_usdxToken' of DFEngine. (DFEngine.sol#362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfStore,\n",
                    "message": "Parameter '_dfStore' of DFEngine. (DFEngine.sol#363) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 364,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfPool,\n",
                    "message": "Parameter '_dfPool' of DFEngine. (DFEngine.sol#364) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfCol,\n",
                    "message": "Parameter '_dfCol' of DFEngine. (DFEngine.sol#365) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfFunds)\n",
                    "message": "Parameter '_dfFunds' of DFEngine. (DFEngine.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": 390,
                    "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n\n        uint rate = dfStore.getFeeRate(uint(ct));\n\n        if(rate > 0) {\n\n            address _token = dfStore.getTypeToken(_feeTokenIdx);\n\n            require(_token != address(0), \"_UnifiedCommission: fee token not correct.\");\n\n            uint dfPrice = getPrice(dfStore.getTokenMedian(_token));\n\n            uint dfFee = div(mul(mul(_amount, rate), WAD), mul(10000, dfPrice));\n\n            IDSToken(_token).transferFrom(depositor, dfFunds, dfFee);\n\n        }\n",
                    "message": "Function 'DFEngine._unifiedCommission' (DFEngine.sol#381-390) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngine._unifiedCommission (DFEngine.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _unifiedCommission(ProcessType ct, uint _feeTokenIdx, address depositor, uint _amount) internal {\n",
                    "message": "Parameter '_amount' of DFEngine._unifiedCommission (DFEngine.sol#381) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_srcToken' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_srcAmount' of DFEngine.deposit (DFEngine.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_srcToken' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _depositor, address _srcToken, uint _feeTokenIdx, uint _srcAmount) public auth returns (uint) {\n",
                    "message": "Parameter '_srcAmount' of DFEngine.withdraw (DFEngine.sol#451) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFEngine.claim (DFEngine.sol#474) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address _depositor, uint _feeTokenIdx) public auth returns (uint) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngine.claim (DFEngine.sol#474) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n",
                    "message": "Parameter '_depositor' of DFEngine.destroy (DFEngine.sol#502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngine.destroy (DFEngine.sol#502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _depositor, uint _feeTokenIdx, uint _amount) public auth returns (bool) {\n",
                    "message": "Parameter '_amount' of DFEngine.destroy (DFEngine.sol#502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n",
                    "message": "Parameter '_depositor' of DFEngine.oneClickMinting (DFEngine.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n",
                    "message": "Parameter '_feeTokenIdx' of DFEngine.oneClickMinting (DFEngine.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 558,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _depositor, uint _feeTokenIdx, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFEngine.oneClickMinting (DFEngine.sol#558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": 627,
                    "vulnerability_code": "    function _convert(\n\n        address _depositor,\n\n        address[] memory _tokens,\n\n        uint[] memory _mintCW,\n\n        uint[] memory _tokenBalance,\n\n        uint[] memory _resUSDXBalance,\n\n        uint[] memory _depositorBalance,\n\n        uint _step)\n\n        internal\n\n        returns(uint)\n\n    {\n\n        uint _mintAmount;\n\n        uint _mintTotal;\n\n        uint _depositorMintAmount;\n\n        uint _depositorMintTotal;\n\n\n\n        for (uint i = 0; i < _tokens.length; i++) {\n\n            _mintAmount = mul(_step, _mintCW[i]);\n\n            _depositorMintAmount = min(_depositorBalance[i], add(_resUSDXBalance[i], _mintAmount));\n\n            dfStore.setTokenBalance(_tokens[i], sub(_tokenBalance[i], _mintAmount));\n\n            dfPool.transferToCol(_tokens[i], _mintAmount);\n\n            dfStore.setTotalCol(add(dfStore.getTotalCol(), _mintAmount));\n\n            _mintTotal = add(_mintTotal, _mintAmount);\n\n\n\n            if (_depositorMintAmount == 0){\n\n                dfStore.setResUSDXBalance(_tokens[i], add(_resUSDXBalance[i], _mintAmount));\n\n                continue;\n\n            }\n\n\n\n            dfStore.setDepositorBalance(_depositor, _tokens[i], sub(_depositorBalance[i], _depositorMintAmount));\n\n            dfStore.setResUSDXBalance(_tokens[i], sub(add(_resUSDXBalance[i], _mintAmount), _depositorMintAmount));\n\n            _depositorMintTotal = add(_depositorMintTotal, _depositorMintAmount);\n\n        }\n\n\n\n        dfStore.addTotalMinted(_mintTotal);\n\n        dfStore.addSectionMinted(_mintTotal);\n\n        usdxToken.mint(address(dfPool), _mintTotal);\n\n        checkUSDXTotalAndColTotal();\n\n        dfPool.transferOut(address(usdxToken), _depositor, _depositorMintTotal);\n\n        return _depositorMintTotal;\n",
                    "message": "Function 'DFEngine._convert' (DFEngine.sol#587-627) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _depositor,\n",
                    "message": "Parameter '_depositor' of DFEngine._convert (DFEngine.sol#588) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 589,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] memory _tokens,\n",
                    "message": "Parameter '_tokens' of DFEngine._convert (DFEngine.sol#589) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 590,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _mintCW,\n",
                    "message": "Parameter '_mintCW' of DFEngine._convert (DFEngine.sol#590) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _tokenBalance,\n",
                    "message": "Parameter '_tokenBalance' of DFEngine._convert (DFEngine.sol#591) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _resUSDXBalance,\n",
                    "message": "Parameter '_resUSDXBalance' of DFEngine._convert (DFEngine.sol#592) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 593,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint[] memory _depositorBalance,\n",
                    "message": "Parameter '_depositorBalance' of DFEngine._convert (DFEngine.sol#593) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint _step)\n",
                    "message": "Parameter '_step' of DFEngine._convert (DFEngine.sol#594) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 184,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _burnCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _mintCW.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 603,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 633,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 271,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/converter/interfaces/IDFEngine.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\n",
                    "message": "IDFEngine.deposit (IDFEngine.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _sender, address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint);\n",
                    "message": "IDFEngine.withdraw (IDFEngine.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(address _sender, uint _feeTokenIdx, uint _amount) public returns (bool);\n",
                    "message": "IDFEngine.destroy (IDFEngine.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(address _sender, uint _feeTokenIdx) public returns (uint);\n",
                    "message": "IDFEngine.claim (IDFEngine.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(address _sender, uint _feeTokenIdx, uint _amount) public;\n",
                    "message": "IDFEngine.oneClickMinting (IDFEngine.sol#10) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/converter/interfaces/IDFProtocol.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint _balance);\n",
                    "message": "IDFProtocol.deposit (IDFProtocol.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address _tokenID, uint _feeTokenIdx, uint _amount) public returns (uint _balance);\n",
                    "message": "IDFProtocol.withdraw (IDFProtocol.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function destroy(uint _feeTokenIdx, uint _amount) public;\n",
                    "message": "IDFProtocol.destroy (IDFProtocol.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claim(uint _feeTokenIdx) public returns (uint _balance);\n",
                    "message": "IDFProtocol.claim (IDFProtocol.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function oneClickMinting(uint _feeTokenIdx, uint _amount) public;\n",
                    "message": "IDFProtocol.oneClickMinting (IDFProtocol.sol#10) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/mock/DToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 315,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string memory _name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string memory _symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _token\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    initialize(_name, _symbol, _token);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!initialized, \"initialize: Already initialized!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      doTransferFrom(token, msg.sender, address(this), _pie),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 348,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      \"mint: transfer token failed.\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        allowance[_src][msg.sender] >= amount,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"redeemUnderlying: insufficient allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      doTransferOut(token, msg.sender, _pie),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      \"redeemUnderlying: transfer failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(balances[_src] >= _wad, \"transferFrom: insufficient balance\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        allowance[_src][msg.sender] >= _wad,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"transferFrom: insufficient allowance\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        allowance[_src][msg.sender] >= amount,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"redeemUnderlying: insufficient allowance\"\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      );\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], amount);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        allowance[_src][msg.sender] >= _wad,\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"transferFrom: insufficient allowance\"\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      );\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 401,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], _wad);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 365,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        allowance[_src][msg.sender] >= amount,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"redeemUnderlying: insufficient allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 370,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 378,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 379,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      doTransferOut(token, msg.sender, _pie),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      \"redeemUnderlying: transfer failed\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 381,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(balances[_src] >= _wad, \"transferFrom: insufficient balance\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        allowance[_src][msg.sender] >= _wad,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        \"transferFrom: insufficient allowance\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_39"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
                    "message": "IERC20 (DToken.sol#9-86) has incorrect ERC20 function interface(s):\n\t-transfer (DToken.sol#25)\n\t-approve (DToken.sol#51)\n\t-transferFrom (DToken.sol#60-64)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "  function initialize(\n\n    string memory _name,\n\n    string memory _symbol,\n\n    address _token\n\n  ) public {\n\n    require(!initialized, \"initialize: Already initialized!\");\n\n    name = _name;\n\n    symbol = _symbol;\n\n    token = _token;\n\n    decimals = IERC20(_token).decimals();\n\n    initialized = true;\n",
                    "message": "Reentrancy in DToken.initialize (DToken.sol#324-335):\n\tExternal calls:\n\t- decimals = IERC20(_token).decimals() (DToken.sol#333)\n\tState variables written after the call(s):\n\t- initialized (DToken.sol#334)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n\n    uint256 amount = rdiv(_pie, getExchangeRate());\n\n\n\n    // Transfer the calculated token amount from `msg.sender` to the `handler`.\n\n    require(\n\n      doTransferFrom(token, msg.sender, address(this), _pie),\n\n      \"mint: transfer token failed.\"\n\n    );\n\n\n\n    balances[_dst] = add(balances[_dst], amount);\n\n    totalSupply = add(totalSupply, amount);\n",
                    "message": "Reentrancy in DToken.mint (DToken.sol#342-353):\n\tExternal calls:\n\t- amount = rdiv(_pie,getExchangeRate()) (DToken.sol#343)\n\t- require(bool,string)(doTransferFrom(token,msg.sender,address(this),_pie),mint: transfer token failed.) (DToken.sol#346-349)\n\tState variables written after the call(s):\n\t- totalSupply (DToken.sol#352)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": 382,
                    "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n\n    uint256 amount = rdivup(_pie, getExchangeRate());\n\n\n\n    // Check the balance and allowance\n\n    uint256 _balance = balances[_src];\n\n    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n\n    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n\n      require(\n\n        allowance[_src][msg.sender] >= amount,\n\n        \"redeemUnderlying: insufficient allowance\"\n\n      );\n\n      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], amount);\n\n    }\n\n\n\n    // Update the balance and totalSupply\n\n    balances[_src] = sub(balances[_src], amount);\n\n    totalSupply = sub(totalSupply, amount);\n\n\n\n    require(\n\n      doTransferOut(token, msg.sender, _pie),\n\n      \"redeemUnderlying: transfer failed\"\n\n    );\n",
                    "message": "Reentrancy in DToken.redeemUnderlying (DToken.sol#360-382):\n\tExternal calls:\n\t- amount = rdivup(_pie,getExchangeRate()) (DToken.sol#361)\n\tState variables written after the call(s):\n\t- totalSupply (DToken.sol#376)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n\n    uint256 amount = rdiv(_pie, getExchangeRate());\n\n\n\n    // Transfer the calculated token amount from `msg.sender` to the `handler`.\n\n    require(\n\n      doTransferFrom(token, msg.sender, address(this), _pie),\n\n      \"mint: transfer token failed.\"\n\n    );\n\n\n\n    balances[_dst] = add(balances[_dst], amount);\n\n    totalSupply = add(totalSupply, amount);\n",
                    "message": "Reentrancy in DToken.mint (DToken.sol#342-353):\n\tExternal calls:\n\t- amount = rdiv(_pie,getExchangeRate()) (DToken.sol#343)\n\t- require(bool,string)(doTransferFrom(token,msg.sender,address(this),_pie),mint: transfer token failed.) (DToken.sol#346-349)\n\tState variables written after the call(s):\n\t- balances (DToken.sol#351)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": 382,
                    "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n\n    uint256 amount = rdivup(_pie, getExchangeRate());\n\n\n\n    // Check the balance and allowance\n\n    uint256 _balance = balances[_src];\n\n    require(_balance >= amount, \"redeemUnderlying: insufficient balance\");\n\n    if (_src != msg.sender && allowance[_src][msg.sender] != uint256(-1)) {\n\n      require(\n\n        allowance[_src][msg.sender] >= amount,\n\n        \"redeemUnderlying: insufficient allowance\"\n\n      );\n\n      allowance[_src][msg.sender] = sub(allowance[_src][msg.sender], amount);\n\n    }\n\n\n\n    // Update the balance and totalSupply\n\n    balances[_src] = sub(balances[_src], amount);\n\n    totalSupply = sub(totalSupply, amount);\n\n\n\n    require(\n\n      doTransferOut(token, msg.sender, _pie),\n\n      \"redeemUnderlying: transfer failed\"\n\n    );\n",
                    "message": "Reentrancy in DToken.redeemUnderlying (DToken.sol#360-382):\n\tExternal calls:\n\t- amount = rdivup(_pie,getExchangeRate()) (DToken.sol#361)\n\tState variables written after the call(s):\n\t- allowance (DToken.sol#371)\n\t- balances (DToken.sol#375)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    function doTransferOut(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transfer(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferOut uses assembly (DToken.sol#93-117)\n\t- DToken.sol#103-115\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "    function doTransferFrom(\n\n        address _token,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transferFrom(_from, _to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferFrom uses assembly (DToken.sol#119-144)\n\t- DToken.sol#130-142\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "    function doApprove(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.approve(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doApprove uses assembly (DToken.sol#146-170)\n\t- DToken.sol#156-168\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DToken.sol#268-284) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": 413,
                    "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n\n    allowance[msg.sender][_spender] = _wad;\n\n    return true;\n",
                    "message": "DToken.approve (DToken.sol#410-413) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": 425,
                    "vulnerability_code": "  function getTokenBalance(address account) public view returns (uint256) {\n\n    return rmul(balanceOf(account), getExchangeRate());\n",
                    "message": "DToken.getTokenBalance (DToken.sol#423-425) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferOut (DToken.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferOut (DToken.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferOut (DToken.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferFrom (DToken.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC20SafeTransfer.doTransferFrom (DToken.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferFrom (DToken.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferFrom (DToken.sol#123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doApprove (DToken.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doApprove (DToken.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doApprove (DToken.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string memory _name,\n",
                    "message": "Parameter '_name' of DToken. (DToken.sol#316) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string memory _symbol,\n",
                    "message": "Parameter '_symbol' of DToken. (DToken.sol#317) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _token\n",
                    "message": "Parameter '_token' of DToken. (DToken.sol#318) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string memory _name,\n",
                    "message": "Parameter '_name' of DToken.initialize (DToken.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string memory _symbol,\n",
                    "message": "Parameter '_symbol' of DToken.initialize (DToken.sol#326) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _token\n",
                    "message": "Parameter '_token' of DToken.initialize (DToken.sol#327) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n",
                    "message": "Parameter '_dst' of DToken.mint (DToken.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address _dst, uint256 _pie) external {\n",
                    "message": "Parameter '_pie' of DToken.mint (DToken.sol#342) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n",
                    "message": "Parameter '_src' of DToken.redeemUnderlying (DToken.sol#360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function redeemUnderlying(address _src, uint256 _pie) external {\n",
                    "message": "Parameter '_pie' of DToken.redeemUnderlying (DToken.sol#360) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _dst, uint256 _wad) external returns (bool) {\n",
                    "message": "Parameter '_dst' of DToken.transfer (DToken.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _dst, uint256 _wad) external returns (bool) {\n",
                    "message": "Parameter '_wad' of DToken.transfer (DToken.sol#385) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _src,\n",
                    "message": "Parameter '_src' of DToken.transferFrom (DToken.sol#390) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 391,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _dst,\n",
                    "message": "Parameter '_dst' of DToken.transferFrom (DToken.sol#391) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 392,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _wad\n",
                    "message": "Parameter '_wad' of DToken.transferFrom (DToken.sol#392) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n",
                    "message": "Parameter '_spender' of DToken.approve (DToken.sol#410) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n",
                    "message": "Parameter '_wad' of DToken.approve (DToken.sol#410) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _wad) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private initialized; // Flag of initialize data\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/mock/DTokenController.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        initialize();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!initialized, \"initialize: Already initialized!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokens.length == _mappingdTokens.length,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"setdTokensRelation: Array length do not match!\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dTokens[_token] == address(0x0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"_setdTokenRelation: Has set!\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dTokens[_token] != address(0x0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"updatedTokenRelation: token does not exist!\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _tokens.length == _mappingdTokens.length,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"setdTokensRelation: Array length do not match!\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dTokens[_token] != address(0x0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"updatedTokenRelation: token does not exist!\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": 40,
                    "vulnerability_code": "    function setdTokensRelation(\n\n        address[] memory _tokens,\n\n        address[] memory _mappingdTokens\n\n    ) public {\n\n        require(\n\n            _tokens.length == _mappingdTokens.length,\n\n            \"setdTokensRelation: Array length do not match!\"\n\n        );\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n\n            _setdTokenRelation(_tokens[i], _mappingdTokens[i]);\n\n        }\n",
                    "message": "DTokenController.setdTokensRelation (DTokenController.sol#29-40) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] memory _tokens,\n",
                    "message": "Parameter '_tokens' of DTokenController.setdTokensRelation (DTokenController.sol#30) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] memory _mappingdTokens\n",
                    "message": "Parameter '_mappingdTokens' of DTokenController.setdTokensRelation (DTokenController.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": 51,
                    "vulnerability_code": "    function _setdTokenRelation(address _token, address _mappingdToken)\n\n        internal\n\n    {\n\n        require(\n\n            dTokens[_token] == address(0x0),\n\n            \"_setdTokenRelation: Has set!\"\n\n        );\n\n        dTokens[_token] = _mappingdToken;\n\n        emit NewMappingdToken(_token, _mappingdToken);\n",
                    "message": "Function 'DTokenController._setdTokenRelation' (DTokenController.sol#42-51) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setdTokenRelation(address _token, address _mappingdToken)\n",
                    "message": "Parameter '_token' of DTokenController._setdTokenRelation (DTokenController.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setdTokenRelation(address _token, address _mappingdToken)\n",
                    "message": "Parameter '_mappingdToken' of DTokenController._setdTokenRelation (DTokenController.sol#42) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updatedTokenRelation(address _token, address _mappingdToken)\n",
                    "message": "Parameter '_token' of DTokenController.updatedTokenRelation (DTokenController.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updatedTokenRelation(address _token, address _mappingdToken)\n",
                    "message": "Parameter '_mappingdToken' of DTokenController.updatedTokenRelation (DTokenController.sol#56) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDToken(address _token) external view returns (address) {\n",
                    "message": "Parameter '_token' of DTokenController.getDToken (DTokenController.sol#67) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dTokens[_token] == address(0x0),\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dTokens[_token] != address(0x0),\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private initialized; // Flags for initializing data\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/oracle/UniswapOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _path[0] = 0x431ad2ff6a9C365805eBaD47Ee021148d6f7DBe0; // DF\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _path[1] = 0xeb269732ab75A6fD61Ea60b06fE994cD32a83549; // USDx\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/oracle/Medianizer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint96 i = 1; i < uint96(next); i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (values[bytes12(i)] != address(0)) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (bytes32 wut, bool wuz) = DSValue(values[bytes12(i)]).peek();\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint96 i = 1; i < uint96(next); i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(haz, \"haz-not\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (pos == 0x0) revert(\"Set: pos zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (wat != address(0) && indexes[wat] != 0) revert(\"Set: address not-zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (min_ == 0x0) revert(\"Min: zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (next_ == 0x0) revert(\"SetNext: zero\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (wat != address(0) && indexes[wat] != 0) revert(\"Set: address not-zero\");\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-decrement-not-postfix",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        for (uint96 k = ctr; k > j; k--) {\n",
                    "message": "Consider using the prefix decrement expression whenever the return value is not needed. The prefix decrement expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint96 i = 1; i < uint96(next); i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                            j++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 390,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    ctr++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 329,
                    "vulnerability_code": "    function set(address wat) public auth {\n\n        bytes12 nextId = bytes12(uint96(next) + 1);\n\n        assert(nextId != 0x0);\n\n        set(next, wat);\n\n        next = nextId;\n",
                    "message": "Reentrancy in Medianizer.set (Medianizer.sol#324-329):\n\tExternal calls:\n\t- set(next,wat) (Medianizer.sol#327)\n\tState variables written after the call(s):\n\t- next (Medianizer.sol#328)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                (bytes32 wut, bool wuz) = DSValue(values[bytes12(i)]).peek();\n",
                    "message": "Medianizer.compute has external calls inside a loop:\n\t- (wut,wuz) = DSValue(values[bytes12(i)]).peek() (Medianizer.sol#376)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (Medianizer.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (Medianizer.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (Medianizer.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (Medianizer.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (Medianizer.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (Medianizer.sol#235-251) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "    function read() public view returns (bytes32) {\n\n        bytes32 wut; bool haz;\n\n        (wut, haz) = peek();\n\n        require(haz, \"haz-not\");\n\n        return wut;\n",
                    "message": "DSValue.read (Medianizer.sol#303-308) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function void() public note auth {  // unset the value\n\n        has = false;\n",
                    "message": "DSValue.void (Medianizer.sol#313-315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": 329,
                    "vulnerability_code": "    function set(address wat) public auth {\n\n        bytes12 nextId = bytes12(uint96(next) + 1);\n\n        assert(nextId != 0x0);\n\n        set(next, wat);\n\n        next = nextId;\n",
                    "message": "Medianizer.set (Medianizer.sol#324-329) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 348,
                    "vulnerability_code": "    function setMin(uint96 min_) public note auth {\n\n        if (min_ == 0x0) revert(\"Min: zero\");\n\n        _min = min_;\n",
                    "message": "Medianizer.setMin (Medianizer.sol#345-348) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": 353,
                    "vulnerability_code": "    function setNext(bytes12 next_) public note auth {\n\n        if (next_ == 0x0) revert(\"SetNext: zero\");\n\n        next = next_;\n",
                    "message": "Medianizer.setNext (Medianizer.sol#350-353) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": 357,
                    "vulnerability_code": "    function unset(bytes12 pos) public auth {\n\n        set(pos, address(0));\n",
                    "message": "Medianizer.unset (Medianizer.sol#355-357) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": 361,
                    "vulnerability_code": "    function unset(address wat) public auth {\n\n        set(indexes[wat], address(0));\n",
                    "message": "Medianizer.unset (Medianizer.sol#359-361) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "    function poke() public {\n\n        poke(0);\n",
                    "message": "Medianizer.poke (Medianizer.sol#363-365) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (Medianizer.sol#278-280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function poke(bytes32) public note {\n",
                    "message": "Parameter '' of Medianizer.poke (Medianizer.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint96 public _min = 1;\n",
                    "message": "Variable 'Medianizer._min' (Medianizer.sol#322) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes12 public next = bytes12(uint96(0x1));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        set(pos, address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        set(indexes[wat], address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 374,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint96 i = 1; i < uint96(next); i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                        while (wut >= wuts[j]) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (pos == 0x0) revert(\"Set: pos zero\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 334,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (wat != address(0) && indexes[wat] != 0) revert(\"Set: address not-zero\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (min_ == 0x0) revert(\"Min: zero\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REVERT_REQUIRE",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (next_ == 0x0) revert(\"SetNext: zero\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() public view returns (bytes32, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function compute() public view returns (bytes32, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool    has;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 val;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/oracle/PriceFeed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(now < zzz, \"Read: expired.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_8"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (PriceFeed.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (PriceFeed.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (PriceFeed.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (PriceFeed.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (PriceFeed.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (PriceFeed.sol#235-251) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (PriceFeed.sol#278-280) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "interface iMedianizer {\n\n    function poke() external;\n",
                    "message": "Contract 'iMedianizer' (PriceFeed.sol#288-290) is not in CapWords\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() external view returns (bytes32, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint128       val;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/oracle/interfaces/IMedianizer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function read() public view returns (bytes32);\n",
                    "message": "IMedianizer.read (IMedianizer.sol#6) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/DFCollateral.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_address != address(0), \"ValidAddress: address invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_22"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        //SWC-DoS with Failed Call: L19\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFCollateral.transferOut (DFCollateral.sol#247-258) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(_to),_balance) == _amount)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        //SWC-DoS with Failed Call: L19\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFCollateral.transferOut (DFCollateral.sol#247-258) does not use the value returned by external calls:\n\t-IERC20Token(_tokenID).transfer(_to,_amount) (DFCollateral.sol#254)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n\n        IERC20Token(_tokenIdx).approve(_engineAddress, uint(-1));\n",
                    "message": "DFCollateral.approveToEngine (DFCollateral.sol#260-262) does not use the value returned by external calls:\n\t-IERC20Token(_tokenIdx).approve(_engineAddress,uint256(- 1)) (DFCollateral.sol#261)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFCollateral.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFCollateral.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFCollateral.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFCollateral.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFCollateral.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFCollateral.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFCollateral.sol#112-128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFCollateral.sol#149-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFCollateral.sol#171-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFCollateral.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": 186,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFCollateral.sol#181-186) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFCollateral.sol#189-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 258,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        //SWC-DoS with Failed Call: L19\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFCollateral.transferOut (DFCollateral.sol#247-258) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n\n        IERC20Token(_tokenIdx).approve(_engineAddress, uint(-1));\n",
                    "message": "DFCollateral.approveToEngine (DFCollateral.sol#260-262) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_tokenID' of DFCollateral.transferOut (DFCollateral.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_to' of DFCollateral.transferOut (DFCollateral.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_amount' of DFCollateral.transferOut (DFCollateral.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n",
                    "message": "Parameter '_tokenIdx' of DFCollateral.approveToEngine (DFCollateral.sol#260) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n",
                    "message": "Parameter '_engineAddress' of DFCollateral.approveToEngine (DFCollateral.sol#260) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/DFPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _dfcol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dfcol = _dfcol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 251,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_address != address(0), \"ValidAddress: address invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfcol != address(0), \"TransferToCol: collateral address empty.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfcol != address(0), \"TransferFromSenderToCol: collateral address empty.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfcol != address(0), \"TransferToCol: collateral address empty.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 293,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(dfcol != address(0), \"TransferFromSenderToCol: collateral address empty.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_40"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(address(this));\n\n        IERC20Token(_tokenID).transferFrom(_from, address(this), _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(address(this)), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSender (DFPool.sol#253-262) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(address(this)),_balance) == _amount)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(address(this));\n\n        IERC20Token(_tokenID).transferFrom(_from, address(this), _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(address(this)), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSender (DFPool.sol#253-262) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(address(this)),_balance) == _amount)\nDFPool.transferFromSenderToCol (DFPool.sol#288-298) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(dfcol),_balance) == _amount)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(address(this));\n\n        IERC20Token(_tokenID).transferFrom(_from, address(this), _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(address(this)), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSender (DFPool.sol#253-262) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(address(this)),_balance) == _amount)\nDFPool.transferFromSenderToCol (DFPool.sol#288-298) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(dfcol),_balance) == _amount)\nDFPool.transferOut (DFPool.sol#264-274) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(_to),_balance) == _amount)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(address(this));\n\n        IERC20Token(_tokenID).transferFrom(_from, address(this), _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(address(this)), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSender (DFPool.sol#253-262) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(address(this)),_balance) == _amount)\nDFPool.transferFromSenderToCol (DFPool.sol#288-298) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(dfcol),_balance) == _amount)\nDFPool.transferOut (DFPool.sol#264-274) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(_to),_balance) == _amount)\nDFPool.transferToCol (DFPool.sol#276-286) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(dfcol),_balance) == _amount)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(address(this));\n\n        IERC20Token(_tokenID).transferFrom(_from, address(this), _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(address(this)), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSender (DFPool.sol#253-262) does not use the value returned by external calls:\n\t-IERC20Token(_tokenID).transferFrom(_from,address(this),_amount) (DFPool.sol#259)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": 274,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferOut (DFPool.sol#264-274) does not use the value returned by external calls:\n\t-IERC20Token(_tokenID).transfer(_to,_amount) (DFPool.sol#271)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        require(dfcol != address(0), \"TransferToCol: collateral address empty.\");\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(dfcol);\n\n        IERC20Token(_tokenID).transfer(dfcol, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(dfcol), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferToCol (DFPool.sol#276-286) does not use the value returned by external calls:\n\t-IERC20Token(_tokenID).transfer(dfcol,_amount) (DFPool.sol#283)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        require(dfcol != address(0), \"TransferFromSenderToCol: collateral address empty.\");\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(dfcol);\n\n        IERC20Token(_tokenID).transferFrom(_from, dfcol, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(dfcol), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSenderToCol (DFPool.sol#288-298) does not use the value returned by external calls:\n\t-IERC20Token(_tokenID).transferFrom(_from,dfcol,_amount) (DFPool.sol#295)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 302,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n\n        IERC20Token(_tokenIdx).approve(_engineAddress, uint(-1));\n",
                    "message": "DFPool.approveToEngine (DFPool.sol#300-302) does not use the value returned by external calls:\n\t-IERC20Token(_tokenIdx).approve(_engineAddress,uint256(- 1)) (DFPool.sol#301)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFPool.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFPool.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFPool.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFPool.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFPool.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFPool.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFPool.sol#112-128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFPool.sol#149-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFPool.sol#171-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFPool.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": 186,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFPool.sol#181-186) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFPool.sol#189-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": 262,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(address(this));\n\n        IERC20Token(_tokenID).transferFrom(_from, address(this), _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(address(this)), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSender (DFPool.sol#253-262) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": 274,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferOut (DFPool.sol#264-274) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": 286,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        require(dfcol != address(0), \"TransferToCol: collateral address empty.\");\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(dfcol);\n\n        IERC20Token(_tokenID).transfer(dfcol, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(dfcol), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferToCol (DFPool.sol#276-286) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount)\n\n        public\n\n        auth\n\n        returns (bool)\n\n    {\n\n        require(dfcol != address(0), \"TransferFromSenderToCol: collateral address empty.\");\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(dfcol);\n\n        IERC20Token(_tokenID).transferFrom(_from, dfcol, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(dfcol), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPool.transferFromSenderToCol (DFPool.sol#288-298) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": 302,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n\n        IERC20Token(_tokenIdx).approve(_engineAddress, uint(-1));\n",
                    "message": "DFPool.approveToEngine (DFPool.sol#300-302) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor (address _dfcol) public {\n",
                    "message": "Parameter '_dfcol' of DFPool. (DFPool.sol#249) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n",
                    "message": "Parameter '_tokenID' of DFPool.transferFromSender (DFPool.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n",
                    "message": "Parameter '_from' of DFPool.transferFromSender (DFPool.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 253,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount)\n",
                    "message": "Parameter '_amount' of DFPool.transferFromSender (DFPool.sol#253) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_tokenID' of DFPool.transferOut (DFPool.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_to' of DFPool.transferOut (DFPool.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_amount' of DFPool.transferOut (DFPool.sol#264) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount)\n",
                    "message": "Parameter '_tokenID' of DFPool.transferToCol (DFPool.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount)\n",
                    "message": "Parameter '_amount' of DFPool.transferToCol (DFPool.sol#276) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount)\n",
                    "message": "Parameter '_tokenID' of DFPool.transferFromSenderToCol (DFPool.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount)\n",
                    "message": "Parameter '_from' of DFPool.transferFromSenderToCol (DFPool.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount)\n",
                    "message": "Parameter '_amount' of DFPool.transferFromSenderToCol (DFPool.sol#288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n",
                    "message": "Parameter '_tokenIdx' of DFPool.approveToEngine (DFPool.sol#300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 300,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public auth {\n",
                    "message": "Parameter '_engineAddress' of DFPool.approveToEngine (DFPool.sol#300) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address dfcol;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/DFPoolV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 322,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 323,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _dfcol) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        dfcol = _dfcol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 478,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfcol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dFPoolOld,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dTokenController\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 564,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        initialize(_dfcol, _dFPoolOld, _dTokenController);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 389,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_address != address(0), \"ValidAddress: address invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 487,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            doTransferFrom(_tokenID, _from, address(this), _amount),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"transferFromSender: failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(doTransferOut(_tokenID, _to, _amount), \"transferOut: failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfcol != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"TransferToCol: collateral address empty.\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 517,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            doTransferOut(_tokenID, dfcol, _amount),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"transferToCol: failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 520,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfcol != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"TransferFromSenderToCol: collateral address empty.\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 536,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            doTransferFrom(_tokenID, _from, dfcol, _amount),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 537,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"transferFromSenderToCol: failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            doApprove(_tokenIdx, _engineAddress, uint256(-1)),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 549,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"approveToEngine: Approve failed!\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(!initialized, \"initialize: Already initialized!\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                add(_balance, _amount) ==\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    IERC20(_srcToken).balanceOf(address(this)),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"migrateOldPool: Transfer src token to new pool verification failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 666,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    IERC20(_tokens[i]).balanceOf(address(this))\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ) == IERC20(_srcToken).balanceOf(address(this)),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"migrateOldPool: Pending src token in new pool verification failed\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_dToken != address(0), \"approve: dToekn address empty.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 683,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 684,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            doApprove(_tokenID, _dToken, uint256(-1)),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"approve: Approve failed!\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 686,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 276,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 338,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 513,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfcol != address(0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"TransferToCol: collateral address empty.\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            dfcol != address(0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 532,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"TransferFromSenderToCol: collateral address empty.\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 533,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                add(_balance, _amount) ==\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 650,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    IERC20(_srcToken).balanceOf(address(this)),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"migrateOldPool: Transfer src token to new pool verification failed\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 652,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 666,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                    IERC20(_tokens[i]).balanceOf(address(this))\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 667,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                ) == IERC20(_srcToken).balanceOf(address(this)),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                \"migrateOldPool: Pending src token in new pool verification failed\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_87"
            ],
            "vulnerability_findings": [
                {
                    "name": "erc20-interface",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": 86,
                    "vulnerability_code": "interface IERC20 {\n\n    /**\n\n     * @dev Returns the amount of tokens in existence.\n\n     */\n\n    function totalSupply() external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Returns the amount of tokens owned by `account`.\n\n     */\n\n    function balanceOf(address account) external view returns (uint256);\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transfer(address recipient, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Returns the remaining number of tokens that `spender` will be\n\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\n     * zero by default.\n\n     *\n\n     * This value changes when {approve} or {transferFrom} are called.\n\n     */\n\n    function allowance(address owner, address spender)\n\n        external\n\n        view\n\n        returns (uint256);\n\n\n\n    /**\n\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\n     *\n\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\n     * that someone may use both the old and the new allowance by unfortunate\n\n     * transaction ordering. One possible solution to mitigate this race\n\n     * condition is to first reduce the spender's allowance to 0 and set the\n\n     * desired value afterwards:\n\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n     *\n\n     * Emits an {Approval} event.\n\n     */\n\n    function approve(address spender, uint256 amount) external;\n\n\n\n    /**\n\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\n     * allowance mechanism. `amount` is then deducted from the caller's\n\n     * allowance.\n\n     *\n\n     * Emits a {Transfer} event.\n\n     */\n\n    function transferFrom(\n\n        address sender,\n\n        address recipient,\n\n        uint256 amount\n\n    ) external;\n\n\n\n    /**\n\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\n     * another (`to`).\n\n     *\n\n     * Note that `value` may be zero.\n\n     */\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n\n    /**\n\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\n     * a call to {approve}. `value` is the new allowance.\n\n     */\n\n    event Approval(\n\n        address indexed owner,\n\n        address indexed spender,\n\n        uint256 value\n\n    );\n\n\n\n    // This function is not a standard ERC20 interface, just for compitable with market.\n\n    function decimals() external view returns (uint8);\n",
                    "message": "IERC20 (DFPoolV2.sol#9-86) has incorrect ERC20 function interface(s):\n\t-transfer (DFPoolV2.sol#25)\n\t-approve (DFPoolV2.sol#51)\n\t-transferFrom (DFPoolV2.sol#60-64)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": 676,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n\n        external\n\n        auth\n\n    {\n\n        address _dFPoolOld = dFPoolOld;\n\n        address _dfcol = dfcol;\n\n        address _dTokenController = dTokenController;\n\n        address _srcToken;\n\n        uint256 _amount;\n\n        uint256 _balance;\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n\n            // transfer pending wrapped token to new pool\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld);\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _tokens[i],\n\n                    address(this),\n\n                    _amount\n\n                );\n\n\n\n            // transfer all src token to new pool\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _amount = IERC20(_srcToken).balanceOf(_dFPoolOld);\n\n            _balance = IERC20(_srcToken).balanceOf(address(this));\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _srcToken,\n\n                    address(this),\n\n                    _amount\n\n                );\n\n            require(\n\n                add(_balance, _amount) ==\n\n                    IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Transfer src token to new pool verification failed\"\n\n            );\n\n\n\n            // mint collateral token into dToken\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dfcol);\n\n            if (_amount > 0)\n\n                IDToken(\n\n                    IDTokenController(_dTokenController).getDToken(_srcToken)\n\n                )\n\n                    .mint(\n\n                    address(this),\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)\n\n                );\n\n            require(\n\n                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n\n                    IERC20(_tokens[i]).balanceOf(address(this))\n\n                ) == IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Pending src token in new pool verification failed\"\n\n            );\n\n        }\n\n\n\n        // transfer claimable USDx to new pool\n\n        _amount = IERC20(_usdx).balanceOf(_dFPoolOld);\n\n        if (_amount > 0)\n\n            DFPoolV1(_dFPoolOld).transferOut(_usdx, address(this), _amount);\n",
                    "message": "DFPoolV2.migrateOldPool (DFPoolV2.sol#618-676) uses a dangerous strict equality:\n\t- require(bool,string)(add(_balance,_amount) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Transfer src token to new pool verification failed)\n\t- require(bool,string)(IDSWrappedToken(_tokens[i]).reverseByMultiple(IERC20(_tokens[i]).balanceOf(address(this))) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Pending src token in new pool verification failed)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": 676,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n\n        external\n\n        auth\n\n    {\n\n        address _dFPoolOld = dFPoolOld;\n\n        address _dfcol = dfcol;\n\n        address _dTokenController = dTokenController;\n\n        address _srcToken;\n\n        uint256 _amount;\n\n        uint256 _balance;\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n\n            // transfer pending wrapped token to new pool\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld);\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _tokens[i],\n\n                    address(this),\n\n                    _amount\n\n                );\n\n\n\n            // transfer all src token to new pool\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _amount = IERC20(_srcToken).balanceOf(_dFPoolOld);\n\n            _balance = IERC20(_srcToken).balanceOf(address(this));\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _srcToken,\n\n                    address(this),\n\n                    _amount\n\n                );\n\n            require(\n\n                add(_balance, _amount) ==\n\n                    IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Transfer src token to new pool verification failed\"\n\n            );\n\n\n\n            // mint collateral token into dToken\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dfcol);\n\n            if (_amount > 0)\n\n                IDToken(\n\n                    IDTokenController(_dTokenController).getDToken(_srcToken)\n\n                )\n\n                    .mint(\n\n                    address(this),\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)\n\n                );\n\n            require(\n\n                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n\n                    IERC20(_tokens[i]).balanceOf(address(this))\n\n                ) == IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Pending src token in new pool verification failed\"\n\n            );\n\n        }\n\n\n\n        // transfer claimable USDx to new pool\n\n        _amount = IERC20(_usdx).balanceOf(_dFPoolOld);\n\n        if (_amount > 0)\n\n            DFPoolV1(_dFPoolOld).transferOut(_usdx, address(this), _amount);\n",
                    "message": "DFPoolV2.migrateOldPool (DFPoolV2.sol#618-676) uses a dangerous strict equality:\n\t- require(bool,string)(add(_balance,_amount) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Transfer src token to new pool verification failed)\n\t- require(bool,string)(IDSWrappedToken(_tokens[i]).reverseByMultiple(IERC20(_tokens[i]).balanceOf(address(this))) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Pending src token in new pool verification failed)\nDFPoolV1.transferFromSender (DFPoolV2.sol#480-494) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(address(this)),_balance) == _amount)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": 676,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n\n        external\n\n        auth\n\n    {\n\n        address _dFPoolOld = dFPoolOld;\n\n        address _dfcol = dfcol;\n\n        address _dTokenController = dTokenController;\n\n        address _srcToken;\n\n        uint256 _amount;\n\n        uint256 _balance;\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n\n            // transfer pending wrapped token to new pool\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld);\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _tokens[i],\n\n                    address(this),\n\n                    _amount\n\n                );\n\n\n\n            // transfer all src token to new pool\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _amount = IERC20(_srcToken).balanceOf(_dFPoolOld);\n\n            _balance = IERC20(_srcToken).balanceOf(address(this));\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _srcToken,\n\n                    address(this),\n\n                    _amount\n\n                );\n\n            require(\n\n                add(_balance, _amount) ==\n\n                    IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Transfer src token to new pool verification failed\"\n\n            );\n\n\n\n            // mint collateral token into dToken\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dfcol);\n\n            if (_amount > 0)\n\n                IDToken(\n\n                    IDTokenController(_dTokenController).getDToken(_srcToken)\n\n                )\n\n                    .mint(\n\n                    address(this),\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)\n\n                );\n\n            require(\n\n                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n\n                    IERC20(_tokens[i]).balanceOf(address(this))\n\n                ) == IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Pending src token in new pool verification failed\"\n\n            );\n\n        }\n\n\n\n        // transfer claimable USDx to new pool\n\n        _amount = IERC20(_usdx).balanceOf(_dFPoolOld);\n\n        if (_amount > 0)\n\n            DFPoolV1(_dFPoolOld).transferOut(_usdx, address(this), _amount);\n",
                    "message": "DFPoolV2.migrateOldPool (DFPoolV2.sol#618-676) uses a dangerous strict equality:\n\t- require(bool,string)(add(_balance,_amount) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Transfer src token to new pool verification failed)\n\t- require(bool,string)(IDSWrappedToken(_tokens[i]).reverseByMultiple(IERC20(_tokens[i]).balanceOf(address(this))) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Pending src token in new pool verification failed)\nDFPoolV1.transferFromSender (DFPoolV2.sol#480-494) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(address(this)),_balance) == _amount)\nDFPoolV1.transferFromSenderToCol (DFPoolV2.sol#525-541) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(dfcol),_balance) == _amount)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": 676,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n\n        external\n\n        auth\n\n    {\n\n        address _dFPoolOld = dFPoolOld;\n\n        address _dfcol = dfcol;\n\n        address _dTokenController = dTokenController;\n\n        address _srcToken;\n\n        uint256 _amount;\n\n        uint256 _balance;\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n\n            // transfer pending wrapped token to new pool\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld);\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _tokens[i],\n\n                    address(this),\n\n                    _amount\n\n                );\n\n\n\n            // transfer all src token to new pool\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _amount = IERC20(_srcToken).balanceOf(_dFPoolOld);\n\n            _balance = IERC20(_srcToken).balanceOf(address(this));\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _srcToken,\n\n                    address(this),\n\n                    _amount\n\n                );\n\n            require(\n\n                add(_balance, _amount) ==\n\n                    IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Transfer src token to new pool verification failed\"\n\n            );\n\n\n\n            // mint collateral token into dToken\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dfcol);\n\n            if (_amount > 0)\n\n                IDToken(\n\n                    IDTokenController(_dTokenController).getDToken(_srcToken)\n\n                )\n\n                    .mint(\n\n                    address(this),\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)\n\n                );\n\n            require(\n\n                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n\n                    IERC20(_tokens[i]).balanceOf(address(this))\n\n                ) == IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Pending src token in new pool verification failed\"\n\n            );\n\n        }\n\n\n\n        // transfer claimable USDx to new pool\n\n        _amount = IERC20(_usdx).balanceOf(_dFPoolOld);\n\n        if (_amount > 0)\n\n            DFPoolV1(_dFPoolOld).transferOut(_usdx, address(this), _amount);\n",
                    "message": "DFPoolV2.migrateOldPool (DFPoolV2.sol#618-676) uses a dangerous strict equality:\n\t- require(bool,string)(add(_balance,_amount) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Transfer src token to new pool verification failed)\n\t- require(bool,string)(IDSWrappedToken(_tokens[i]).reverseByMultiple(IERC20(_tokens[i]).balanceOf(address(this))) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Pending src token in new pool verification failed)\nDFPoolV1.transferFromSender (DFPoolV2.sol#480-494) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(address(this)),_balance) == _amount)\nDFPoolV1.transferFromSenderToCol (DFPoolV2.sol#525-541) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(dfcol),_balance) == _amount)\nDFPoolV1.transferOut (DFPoolV2.sol#496-505) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(_to),_balance) == _amount)\n"
                },
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": 676,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n\n        external\n\n        auth\n\n    {\n\n        address _dFPoolOld = dFPoolOld;\n\n        address _dfcol = dfcol;\n\n        address _dTokenController = dTokenController;\n\n        address _srcToken;\n\n        uint256 _amount;\n\n        uint256 _balance;\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n\n            // transfer pending wrapped token to new pool\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld);\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _tokens[i],\n\n                    address(this),\n\n                    _amount\n\n                );\n\n\n\n            // transfer all src token to new pool\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _amount = IERC20(_srcToken).balanceOf(_dFPoolOld);\n\n            _balance = IERC20(_srcToken).balanceOf(address(this));\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _srcToken,\n\n                    address(this),\n\n                    _amount\n\n                );\n\n            require(\n\n                add(_balance, _amount) ==\n\n                    IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Transfer src token to new pool verification failed\"\n\n            );\n\n\n\n            // mint collateral token into dToken\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dfcol);\n\n            if (_amount > 0)\n\n                IDToken(\n\n                    IDTokenController(_dTokenController).getDToken(_srcToken)\n\n                )\n\n                    .mint(\n\n                    address(this),\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)\n\n                );\n\n            require(\n\n                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n\n                    IERC20(_tokens[i]).balanceOf(address(this))\n\n                ) == IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Pending src token in new pool verification failed\"\n\n            );\n\n        }\n\n\n\n        // transfer claimable USDx to new pool\n\n        _amount = IERC20(_usdx).balanceOf(_dFPoolOld);\n\n        if (_amount > 0)\n\n            DFPoolV1(_dFPoolOld).transferOut(_usdx, address(this), _amount);\n",
                    "message": "DFPoolV2.migrateOldPool (DFPoolV2.sol#618-676) uses a dangerous strict equality:\n\t- require(bool,string)(add(_balance,_amount) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Transfer src token to new pool verification failed)\n\t- require(bool,string)(IDSWrappedToken(_tokens[i]).reverseByMultiple(IERC20(_tokens[i]).balanceOf(address(this))) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Pending src token in new pool verification failed)\nDFPoolV1.transferFromSender (DFPoolV2.sol#480-494) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(address(this)),_balance) == _amount)\nDFPoolV1.transferFromSenderToCol (DFPoolV2.sol#525-541) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(dfcol),_balance) == _amount)\nDFPoolV1.transferOut (DFPoolV2.sol#496-505) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(_to),_balance) == _amount)\nDFPoolV1.transferToCol (DFPoolV2.sol#507-523) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20(_tokenID).balanceOf(dfcol),_balance) == _amount)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": 676,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n\n        external\n\n        auth\n\n    {\n\n        address _dFPoolOld = dFPoolOld;\n\n        address _dfcol = dfcol;\n\n        address _dTokenController = dTokenController;\n\n        address _srcToken;\n\n        uint256 _amount;\n\n        uint256 _balance;\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n\n            // transfer pending wrapped token to new pool\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld);\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _tokens[i],\n\n                    address(this),\n\n                    _amount\n\n                );\n\n\n\n            // transfer all src token to new pool\n\n            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n\n            _amount = IERC20(_srcToken).balanceOf(_dFPoolOld);\n\n            _balance = IERC20(_srcToken).balanceOf(address(this));\n\n            if (_amount > 0)\n\n                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _srcToken,\n\n                    address(this),\n\n                    _amount\n\n                );\n\n            require(\n\n                add(_balance, _amount) ==\n\n                    IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Transfer src token to new pool verification failed\"\n\n            );\n\n\n\n            // mint collateral token into dToken\n\n            _amount = IERC20(_tokens[i]).balanceOf(_dfcol);\n\n            if (_amount > 0)\n\n                IDToken(\n\n                    IDTokenController(_dTokenController).getDToken(_srcToken)\n\n                )\n\n                    .mint(\n\n                    address(this),\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)\n\n                );\n\n            require(\n\n                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n\n                    IERC20(_tokens[i]).balanceOf(address(this))\n\n                ) == IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Pending src token in new pool verification failed\"\n\n            );\n\n        }\n\n\n\n        // transfer claimable USDx to new pool\n\n        _amount = IERC20(_usdx).balanceOf(_dFPoolOld);\n\n        if (_amount > 0)\n\n            DFPoolV1(_dFPoolOld).transferOut(_usdx, address(this), _amount);\n",
                    "message": "DFPoolV2.migrateOldPool (DFPoolV2.sol#618-676) does not use the value returned by external calls:\n\t-DFPoolV1(_dFPoolOld).transferOut(_tokens[i],address(this),_amount) (DFPoolV2.sol#632-636)\n\t-DFPoolV1(_dFPoolOld).transferOut(_srcToken,address(this),_amount) (DFPoolV2.sol#643-647)\n\t-DFPoolV1(_dFPoolOld).transferOut(_usdx,address(this),_amount) (DFPoolV2.sol#675)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 630,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld);\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- _amount = IERC20(_tokens[i]).balanceOf(_dFPoolOld) (DFPoolV2.sol#630)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": 636,
                    "vulnerability_code": "                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _tokens[i],\n\n                    address(this),\n\n                    _amount\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- DFPoolV1(_dFPoolOld).transferOut(_tokens[i],address(this),_amount) (DFPoolV2.sol#632-636)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 639,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20();\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- _srcToken = IDSWrappedToken(_tokens[i]).getSrcERC20() (DFPoolV2.sol#639)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 640,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount = IERC20(_srcToken).balanceOf(_dFPoolOld);\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- _amount = IERC20(_srcToken).balanceOf(_dFPoolOld) (DFPoolV2.sol#640)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 641,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _balance = IERC20(_srcToken).balanceOf(address(this));\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- _balance = IERC20(_srcToken).balanceOf(address(this)) (DFPoolV2.sol#641)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 643,
                    "vulnerability_to_line": 647,
                    "vulnerability_code": "                DFPoolV1(_dFPoolOld).transferOut(\n\n                    _srcToken,\n\n                    address(this),\n\n                    _amount\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- DFPoolV1(_dFPoolOld).transferOut(_srcToken,address(this),_amount) (DFPoolV2.sol#643-647)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 648,
                    "vulnerability_to_line": 652,
                    "vulnerability_code": "            require(\n\n                add(_balance, _amount) ==\n\n                    IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Transfer src token to new pool verification failed\"\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- require(bool,string)(add(_balance,_amount) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Transfer src token to new pool verification failed) (DFPoolV2.sol#648-652)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 655,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _amount = IERC20(_tokens[i]).balanceOf(_dfcol);\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- _amount = IERC20(_tokens[i]).balanceOf(_dfcol) (DFPoolV2.sol#655)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 657,
                    "vulnerability_to_line": 663,
                    "vulnerability_code": "                IDToken(\n\n                    IDTokenController(_dTokenController).getDToken(_srcToken)\n\n                )\n\n                    .mint(\n\n                    address(this),\n\n                    IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- IDToken(IDTokenController(_dTokenController).getDToken(_srcToken)).mint(address(this),IDSWrappedToken(_tokens[i]).reverseByMultiple(_amount)) (DFPoolV2.sol#657-663)\n"
                },
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 664,
                    "vulnerability_to_line": 669,
                    "vulnerability_code": "            require(\n\n                IDSWrappedToken(_tokens[i]).reverseByMultiple(\n\n                    IERC20(_tokens[i]).balanceOf(address(this))\n\n                ) == IERC20(_srcToken).balanceOf(address(this)),\n\n                \"migrateOldPool: Pending src token in new pool verification failed\"\n",
                    "message": "DFPoolV2.migrateOldPool has external calls inside a loop:\n\t- require(bool,string)(IDSWrappedToken(_tokens[i]).reverseByMultiple(IERC20(_tokens[i]).balanceOf(address(this))) == IERC20(_srcToken).balanceOf(address(this)),migrateOldPool: Pending src token in new pool verification failed) (DFPoolV2.sol#664-669)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": 117,
                    "vulnerability_code": "    function doTransferOut(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transfer(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferOut uses assembly (DFPoolV2.sol#93-117)\n\t- DFPoolV2.sol#103-115\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": 144,
                    "vulnerability_code": "    function doTransferFrom(\n\n        address _token,\n\n        address _from,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.transferFrom(_from, _to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doTransferFrom uses assembly (DFPoolV2.sol#119-144)\n\t- DFPoolV2.sol#130-142\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "    function doApprove(\n\n        address _token,\n\n        address _to,\n\n        uint256 _amount\n\n    ) internal returns (bool) {\n\n        IERC20 token = IERC20(_token);\n\n        bool result;\n\n\n\n        token.approve(_to, _amount);\n\n\n\n        assembly {\n\n            switch returndatasize()\n\n                case 0 {\n\n                    result := not(0)\n\n                }\n\n                case 32 {\n\n                    returndatacopy(0, 0, 32)\n\n                    result := mload(0)\n\n                }\n\n                default {\n\n                    revert(0, 0)\n\n                }\n\n        }\n\n        return result;\n",
                    "message": "ERC20SafeTransfer.doApprove uses assembly (DFPoolV2.sol#146-170)\n\t- DFPoolV2.sol#156-168\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 268,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFPoolV2.sol#268-284) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": 307,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFPoolV2.sol#305-307) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": 330,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFPoolV2.sol#327-330) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": 335,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFPoolV2.sol#332-335) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 337,
                    "vulnerability_to_line": 342,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFPoolV2.sol#337-342) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 351,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFPoolV2.sol#345-351) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFPoolV2.sol#441) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFPoolV2.sol#442) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFPoolV2.sol#443) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFPoolV2.sol#444) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFPoolV2.sol#445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFPoolV2.sol#446) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 454,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.mint (DFPoolV2.sol#454) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.burn (DFPoolV2.sol#455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 456,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.wrap (DFPoolV2.sol#456) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.unwrap (DFPoolV2.sol#457) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 458,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.changeByMultiple (DFPoolV2.sol#458) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 459,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.reverseByMultiple (DFPoolV2.sol#459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 460,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
                    "message": "IDSWrappedToken.getSrcERC20 (DFPoolV2.sol#460) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "    function transferFromSenderToCol(\n\n        address _tokenID,\n\n        address _from,\n\n        uint256 _amount\n\n    ) public auth returns (bool) {\n\n        require(\n\n            dfcol != address(0),\n\n            \"TransferFromSenderToCol: collateral address empty.\"\n\n        );\n\n        uint256 _balance = IERC20(_tokenID).balanceOf(dfcol);\n\n        require(\n\n            doTransferFrom(_tokenID, _from, dfcol, _amount),\n\n            \"transferFromSenderToCol: failed\"\n\n        );\n\n        assert(sub(IERC20(_tokenID).balanceOf(dfcol), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFPoolV1.transferFromSenderToCol (DFPoolV2.sol#525-541) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": 551,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress)\n\n        public\n\n        auth\n\n    {\n\n        require(\n\n            doApprove(_tokenIdx, _engineAddress, uint256(-1)),\n\n            \"approveToEngine: Approve failed!\"\n\n        );\n",
                    "message": "DFPoolV1.approveToEngine (DFPoolV2.sol#543-551) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 581,
                    "vulnerability_to_line": 592,
                    "vulnerability_code": "    function transferFromSenderOneClick(\n\n        address _tokenID,\n\n        address _from,\n\n        uint256 _amount\n\n    ) public returns (bool) {\n\n        super.transferFromSender(_tokenID, _from, _amount);\n\n        IDToken(IDTokenController(dTokenController).getDToken(_tokenID)).mint(\n\n            address(this),\n\n            _amount\n\n        );\n\n        return true;\n",
                    "message": "DFPoolV2.transferFromSenderOneClick (DFPoolV2.sol#581-592) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 594,
                    "vulnerability_to_line": 603,
                    "vulnerability_code": "    function transferOutSrc(\n\n        address _tokenID,\n\n        address _to,\n\n        uint256 _amount\n\n    ) public returns (bool) {\n\n        IDToken(IDTokenController(dTokenController).getDToken(_tokenID))\n\n            .redeemUnderlying(address(this), _amount);\n\n        transferOut(_tokenID, _to, _amount);\n\n        return true;\n",
                    "message": "DFPoolV2.transferOutSrc (DFPoolV2.sol#594-603) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": 699,
                    "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256) {\n\n\n\n        address _token = IDSWrappedToken(_xToken).getSrcERC20();\n\n        uint256 _xBalance = IDSWrappedToken(_xToken).changeByMultiple(getUnderlying(_token)); \n\n        uint256 _xPrincipal = IERC20(_xToken).balanceOf(dfcol);\n\n        return (_token, _xBalance > _xPrincipal ? sub(_xBalance, _xPrincipal) : 0);\n",
                    "message": "DFPoolV2.getInterestByXToken (DFPoolV2.sol#693-699) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferOut (DFPoolV2.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferOut (DFPoolV2.sol#95) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferOut (DFPoolV2.sol#96) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doTransferFrom (DFPoolV2.sol#120) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of ERC20SafeTransfer.doTransferFrom (DFPoolV2.sol#121) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doTransferFrom (DFPoolV2.sol#122) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doTransferFrom (DFPoolV2.sol#123) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _token,\n",
                    "message": "Parameter '_token' of ERC20SafeTransfer.doApprove (DFPoolV2.sol#147) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of ERC20SafeTransfer.doApprove (DFPoolV2.sol#148) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of ERC20SafeTransfer.doApprove (DFPoolV2.sol#149) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 476,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _dfcol) public {\n",
                    "message": "Parameter '_dfcol' of DFPoolV1. (DFPoolV2.sol#476) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenID,\n",
                    "message": "Parameter '_tokenID' of DFPoolV1.transferFromSender (DFPoolV2.sol#481) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of DFPoolV1.transferFromSender (DFPoolV2.sol#482) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of DFPoolV1.transferFromSender (DFPoolV2.sol#483) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenID,\n",
                    "message": "Parameter '_tokenID' of DFPoolV1.transferOut (DFPoolV2.sol#497) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of DFPoolV1.transferOut (DFPoolV2.sol#498) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of DFPoolV1.transferOut (DFPoolV2.sol#499) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint256 _amount)\n",
                    "message": "Parameter '_tokenID' of DFPoolV1.transferToCol (DFPoolV2.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint256 _amount)\n",
                    "message": "Parameter '_amount' of DFPoolV1.transferToCol (DFPoolV2.sol#507) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 526,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenID,\n",
                    "message": "Parameter '_tokenID' of DFPoolV1.transferFromSenderToCol (DFPoolV2.sol#526) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of DFPoolV1.transferFromSenderToCol (DFPoolV2.sol#527) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 528,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of DFPoolV1.transferFromSenderToCol (DFPoolV2.sol#528) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress)\n",
                    "message": "Parameter '_tokenIdx' of DFPoolV1.approveToEngine (DFPoolV2.sol#543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress)\n",
                    "message": "Parameter '_engineAddress' of DFPoolV1.approveToEngine (DFPoolV2.sol#543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint256 _amount)\n",
                    "message": "Parameter '_tokenID' of DFPoolV2.transferToCol (DFPoolV2.sol#605) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint256 _amount)\n",
                    "message": "Parameter '_amount' of DFPoolV2.transferToCol (DFPoolV2.sol#605) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfcol,\n",
                    "message": "Parameter '_dfcol' of DFPoolV2. (DFPoolV2.sol#560) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dFPoolOld,\n",
                    "message": "Parameter '_dFPoolOld' of DFPoolV2. (DFPoolV2.sol#561) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 562,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dTokenController\n",
                    "message": "Parameter '_dTokenController' of DFPoolV2. (DFPoolV2.sol#562) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 569,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dfcol,\n",
                    "message": "Parameter '_dfcol' of DFPoolV2.initialize (DFPoolV2.sol#569) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 570,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dFPoolOld,\n",
                    "message": "Parameter '_dFPoolOld' of DFPoolV2.initialize (DFPoolV2.sol#570) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _dTokenController\n",
                    "message": "Parameter '_dTokenController' of DFPoolV2.initialize (DFPoolV2.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 582,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenID,\n",
                    "message": "Parameter '_tokenID' of DFPoolV2.transferFromSenderOneClick (DFPoolV2.sol#582) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _from,\n",
                    "message": "Parameter '_from' of DFPoolV2.transferFromSenderOneClick (DFPoolV2.sol#583) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 584,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of DFPoolV2.transferFromSenderOneClick (DFPoolV2.sol#584) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 595,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _tokenID,\n",
                    "message": "Parameter '_tokenID' of DFPoolV2.transferOutSrc (DFPoolV2.sol#595) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address _to,\n",
                    "message": "Parameter '_to' of DFPoolV2.transferOutSrc (DFPoolV2.sol#596) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 597,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 _amount\n",
                    "message": "Parameter '_amount' of DFPoolV2.transferOutSrc (DFPoolV2.sol#597) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n",
                    "message": "Parameter '_tokens' of DFPoolV2.migrateOldPool (DFPoolV2.sol#618) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 618,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function migrateOldPool(address[] calldata _tokens, address _usdx)\n",
                    "message": "Parameter '_usdx' of DFPoolV2.migrateOldPool (DFPoolV2.sol#618) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _tokenID) external auth {\n",
                    "message": "Parameter '_tokenID' of DFPoolV2.approve (DFPoolV2.sol#678) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256) {\n",
                    "message": "Parameter '_xToken' of DFPoolV2.getInterestByXToken (DFPoolV2.sol#693) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 701,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUnderlying(address _underlying) public returns (uint256) {\n",
                    "message": "Parameter '_underlying' of DFPoolV2.getUnderlying (DFPoolV2.sol#701) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 554,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract DFPoolV2 is ERC20SafeTransfer, DFPoolV1(address(0)) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 678,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _tokenID) external auth {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 628,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint256 i = 0; i < _tokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 190,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 396,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool private initialized;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 474,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address dfcol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address dFPoolOld;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 557,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address dTokenController;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/DFFunds.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 165,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_address != address(0), \"ValidAddress: address invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 122,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "incorrect-equality",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFFunds.transferOut (DFFunds.sol#247-257) uses a dangerous strict equality:\n\t- assert(bool)(sub(IERC20Token(_tokenID).balanceOf(_to),_balance) == _amount)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFFunds.transferOut (DFFunds.sol#247-257) does not use the value returned by external calls:\n\t-IERC20Token(_tokenID).transfer(_to,_amount) (DFFunds.sol#254)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFFunds.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFFunds.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFFunds.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFFunds.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFFunds.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFFunds.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFFunds.sol#112-128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 149,
                    "vulnerability_to_line": 151,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFFunds.sol#149-151) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFFunds.sol#171-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFFunds.sol#176-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 181,
                    "vulnerability_to_line": 186,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFFunds.sol#181-186) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 195,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFFunds.sol#189-195) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": 257,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n\n        public\n\n        validAddress(_to)\n\n        auth\n\n        returns (bool)\n\n    {\n\n        uint _balance = IERC20Token(_tokenID).balanceOf(_to);\n\n        IERC20Token(_tokenID).transfer(_to, _amount);\n\n        assert(sub(IERC20Token(_tokenID).balanceOf(_to), _balance) == _amount);\n\n        return true;\n",
                    "message": "DFFunds.transferOut (DFFunds.sol#247-257) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_tokenID' of DFFunds.transferOut (DFFunds.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_to' of DFFunds.transferOut (DFFunds.sol#247) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount)\n",
                    "message": "Parameter '_amount' of DFFunds.transferOut (DFFunds.sol#247) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/DFStore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] memory _wrappedTokens, uint[] memory _weights) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _setSection(_wrappedTokens, _weights);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            secList[_mintPosition].cw[i] = _weight[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 403,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            secList[_mintPosition].colIDs[i] = _wrappedTokens[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 404,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            mintingTokens[_wrappedTokens[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            wrappedTokens[_srcTokens[i]] = _wrappedTokens[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 407,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (mintedTokens[_wrappedTokens[i]])\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 410,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            mintedTokenList.push(_wrappedTokens[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            mintedTokens[_wrappedTokens[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 441,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            secListBackup[_backupIdx].cw[i] = _weight[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            secListBackup[_backupIdx].colIDs[i] = _wrappedTokens[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            mintedTokens[_wrappedTokens[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 121,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 376,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_wrappedTokens.length == _weight.length, \"_SetSection: data not allow.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 383,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_weight[i] != 0, \"_SetSection: invalid weight\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"_SetSection: 0 address not allow.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_srcTokens[i] != address(0), \"_SetSection: invalid address\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(mul(div(mul(_weight[i], factor), sum), sum) == mul(_weight[i], factor), \"_SetSection: invalid weight\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_wrappedTokens.length == _weight.length, \"SetBackupSection: data not allow.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_position < mintPosition, \"SetBackupSection: update mint section first.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"SetBackupSection: token contract address invalid\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_weight[i] > 0, \"SetBackupSection: weight must greater than 0\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            secList[burnPosition].minted == secList[burnPosition].burned,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"BurnSectionMoveon: burned not meet minted.\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddTotalMinted: minted amount is zero.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddTotalBurned: minted amount is zero.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 200,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 203,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _cruColIDs.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 309,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 326,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 384,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"_SetSection: 0 address not allow.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_wrappedTokens.length == _weight.length, \"SetBackupSection: data not allow.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 424,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_position < mintPosition, \"SetBackupSection: update mint section first.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 438,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_wrappedTokens[i] != address(0), \"SetBackupSection: token contract address invalid\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(_weight[i] > 0, \"SetBackupSection: weight must greater than 0\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            secList[burnPosition].minted == secList[burnPosition].burned,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"BurnSectionMoveon: burned not meet minted.\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 451,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 498,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddTotalMinted: minted amount is zero.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount > 0, \"AddTotalBurned: minted amount is zero.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "DOCKER_SEGV"
            ],
            "vulnerability_findings": [
                {
                    "name": "calls-loop",
                    "vulnerability_from_line": 385,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _srcTokens[i] = IDSWrappedToken(_wrappedTokens[i]).getSrcERC20();\n",
                    "message": "DFStore._setSection has external calls inside a loop:\n\t- _srcTokens[i] = IDSWrappedToken(_wrappedTokens[i]).getSrcERC20() (DFStore.sol#385)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DFStore.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DFStore.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DFStore.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DFStore.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DFStore.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": 205,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DFStore.sol#189-205) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint);\n",
                    "message": "IERC20Token.balanceOf (DFStore.sol#216) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 217,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function allowance(address _owner, address _spender) public view returns (uint);\n",
                    "message": "IERC20Token.allowance (DFStore.sol#217) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 218,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transfer (DFStore.sol#218) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 219,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.transferFrom (DFStore.sol#219) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address _spender, uint _value) public returns (bool success);\n",
                    "message": "IERC20Token.approve (DFStore.sol#220) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function totalSupply() public view returns (uint);\n",
                    "message": "IERC20Token.totalSupply (DFStore.sol#221) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 229,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.mint (DFStore.sol#229) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burn(address _account, uint _value) public;\n",
                    "message": "IDSWrappedToken.burn (DFStore.sol#230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 231,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function wrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.wrap (DFStore.sol#231) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function unwrap(address _dst, uint _amount) public returns (uint);\n",
                    "message": "IDSWrappedToken.unwrap (DFStore.sol#232) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeByMultiple(uint _amount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.changeByMultiple (DFStore.sol#233) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function reverseByMultiple(uint _xAmount) public view returns (uint);\n",
                    "message": "IDSWrappedToken.reverseByMultiple (DFStore.sol#234) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSrcERC20() public view returns (address);\n",
                    "message": "IDSWrappedToken.getSrcERC20 (DFStore.sol#235) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": 301,
                    "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint) {\n\n        return secList[_position].minted;\n",
                    "message": "DFStore.getSectionMinted (DFStore.sol#299-301) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function addSectionMinted(uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n\n        secList[mintPosition].minted = add(secList[mintPosition].minted, _amount);\n",
                    "message": "DFStore.addSectionMinted (DFStore.sol#303-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": 311,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionMinted: amount not correct.\");\n\n        secList[_position].minted = add(secList[_position].minted, _amount);\n",
                    "message": "DFStore.addSectionMinted (DFStore.sol#308-311) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": 315,
                    "vulnerability_code": "    function setSectionMinted(uint _amount) public auth {\n\n        secList[mintPosition].minted = _amount;\n",
                    "message": "DFStore.setSectionMinted (DFStore.sol#313-315) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public auth {\n\n        secList[_position].minted = _amount;\n",
                    "message": "DFStore.setSectionMinted (DFStore.sol#317-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint) {\n\n        return secList[_position].burned;\n",
                    "message": "DFStore.getSectionBurned (DFStore.sol#321-323) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": 328,
                    "vulnerability_code": "    function addSectionBurned(uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n\n        secList[burnPosition].burned = add(secList[burnPosition].burned, _amount);\n",
                    "message": "DFStore.addSectionBurned (DFStore.sol#325-328) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 333,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public auth {\n\n        require(_amount > 0, \"AddSectionBurned: amount not correct.\");\n\n        secList[_position].burned = add(secList[_position].burned, _amount);\n",
                    "message": "DFStore.addSectionBurned (DFStore.sol#330-333) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": 337,
                    "vulnerability_code": "    function setSectionBurned(uint _amount) public auth {\n\n        secList[burnPosition].burned = _amount;\n",
                    "message": "DFStore.setSectionBurned (DFStore.sol#335-337) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 341,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public auth {\n\n        secList[_position].burned = _amount;\n",
                    "message": "DFStore.setSectionBurned (DFStore.sol#339-341) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": 349,
                    "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory) {\n\n        return secList[_position].cw;\n",
                    "message": "DFStore.getSectionWeight (DFStore.sol#347-349) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": 360,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory) {\n\n\n\n        return (\n\n            secList[_position].minted,\n\n            secList[_position].burned,\n\n            secList[_position].backupIdx,\n\n            secList[_position].colIDs,\n\n            secList[_position].cw\n\n            );\n",
                    "message": "DFStore.getSectionData (DFStore.sol#351-360) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": 365,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory) {\n\n        uint _backupIdx = getBackupSectionIndex(_position);\n\n        return (secListBackup[_backupIdx].backupIdx, secListBackup[_backupIdx].colIDs, secListBackup[_backupIdx].cw);\n",
                    "message": "DFStore.getBackupSectionData (DFStore.sol#362-365) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public auth {\n\n        secList[_position].backupIdx = _backupIdx;\n",
                    "message": "DFStore.setBackupSectionIndex (DFStore.sol#371-373) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": 420,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n\n        _setSection(_wrappedTokens, _weight);\n",
                    "message": "DFStore.setSection (DFStore.sol#418-420) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 445,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n\n        require(_wrappedTokens.length == _weight.length, \"SetBackupSection: data not allow.\");\n\n        require(_position < mintPosition, \"SetBackupSection: update mint section first.\");\n\n\n\n        uint _backupIdx = secList[_position].backupIdx;\n\n\n\n        if (_backupIdx == 0){\n\n\n\n            _backupIdx = backupSeed;\n\n            secList[_position].backupIdx = _backupIdx;\n\n            backupSeed = add(_backupIdx, 1);\n\n        }\n\n\n\n        secListBackup[_backupIdx] = Section(0, 0, _position, new address[](_wrappedTokens.length), new uint[](_weight.length));\n\n\n\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\n\n            require(_wrappedTokens[i] != address(0), \"SetBackupSection: token contract address invalid\");\n\n            require(_weight[i] > 0, \"SetBackupSection: weight must greater than 0\");\n\n\n\n            secListBackup[_backupIdx].cw[i] = _weight[i];\n\n            secListBackup[_backupIdx].colIDs[i] = _wrappedTokens[i];\n\n            mintedTokens[_wrappedTokens[i]] = true;\n\n        }\n",
                    "message": "DFStore.setBackupSection (DFStore.sol#422-445) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 447,
                    "vulnerability_to_line": 455,
                    "vulnerability_code": "    function burnSectionMoveon() public auth {\n\n        require(\n\n            secList[burnPosition].minted == secList[burnPosition].burned,\n\n            \"BurnSectionMoveon: burned not meet minted.\"\n\n            );\n\n\n\n        burnPosition = add(burnPosition, 1);\n\n        assert(burnPosition <= mintPosition);\n",
                    "message": "DFStore.burnSectionMoveon (DFStore.sol#447-455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool) {\n\n        return mintingTokens[_token];\n",
                    "message": "DFStore.getMintingToken (DFStore.sol#457-459) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 463,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public auth {\n\n        mintingTokens[_token] = _flag;\n",
                    "message": "DFStore.setMintingToken (DFStore.sol#461-463) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": 467,
                    "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool) {\n\n        return mintedTokens[_token];\n",
                    "message": "DFStore.getMintedToken (DFStore.sol#465-467) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": 471,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public auth {\n\n        mintedTokens[_token] = _flag;\n",
                    "message": "DFStore.setMintedToken (DFStore.sol#469-471) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": 475,
                    "vulnerability_code": "    function getBackupToken(address _token) public view returns (address) {\n\n        return tokenBackup[_token];\n",
                    "message": "DFStore.getBackupToken (DFStore.sol#473-475) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": 479,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public auth {\n\n        tokenBackup[_token] = _backupToken;\n",
                    "message": "DFStore.setBackupToken (DFStore.sol#477-479) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 481,
                    "vulnerability_to_line": 483,
                    "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory) {\n\n        return mintedTokenList;\n",
                    "message": "DFStore.getMintedTokenList (DFStore.sol#481-483) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 485,
                    "vulnerability_to_line": 487,
                    "vulnerability_code": "    function getMintPosition() public view returns (uint) {\n\n        return mintPosition;\n",
                    "message": "DFStore.getMintPosition (DFStore.sol#485-487) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 489,
                    "vulnerability_to_line": 491,
                    "vulnerability_code": "    function getBurnPosition() public view returns (uint) {\n\n        return burnPosition;\n",
                    "message": "DFStore.getBurnPosition (DFStore.sol#489-491) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": 495,
                    "vulnerability_code": "    function getTotalMinted() public view returns (uint) {\n\n        return totalMinted;\n",
                    "message": "DFStore.getTotalMinted (DFStore.sol#493-495) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": 500,
                    "vulnerability_code": "    function addTotalMinted(uint _amount) public auth {\n\n        require(_amount > 0, \"AddTotalMinted: minted amount is zero.\");\n\n        totalMinted = add(totalMinted, _amount);\n",
                    "message": "DFStore.addTotalMinted (DFStore.sol#497-500) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": 504,
                    "vulnerability_code": "    function setTotalMinted(uint _amount) public auth {\n\n        totalMinted = _amount;\n",
                    "message": "DFStore.setTotalMinted (DFStore.sol#502-504) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 506,
                    "vulnerability_to_line": 508,
                    "vulnerability_code": "    function getTotalBurned() public view returns (uint) {\n\n        return totalBurned;\n",
                    "message": "DFStore.getTotalBurned (DFStore.sol#506-508) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": 513,
                    "vulnerability_code": "    function addTotalBurned(uint _amount) public auth {\n\n        require(_amount > 0, \"AddTotalBurned: minted amount is zero.\");\n\n        totalBurned = add(totalBurned, _amount);\n",
                    "message": "DFStore.addTotalBurned (DFStore.sol#510-513) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": 517,
                    "vulnerability_code": "    function setTotalBurned(uint _amount) public auth {\n\n        totalBurned = _amount;\n",
                    "message": "DFStore.setTotalBurned (DFStore.sol#515-517) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": 521,
                    "vulnerability_code": "    function getMinBurnAmount() public view returns (uint) {\n\n        return minimalBurnAmount;\n",
                    "message": "DFStore.getMinBurnAmount (DFStore.sol#519-521) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "    function setMinBurnAmount(uint _amount) public auth {\n\n        _setMinBurnAmount(_amount);\n",
                    "message": "DFStore.setMinBurnAmount (DFStore.sol#523-525) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": 533,
                    "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint) {\n\n        return poolBalance[_tokenID];\n",
                    "message": "DFStore.getTokenBalance (DFStore.sol#531-533) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": 537,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public auth {\n\n        poolBalance[_tokenID] = _amount;\n",
                    "message": "DFStore.setTokenBalance (DFStore.sol#535-537) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": 541,
                    "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint) {\n\n        return resUSDXBalance[_tokenID];\n",
                    "message": "DFStore.getResUSDXBalance (DFStore.sol#539-541) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": 545,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public auth {\n\n        resUSDXBalance[_tokenID] = _amount;\n",
                    "message": "DFStore.setResUSDXBalance (DFStore.sol#543-545) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": 549,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint) {\n\n        return depositorsBalance[_depositor][_tokenID];\n",
                    "message": "DFStore.getDepositorBalance (DFStore.sol#547-549) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": 553,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n\n        depositorsBalance[_depositor][_tokenID] = _amount;\n",
                    "message": "DFStore.setDepositorBalance (DFStore.sol#551-553) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 555,
                    "vulnerability_to_line": 557,
                    "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public auth {\n\n        FeeRate[ct] = rate;\n",
                    "message": "DFStore.setFeeRate (DFStore.sol#555-557) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 559,
                    "vulnerability_to_line": 561,
                    "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint) {\n\n        return FeeRate[ct];\n",
                    "message": "DFStore.getFeeRate (DFStore.sol#559-561) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 565,
                    "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public auth {\n\n        FeeToken[tt] = _tokenID;\n",
                    "message": "DFStore.setTypeToken (DFStore.sol#563-565) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 567,
                    "vulnerability_to_line": 569,
                    "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address) {\n\n        return FeeToken[tt];\n",
                    "message": "DFStore.getTypeToken (DFStore.sol#567-569) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": 573,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public auth {\n\n        TokenMedian[_tokenID] = _median;\n",
                    "message": "DFStore.setTokenMedian (DFStore.sol#571-573) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": 577,
                    "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address) {\n\n        return TokenMedian[_tokenID];\n",
                    "message": "DFStore.getTokenMedian (DFStore.sol#575-577) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": 581,
                    "vulnerability_code": "    function setTotalCol(uint _amount) public auth {\n\n        totalCol = _amount;\n",
                    "message": "DFStore.setTotalCol (DFStore.sol#579-581) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 583,
                    "vulnerability_to_line": 585,
                    "vulnerability_code": "    function getTotalCol() public view returns (uint) {\n\n        return totalCol;\n",
                    "message": "DFStore.getTotalCol (DFStore.sol#583-585) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": 589,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public auth {\n\n        wrappedTokens[_srcToken] = _wrappedToken;\n",
                    "message": "DFStore.setWrappedToken (DFStore.sol#587-589) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": 593,
                    "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address) {\n\n        return  wrappedTokens[_srcToken];\n",
                    "message": "DFStore.getWrappedToken (DFStore.sol#591-593) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] memory _wrappedTokens, uint[] memory _weights) public {\n",
                    "message": "Parameter '_wrappedTokens' of DFStore. (DFStore.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 295,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address[] memory _wrappedTokens, uint[] memory _weights) public {\n",
                    "message": "Parameter '_weights' of DFStore. (DFStore.sol#295) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 299,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint) {\n",
                    "message": "Parameter '_position' of DFStore.getSectionMinted (DFStore.sol#299) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.addSectionMinted (DFStore.sol#303) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_position' of DFStore.addSectionMinted (DFStore.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.addSectionMinted (DFStore.sol#308) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setSectionMinted (DFStore.sol#313) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_position' of DFStore.setSectionMinted (DFStore.sol#317) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setSectionMinted (DFStore.sol#317) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint) {\n",
                    "message": "Parameter '_position' of DFStore.getSectionBurned (DFStore.sol#321) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.addSectionBurned (DFStore.sol#325) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_position' of DFStore.addSectionBurned (DFStore.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.addSectionBurned (DFStore.sol#330) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 335,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setSectionBurned (DFStore.sol#335) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_position' of DFStore.setSectionBurned (DFStore.sol#339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setSectionBurned (DFStore.sol#339) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory) {\n",
                    "message": "Parameter '_position' of DFStore.getSectionToken (DFStore.sol#343) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 347,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory) {\n",
                    "message": "Parameter '_position' of DFStore.getSectionWeight (DFStore.sol#347) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory) {\n",
                    "message": "Parameter '_position' of DFStore.getSectionData (DFStore.sol#351) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory) {\n",
                    "message": "Parameter '_position' of DFStore.getBackupSectionData (DFStore.sol#362) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint) {\n",
                    "message": "Parameter '_position' of DFStore.getBackupSectionIndex (DFStore.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public auth {\n",
                    "message": "Parameter '_position' of DFStore.setBackupSectionIndex (DFStore.sol#371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public auth {\n",
                    "message": "Parameter '_backupIdx' of DFStore.setBackupSectionIndex (DFStore.sol#371) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": 416,
                    "vulnerability_code": "    function _setSection(address[] memory _wrappedTokens, uint[] memory _weight) internal {\n\n        require(_wrappedTokens.length == _weight.length, \"_SetSection: data not allow.\");\n\n\n\n        uint sum;\n\n        uint factor = 10 ** 10;\n\n        address[] memory _srcTokens = new address[](_weight.length);\n\n\n\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\n\n            require(_weight[i] != 0, \"_SetSection: invalid weight\");\n\n            require(_wrappedTokens[i] != address(0), \"_SetSection: 0 address not allow.\");\n\n            _srcTokens[i] = IDSWrappedToken(_wrappedTokens[i]).getSrcERC20();\n\n            require(_srcTokens[i] != address(0), \"_SetSection: invalid address\");\n\n            sum = add(sum, _weight[i]);\n\n        }\n\n\n\n        secList.push(Section(0, 0, 0, new address[](_wrappedTokens.length), new uint[](_weight.length)));\n\n        uint _mintPosition = secList.length - 1;\n\n\n\n        if (_mintPosition > 0) {\n\n            address[] memory _cruColIDs = getSectionToken(mintPosition);\n\n            for (uint i = 0; i < _cruColIDs.length; i++)\n\n                delete mintingTokens[_cruColIDs[i]];\n\n        }\n\n\n\n        for (uint i = 0; i < _wrappedTokens.length; i++) {\n\n            require(mul(div(mul(_weight[i], factor), sum), sum) == mul(_weight[i], factor), \"_SetSection: invalid weight\");\n\n\n\n            secList[_mintPosition].cw[i] = _weight[i];\n\n            secList[_mintPosition].colIDs[i] = _wrappedTokens[i];\n\n            mintingTokens[_wrappedTokens[i]] = true;\n\n            wrappedTokens[_srcTokens[i]] = _wrappedTokens[i];\n\n\n\n            if (mintedTokens[_wrappedTokens[i]])\n\n                continue;\n\n\n\n            mintedTokenList.push(_wrappedTokens[i]);\n\n            mintedTokens[_wrappedTokens[i]] = true;\n\n        }\n\n\n\n        mintPosition = _mintPosition;\n\n        emit UpdateSection(secList[mintPosition].colIDs, secList[mintPosition].cw);\n",
                    "message": "Function 'DFStore._setSection' (DFStore.sol#375-416) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setSection(address[] memory _wrappedTokens, uint[] memory _weight) internal {\n",
                    "message": "Parameter '_wrappedTokens' of DFStore._setSection (DFStore.sol#375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 375,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setSection(address[] memory _wrappedTokens, uint[] memory _weight) internal {\n",
                    "message": "Parameter '_weight' of DFStore._setSection (DFStore.sol#375) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
                    "message": "Parameter '_wrappedTokens' of DFStore.setSection (DFStore.sol#418) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
                    "message": "Parameter '_weight' of DFStore.setSection (DFStore.sol#418) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
                    "message": "Parameter '_position' of DFStore.setBackupSection (DFStore.sol#422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
                    "message": "Parameter '_wrappedTokens' of DFStore.setBackupSection (DFStore.sol#422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _wrappedTokens, uint[] memory _weight) public auth {\n",
                    "message": "Parameter '_weight' of DFStore.setBackupSection (DFStore.sol#422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool) {\n",
                    "message": "Parameter '_token' of DFStore.getMintingToken (DFStore.sol#457) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public auth {\n",
                    "message": "Parameter '_token' of DFStore.setMintingToken (DFStore.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public auth {\n",
                    "message": "Parameter '_flag' of DFStore.setMintingToken (DFStore.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool) {\n",
                    "message": "Parameter '_token' of DFStore.getMintedToken (DFStore.sol#465) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public auth {\n",
                    "message": "Parameter '_token' of DFStore.setMintedToken (DFStore.sol#469) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public auth {\n",
                    "message": "Parameter '_flag' of DFStore.setMintedToken (DFStore.sol#469) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 473,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupToken(address _token) public view returns (address) {\n",
                    "message": "Parameter '_token' of DFStore.getBackupToken (DFStore.sol#473) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public auth {\n",
                    "message": "Parameter '_token' of DFStore.setBackupToken (DFStore.sol#477) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public auth {\n",
                    "message": "Parameter '_backupToken' of DFStore.setBackupToken (DFStore.sol#477) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalMinted(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.addTotalMinted (DFStore.sol#497) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalMinted(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setTotalMinted (DFStore.sol#502) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 510,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalBurned(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.addTotalBurned (DFStore.sol#510) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 515,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalBurned(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setTotalBurned (DFStore.sol#515) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinBurnAmount(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setMinBurnAmount (DFStore.sol#523) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": 529,
                    "vulnerability_code": "    function _setMinBurnAmount(uint _amount) internal {\n\n        minimalBurnAmount = _amount;\n",
                    "message": "Function 'DFStore._setMinBurnAmount' (DFStore.sol#527-529) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _setMinBurnAmount(uint _amount) internal {\n",
                    "message": "Parameter '_amount' of DFStore._setMinBurnAmount (DFStore.sol#527) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 531,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint) {\n",
                    "message": "Parameter '_tokenID' of DFStore.getTokenBalance (DFStore.sol#531) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public auth {\n",
                    "message": "Parameter '_tokenID' of DFStore.setTokenBalance (DFStore.sol#535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 535,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setTokenBalance (DFStore.sol#535) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 539,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint) {\n",
                    "message": "Parameter '_tokenID' of DFStore.getResUSDXBalance (DFStore.sol#539) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public auth {\n",
                    "message": "Parameter '_tokenID' of DFStore.setResUSDXBalance (DFStore.sol#543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setResUSDXBalance (DFStore.sol#543) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint) {\n",
                    "message": "Parameter '_depositor' of DFStore.getDepositorBalance (DFStore.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 547,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint) {\n",
                    "message": "Parameter '_tokenID' of DFStore.getDepositorBalance (DFStore.sol#547) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n",
                    "message": "Parameter '_depositor' of DFStore.setDepositorBalance (DFStore.sol#551) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n",
                    "message": "Parameter '_tokenID' of DFStore.setDepositorBalance (DFStore.sol#551) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 551,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setDepositorBalance (DFStore.sol#551) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public auth {\n",
                    "message": "Parameter '_tokenID' of DFStore.setTypeToken (DFStore.sol#563) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public auth {\n",
                    "message": "Parameter '_tokenID' of DFStore.setTokenMedian (DFStore.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 571,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public auth {\n",
                    "message": "Parameter '_median' of DFStore.setTokenMedian (DFStore.sol#571) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address) {\n",
                    "message": "Parameter '_tokenID' of DFStore.getTokenMedian (DFStore.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 579,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalCol(uint _amount) public auth {\n",
                    "message": "Parameter '_amount' of DFStore.setTotalCol (DFStore.sol#579) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public auth {\n",
                    "message": "Parameter '_srcToken' of DFStore.setWrappedToken (DFStore.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 587,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public auth {\n",
                    "message": "Parameter '_wrappedToken' of DFStore.setWrappedToken (DFStore.sol#587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 591,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address) {\n",
                    "message": "Parameter '_srcToken' of DFStore.getWrappedToken (DFStore.sol#591) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 286,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint => uint) public FeeRate;\n",
                    "message": "Variable 'DFStore.FeeRate' (DFStore.sol#286) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(uint => address) public FeeToken;\n",
                    "message": "Variable 'DFStore.FeeToken' (DFStore.sol#287) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => address) public TokenMedian;\n",
                    "message": "Variable 'DFStore.TokenMedian' (DFStore.sol#288) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DIV_MUL",
                    "vulnerability_from_line": 400,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(mul(div(mul(_weight[i], factor), sum), sum) == mul(_weight[i], factor), \"_SetSection: invalid weight\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _cruColIDs.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint i = 0; i < _cruColIDs.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 399,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 437,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _wrappedTokens.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 240,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private mintPosition;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 272,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private burnPosition;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 275,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private totalMinted;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private totalBurned;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private minimalBurnAmount = 10 ** 14;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 284,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint private totalCol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 351,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint backupSeed = 1;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/interfaces/IDTokenController.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/interfaces/IDFCollateral.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFCollateral.transferOut (IDFCollateral.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public;\n",
                    "message": "IDFCollateral.approveToEngine (IDFCollateral.sol#7) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/interfaces/IDFPoolV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferOut (IDFPoolV2.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOutSrc(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferOutSrc (IDFPoolV2.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferFromSender (IDFPoolV2.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderOneClick(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferFromSenderOneClick (IDFPoolV2.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferToCol (IDFPoolV2.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPoolV2.transferFromSenderToCol (IDFPoolV2.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public;\n",
                    "message": "IDFPoolV2.approveToEngine (IDFPoolV2.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256);\n",
                    "message": "IDFPoolV2.getInterestByXToken (IDFPoolV2.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getUnderlying(address _underlying) public returns (uint256);\n",
                    "message": "IDFPoolV2.getUnderlying (IDFPoolV2.sol#14) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getInterestByXToken(address _xToken) public returns (address, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/interfaces/IDToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    returns (\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/interfaces/IDFPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferOut (IDFPool.sol#6) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSender(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferFromSender (IDFPool.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferToCol(address _tokenID, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferToCol (IDFPool.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFromSenderToCol(address _tokenID, address _from, uint _amount) public returns (bool);\n",
                    "message": "IDFPool.transferFromSenderToCol (IDFPool.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approveToEngine(address _tokenIdx, address _engineAddress) public;\n",
                    "message": "IDFPool.approveToEngine (IDFPool.sol#10) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/interfaces/IDFFunds.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferOut(address _tokenID, address _to, uint _amount) public returns (bool);\n",
                    "message": "IDFFunds.transferOut (IDFFunds.sol#6) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/storage/interfaces/IDFStore.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_52"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionMinted(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionMinted (IDFStore.sol#7) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (IDFStore.sol#8) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionMinted (IDFStore.sol#9) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (IDFStore.sol#10) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionMinted(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionMinted (IDFStore.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionBurned(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getSectionBurned (IDFStore.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (IDFStore.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.addSectionBurned (IDFStore.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (IDFStore.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSectionBurned(uint _position, uint _amount) public;\n",
                    "message": "IDFStore.setSectionBurned (IDFStore.sol#17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionToken(uint _position) public view returns (address[] memory);\n",
                    "message": "IDFStore.getSectionToken (IDFStore.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionWeight(uint _position) public view returns (uint[] memory);\n",
                    "message": "IDFStore.getSectionWeight (IDFStore.sol#20) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getSectionData (IDFStore.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": "IDFStore.getBackupSectionData (IDFStore.sol#22) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionIndex(uint _position) public view returns (uint);\n",
                    "message": "IDFStore.getBackupSectionIndex (IDFStore.sol#23) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSectionIndex(uint _position, uint _backupIdx) public;\n",
                    "message": "IDFStore.setBackupSectionIndex (IDFStore.sol#24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setSection(address[] memory _wrappedTokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setSection (IDFStore.sol#26) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupSection(uint _position, address[] memory _tokens, uint[] memory _weight) public;\n",
                    "message": "IDFStore.setBackupSection (IDFStore.sol#27) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function burnSectionMoveon() public;\n",
                    "message": "IDFStore.burnSectionMoveon (IDFStore.sol#28) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintingToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintingToken (IDFStore.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintingToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintingToken (IDFStore.sol#31) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedToken(address _token) public view returns (bool);\n",
                    "message": "IDFStore.getMintedToken (IDFStore.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMintedToken(address _token, bool _flag) public;\n",
                    "message": "IDFStore.setMintedToken (IDFStore.sol#33) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupToken(address _token) public view returns (address);\n",
                    "message": "IDFStore.getBackupToken (IDFStore.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setBackupToken(address _token, address _backupToken) public;\n",
                    "message": "IDFStore.setBackupToken (IDFStore.sol#35) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintedTokenList() public view returns (address[] memory);\n",
                    "message": "IDFStore.getMintedTokenList (IDFStore.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMintPosition() public view returns (uint);\n",
                    "message": "IDFStore.getMintPosition (IDFStore.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBurnPosition() public view returns (uint);\n",
                    "message": "IDFStore.getBurnPosition (IDFStore.sol#39) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalMinted() public view returns (uint);\n",
                    "message": "IDFStore.getTotalMinted (IDFStore.sol#41) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.addTotalMinted (IDFStore.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalMinted(uint _amount) public;\n",
                    "message": "IDFStore.setTotalMinted (IDFStore.sol#43) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalBurned() public view returns (uint);\n",
                    "message": "IDFStore.getTotalBurned (IDFStore.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.addTotalBurned (IDFStore.sol#45) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalBurned(uint _amount) public;\n",
                    "message": "IDFStore.setTotalBurned (IDFStore.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getMinBurnAmount() public view returns (uint);\n",
                    "message": "IDFStore.getMinBurnAmount (IDFStore.sol#47) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMinBurnAmount(uint _amount) public;\n",
                    "message": "IDFStore.setMinBurnAmount (IDFStore.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getTokenBalance (IDFStore.sol#50) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setTokenBalance (IDFStore.sol#51) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getResUSDXBalance(address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getResUSDXBalance (IDFStore.sol#52) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setResUSDXBalance(address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setResUSDXBalance (IDFStore.sol#53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getDepositorBalance(address _depositor, address _tokenID) public view returns (uint);\n",
                    "message": "IDFStore.getDepositorBalance (IDFStore.sol#54) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setDepositorBalance(address _depositor, address _tokenID, uint _amount) public;\n",
                    "message": "IDFStore.setDepositorBalance (IDFStore.sol#55) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFeeRate(uint ct) public view returns (uint);\n",
                    "message": "IDFStore.getFeeRate (IDFStore.sol#57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setFeeRate(uint ct, uint rate) public;\n",
                    "message": "IDFStore.setFeeRate (IDFStore.sol#58) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTypeToken(uint tt) public view returns (address);\n",
                    "message": "IDFStore.getTypeToken (IDFStore.sol#59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTypeToken(uint tt, address _tokenID) public;\n",
                    "message": "IDFStore.setTypeToken (IDFStore.sol#60) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTokenMedian(address _tokenID) public view returns (address);\n",
                    "message": "IDFStore.getTokenMedian (IDFStore.sol#61) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTokenMedian(address _tokenID, address _median) public;\n",
                    "message": "IDFStore.setTokenMedian (IDFStore.sol#62) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setTotalCol(uint _amount) public;\n",
                    "message": "IDFStore.setTotalCol (IDFStore.sol#64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTotalCol() public view returns (uint);\n",
                    "message": "IDFStore.getTotalCol (IDFStore.sol#65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setWrappedToken(address _srcToken, address _wrappedToken) public;\n",
                    "message": "IDFStore.setWrappedToken (IDFStore.sol#67) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getWrappedToken(address _srcToken) public view returns (address);\n",
                    "message": "IDFStore.getWrappedToken (IDFStore.sol#68) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getSectionData(uint _position) public view returns (uint, uint, uint, address[] memory, uint[] memory);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getBackupSectionData(uint _position) public view returns (uint, address[] memory, uint[] memory);\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/helpers/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "    function setCompleted(uint completed) public restricted {\n\n        last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "    function upgrade(address new_address) public restricted {\n\n        Migrations upgraded = Migrations(new_address);\n\n        upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function upgrade(address new_address) public restricted {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/ReentrancyGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _status = _NOT_ENTERED;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _NOT_ENTERED = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private constant _ENTERED = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 private _status;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/DSAuth.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DSAuth.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DSAuth.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DSAuth.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DSAuth.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSAuth.sol#59-65) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/DSNote.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/DFProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assert(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            IMPLEMENTATION_SLOT ==\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                keccak256(\"org.zeppelinos.proxy.implementation\")\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _setImplementation(_implementation);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        UpgradeabilityProxy(_implementation)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assert(ADMIN_SLOT == keccak256(\"org.zeppelinos.proxy.admin\"));\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _setAdmin(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 221,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 222,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        AdminUpgradeabilityProxy(_implementation)\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            AddressUtils.isContract(newImplementation),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot set a proxy implementation to a non-contract address\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot change the admin of a proxy to the zero address\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != _admin(),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"The current and new admin cannot be the same .\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != _pendingAdmin(),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot set the newAdmin of a proxy to the same address .\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot change the admin of a proxy to the zero address\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == _newAdmin,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"msg.sender and newAdmin must be the same .\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(success, \"upgradeToAndCall-error\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender != _admin(),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot call fallback function from the proxy admin\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            AddressUtils.isContract(newImplementation),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot set a proxy implementation to a non-contract address\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != address(0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot change the admin of a proxy to the zero address\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != _admin(),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"The current and new admin cannot be the same .\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != _pendingAdmin(),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot set the newAdmin of a proxy to the same address .\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 154,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _newAdmin != address(0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot change the admin of a proxy to the zero address\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender == _newAdmin,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 159,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"msg.sender and newAdmin must be the same .\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.sender != _admin(),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Cannot call fallback function from the proxy admin\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_31"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function isContract(address addr) internal view returns (bool) {\n\n        uint256 size;\n\n\n\n        assembly {\n\n            size := extcodesize(addr)\n\n        }\n\n        return size > 0;\n",
                    "message": "AddressUtils.isContract (DFProxy.sol#45-52) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "UpgradeabilityProxy._implementation (DFProxy.sol#70-75) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = ADMIN_SLOT;\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
                    "message": "AdminUpgradeabilityProxy._admin (DFProxy.sol#180-185) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 192,
                    "vulnerability_code": "    function _pendingAdmin() internal view returns (address pendingAdm) {\n\n        bytes32 slot = PENDING_ADMIN_SLOT;\n\n        assembly {\n\n            pendingAdm := sload(slot)\n\n        }\n",
                    "message": "AdminUpgradeabilityProxy._pendingAdmin (DFProxy.sol#187-192) is declared view but contains assembly code\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public {\n",
                    "message": "UpgradeabilityProxy.constructor._implementation (local variable @ DFProxy.sol#61) shadows:\n\t- UpgradeabilityProxy._implementation (function @ DFProxy.sol#70-75)\n\t- Proxy._implementation (function @ DFProxy.sol#10)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation)\n",
                    "message": "AdminUpgradeabilityProxy.constructor._implementation (local variable @ DFProxy.sol#113) shadows:\n\t- UpgradeabilityProxy._implementation (function @ DFProxy.sol#70-75)\n\t- Proxy._implementation (function @ DFProxy.sol#10)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation)\n",
                    "message": "DFProxy.constructor._implementation (local variable @ DFProxy.sol#220) shadows:\n\t- UpgradeabilityProxy._implementation (function @ DFProxy.sol#70-75)\n\t- Proxy._implementation (function @ DFProxy.sol#10)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            calldatacopy(0, 0, calldatasize)\n\n\n\n            let result := delegatecall(\n\n                gas,\n\n                implementation,\n\n                0,\n\n                calldatasize,\n\n                0,\n\n                0\n\n            )\n\n            returndatacopy(0, 0, returndatasize)\n\n\n\n            switch result\n\n                case 0 {\n\n                    revert(0, returndatasize)\n\n                }\n\n                default {\n\n                    return(0, returndatasize)\n\n                }\n\n        }\n",
                    "message": "Proxy._delegate uses assembly (DFProxy.sol#12-34)\n\t- DFProxy.sol#13-33\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": 52,
                    "vulnerability_code": "    function isContract(address addr) internal view returns (bool) {\n\n        uint256 size;\n\n\n\n        assembly {\n\n            size := extcodesize(addr)\n\n        }\n\n        return size > 0;\n",
                    "message": "AddressUtils.isContract uses assembly (DFProxy.sol#45-52)\n\t- DFProxy.sol#48-50\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "UpgradeabilityProxy._implementation uses assembly (DFProxy.sol#70-75)\n\t- DFProxy.sol#72-74\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(\n\n            AddressUtils.isContract(newImplementation),\n\n            \"Cannot set a proxy implementation to a non-contract address\"\n\n        );\n\n\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (DFProxy.sol#82-93)\n\t- DFProxy.sol#90-92\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = ADMIN_SLOT;\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
                    "message": "AdminUpgradeabilityProxy._admin uses assembly (DFProxy.sol#180-185)\n\t- DFProxy.sol#182-184\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 192,
                    "vulnerability_code": "    function _pendingAdmin() internal view returns (address pendingAdm) {\n\n        bytes32 slot = PENDING_ADMIN_SLOT;\n\n        assembly {\n\n            pendingAdm := sload(slot)\n\n        }\n",
                    "message": "AdminUpgradeabilityProxy._pendingAdmin uses assembly (DFProxy.sol#187-192)\n\t- DFProxy.sol#189-191\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function _setAdmin(address newAdmin) internal {\n\n        bytes32 slot = ADMIN_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
                    "message": "AdminUpgradeabilityProxy._setAdmin uses assembly (DFProxy.sol#194-200)\n\t- DFProxy.sol#197-199\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "    function _setPendingAdmin(address pendingAdm) internal {\n\n        bytes32 slot = PENDING_ADMIN_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, pendingAdm)\n\n        }\n",
                    "message": "AdminUpgradeabilityProxy._setPendingAdmin uses assembly (DFProxy.sol#202-208)\n\t- DFProxy.sol#205-207\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": 178,
                    "vulnerability_code": "    function upgradeToAndCall(address newImplementation, bytes calldata data)\n\n        external\n\n        payable\n\n        ifAdmin\n\n    {\n\n        _upgradeTo(newImplementation);\n\n        (bool success, ) = address(this).call.value(msg.value)(data);\n\n        require(success, \"upgradeToAndCall-error\");\n",
                    "message": "Low level call in AdminUpgradeabilityProxy.upgradeToAndCall (DFProxy.sol#170-178):\n\t-(success) = address(this).call.value(msg.value)(data) DFProxy.sol#176\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal view returns (address);\n",
                    "message": "Function 'Proxy._implementation' (DFProxy.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": 34,
                    "vulnerability_code": "    function _delegate(address implementation) internal {\n\n        assembly {\n\n            calldatacopy(0, 0, calldatasize)\n\n\n\n            let result := delegatecall(\n\n                gas,\n\n                implementation,\n\n                0,\n\n                calldatasize,\n\n                0,\n\n                0\n\n            )\n\n            returndatacopy(0, 0, returndatasize)\n\n\n\n            switch result\n\n                case 0 {\n\n                    revert(0, returndatasize)\n\n                }\n\n                default {\n\n                    return(0, returndatasize)\n\n                }\n\n        }\n",
                    "message": "Function 'Proxy._delegate' (DFProxy.sol#12-34) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _willFallback() internal {}\n",
                    "message": "Function 'Proxy._willFallback' (DFProxy.sol#36) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": 41,
                    "vulnerability_code": "    function _fallback() internal {\n\n        _willFallback();\n\n        _delegate(_implementation());\n",
                    "message": "Function 'Proxy._fallback' (DFProxy.sol#38-41) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 75,
                    "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n        assembly {\n\n            impl := sload(slot)\n\n        }\n",
                    "message": "Function 'UpgradeabilityProxy._implementation' (DFProxy.sol#70-75) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(address _implementation) public {\n",
                    "message": "Parameter '_implementation' of UpgradeabilityProxy. (DFProxy.sol#61) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": 80,
                    "vulnerability_code": "    function _upgradeTo(address newImplementation) internal {\n\n        _setImplementation(newImplementation);\n\n        emit Upgraded(newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (DFProxy.sol#77-80) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 93,
                    "vulnerability_code": "    function _setImplementation(address newImplementation) private {\n\n        require(\n\n            AddressUtils.isContract(newImplementation),\n\n            \"Cannot set a proxy implementation to a non-contract address\"\n\n        );\n\n\n\n        bytes32 slot = IMPLEMENTATION_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newImplementation)\n\n        }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (DFProxy.sol#82-93) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 210,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "    function _willFallback() internal {\n\n        require(\n\n            msg.sender != _admin(),\n\n            \"Cannot call fallback function from the proxy admin\"\n\n        );\n\n        super._willFallback();\n",
                    "message": "Function 'AdminUpgradeabilityProxy._willFallback' (DFProxy.sol#210-216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeAdmin(address _newAdmin) external ifAdmin {\n",
                    "message": "Parameter '_newAdmin' of AdminUpgradeabilityProxy.changeAdmin (DFProxy.sol#134) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": 185,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n\n        bytes32 slot = ADMIN_SLOT;\n\n        assembly {\n\n            adm := sload(slot)\n\n        }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._admin' (DFProxy.sol#180-185) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 192,
                    "vulnerability_code": "    function _pendingAdmin() internal view returns (address pendingAdm) {\n\n        bytes32 slot = PENDING_ADMIN_SLOT;\n\n        assembly {\n\n            pendingAdm := sload(slot)\n\n        }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._pendingAdmin' (DFProxy.sol#187-192) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 194,
                    "vulnerability_to_line": 200,
                    "vulnerability_code": "    function _setAdmin(address newAdmin) internal {\n\n        bytes32 slot = ADMIN_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, newAdmin)\n\n        }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._setAdmin' (DFProxy.sol#194-200) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 202,
                    "vulnerability_to_line": 208,
                    "vulnerability_code": "    function _setPendingAdmin(address pendingAdm) internal {\n\n        bytes32 slot = PENDING_ADMIN_SLOT;\n\n\n\n        assembly {\n\n            sstore(slot, pendingAdm)\n\n        }\n",
                    "message": "Function 'AdminUpgradeabilityProxy._setPendingAdmin' (DFProxy.sol#202-208) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 226,
                    "vulnerability_to_line": 228,
                    "vulnerability_code": "    function DFImplementation() external view returns (address) {\n\n        return _implementation();\n",
                    "message": "Function 'DFProxy.DFImplementation' (DFProxy.sol#226-228) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _setPendingAdmin(address(0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _pendingAdmin() internal view returns (address pendingAdm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        private constant PENDING_ADMIN_SLOT = 0x54ac2bd5363dfe95a011c5b5a153968d77d153d212e900afce8624fdad74525c;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isContract(address addr) internal view returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _implementation() internal view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 180,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _admin() internal view returns (address adm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function _pendingAdmin() internal view returns (address pendingAdm) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 176,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        (bool success, ) = address(this).call.value(msg.value)(data);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 182,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 197,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 205,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/DSValue.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(haz, \"haz-not\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DSValue.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DSValue.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DSValue.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DSValue.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSValue.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DSValue.sol#235-251) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "    function read() public view returns (bytes32) {\n\n        bytes32 wut; bool haz;\n\n        (wut, haz) = peek();\n\n        require(haz, \"haz-not\");\n\n        return wut;\n",
                    "message": "DSValue.read (DSValue.sol#311-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 317,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "    function poke(bytes32 wut) public note auth {\n\n        val = wut;\n\n        has = true;\n",
                    "message": "DSValue.poke (DSValue.sol#317-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 323,
                    "vulnerability_code": "    function void() public note auth {  // unset the value\n\n        has = false;\n",
                    "message": "DSValue.void (DSValue.sol#321-323) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (DSValue.sol#278-280) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 308,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function peek() public view returns (bytes32, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool    has;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes32 val;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/DSGuard.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DSGuard.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "    function canCall(\n\n        address src_, address dst_, bytes4 sig\n\n    ) public view returns (bool) {\n\n        bytes32 src = bytes32(bytes20(src_));\n\n        bytes32 dst = bytes32(bytes20(dst_));\n\n\n\n        return acl[src][dst][sig]\n\n            || acl[src][dst][ANY]\n\n            || acl[src][ANY][sig]\n\n            || acl[src][ANY][ANY]\n\n            || acl[ANY][dst][sig]\n\n            || acl[ANY][dst][ANY]\n\n            || acl[ANY][ANY][sig]\n\n            || acl[ANY][ANY][ANY];\n",
                    "message": "DSGuard.canCall (DSGuard.sol#134-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DSGuard.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DSGuard.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DSGuard.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSGuard.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": 162,
                    "vulnerability_code": "    function permit(address src, address dst, bytes32 sig) public auth {\n\n        _permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n",
                    "message": "DSGuard.permit (DSGuard.sol#160-162) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "    function permitx(address src, address dst) public auth {\n\n        _permit(bytes32(bytes20(src)), bytes32(bytes20(dst)), ANY);\n",
                    "message": "DSGuard.permitx (DSGuard.sol#163-165) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": 168,
                    "vulnerability_code": "    function forbid(address src, address dst, bytes32 sig) public auth {\n\n        _forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), sig);\n",
                    "message": "DSGuard.forbid (DSGuard.sol#166-168) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": 171,
                    "vulnerability_code": "    function forbidx(address src, address dst) public auth {\n\n        _forbid(bytes32(bytes20(src)), bytes32(bytes20(dst)), ANY);\n",
                    "message": "DSGuard.forbidx (DSGuard.sol#169-171) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": 153,
                    "vulnerability_code": "    function _permit(bytes32 src, bytes32 dst, bytes32 sig) internal  {\n\n        acl[src][dst][sig] = true;\n\n        emit LogPermit(src, dst, sig);\n",
                    "message": "Function 'DSGuard._permit' (DSGuard.sol#150-153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 158,
                    "vulnerability_code": "    function _forbid(bytes32 src, bytes32 dst, bytes32 sig) internal {\n\n        acl[src][dst][sig] = false;\n\n        emit LogForbid(src, dst, sig);\n",
                    "message": "Function 'DSGuard._forbid' (DSGuard.sol#155-158) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping (bytes32 => mapping (bytes32 => mapping (bytes32 => bool))) acl;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/DSMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DSMath.sol#96-112) should be declared external\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/DSThing.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit LogSetOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isOwner(msg.sender), \"ds-auth-non-owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(isAuthorized(msg.sender, msg.sig), \"ds-auth-unauthorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x + y) >= x, \"ds-math-add-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(y > 0, \"ds-math-div-overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 242,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else if (base == 0 && exponent != 0) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 243,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return 0;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 244,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        else {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            uint256 z = base;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                z = mul(z, base);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            return z;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            for (uint256 i = 1; i < exponent; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 52,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 21,
                    "vulnerability_code": "    function canCall(\n\n        address src, address dst, bytes4 sig\n",
                    "message": "DSAuthority.canCall (DSThing.sol#19-21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "    function disableOwnership() public onlyOwner {\n\n        owner = address(0);\n\n        emit OwnerUpdate(msg.sender, owner);\n",
                    "message": "DSAuth.disableOwnership (DSThing.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function transferOwnership(address newOwner_) public onlyOwner {\n\n        require(newOwner_ != owner, \"TransferOwnership: the same owner.\");\n\n        newOwner = newOwner_;\n",
                    "message": "DSAuth.transferOwnership (DSThing.sol#46-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "    function acceptOwnership() public {\n\n        require(msg.sender == newOwner, \"AcceptOwnership: only new owner do this.\");\n\n        emit OwnerUpdate(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0x0);\n",
                    "message": "DSAuth.acceptOwnership (DSThing.sol#51-56) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n\n        public\n\n        onlyOwner\n\n    {\n\n        authority = authority_;\n\n        emit LogSetAuthority(address(authority));\n",
                    "message": "DSAuth.setAuthority (DSThing.sol#59-65) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 235,
                    "vulnerability_to_line": 251,
                    "vulnerability_code": "    function pow(uint256 base, uint256 exponent) public pure returns (uint256) {\n\n        if (exponent == 0) {\n\n            return 1;\n\n        }\n\n        else if (exponent == 1) {\n\n            return base;\n\n        }\n\n        else if (base == 0 && exponent != 0) {\n\n            return 0;\n\n        }\n\n        else {\n\n            uint256 z = base;\n\n            for (uint256 i = 1; i < exponent; i++)\n\n                z = mul(z, base);\n\n            return z;\n\n        }\n",
                    "message": "DSMath.pow (DSThing.sol#235-251) should be declared external\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": 280,
                    "vulnerability_code": "    function S(string memory s) internal pure returns (bytes4) {\n\n        return bytes4(keccak256(abi.encodePacked(s)));\n",
                    "message": "Function 'DSThing.S' (DSThing.sol#278-280) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        newOwner = address(0x0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setAuthority(DSAuthority authority_)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 188,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint constant WAD = 10 ** 18;\n",
                    "message": null
                }
            ]
        }
    },
    "USDx_1.0-ed9e0cedfb301d33a1d85f66664118e74bfaf969/contracts/utility/Utils.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_address != address(0), \"ValidAddress: address invalid.\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                }
            ]
        }
    }
}