{
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/dependencies/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/dependencies/Context.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/fxportal/FxRoot.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _stateSender) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    stateSender = IStateSender(_stateSender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fxChild == address(0x0));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sendMessageToChild(address _receiver, bytes calldata _data) public override {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _stateSender) {\n",
                    "message": null
                }
            ]
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/fxportal/FxChild.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fxRoot == address(0x0));\n",
                    "message": null
                }
            ]
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/testingDependencies/PolygonMarketUpdate.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address constant UPDATED_ADDRESS = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract PolygonMarketUpdate {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _counter;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _testInt;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address constant UPDATED_ADDRESS = 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9;\n",
                    "message": null
                }
            ]
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/testingDependencies/CustomPolygonMapping.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 140,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract CustomPolygonMapping is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit OwnershipTransferred(address(0), _owner);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 151,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(registrations[receiver] == msg.sender, 'Invalid sender');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'FAILED_ACTION_EXECUTION_CUSTOM_MAPPING');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      isOwner() || registrations[receiver] == msg.sender,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'StateSender.register: Not authorized to register'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 164,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'FAILED_ACTION_EXECUTION_CUSTOM_MAPPING');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 171,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      isOwner() || registrations[receiver] == msg.sender,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'StateSender.register: Not authorized to register'\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 32,
                    "vulnerability_code": "  function owner() public view returns (address) {\n\n    return _owner;\n",
                    "message": "Ownable.owner (CustomPolygonMapping.sol#30-32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 59,
                    "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipTransferred(_owner, address(0));\n\n    _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (CustomPolygonMapping.sol#56-59) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": 67,
                    "vulnerability_code": "  function transferOwnership(address newOwner) public onlyOwner {\n\n    _transferOwnership(newOwner);\n",
                    "message": "Ownable.transferOwnership (CustomPolygonMapping.sol#65-67) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 169,
                    "vulnerability_to_line": 180,
                    "vulnerability_code": "  function register(address sender, address receiver) public {\n\n    require(\n\n      isOwner() || registrations[receiver] == msg.sender,\n\n      'StateSender.register: Not authorized to register'\n\n    );\n\n    registrations[receiver] = sender;\n\n    if (registrations[receiver] == address(0)) {\n\n      emit NewRegistration(msg.sender, sender, receiver);\n\n    } else {\n\n      emit RegistrationUpdated(msg.sender, sender, receiver);\n\n    }\n",
                    "message": "CustomPolygonMapping.register (CustomPolygonMapping.sol#169-180) should be declared external\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 166,
                    "vulnerability_code": "  function syncState(address receiver, bytes calldata data) external onlyRegistered(receiver) {\n\n    counter = counter.add(1);\n\n    emit StateSynced(counter, receiver, data);\n\n    // THIS IS THE ONLY CUSTOM PART\n\n    bool success;\n\n    bytes memory resultData;\n\n    (success, resultData) = receiver.call(\n\n      abi.encodeWithSignature('onStateReceive(uint256,bytes)', counter, data)\n\n    );\n\n    require(success, 'FAILED_ACTION_EXECUTION_CUSTOM_MAPPING');\n\n    // END THE CUSTOM PART\n",
                    "message": "Low level call in CustomPolygonMapping.syncState (CustomPolygonMapping.sol#155-166):\n\t-(success,resultData) = receiver.call(abi.encodeWithSignature(onStateReceive(uint256,bytes),counter,data)) CustomPolygonMapping.sol#161-163\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": 77,
                    "vulnerability_code": "  function _transferOwnership(address newOwner) internal {\n\n    require(newOwner != address(0));\n\n    emit OwnershipTransferred(_owner, newOwner);\n\n    _owner = newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (CustomPolygonMapping.sol#73-77) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UNCHECKED_CALL",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    (success, resultData) = receiver.call(\n",
                    "message": null
                }
            ]
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/governance/AaveGovernanceV2.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract AaveGovernanceV2 is Ownable, IAaveGovernanceV2 {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1054,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address msgSender = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = msgSender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    emit OwnershipTransferred(address(0), msgSender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 930,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 931,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address governanceStrategy,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 votingDelay,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 933,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address guardian,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 934,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] memory executors\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 936,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setGovernanceStrategy(governanceStrategy);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 937,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setVotingDelay(votingDelay);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 938,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardian = guardian;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 939,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1054,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 926,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender == _guardian, 'ONLY_BY_GUARDIAN');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 968,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(targets.length != 0, 'INVALID_EMPTY_TARGETS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      targets.length == values.length &&\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        targets.length == signatures.length &&\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        targets.length == calldatas.length &&\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        targets.length == withDelegatecalls.length,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'INCONSISTENT_PARAMS_LENGTH'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 977,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(isExecutorAuthorized(address(executor)), 'EXECUTOR_NOT_AUTHORIZED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 979,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 980,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      IProposalValidator(address(executor)).validateCreatorOfProposal(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 981,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        this,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 982,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        msg.sender,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 983,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        block.number - 1\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 984,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 985,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'PROPOSITION_CREATION_INVALID'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 986,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      state != ProposalState.Executed &&\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        state != ProposalState.Canceled &&\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1039,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        state != ProposalState.Expired,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'ONLY_BEFORE_EXECUTED'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1044,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1045,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      msg.sender == _guardian ||\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1046,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        IProposalValidator(address(proposal.executor)).validateProposalCancellation(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1047,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          this,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1048,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          proposal.creator,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1049,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          block.number - 1\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1050,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1051,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'PROPOSITION_CANCELLATION_INVALID'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1052,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1073,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(getProposalState(proposalId) == ProposalState.Succeeded, 'INVALID_STATE_FOR_QUEUE');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(getProposalState(proposalId) == ProposalState.Queued, 'ONLY_QUEUED_PROPOSALS');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(signer != address(0), 'INVALID_SIGNATURE');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_proposalsCount >= proposalId, 'INVALID_PROPOSAL_ID');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1327,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      !executor.isActionQueued(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        keccak256(abi.encode(target, value, signature, callData, executionTime, withDelegatecall))\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      ),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'DUPLICATED_ACTION'\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(getProposalState(proposalId) == ProposalState.Active, 'VOTING_CLOSED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 1345,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(vote.votingPower == 0, 'VOTE_ALREADY_SUBMITTED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 970,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      targets.length == values.length &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 971,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        targets.length == signatures.length &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 972,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        targets.length == calldatas.length &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 973,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        targets.length == withDelegatecalls.length,\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 974,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'INCONSISTENT_PARAMS_LENGTH'\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 975,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1036,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1037,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      state != ProposalState.Executed &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1038,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        state != ProposalState.Canceled &&\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1039,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        state != ProposalState.Expired,\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1040,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      'ONLY_BEFORE_EXECUTED'\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1041,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1008,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _proposalsCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1054,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 198,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')",
                "exception (AssertionError)"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 1194,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _guardian = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1054,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1054,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < proposal.targets.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint256 i = 0; i < executors.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 908,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract AaveGovernanceV2 is Ownable, IAaveGovernanceV2 {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setGovernanceStrategy(address governanceStrategy) external override onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setVotingDelay(uint256 votingDelay) external override onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 911,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _governanceStrategy;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 912,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _votingDelay;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 914,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _proposalsCount;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 915,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(uint256 => Proposal) private _proposals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 916,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => bool) private _authorizedExecutors;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 918,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _guardian;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 909,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 930,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": null
                }
            ]
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/governance/Executor.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address admin,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 delay,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 692,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 gracePeriod,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 minimumDelay,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 694,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 maximumDelay\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(delay >= minimumDelay, 'DELAY_SHORTER_THAN_MINIMUM');\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(delay <= maximumDelay, 'DELAY_LONGER_THAN_MAXIMUM');\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 698,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _delay = delay;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1092,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 propositionThreshold,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1093,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 votingDuration,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1094,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 voteDifferential,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1095,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 minimumQuorum\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1096,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1097,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    PROPOSITION_THRESHOLD = propositionThreshold;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1098,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    VOTING_DURATION = votingDuration;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1099,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    VOTE_DIFFERENTIAL = voteDifferential;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    MINIMUM_QUORUM = minimumQuorum;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address admin,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1260,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 delay,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 gracePeriod,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 minimumDelay,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1263,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 maximumDelay,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1264,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 propositionThreshold,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1265,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 voteDuration,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1266,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 voteDifferential,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 1267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 minimumQuorum\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c >= a, 'SafeMath: addition overflow');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 696,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(delay >= minimumDelay, 'DELAY_SHORTER_THAN_MINIMUM');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(delay <= maximumDelay, 'DELAY_LONGER_THAN_MAXIMUM');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender == _admin, 'ONLY_BY_ADMIN');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 715,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender == address(this), 'ONLY_BY_THIS_TIMELOCK');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 720,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(msg.sender == _pendingAdmin, 'ONLY_BY_PENDING_ADMIN');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 774,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(executionTime >= block.timestamp.add(_delay), 'EXECUTION_TIME_UNDERESTIMATED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 838,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(_queuedTransactions[actionHash], 'ACTION_NOT_QUEUED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 839,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(block.timestamp >= executionTime, 'TIMELOCK_NOT_FINISHED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 840,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(block.timestamp <= executionTime.add(GRACE_PERIOD), 'GRACE_PERIOD_FINISHED');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 855,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(msg.value >= value, 'NOT_ENOUGH_MSG_VALUE');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 863,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(success, 'FAILED_ACTION_EXECUTION');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 931,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(delay >= MINIMUM_DELAY, 'DELAY_SHORTER_THAN_MINIMUM');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 932,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(delay <= MAXIMUM_DELAY, 'DELAY_LONGER_THAN_MAXIMUM');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(c / a == b, 'SafeMath: multiplication overflow');\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 740,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _pendingAdmin = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 668,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ExecutorWithTimelock is IExecutorWithTimelock {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 675,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _admin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 676,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address private _pendingAdmin;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 677,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _delay;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 679,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(bytes32 => bool) private _queuedTransactions;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 669,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1072,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1091,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 671,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public immutable override GRACE_PERIOD;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public immutable override MINIMUM_DELAY;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 673,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public immutable override MAXIMUM_DELAY;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 935,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  receive() external payable {}\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1074,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public immutable override PROPOSITION_THRESHOLD;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public immutable override VOTING_DURATION;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1076,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public immutable override VOTE_DIFFERENTIAL;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 1077,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 public immutable override MINIMUM_QUORUM;\n",
                    "message": null
                }
            ]
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/interfaces/IBridgeExecutor.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "governance-crosschain-bridges-7f56e7ae63f30ba8dcd7ced6a11a34c2eb865a1d/contracts/interfaces/IFxMessageProcessor.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    }
}