{
    "ico-world-bit/contracts/StandardToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_17"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
                    "message": "StandardToken.transferFrom.allowance (local variable @ StandardToken.sol#178) shadows:\n\t- StandardToken.allowance (function @ StandardToken.sol#215-217)\n\t- EIP20Token.allowance (function @ StandardToken.sol#16)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n\n    return total_supply;\n",
                    "message": "StandardToken.totalSupply (StandardToken.sol#146-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": "EIP20Token.totalSupply (StandardToken.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (StandardToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
                    "message": "StandardToken.balanceOf (StandardToken.sol#167-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transfer (StandardToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool success) {\n\n    balances[msg.sender] = balances[msg.sender].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    Transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "StandardToken.transfer (StandardToken.sol#155-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool success) {\n\n    uint allowance = allowed[from][msg.sender];\n\n\n\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n\n    // require(value <= allowance);\n\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\n\n\n\n    balances[from] = balances[from].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    allowed[from][msg.sender] = allowance.sub(value);\n\n    Transfer(from, to, value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (StandardToken.sol#177-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transferFrom (StandardToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "StandardToken.approve (StandardToken.sol#196-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (StandardToken.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 217,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
                    "message": "StandardToken.allowance (StandardToken.sol#215-217) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (StandardToken.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.addApproval (StandardToken.sol#225-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.subApproval (StandardToken.sol#237-248) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in StandardToken.sol:\n\t- pragma solidity^0.4.15 (StandardToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (StandardToken.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (StandardToken.sol#87): it allows old versions\n\t- pragma solidity^0.4.15 (StandardToken.sol#100): it allows old versions\n\t- pragma solidity^0.4.15 (StandardToken.sol#124): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'StandardToken.total_supply' (StandardToken.sol#141) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint) private balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/Haltable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Haltable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Haltable.sol#41-44) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in Haltable.sol:\n\t- pragma solidity^0.4.15 (Haltable.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (Haltable.sol#50): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Haltable.sol#23-25) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/Ownable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Ownable.sol#41-44) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in Ownable.sol:\n\t- pragma solidity^0.4.15 (Ownable.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Ownable.sol#23-25) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/MultiSigWallet.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < init_owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < owners.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "inefficient-state-variable-increment",
                    "vulnerability_from_line": 273,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        transactionCount += 1;\n",
                    "message": "<x> += <y> costs more gas than <x> = <x> + <y> for state variables."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(!isOwner[init_owners[i]] && init_owners[i] != 0);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            isOwner[init_owners[i]] = true;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]])\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]])\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (count == required)\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < owners.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]]) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (confirmations[transactionId][owners[i]]) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                confirmationsTemp[count] = owners[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < init_owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require (   ownerCount <= MAX_OWNER_COUNT\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                 && signersRequired <= ownerCount\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                 && signersRequired != 0\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                 && ownerCount != 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            require(!isOwner[init_owners[i]] && init_owners[i] != 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (   pending && !transactions[i].executed\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                || executed && transactions[i].executed)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            if (   pending && !transactions[i].executed\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 356,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                || executed && transactions[i].executed)\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 358,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                transactionIdsTemp[count] = i;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 359,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "                count += 1;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < init_owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length - 1; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < transactionCount; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < owners.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i=0; i<count; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < transactionCount; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 362,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = from; i < to; i++)\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_16"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 96,
                    "vulnerability_code": "    function()\n\n        payable\n\n        public\n\n    {\n\n        if (msg.value > 0)\n\n            Deposit(msg.sender, msg.value);\n",
                    "message": "MultiSigWallet.fallback (MultiSigWallet.sol#90-96) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": 128,
                    "vulnerability_code": "    function addOwner(address owner)\n\n        public\n\n        onlyWallet\n\n        ownerDoesNotExist(owner)\n\n        notNull(owner)\n\n        validRequirement(owners.length + 1, required)\n\n    {\n\n        isOwner[owner] = true;\n\n        owners.push(owner);\n\n        OwnerAddition(owner);\n",
                    "message": "MultiSigWallet.addOwner (MultiSigWallet.sol#118-128) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "    function removeOwner(address owner)\n\n        public\n\n        onlyWallet\n\n        ownerExists(owner)\n\n    {\n\n        isOwner[owner] = false;\n\n        for (uint i = 0; i < owners.length - 1; i++)\n\n            if (owners[i] == owner) {\n\n                owners[i] = owners[owners.length - 1];\n\n                break;\n\n            }\n\n        owners.length -= 1;\n\n        if (required > owners.length)\n\n            changeRequirement(owners.length);\n\n        OwnerRemoval(owner);\n",
                    "message": "MultiSigWallet.removeOwner (MultiSigWallet.sol#132-147) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 152,
                    "vulnerability_to_line": 167,
                    "vulnerability_code": "    function replaceOwner(address owner, address newOwner)\n\n        public\n\n        onlyWallet\n\n        ownerExists(owner)\n\n        ownerDoesNotExist(newOwner)\n\n    {\n\n        for (uint i = 0; i < owners.length; i++)\n\n            if (owners[i] == owner) {\n\n                owners[i] = newOwner;\n\n                break;\n\n            }\n\n        isOwner[owner] = false;\n\n        isOwner[newOwner] = true;\n\n        OwnerRemoval(owner);\n\n        OwnerAddition(newOwner);\n",
                    "message": "MultiSigWallet.replaceOwner (MultiSigWallet.sol#152-167) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": 191,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n\n        public\n\n        returns (uint transactionId)\n\n    {\n\n        transactionId = addTransaction(destination, value, data);\n\n        confirmTransaction(transactionId);\n",
                    "message": "MultiSigWallet.submitTransaction (MultiSigWallet.sol#185-191) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 216,
                    "vulnerability_code": "    function revokeConfirmation(uint transactionId)\n\n        public\n\n        ownerExists(msg.sender)\n\n        confirmed(transactionId, msg.sender)\n\n        notExecuted(transactionId)\n\n    {\n\n        confirmations[transactionId][msg.sender] = false;\n\n        Revocation(msg.sender, transactionId);\n",
                    "message": "MultiSigWallet.revokeConfirmation (MultiSigWallet.sol#208-216) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n\n        public\n\n        constant\n\n        returns (uint count)\n\n    {\n\n        for (uint i = 0; i < owners.length; i++)\n\n            if (confirmations[transactionId][owners[i]])\n\n                count += 1;\n",
                    "message": "MultiSigWallet.getConfirmationCount (MultiSigWallet.sol#283-291) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 306,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n\n        public\n\n        constant\n\n        returns (uint count)\n\n    {\n\n        for (uint i = 0; i < transactionCount; i++)\n\n            if (   pending && !transactions[i].executed\n\n                || executed && transactions[i].executed)\n\n                count += 1;\n",
                    "message": "MultiSigWallet.getTransactionCount (MultiSigWallet.sol#297-306) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": 316,
                    "vulnerability_code": "    function getOwners()\n\n        public\n\n        constant\n\n        returns (address[])\n\n    {\n\n        return owners;\n",
                    "message": "MultiSigWallet.getOwners (MultiSigWallet.sol#310-316) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": 338,
                    "vulnerability_code": "    function getConfirmations(uint transactionId)\n\n        public\n\n        constant\n\n        returns (address[] res_confirmations)\n\n    {\n\n        address[] memory confirmationsTemp = new address[](owners.length);\n\n        uint count = 0;\n\n        uint i;\n\n        for (i = 0; i < owners.length; i++) {\n\n            if (confirmations[transactionId][owners[i]]) {\n\n                confirmationsTemp[count] = owners[i];\n\n                count += 1;\n\n            }\n\n        }\n\n        res_confirmations = new address[](count);\n\n        for (i=0; i<count; i++)\n\n            res_confirmations[i] = confirmationsTemp[i];\n",
                    "message": "MultiSigWallet.getConfirmations (MultiSigWallet.sol#321-338) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": 364,
                    "vulnerability_code": "    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n\n        public\n\n        constant\n\n        returns (uint[] transactionIds)\n\n    {\n\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n\n        uint count = 0;\n\n        uint i;\n\n        for (i = 0; i < transactionCount; i++)\n\n            if (   pending && !transactions[i].executed\n\n                || executed && transactions[i].executed)\n\n            {\n\n                transactionIdsTemp[count] = i;\n\n                count += 1;\n\n            }\n\n        transactionIds = new uint[](to - from);\n\n        for (i = from; i < to; i++)\n\n            transactionIds[i - from] = transactionIdsTemp[i];\n",
                    "message": "MultiSigWallet.getTransactionIds (MultiSigWallet.sol#346-364) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in MultiSigWallet.sol:\n\t- pragma solidity^0.4.15 (MultiSigWallet.sol#3): it allows old versions\n"
                },
                {
                    "name": "low-level-calls",
                    "vulnerability_from_line": 220,
                    "vulnerability_to_line": 234,
                    "vulnerability_code": "    function executeTransaction(uint transactionId)\n\n        public\n\n        notExecuted(transactionId)\n\n    {\n\n        if (isConfirmed(transactionId)) {\n\n            Transaction storage the_tx = transactions[transactionId];\n\n            the_tx.executed = true;\n\n            if (the_tx.destination.call.value(the_tx.value)(the_tx.data))\n\n                Execution(transactionId);\n\n            else {\n\n                ExecutionFailure(transactionId);\n\n                the_tx.executed = false;\n\n            }\n\n        }\n",
                    "message": "Low level call in MultiSigWallet.executeTransaction (MultiSigWallet.sol#220-234):\n\t-the_tx.destination.call.value(the_tx.value)(the_tx.data) MultiSigWallet.sol#227-232\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 114,
                    "vulnerability_code": "    function MultiSigWallet(address[] init_owners, uint signers_required)\n\n        public\n\n        validRequirement(init_owners.length, signers_required)\n\n    {\n\n        for (uint i = 0; i < init_owners.length; i++) {\n\n            require(!isOwner[init_owners[i]] && init_owners[i] != 0);\n\n            isOwner[init_owners[i]] = true;\n\n        }\n\n        owners = init_owners;\n\n        required = signers_required;\n",
                    "message": "Function 'MultiSigWallet.MultiSigWallet' (MultiSigWallet.sol#104-114) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] init_owners, uint signers_required)\n",
                    "message": "Parameter 'init_owners' of MultiSigWallet.MultiSigWallet (MultiSigWallet.sol#104) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] init_owners, uint signers_required)\n",
                    "message": "Parameter 'signers_required' of MultiSigWallet.MultiSigWallet (MultiSigWallet.sol#104) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        owners.length -= 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function isConfirmed(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 310,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getOwners()\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 321,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmations(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < init_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 138,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length - 1; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < transactionCount; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < transactionCount; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 283,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getConfirmationCount(uint transactionId)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getTransactionCount(bool pending, bool executed)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < init_owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 158,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 245,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 288,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < owners.length; i++)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (i = 0; i < owners.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        public\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function MultiSigWallet(address[] init_owners, uint signers_required)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 185,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function submitTransaction(address destination, uint value, bytes data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 261,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function addTransaction(address destination, uint value, bytes data)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address[])\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 324,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (address[] res_confirmations)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (uint[] transactionIds)\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/Mintable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in Mintable.sol:\n\t- pragma solidity^0.4.15 (Mintable.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/SafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in SafeMath.sol:\n\t- pragma solidity^0.4.15 (SafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/GenericCrowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Haltable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ReleasableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is Mintable, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public released = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public totalUpgraded = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public tokensSold = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public weiRaised = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public investorCount = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public finalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public requireCustomerId = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public requiredSignedAddress = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 926,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(start != 0 && end != 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(block.timestamp < start && start < end);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else return State.Success;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      investorCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_52"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 849,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  CrowdsaleToken public token;\n",
                    "message": "GenericCrowdsale.token (GenericCrowdsale.sol#849) is never initialized. It is used in:\n\t- preallocate (GenericCrowdsale.sol#993-999)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 579,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "Reentrancy in UpgradeableToken.upgrade (GenericCrowdsale.sol#563-579):\n\tExternal calls:\n\t- upgradeAgent.upgradeFrom(msg.sender,value) (GenericCrowdsale.sol#572)\n\tState variables written after the call(s):\n\t- totalUpgraded (GenericCrowdsale.sol#576)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": 670,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n\n    require(msg.sender == getLostAndFoundMaster());\n\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n\n    //  getting them stuck in another address by accident.\n\n    token_contract.approve(agent, tokens);\n",
                    "message": "LostAndFoundToken.enableLostAndFound (GenericCrowdsale.sol#665-670) does not use the value returned by external calls:\n\t-token_contract.approve(agent,tokens) (GenericCrowdsale.sol#669)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
                    "message": "StandardToken.transferFrom.allowance (local variable @ GenericCrowdsale.sol#269) shadows:\n\t- StandardToken.allowance (function @ GenericCrowdsale.sol#306-308)\n\t- EIP20Token.allowance (function @ GenericCrowdsale.sol#161)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 999,
                    "vulnerability_code": "  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\n\n    require(receiver != address(0));\n\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n\n    require(tokenAmount != 0);\n\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\n\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n",
                    "message": "Reentrancy in GenericCrowdsale.preallocate (GenericCrowdsale.sol#993-999):\n\tExternal calls:\n\t- tokenAmount = fullTokens.mul(10 ** uint256(token.decimals())) (GenericCrowdsale.sol#995)\n\tState variables written after the call(s):\n\t- investedAmountOf (GenericCrowdsale.sol#998)\n\t- tokenAmountOf (GenericCrowdsale.sol#998)\n\t- tokensSold (GenericCrowdsale.sol#998)\n\t- weiRaised (GenericCrowdsale.sol#998)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": 930,
                    "vulnerability_code": "  function GenericCrowdsale(address team_multisig, uint start, uint end) internal {\n\n    setMultisig(team_multisig);\n\n\n\n    // Don't mess the dates\n\n    require(start != 0 && end != 0);\n\n    require(block.timestamp < start && start < end);\n\n    startsAt = start;\n\n    endsAt = end;\n",
                    "message": "GenericCrowdsale.GenericCrowdsale (GenericCrowdsale.sol#922-930) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp < start && start < end) (GenericCrowdsale.sol#927)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": 1108,
                    "vulnerability_code": "  function getState() public constant returns (State) {\n\n    if (finalized) return State.Finalized;\n\n    else if (block.timestamp < startsAt) return State.PreFunding;\n\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n\n    else return State.Success;\n",
                    "message": "GenericCrowdsale.getState (GenericCrowdsale.sol#1103-1108) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp <= endsAt && ! isCrowdsaleFull() (GenericCrowdsale.sol#1106-1107)\n\t- block.timestamp < startsAt (GenericCrowdsale.sol#1105-1107)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 770,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string public name = \"WorldBit Token\";\n",
                    "message": "CrowdsaleToken.name should be constant (GenericCrowdsale.sol#770)\nCrowdsaleToken.symbol should be constant (GenericCrowdsale.sol#772)\nUpgradeAgent.originalSupply should be constant (GenericCrowdsale.sol#476)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (GenericCrowdsale.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 260,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
                    "message": "StandardToken.balanceOf (GenericCrowdsale.sol#258-260) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (GenericCrowdsale.sol#157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "StandardToken.approve (GenericCrowdsale.sol#287-298) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (GenericCrowdsale.sol#160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (GenericCrowdsale.sol#161) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
                    "message": "StandardToken.allowance (GenericCrowdsale.sol#306-308) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.addApproval (GenericCrowdsale.sol#316-321) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 339,
                    "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.subApproval (GenericCrowdsale.sol#328-339) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\n\n    releaseAgent = addr;\n",
                    "message": "ReleasableToken.setReleaseAgent (GenericCrowdsale.sol#397-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n\n    transferAgents[addr] = state;\n",
                    "message": "ReleasableToken.setTransferAgent (GenericCrowdsale.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 481,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
                    "message": "UpgradeAgent.isUpgradeAgent (GenericCrowdsale.sol#479-481) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
                    "message": "UpgradeAgent.upgradeFrom (GenericCrowdsale.sol#499) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 579,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "UpgradeableToken.upgrade (GenericCrowdsale.sol#563-579) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n\n    setUpgradeMaster(new_master);\n",
                    "message": "UpgradeableToken.changeUpgradeMaster (GenericCrowdsale.sol#617-619) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": 670,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n\n    require(msg.sender == getLostAndFoundMaster());\n\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n\n    //  getting them stuck in another address by accident.\n\n    token_contract.approve(agent, tokens);\n",
                    "message": "LostAndFoundToken.enableLostAndFound (GenericCrowdsale.sol#665-670) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": 721,
                    "vulnerability_code": "  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n\n    mintInternal(receiver, amount);\n",
                    "message": "MintableToken.mint (GenericCrowdsale.sol#719-721) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": 729,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n\n    mintAgents[addr] = state;\n\n    MintingAgentChanged(addr, state);\n",
                    "message": "MintableToken.setMintAgent (GenericCrowdsale.sol#726-729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": 817,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n\n    WorldBitEvent(object, operand, command, val1, val2, location, str1, str2, comment);\n",
                    "message": "CrowdsaleToken.WorldBit (GenericCrowdsale.sol#815-817) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 937,
                    "vulnerability_to_line": 939,
                    "vulnerability_code": "  function() payable public {\n\n    buy();\n",
                    "message": "GenericCrowdsale.fallback (GenericCrowdsale.sol#937-939) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 999,
                    "vulnerability_code": "  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\n\n    require(receiver != address(0));\n\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n\n    require(tokenAmount != 0);\n\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\n\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n",
                    "message": "GenericCrowdsale.preallocate (GenericCrowdsale.sol#993-999) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": 1027,
                    "vulnerability_code": "  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\n\n    bytes32 hash = sha256(msg.sender);\n\n    require(ecrecover(hash, v, r, s) == signerAddress);\n\n    investInternal(msg.sender, customerId);\n",
                    "message": "GenericCrowdsale.buyWithSignedAddress (GenericCrowdsale.sol#1023-1027) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1035,
                    "vulnerability_to_line": 1037,
                    "vulnerability_code": "  function buyWithCustomerId(uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\n\n    investInternal(msg.sender, customerId);\n",
                    "message": "GenericCrowdsale.buyWithCustomerId (GenericCrowdsale.sol#1035-1037) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1055,
                    "vulnerability_to_line": 1058,
                    "vulnerability_code": "  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n\n    finalized = true;\n\n    Finalized();\n",
                    "message": "GenericCrowdsale.finalize (GenericCrowdsale.sol#1055-1058) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": 1067,
                    "vulnerability_code": "  function setRequireCustomerId(bool value) public onlyOwner {\n\n    requireCustomerId = value;\n\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n",
                    "message": "GenericCrowdsale.setRequireCustomerId (GenericCrowdsale.sol#1064-1067) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": 1079,
                    "vulnerability_code": "  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\n\n    requiredSignedAddress = value;\n\n    signerAddress = signer;\n\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n",
                    "message": "GenericCrowdsale.setRequireSignedAddress (GenericCrowdsale.sol#1075-1079) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1084,
                    "vulnerability_to_line": 1087,
                    "vulnerability_code": "  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n\n    earlyParticipantWhitelist[addr] = status;\n\n    Whitelisted(addr, status);\n",
                    "message": "GenericCrowdsale.setEarlyParticipantWhitelist (GenericCrowdsale.sol#1084-1087) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in GenericCrowdsale.sol:\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#50): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#94): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#148): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#178): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#191): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#215): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#369): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#455): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#505): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#645): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#675): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#746): it allows old versions\n\t- pragma solidity^0.4.15 (GenericCrowdsale.sol#825): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (GenericCrowdsale.sol#23-25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'StandardToken.total_supply' (GenericCrowdsale.sol#232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 558,
                    "vulnerability_code": "  function UpgradeableToken(address master) internal {\n\n    setUpgradeMaster(master);\n",
                    "message": "Function 'UpgradeableToken.UpgradeableToken' (GenericCrowdsale.sol#556-558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.changeUpgradeMaster (GenericCrowdsale.sol#617) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setUpgradeMaster(address new_master) private {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.setUpgradeMaster (GenericCrowdsale.sol#624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n",
                    "message": "Parameter 'token_contract' of LostAndFoundToken.enableLostAndFound (GenericCrowdsale.sol#665) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": 712,
                    "vulnerability_code": "  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n\n    require(multisig != address(0));\n\n    // Cannot create a token without supply and no minting\n\n    require(mintable || initialSupply != 0);\n\n    // Create initially all balance on the team multisig\n\n    if (initialSupply > 0)\n\n      mintInternal(multisig, initialSupply);\n\n    // No more new supply allowed after the token creation\n\n    mintingFinished = !mintable;\n",
                    "message": "Function 'MintableToken.MintableToken' (GenericCrowdsale.sol#703-712) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, mintable) {\n\n    require(token_retriever != address(0));\n\n    decimals = token_decimals;\n\n    lost_and_found_master = token_retriever;\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (GenericCrowdsale.sol#789-794) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'initial_supply' of CrowdsaleToken.CrowdsaleToken (GenericCrowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'token_decimals' of CrowdsaleToken.CrowdsaleToken (GenericCrowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'team_multisig' of CrowdsaleToken.CrowdsaleToken (GenericCrowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'token_retriever' of CrowdsaleToken.CrowdsaleToken (GenericCrowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": 817,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n\n    WorldBitEvent(object, operand, command, val1, val2, location, str1, str2, comment);\n",
                    "message": "Function 'CrowdsaleToken.WorldBit' (GenericCrowdsale.sol#815-817) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public lost_and_found_master;\n",
                    "message": "Variable 'CrowdsaleToken.lost_and_found_master' (GenericCrowdsale.sol#776) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": 930,
                    "vulnerability_code": "  function GenericCrowdsale(address team_multisig, uint start, uint end) internal {\n\n    setMultisig(team_multisig);\n\n\n\n    // Don't mess the dates\n\n    require(start != 0 && end != 0);\n\n    require(block.timestamp < start && start < end);\n\n    startsAt = start;\n\n    endsAt = end;\n",
                    "message": "Function 'GenericCrowdsale.GenericCrowdsale' (GenericCrowdsale.sol#922-930) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function GenericCrowdsale(address team_multisig, uint start, uint end) internal {\n",
                    "message": "Parameter 'team_multisig' of GenericCrowdsale.GenericCrowdsale (GenericCrowdsale.sol#922) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUpgradeState() public constant returns(UpgradeState) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns (address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns(address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getState() public constant returns (State) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull() internal constant returns (bool full);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenAmount(uint weiAmount, address agent) internal constant returns (uint weiAllowed, uint tokenAmount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRequireCustomerId(bool value) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1084,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 675,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint) private balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 846,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenAmount(uint weiAmount, address agent) internal constant returns (uint weiAllowed, uint tokenAmount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 937,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function() payable public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/Migrations.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function setCompleted(uint completed) restricted public {\n\n    last_completed_migration = completed;\n",
                    "message": "Migrations.setCompleted (Migrations.sol#17-19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function upgrade(address new_address) restricted public {\n\n    Migrations upgraded = Migrations(new_address);\n\n    upgraded.setCompleted(last_completed_migration);\n",
                    "message": "Migrations.upgrade (Migrations.sol#21-24) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in Migrations.sol:\n\t- pragma solidity^0.4.15 (Migrations.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function Migrations() public {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Migrations.Migrations' (Migrations.sol#13-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgrade(address new_address) restricted public {\n",
                    "message": "Parameter 'new_address' of Migrations.upgrade (Migrations.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public last_completed_migration;\n",
                    "message": "Variable 'Migrations.last_completed_migration' (Migrations.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/UpgradeAgent.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public originalSupply;\n",
                    "message": "UpgradeAgent.originalSupply should be constant (UpgradeAgent.sol#24)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
                    "message": "UpgradeAgent.isUpgradeAgent (UpgradeAgent.sol#27-29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
                    "message": "UpgradeAgent.upgradeFrom (UpgradeAgent.sol#47) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in UpgradeAgent.sol:\n\t- pragma solidity^0.4.15 (UpgradeAgent.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/CrowdsaleToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ReleasableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is Mintable, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public released = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public totalUpgraded = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 651,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_38"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "Reentrancy in UpgradeableToken.upgrade (CrowdsaleToken.sol#519-535):\n\tExternal calls:\n\t- upgradeAgent.upgradeFrom(msg.sender,value) (CrowdsaleToken.sol#528)\n\tState variables written after the call(s):\n\t- totalUpgraded (CrowdsaleToken.sol#532)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 626,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n\n    require(msg.sender == getLostAndFoundMaster());\n\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n\n    //  getting them stuck in another address by accident.\n\n    token_contract.approve(agent, tokens);\n",
                    "message": "LostAndFoundToken.enableLostAndFound (CrowdsaleToken.sol#621-626) does not use the value returned by external calls:\n\t-token_contract.approve(agent,tokens) (CrowdsaleToken.sol#625)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
                    "message": "StandardToken.transferFrom.allowance (local variable @ CrowdsaleToken.sol#178) shadows:\n\t- StandardToken.allowance (function @ CrowdsaleToken.sol#215-217)\n\t- EIP20Token.allowance (function @ CrowdsaleToken.sol#16)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string public name = \"WorldBit Token\";\n",
                    "message": "CrowdsaleToken.name should be constant (CrowdsaleToken.sol#726)\nCrowdsaleToken.symbol should be constant (CrowdsaleToken.sol#728)\nUpgradeAgent.originalSupply should be constant (CrowdsaleToken.sol#432)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (CrowdsaleToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
                    "message": "StandardToken.balanceOf (CrowdsaleToken.sol#167-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "StandardToken.approve (CrowdsaleToken.sol#196-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (CrowdsaleToken.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (CrowdsaleToken.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 217,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
                    "message": "StandardToken.allowance (CrowdsaleToken.sol#215-217) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.addApproval (CrowdsaleToken.sol#225-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.subApproval (CrowdsaleToken.sol#237-248) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (CrowdsaleToken.sol#316-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 356,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\n\n    releaseAgent = addr;\n",
                    "message": "ReleasableToken.setReleaseAgent (CrowdsaleToken.sol#353-356) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 363,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n\n    transferAgents[addr] = state;\n",
                    "message": "ReleasableToken.setTransferAgent (CrowdsaleToken.sol#361-363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": 437,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
                    "message": "UpgradeAgent.isUpgradeAgent (CrowdsaleToken.sol#435-437) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
                    "message": "UpgradeAgent.upgradeFrom (CrowdsaleToken.sol#455) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 519,
                    "vulnerability_to_line": 535,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "UpgradeableToken.upgrade (CrowdsaleToken.sol#519-535) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": 575,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n\n    setUpgradeMaster(new_master);\n",
                    "message": "UpgradeableToken.changeUpgradeMaster (CrowdsaleToken.sol#573-575) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": 626,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n\n    require(msg.sender == getLostAndFoundMaster());\n\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n\n    //  getting them stuck in another address by accident.\n\n    token_contract.approve(agent, tokens);\n",
                    "message": "LostAndFoundToken.enableLostAndFound (CrowdsaleToken.sol#621-626) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 675,
                    "vulnerability_to_line": 677,
                    "vulnerability_code": "  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n\n    mintInternal(receiver, amount);\n",
                    "message": "MintableToken.mint (CrowdsaleToken.sol#675-677) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": 685,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n\n    mintAgents[addr] = state;\n\n    MintingAgentChanged(addr, state);\n",
                    "message": "MintableToken.setMintAgent (CrowdsaleToken.sol#682-685) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 771,
                    "vulnerability_to_line": 773,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n\n    WorldBitEvent(object, operand, command, val1, val2, location, str1, str2, comment);\n",
                    "message": "CrowdsaleToken.WorldBit (CrowdsaleToken.sol#771-773) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in CrowdsaleToken.sol:\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#87): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#100): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#124): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#278): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#325): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#411): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#461): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#601): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#631): it allows old versions\n\t- pragma solidity^0.4.15 (CrowdsaleToken.sol#702): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'StandardToken.total_supply' (CrowdsaleToken.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (CrowdsaleToken.sol#298-300) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 512,
                    "vulnerability_to_line": 514,
                    "vulnerability_code": "  function UpgradeableToken(address master) internal {\n\n    setUpgradeMaster(master);\n",
                    "message": "Function 'UpgradeableToken.UpgradeableToken' (CrowdsaleToken.sol#512-514) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 573,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.changeUpgradeMaster (CrowdsaleToken.sol#573) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 580,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setUpgradeMaster(address new_master) private {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.setUpgradeMaster (CrowdsaleToken.sol#580) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 621,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n",
                    "message": "Parameter 'token_contract' of LostAndFoundToken.enableLostAndFound (CrowdsaleToken.sol#621) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 659,
                    "vulnerability_to_line": 668,
                    "vulnerability_code": "  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n\n    require(multisig != address(0));\n\n    // Cannot create a token without supply and no minting\n\n    require(mintable || initialSupply != 0);\n\n    // Create initially all balance on the team multisig\n\n    if (initialSupply > 0)\n\n      mintInternal(multisig, initialSupply);\n\n    // No more new supply allowed after the token creation\n\n    mintingFinished = !mintable;\n",
                    "message": "Function 'MintableToken.MintableToken' (CrowdsaleToken.sol#659-668) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 745,
                    "vulnerability_to_line": 750,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, mintable) {\n\n    require(token_retriever != address(0));\n\n    decimals = token_decimals;\n\n    lost_and_found_master = token_retriever;\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (CrowdsaleToken.sol#745-750) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 745,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'initial_supply' of CrowdsaleToken.CrowdsaleToken (CrowdsaleToken.sol#745) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 745,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'token_decimals' of CrowdsaleToken.CrowdsaleToken (CrowdsaleToken.sol#745) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 745,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'team_multisig' of CrowdsaleToken.CrowdsaleToken (CrowdsaleToken.sol#745) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 745,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'token_retriever' of CrowdsaleToken.CrowdsaleToken (CrowdsaleToken.sol#745) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 771,
                    "vulnerability_to_line": 773,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n\n    WorldBitEvent(object, operand, command, val1, val2, location, str1, str2, comment);\n",
                    "message": "Function 'CrowdsaleToken.WorldBit' (CrowdsaleToken.sol#771-773) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 732,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public lost_and_found_master;\n",
                    "message": "Variable 'CrowdsaleToken.lost_and_found_master' (CrowdsaleToken.sol#732) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 435,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 561,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUpgradeState() public constant returns(UpgradeState) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 588,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 614,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns (address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 763,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 767,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns(address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 682,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 601,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 631,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 702,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint) private balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 477,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 649,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 771,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 771,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 771,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 771,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/TokenTranchePricing.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      tranches[i] = last_tranche;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tranches[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(block.timestamp < start && start < end);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "              (end > last_tranche.end && amount >= last_tranche.amount));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tranches[i];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 134,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 125,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n\n    // Need to have tuples, length check\n\n    require(init_tranches.length % tranche_size == 0);\n\n    // A tranche with amount zero can never be selected and is therefore useless.\n\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\n\n    require(init_tranches[amount_offset] > 0);\n\n\n\n    tranches.length = init_tranches.length.div(tranche_size);\n\n    Tranche memory last_tranche;\n\n    for (uint i = 0; i < tranches.length; i++) {\n\n      uint tranche_offset = i.mul(tranche_size);\n\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\n\n      uint start = init_tranches[tranche_offset.add(start_offset)];\n\n      uint end = init_tranches[tranche_offset.add(end_offset)];\n\n      uint price = init_tranches[tranche_offset.add(price_offset)];\n\n      // No invalid steps\n\n      require(block.timestamp < start && start < end);\n\n      // Bail out when entering unnecessary tranches\n\n      // This is preferably checked before deploying contract into any blockchain.\n\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n\n              (end > last_tranche.end && amount >= last_tranche.amount));\n\n\n\n      last_tranche = Tranche(amount, start, end, price);\n\n      tranches[i] = last_tranche;\n\n    }\n",
                    "message": "TokenTranchePricing.TokenTranchePricing (TokenTranchePricing.sol#100-125) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp < start && start < end) (TokenTranchePricing.sol#116)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": 138,
                    "vulnerability_code": "  function getCurrentTranche(uint tokensSold) private constant returns (Tranche storage) {\n\n    for (uint i = 0; i < tranches.length; i++) {\n\n      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n\n        return tranches[i];\n\n      }\n\n    }\n\n    // No tranche is currently active\n\n    revert();\n",
                    "message": "TokenTranchePricing.getCurrentTranche (TokenTranchePricing.sol#130-138) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount (TokenTranchePricing.sol#132-134)\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in TokenTranchePricing.sol:\n\t- pragma solidity^0.4.15 (TokenTranchePricing.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (TokenTranchePricing.sol#65): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": 125,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n\n    // Need to have tuples, length check\n\n    require(init_tranches.length % tranche_size == 0);\n\n    // A tranche with amount zero can never be selected and is therefore useless.\n\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\n\n    require(init_tranches[amount_offset] > 0);\n\n\n\n    tranches.length = init_tranches.length.div(tranche_size);\n\n    Tranche memory last_tranche;\n\n    for (uint i = 0; i < tranches.length; i++) {\n\n      uint tranche_offset = i.mul(tranche_size);\n\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\n\n      uint start = init_tranches[tranche_offset.add(start_offset)];\n\n      uint end = init_tranches[tranche_offset.add(end_offset)];\n\n      uint price = init_tranches[tranche_offset.add(price_offset)];\n\n      // No invalid steps\n\n      require(block.timestamp < start && start < end);\n\n      // Bail out when entering unnecessary tranches\n\n      // This is preferably checked before deploying contract into any blockchain.\n\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n\n              (end > last_tranche.end && amount >= last_tranche.amount));\n\n\n\n      last_tranche = Tranche(amount, start, end, price);\n\n      tranches[i] = last_tranche;\n\n    }\n",
                    "message": "Function 'TokenTranchePricing.TokenTranchePricing' (TokenTranchePricing.sol#100-125) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n",
                    "message": "Parameter 'init_tranches' of TokenTranchePricing.TokenTranchePricing (TokenTranchePricing.sol#100) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant amount_offset = 0;\n",
                    "message": "Constant 'TokenTranchePricing.amount_offset' (TokenTranchePricing.sol#90) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant start_offset = 1;\n",
                    "message": "Constant 'TokenTranchePricing.start_offset' (TokenTranchePricing.sol#91) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant end_offset = 2;\n",
                    "message": "Constant 'TokenTranchePricing.end_offset' (TokenTranchePricing.sol#92) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant price_offset = 3;\n",
                    "message": "Constant 'TokenTranchePricing.price_offset' (TokenTranchePricing.sol#93) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant tranche_size = 4;\n",
                    "message": "Constant 'TokenTranchePricing.tranche_size' (TokenTranchePricing.sol#94) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    tranches.length = init_tranches.length.div(tranche_size);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentTranche(uint tokensSold) private constant returns (Tranche storage) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentPrice(uint tokensSold) internal constant returns (uint result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 65,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant amount_offset = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant start_offset = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant end_offset = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant price_offset = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant tranche_size = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/Burnable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in Burnable.sol:\n\t- pragma solidity^0.4.15 (Burnable.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/LostAndFoundToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_10"
            ],
            "vulnerability_findings": [
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n\n    require(msg.sender == getLostAndFoundMaster());\n\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n\n    //  getting them stuck in another address by accident.\n\n    token_contract.approve(agent, tokens);\n",
                    "message": "LostAndFoundToken.enableLostAndFound (LostAndFoundToken.sol#53-58) does not use the value returned by external calls:\n\t-token_contract.approve(agent,tokens) (LostAndFoundToken.sol#57)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": "EIP20Token.totalSupply (LostAndFoundToken.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (LostAndFoundToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transfer (LostAndFoundToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transferFrom (LostAndFoundToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (LostAndFoundToken.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (LostAndFoundToken.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": 58,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n\n    require(msg.sender == getLostAndFoundMaster());\n\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n\n    //  getting them stuck in another address by accident.\n\n    token_contract.approve(agent, tokens);\n",
                    "message": "LostAndFoundToken.enableLostAndFound (LostAndFoundToken.sol#53-58) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in LostAndFoundToken.sol:\n\t- pragma solidity^0.4.15 (LostAndFoundToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (LostAndFoundToken.sol#33): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n",
                    "message": "Parameter 'token_contract' of LostAndFoundToken.enableLostAndFound (LostAndFoundToken.sol#53) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns (address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/MintableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is Mintable, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (MintableToken.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n\n    mintInternal(receiver, amount);\n",
                    "message": "MintableToken.mint (MintableToken.sol#172-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 182,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n\n    mintAgents[addr] = state;\n\n    MintingAgentChanged(addr, state);\n",
                    "message": "MintableToken.setMintAgent (MintableToken.sol#179-182) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in MintableToken.sol:\n\t- pragma solidity^0.4.15 (MintableToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (MintableToken.sol#50): it allows old versions\n\t- pragma solidity^0.4.15 (MintableToken.sol#104): it allows old versions\n\t- pragma solidity^0.4.15 (MintableToken.sol#128): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (MintableToken.sol#23-25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n\n    require(multisig != address(0));\n\n    // Cannot create a token without supply and no minting\n\n    require(mintable || initialSupply != 0);\n\n    // Create initially all balance on the team multisig\n\n    if (initialSupply > 0)\n\n      mintInternal(multisig, initialSupply);\n\n    // No more new supply allowed after the token creation\n\n    mintingFinished = !mintable;\n",
                    "message": "Function 'MintableToken.MintableToken' (MintableToken.sol#156-165) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/UpgradeableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public totalUpgraded = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "Reentrancy in UpgradeableToken.upgrade (UpgradeableToken.sol#208-224):\n\tExternal calls:\n\t- upgradeAgent.upgradeFrom(msg.sender,value) (UpgradeableToken.sol#217)\n\tState variables written after the call(s):\n\t- totalUpgraded (UpgradeableToken.sol#221)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public originalSupply;\n",
                    "message": "UpgradeAgent.originalSupply should be constant (UpgradeableToken.sol#67)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (UpgradeableToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transfer (UpgradeableToken.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transferFrom (UpgradeableToken.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (UpgradeableToken.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (UpgradeableToken.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
                    "message": "UpgradeAgent.isUpgradeAgent (UpgradeableToken.sol#70-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
                    "message": "UpgradeAgent.upgradeFrom (UpgradeableToken.sol#90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "UpgradeableToken.upgrade (UpgradeableToken.sol#208-224) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n\n    setUpgradeMaster(new_master);\n",
                    "message": "UpgradeableToken.changeUpgradeMaster (UpgradeableToken.sol#262-264) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in UpgradeableToken.sol:\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#46): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#96): it allows old versions\n\t- pragma solidity^0.4.15 (UpgradeableToken.sol#150): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "  function UpgradeableToken(address master) internal {\n\n    setUpgradeMaster(master);\n",
                    "message": "Function 'UpgradeableToken.UpgradeableToken' (UpgradeableToken.sol#201-203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.changeUpgradeMaster (UpgradeableToken.sol#262) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setUpgradeMaster(address new_master) private {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.setUpgradeMaster (UpgradeableToken.sol#269) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUpgradeState() public constant returns(UpgradeState) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/EIP20Token.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": "EIP20Token.totalSupply (EIP20Token.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (EIP20Token.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transfer (EIP20Token.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transferFrom (EIP20Token.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (EIP20Token.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (EIP20Token.sol#16) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in EIP20Token.sol:\n\t- pragma solidity^0.4.15 (EIP20Token.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/ReleasableToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ReleasableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public released = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
                    "message": "StandardToken.transferFrom.allowance (local variable @ ReleasableToken.sol#178) shadows:\n\t- StandardToken.allowance (function @ ReleasableToken.sol#215-217)\n\t- EIP20Token.allowance (function @ ReleasableToken.sol#16)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n\n    return total_supply;\n",
                    "message": "StandardToken.totalSupply (ReleasableToken.sol#146-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": "EIP20Token.totalSupply (ReleasableToken.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
                    "message": "StandardToken.balanceOf (ReleasableToken.sol#167-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (ReleasableToken.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (ReleasableToken.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "StandardToken.approve (ReleasableToken.sol#196-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (ReleasableToken.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 217,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
                    "message": "StandardToken.allowance (ReleasableToken.sol#215-217) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.addApproval (ReleasableToken.sol#225-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.subApproval (ReleasableToken.sol#237-248) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 319,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (ReleasableToken.sol#316-319) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": 356,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\n\n    releaseAgent = addr;\n",
                    "message": "ReleasableToken.setReleaseAgent (ReleasableToken.sol#353-356) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": 363,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n\n    transferAgents[addr] = state;\n",
                    "message": "ReleasableToken.setTransferAgent (ReleasableToken.sol#361-363) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 371,
                    "vulnerability_to_line": 373,
                    "vulnerability_code": "  function releaseTokenTransfer() public onlyReleaseAgent {\n\n    released = true;\n",
                    "message": "ReleasableToken.releaseTokenTransfer (ReleasableToken.sol#371-373) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in ReleasableToken.sol:\n\t- pragma solidity^0.4.15 (ReleasableToken.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (ReleasableToken.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (ReleasableToken.sol#87): it allows old versions\n\t- pragma solidity^0.4.15 (ReleasableToken.sol#100): it allows old versions\n\t- pragma solidity^0.4.15 (ReleasableToken.sol#124): it allows old versions\n\t- pragma solidity^0.4.15 (ReleasableToken.sol#278): it allows old versions\n\t- pragma solidity^0.4.15 (ReleasableToken.sol#325): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'StandardToken.total_supply' (ReleasableToken.sol#141) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (ReleasableToken.sol#298-300) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 353,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 325,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint) private balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/Crowdsale.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 63,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Haltable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 380,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract ReleasableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 691,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is Mintable, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public released = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 530,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public totalUpgraded = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 695,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 861,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public tokensSold = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 864,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public weiRaised = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 867,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public investorCount = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 870,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public finalized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 873,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public requireCustomerId = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 879,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public requiredSignedAddress = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1239,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      tranches[i] = last_tranche;\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 1249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tranches[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 926,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(start != 0 && end != 0);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 927,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(block.timestamp < start && start < end);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(block.timestamp < start && start < end);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1235,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1236,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "              (end > last_tranche.end && amount >= last_tranche.amount));\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1355,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(startingTime > block.timestamp && startingTime < endsAt);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 1361,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(endingTime > block.timestamp && endingTime > startsAt);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else return State.Success;\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1248,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1249,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        return tranches[i];\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 1250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 969,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      investorCount++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_75"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 579,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "Reentrancy in UpgradeableToken.upgrade (Crowdsale.sol#563-579):\n\tExternal calls:\n\t- upgradeAgent.upgradeFrom(msg.sender,value) (Crowdsale.sol#572)\n\tState variables written after the call(s):\n\t- totalUpgraded (Crowdsale.sol#576)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": 670,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n\n    require(msg.sender == getLostAndFoundMaster());\n\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n\n    //  getting them stuck in another address by accident.\n\n    token_contract.approve(agent, tokens);\n",
                    "message": "LostAndFoundToken.enableLostAndFound (Crowdsale.sol#665-670) does not use the value returned by external calls:\n\t-token_contract.approve(agent,tokens) (Crowdsale.sol#669)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": 1351,
                    "vulnerability_code": "  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n\n    token.releaseTokenTransfer();\n\n    uint unsoldTokens = token.balanceOf(address(this));\n\n    token.transfer(multisigWallet, unsoldTokens);\n\n    super.finalize();\n",
                    "message": "Crowdsale.finalize (Crowdsale.sol#1346-1351) does not use the value returned by external calls:\n\t-token.transfer(multisigWallet,unsoldTokens) (Crowdsale.sol#1349)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 1312,
                    "vulnerability_to_line": 1314,
                    "vulnerability_code": "  function assignTokens(address receiver, uint tokenAmount) internal {\n\n    token.transfer(receiver, tokenAmount);\n",
                    "message": "Crowdsale.assignTokens (Crowdsale.sol#1312-1314) does not use the value returned by external calls:\n\t-token.transfer(receiver,tokenAmount) (Crowdsale.sol#1313)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
                    "message": "StandardToken.transferFrom.allowance (local variable @ Crowdsale.sol#269) shadows:\n\t- StandardToken.allowance (function @ Crowdsale.sol#306-308)\n\t- EIP20Token.allowance (function @ Crowdsale.sol#161)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 1346,
                    "vulnerability_to_line": 1351,
                    "vulnerability_code": "  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n\n    token.releaseTokenTransfer();\n\n    uint unsoldTokens = token.balanceOf(address(this));\n\n    token.transfer(multisigWallet, unsoldTokens);\n\n    super.finalize();\n",
                    "message": "Reentrancy in Crowdsale.finalize (Crowdsale.sol#1346-1351):\n\tExternal calls:\n\t- token.releaseTokenTransfer() (Crowdsale.sol#1347)\n\t- unsoldTokens = token.balanceOf(address(this)) (Crowdsale.sol#1348)\n\t- token.transfer(multisigWallet,unsoldTokens) (Crowdsale.sol#1349)\n\tState variables written after the call(s):\n\t- finalized (Crowdsale.sol#1350)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 999,
                    "vulnerability_code": "  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\n\n    require(receiver != address(0));\n\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n\n    require(tokenAmount != 0);\n\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\n\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n",
                    "message": "Reentrancy in GenericCrowdsale.preallocate (Crowdsale.sol#993-999):\n\tExternal calls:\n\t- tokenAmount = fullTokens.mul(10 ** uint256(token.decimals())) (Crowdsale.sol#995)\n\tState variables written after the call(s):\n\t- investedAmountOf (Crowdsale.sol#998)\n\t- tokenAmountOf (Crowdsale.sol#998)\n\t- tokensSold (Crowdsale.sol#998)\n\t- weiRaised (Crowdsale.sol#998)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": 930,
                    "vulnerability_code": "  function GenericCrowdsale(address team_multisig, uint start, uint end) internal {\n\n    setMultisig(team_multisig);\n\n\n\n    // Don't mess the dates\n\n    require(start != 0 && end != 0);\n\n    require(block.timestamp < start && start < end);\n\n    startsAt = start;\n\n    endsAt = end;\n",
                    "message": "GenericCrowdsale.GenericCrowdsale (Crowdsale.sol#922-930) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp < start && start < end) (Crowdsale.sol#927)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": 1108,
                    "vulnerability_code": "  function getState() public constant returns (State) {\n\n    if (finalized) return State.Finalized;\n\n    else if (block.timestamp < startsAt) return State.PreFunding;\n\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n\n    else return State.Success;\n",
                    "message": "GenericCrowdsale.getState (Crowdsale.sol#1103-1108) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- block.timestamp <= endsAt && ! isCrowdsaleFull() (Crowdsale.sol#1106-1107)\n\t- block.timestamp < startsAt (Crowdsale.sol#1105-1107)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": 1241,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n\n    // Need to have tuples, length check\n\n    require(init_tranches.length % tranche_size == 0);\n\n    // A tranche with amount zero can never be selected and is therefore useless.\n\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\n\n    require(init_tranches[amount_offset] > 0);\n\n\n\n    tranches.length = init_tranches.length.div(tranche_size);\n\n    Tranche memory last_tranche;\n\n    for (uint i = 0; i < tranches.length; i++) {\n\n      uint tranche_offset = i.mul(tranche_size);\n\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\n\n      uint start = init_tranches[tranche_offset.add(start_offset)];\n\n      uint end = init_tranches[tranche_offset.add(end_offset)];\n\n      uint price = init_tranches[tranche_offset.add(price_offset)];\n\n      // No invalid steps\n\n      require(block.timestamp < start && start < end);\n\n      // Bail out when entering unnecessary tranches\n\n      // This is preferably checked before deploying contract into any blockchain.\n\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n\n              (end > last_tranche.end && amount >= last_tranche.amount));\n\n\n\n      last_tranche = Tranche(amount, start, end, price);\n\n      tranches[i] = last_tranche;\n\n    }\n",
                    "message": "TokenTranchePricing.TokenTranchePricing (Crowdsale.sol#1216-1241) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(block.timestamp < start && start < end) (Crowdsale.sol#1232)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1246,
                    "vulnerability_to_line": 1254,
                    "vulnerability_code": "  function getCurrentTranche(uint tokensSold) private constant returns (Tranche storage) {\n\n    for (uint i = 0; i < tranches.length; i++) {\n\n      if (tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount) {\n\n        return tranches[i];\n\n      }\n\n    }\n\n    // No tranche is currently active\n\n    revert();\n",
                    "message": "TokenTranchePricing.getCurrentTranche (Crowdsale.sol#1246-1254) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- tranches[i].start <= block.timestamp && block.timestamp < tranches[i].end && tokensSold < tranches[i].amount (Crowdsale.sol#1248-1250)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1354,
                    "vulnerability_to_line": 1357,
                    "vulnerability_code": "  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\n\n    require(startingTime > block.timestamp && startingTime < endsAt);\n\n    startsAt = startingTime;\n",
                    "message": "Crowdsale.setStartingTime (Crowdsale.sol#1354-1357) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(startingTime > block.timestamp && startingTime < endsAt) (Crowdsale.sol#1355)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function setEndingTime(uint endingTime) public onlyOwner notFinished {\n\n    require(endingTime > block.timestamp && endingTime > startsAt);\n\n    endsAt = endingTime;\n",
                    "message": "Crowdsale.setEndingTime (Crowdsale.sol#1360-1363) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(endingTime > block.timestamp && endingTime > startsAt) (Crowdsale.sol#1361)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 770,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  string public name = \"WorldBit Token\";\n",
                    "message": "CrowdsaleToken.name should be constant (Crowdsale.sol#770)\nCrowdsaleToken.symbol should be constant (Crowdsale.sol#772)\nUpgradeAgent.originalSupply should be constant (Crowdsale.sol#476)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (Crowdsale.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (Crowdsale.sol#157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": 260,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
                    "message": "StandardToken.balanceOf (Crowdsale.sol#258-260) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": 298,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "StandardToken.approve (Crowdsale.sol#287-298) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 160,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (Crowdsale.sol#160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": 308,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
                    "message": "StandardToken.allowance (Crowdsale.sol#306-308) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (Crowdsale.sol#161) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 316,
                    "vulnerability_to_line": 321,
                    "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.addApproval (Crowdsale.sol#316-321) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 339,
                    "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.subApproval (Crowdsale.sol#328-339) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": 400,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\n\n    releaseAgent = addr;\n",
                    "message": "ReleasableToken.setReleaseAgent (Crowdsale.sol#397-400) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n\n    transferAgents[addr] = state;\n",
                    "message": "ReleasableToken.setTransferAgent (Crowdsale.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 481,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
                    "message": "UpgradeAgent.isUpgradeAgent (Crowdsale.sol#479-481) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 499,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
                    "message": "UpgradeAgent.upgradeFrom (Crowdsale.sol#499) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 579,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "UpgradeableToken.upgrade (Crowdsale.sol#563-579) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n\n    setUpgradeMaster(new_master);\n",
                    "message": "UpgradeableToken.changeUpgradeMaster (Crowdsale.sol#617-619) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 719,
                    "vulnerability_to_line": 721,
                    "vulnerability_code": "  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n\n    mintInternal(receiver, amount);\n",
                    "message": "MintableToken.mint (Crowdsale.sol#719-721) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": 729,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n\n    mintAgents[addr] = state;\n\n    MintingAgentChanged(addr, state);\n",
                    "message": "MintableToken.setMintAgent (Crowdsale.sol#726-729) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": 817,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n\n    WorldBitEvent(object, operand, command, val1, val2, location, str1, str2, comment);\n",
                    "message": "CrowdsaleToken.WorldBit (Crowdsale.sol#815-817) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 937,
                    "vulnerability_to_line": 939,
                    "vulnerability_code": "  function() payable public {\n\n    buy();\n",
                    "message": "GenericCrowdsale.fallback (Crowdsale.sol#937-939) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 993,
                    "vulnerability_to_line": 999,
                    "vulnerability_code": "  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\n\n    require(receiver != address(0));\n\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n\n    require(tokenAmount != 0);\n\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\n\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n",
                    "message": "GenericCrowdsale.preallocate (Crowdsale.sol#993-999) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1023,
                    "vulnerability_to_line": 1027,
                    "vulnerability_code": "  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\n\n    bytes32 hash = sha256(msg.sender);\n\n    require(ecrecover(hash, v, r, s) == signerAddress);\n\n    investInternal(msg.sender, customerId);\n",
                    "message": "GenericCrowdsale.buyWithSignedAddress (Crowdsale.sol#1023-1027) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1035,
                    "vulnerability_to_line": 1037,
                    "vulnerability_code": "  function buyWithCustomerId(uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\n\n    investInternal(msg.sender, customerId);\n",
                    "message": "GenericCrowdsale.buyWithCustomerId (Crowdsale.sol#1035-1037) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": 1067,
                    "vulnerability_code": "  function setRequireCustomerId(bool value) public onlyOwner {\n\n    requireCustomerId = value;\n\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n",
                    "message": "GenericCrowdsale.setRequireCustomerId (Crowdsale.sol#1064-1067) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": 1079,
                    "vulnerability_code": "  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\n\n    requiredSignedAddress = value;\n\n    signerAddress = signer;\n\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n",
                    "message": "GenericCrowdsale.setRequireSignedAddress (Crowdsale.sol#1075-1079) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1084,
                    "vulnerability_to_line": 1087,
                    "vulnerability_code": "  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n\n    earlyParticipantWhitelist[addr] = status;\n\n    Whitelisted(addr, status);\n",
                    "message": "GenericCrowdsale.setEarlyParticipantWhitelist (Crowdsale.sol#1084-1087) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1354,
                    "vulnerability_to_line": 1357,
                    "vulnerability_code": "  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\n\n    require(startingTime > block.timestamp && startingTime < endsAt);\n\n    startsAt = startingTime;\n",
                    "message": "Crowdsale.setStartingTime (Crowdsale.sol#1354-1357) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": 1363,
                    "vulnerability_code": "  function setEndingTime(uint endingTime) public onlyOwner notFinished {\n\n    require(endingTime > block.timestamp && endingTime > startsAt);\n\n    endsAt = endingTime;\n",
                    "message": "Crowdsale.setEndingTime (Crowdsale.sol#1360-1363) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in Crowdsale.sol:\n\t- pragma solidity^0.4.15 (Crowdsale.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#50): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#94): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#148): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#178): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#191): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#215): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#369): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#455): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#505): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#645): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#675): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#746): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#825): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#1181): it allows old versions\n\t- pragma solidity^0.4.15 (Crowdsale.sol#1267): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (Crowdsale.sol#23-25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'StandardToken.total_supply' (Crowdsale.sol#232) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": 558,
                    "vulnerability_code": "  function UpgradeableToken(address master) internal {\n\n    setUpgradeMaster(master);\n",
                    "message": "Function 'UpgradeableToken.UpgradeableToken' (Crowdsale.sol#556-558) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 617,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.changeUpgradeMaster (Crowdsale.sol#617) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 624,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setUpgradeMaster(address new_master) private {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.setUpgradeMaster (Crowdsale.sol#624) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 665,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n",
                    "message": "Parameter 'token_contract' of LostAndFoundToken.enableLostAndFound (Crowdsale.sol#665) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 703,
                    "vulnerability_to_line": 712,
                    "vulnerability_code": "  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n\n    require(multisig != address(0));\n\n    // Cannot create a token without supply and no minting\n\n    require(mintable || initialSupply != 0);\n\n    // Create initially all balance on the team multisig\n\n    if (initialSupply > 0)\n\n      mintInternal(multisig, initialSupply);\n\n    // No more new supply allowed after the token creation\n\n    mintingFinished = !mintable;\n",
                    "message": "Function 'MintableToken.MintableToken' (Crowdsale.sol#703-712) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": 794,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, mintable) {\n\n    require(token_retriever != address(0));\n\n    decimals = token_decimals;\n\n    lost_and_found_master = token_retriever;\n",
                    "message": "Function 'CrowdsaleToken.CrowdsaleToken' (Crowdsale.sol#789-794) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'initial_supply' of CrowdsaleToken.CrowdsaleToken (Crowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'token_decimals' of CrowdsaleToken.CrowdsaleToken (Crowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'team_multisig' of CrowdsaleToken.CrowdsaleToken (Crowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 789,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, bool mintable, address token_retriever) public\n",
                    "message": "Parameter 'token_retriever' of CrowdsaleToken.CrowdsaleToken (Crowdsale.sol#789) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": 817,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n\n    WorldBitEvent(object, operand, command, val1, val2, location, str1, str2, comment);\n",
                    "message": "Function 'CrowdsaleToken.WorldBit' (Crowdsale.sol#815-817) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 776,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public lost_and_found_master;\n",
                    "message": "Variable 'CrowdsaleToken.lost_and_found_master' (Crowdsale.sol#776) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": 930,
                    "vulnerability_code": "  function GenericCrowdsale(address team_multisig, uint start, uint end) internal {\n\n    setMultisig(team_multisig);\n\n\n\n    // Don't mess the dates\n\n    require(start != 0 && end != 0);\n\n    require(block.timestamp < start && start < end);\n\n    startsAt = start;\n\n    endsAt = end;\n",
                    "message": "Function 'GenericCrowdsale.GenericCrowdsale' (Crowdsale.sol#922-930) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 922,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function GenericCrowdsale(address team_multisig, uint start, uint end) internal {\n",
                    "message": "Parameter 'team_multisig' of GenericCrowdsale.GenericCrowdsale (Crowdsale.sol#922) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": 1241,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n\n    // Need to have tuples, length check\n\n    require(init_tranches.length % tranche_size == 0);\n\n    // A tranche with amount zero can never be selected and is therefore useless.\n\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\n\n    require(init_tranches[amount_offset] > 0);\n\n\n\n    tranches.length = init_tranches.length.div(tranche_size);\n\n    Tranche memory last_tranche;\n\n    for (uint i = 0; i < tranches.length; i++) {\n\n      uint tranche_offset = i.mul(tranche_size);\n\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\n\n      uint start = init_tranches[tranche_offset.add(start_offset)];\n\n      uint end = init_tranches[tranche_offset.add(end_offset)];\n\n      uint price = init_tranches[tranche_offset.add(price_offset)];\n\n      // No invalid steps\n\n      require(block.timestamp < start && start < end);\n\n      // Bail out when entering unnecessary tranches\n\n      // This is preferably checked before deploying contract into any blockchain.\n\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n\n              (end > last_tranche.end && amount >= last_tranche.amount));\n\n\n\n      last_tranche = Tranche(amount, start, end, price);\n\n      tranches[i] = last_tranche;\n\n    }\n",
                    "message": "Function 'TokenTranchePricing.TokenTranchePricing' (Crowdsale.sol#1216-1241) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n",
                    "message": "Parameter 'init_tranches' of TokenTranchePricing.TokenTranchePricing (Crowdsale.sol#1216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant amount_offset = 0;\n",
                    "message": "Constant 'TokenTranchePricing.amount_offset' (Crowdsale.sol#1206) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant start_offset = 1;\n",
                    "message": "Constant 'TokenTranchePricing.start_offset' (Crowdsale.sol#1207) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant end_offset = 2;\n",
                    "message": "Constant 'TokenTranchePricing.end_offset' (Crowdsale.sol#1208) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant price_offset = 3;\n",
                    "message": "Constant 'TokenTranchePricing.price_offset' (Crowdsale.sol#1209) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant tranche_size = 4;\n",
                    "message": "Constant 'TokenTranchePricing.tranche_size' (Crowdsale.sol#1210) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenAmount(uint weiAmount, address) internal constant returns (uint weiAllowed, uint tokenAmount) {\n",
                    "message": "Parameter '' of Crowdsale.calculateTokenAmount (Crowdsale.sol#1317) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n",
                    "message": "Parameter 'token_contract' of Crowdsale.enableLostAndFound (Crowdsale.sol#1369) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1294,
                    "vulnerability_to_line": 1309,
                    "vulnerability_code": "  function Crowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches)\n\n  GenericCrowdsale(team_multisig, start, end) TokenTranchePricing(init_tranches) public {\n\n    require(end == tranches[tranches.length.sub(1)].end);\n\n    // Testing values\n\n    token = new CrowdsaleToken(token_initial_supply, token_decimals, team_multisig, token_mintable, token_retriever);\n\n\n\n    // Set permissions to mint, transfer and release\n\n    token.setMintAgent(address(this), true);\n\n    token.setTransferAgent(address(this), true);\n\n    token.setReleaseAgent(address(this));\n\n\n\n    // Tokens to be sold through this contract\n\n    token.mint(address(this), sellable_tokens);\n\n    // We don't need to mint anymore during the lifetime of the contract.\n\n    token.setMintAgent(address(this), false);\n",
                    "message": "Function 'Crowdsale.Crowdsale' (Crowdsale.sol#1294-1309) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches)\n",
                    "message": "Parameter 'team_multisig' of Crowdsale.Crowdsale (Crowdsale.sol#1294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches)\n",
                    "message": "Parameter 'token_retriever' of Crowdsale.Crowdsale (Crowdsale.sol#1294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches)\n",
                    "message": "Parameter 'init_tranches' of Crowdsale.Crowdsale (Crowdsale.sol#1294) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 private constant token_decimals = 18;\n",
                    "message": "Constant 'Crowdsale.token_decimals' (Crowdsale.sol#1279) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant token_initial_supply = 1575 * (10 ** 5) * (10 ** uint(token_decimals));\n",
                    "message": "Constant 'Crowdsale.token_initial_supply' (Crowdsale.sol#1280) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private constant token_mintable = true;\n",
                    "message": "Constant 'Crowdsale.token_mintable' (Crowdsale.sol#1281) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 1282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant sellable_tokens = 525 * (10 ** 5) * (10 ** uint(token_decimals));\n",
                    "message": "Constant 'Crowdsale.sellable_tokens' (Crowdsale.sol#1282) is not in UPPER_CASE_WITH_UNDERSCORES\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 607,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
                    "vulnerability_from_line": 1223,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    tranches.length = init_tranches.length.div(tranche_size);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 111,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 157,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 258,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 605,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUpgradeState() public constant returns(UpgradeState) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 632,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 658,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns (address);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 807,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 811,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns(address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getState() public constant returns (State) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull() internal constant returns (bool full);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenAmount(uint weiAmount, address agent) internal constant returns (uint weiAllowed, uint tokenAmount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1246,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentTranche(uint tokensSold) private constant returns (Tranche storage) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1259,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getCurrentPrice(uint tokensSold) internal constant returns (uint result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenAmount(uint weiAmount, address) internal constant returns (uint weiAllowed, uint tokenAmount) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isCrowdsaleFull() internal constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 1341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLostAndFoundMaster() internal constant returns (address) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1225,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 1247,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < tranches.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 397,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 726,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1064,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRequireCustomerId(bool value) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1075,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1084,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1354,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 1360,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setEndingTime(uint endingTime) public onlyOwner notFinished {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 191,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 369,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 455,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 645,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 675,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 746,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 825,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1181,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 1267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint) private balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1206,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant amount_offset = 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant start_offset = 1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1208,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant end_offset = 2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1209,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant price_offset = 3;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1210,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant tranche_size = 4;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1279,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 private constant token_decimals = 18;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1280,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant token_initial_supply = 1575 * (10 ** 5) * (10 ** uint(token_decimals));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1281,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool private constant token_mintable = true;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 1282,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private constant sellable_tokens = 525 * (10 ** 5) * (10 ** uint(token_decimals));\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 230,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 846,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 1189,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenAmount(uint weiAmount, address agent) internal constant returns (uint weiAllowed, uint tokenAmount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 1317,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateTokenAmount(uint weiAmount, address) internal constant returns (uint weiAllowed, uint tokenAmount) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 937,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function() payable public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 815,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function WorldBit(address object, bytes2 operand, bytes2 command, uint256 val1, uint256 val2, string location, string str1, string str2, string comment) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function TokenTranchePricing(uint[] init_tranches) public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 1294,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function Crowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches)\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/helpers/toBeUpgraded.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 175,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public totalUpgraded = 0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_28"
            ],
            "vulnerability_findings": [
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "Reentrancy in UpgradeableToken.upgrade (toBeUpgraded.sol#208-224):\n\tExternal calls:\n\t- upgradeAgent.upgradeFrom(msg.sender,value) (toBeUpgraded.sol#217)\n\tState variables written after the call(s):\n\t- totalUpgraded (toBeUpgraded.sol#221)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 368,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
                    "message": "StandardToken.transferFrom.allowance (local variable @ toBeUpgraded.sol#368) shadows:\n\t- StandardToken.allowance (function @ toBeUpgraded.sol#405-407)\n\t- EIP20Token.allowance (function @ toBeUpgraded.sol#16)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint public originalSupply;\n",
                    "message": "UpgradeAgent.originalSupply should be constant (toBeUpgraded.sol#67)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": 359,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
                    "message": "StandardToken.balanceOf (toBeUpgraded.sol#357-359) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (toBeUpgraded.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transfer (toBeUpgraded.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 345,
                    "vulnerability_to_line": 350,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool success) {\n\n    balances[msg.sender] = balances[msg.sender].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    Transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "StandardToken.transfer (toBeUpgraded.sol#345-350) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": 490,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n\n    return true;\n",
                    "message": "toBeUpgraded.transfer (toBeUpgraded.sol#488-490) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transferFrom (toBeUpgraded.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": 379,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool success) {\n\n    uint allowance = allowed[from][msg.sender];\n\n\n\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n\n    // require(value <= allowance);\n\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\n\n\n\n    balances[from] = balances[from].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    allowed[from][msg.sender] = allowance.sub(value);\n\n    Transfer(from, to, value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (toBeUpgraded.sol#367-379) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": 397,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "StandardToken.approve (toBeUpgraded.sol#386-397) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (toBeUpgraded.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (toBeUpgraded.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": 407,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
                    "message": "StandardToken.allowance (toBeUpgraded.sol#405-407) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
                    "message": "UpgradeAgent.isUpgradeAgent (toBeUpgraded.sol#70-72) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
                    "message": "UpgradeAgent.upgradeFrom (toBeUpgraded.sol#90) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 208,
                    "vulnerability_to_line": 224,
                    "vulnerability_code": "  function upgrade(uint value) public {\n\n    UpgradeState state = getUpgradeState();\n\n    // Ensure it's not called in a bad state\n\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n\n\n    // Validate input value.\n\n    require(value != 0);\n\n\n\n    // Upgrade agent reissues the tokens\n\n    upgradeAgent.upgradeFrom(msg.sender, value);\n\n    \n\n    // Take tokens out from circulation\n\n    burnTokens(msg.sender, value);\n\n    totalUpgraded = totalUpgraded.add(value);\n\n\n\n    Upgrade(msg.sender, upgradeAgent, value);\n",
                    "message": "UpgradeableToken.upgrade (toBeUpgraded.sol#208-224) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": 264,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n\n    setUpgradeMaster(new_master);\n",
                    "message": "UpgradeableToken.changeUpgradeMaster (toBeUpgraded.sol#262-264) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 415,
                    "vulnerability_to_line": 420,
                    "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.addApproval (toBeUpgraded.sol#415-420) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 438,
                    "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.subApproval (toBeUpgraded.sol#427-438) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in toBeUpgraded.sol:\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#46): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#96): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#150): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#290): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#314): it allows old versions\n\t- pragma solidity^0.4.15 (toBeUpgraded.sol#468): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 201,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "  function UpgradeableToken(address master) internal {\n\n    setUpgradeMaster(master);\n",
                    "message": "Function 'UpgradeableToken.UpgradeableToken' (toBeUpgraded.sol#201-203) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 262,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeUpgradeMaster(address new_master) onlyMaster public {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.changeUpgradeMaster (toBeUpgraded.sol#262) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 269,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setUpgradeMaster(address new_master) private {\n",
                    "message": "Parameter 'new_master' of UpgradeableToken.setUpgradeMaster (toBeUpgraded.sol#269) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'StandardToken.total_supply' (toBeUpgraded.sol#331) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 472,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "contract toBeUpgraded is UpgradeableToken, StandardToken {\n\n    \n\n  bool public canUp;\n\n\n\n  //constructor\n\n  function toBeUpgraded(uint value) public\n\n  UpgradeableToken(msg.sender) {\n\n    mintInternal(msg.sender, value);\n\n    setCanUp(true);\n\n  }\n\n\n\n  function setCanUp(bool value) public {\n\n    canUp = value;\n\n  }\n\n\n\n  //Blocked to avoid change of tokens amount except from upgrading\n\n  function transfer(address, uint) public returns (bool) {\n\n    return true;\n\n  }\n\n\n\n\n\n  /**\n\n   * Overriden for testing different values\n\n   */\n\n  function canUpgrade() public constant returns(bool) {\n\n     return canUp;\n\n  }\n",
                    "message": "Contract 'toBeUpgraded' (toBeUpgraded.sol#472-499) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n",
                    "message": "Parameter '' of toBeUpgraded.transfer (toBeUpgraded.sol#488) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n",
                    "message": "Parameter '_scope_0' of toBeUpgraded.transfer (toBeUpgraded.sol#488) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 252,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 250,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUpgradeState() public constant returns(UpgradeState) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 336,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 357,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 405,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 496,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canUpgrade() public constant returns(bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 386,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_TRANSFER_SHOULD_THROW",
                    "vulnerability_from_line": 488,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 150,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 290,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 314,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 468,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 331,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint) private balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 333,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 166,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 329,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/helpers/toUpgrade.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n\n    return true;\n",
                    "message": "UpgradeAgent.isUpgradeAgent (toUpgrade.sol#27-29) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "  function upgradeFrom(address, uint) public {\n\n    //Does nothing, can't fail\n",
                    "message": "toUpgrade.upgradeFrom (toUpgrade.sol#62-64) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address from, uint value) public;\n",
                    "message": "UpgradeAgent.upgradeFrom (toUpgrade.sol#47) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in toUpgrade.sol:\n\t- pragma solidity^0.4.15 (toUpgrade.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (toUpgrade.sol#53): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 56,
                    "vulnerability_to_line": 65,
                    "vulnerability_code": "contract toUpgrade is UpgradeAgent {\n\n    \n\n  function toUpgrade(uint value) public {\n\n    originalSupply = value;\n\n  }\n\n\n\n  function upgradeFrom(address, uint) public {\n\n    //Does nothing, can't fail\n\n  }\n",
                    "message": "Contract 'toUpgrade' (toUpgrade.sol#56-65) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address, uint) public {\n",
                    "message": "Parameter '' of toUpgrade.upgradeFrom (toUpgrade.sol#62) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeFrom(address, uint) public {\n",
                    "message": "Parameter '_scope_0' of toUpgrade.upgradeFrom (toUpgrade.sol#62) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isUpgradeAgent() public constant returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/helpers/OwnableMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract OwnableMock is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (OwnableMock.sol#41-44) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in OwnableMock.sol:\n\t- pragma solidity^0.4.15 (OwnableMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (OwnableMock.sol#50): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (OwnableMock.sol#23-25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 56,
                    "vulnerability_code": "  function OwnableMock() public {\n",
                    "message": "Function 'OwnableMock.OwnableMock' (OwnableMock.sol#55-56) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/helpers/StandardTokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 178,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint allowance = allowed[from][msg.sender];\n",
                    "message": "StandardToken.transferFrom.allowance (local variable @ StandardTokenMock.sol#178) shadows:\n\t- StandardToken.allowance (function @ StandardTokenMock.sol#215-217)\n\t- EIP20Token.allowance (function @ StandardTokenMock.sol#16)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": "EIP20Token.totalSupply (StandardTokenMock.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": 148,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n\n    return total_supply;\n",
                    "message": "StandardToken.totalSupply (StandardTokenMock.sol#146-148) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": "EIP20Token.balanceOf (StandardTokenMock.sol#12) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": 169,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n\n    return balances[account];\n",
                    "message": "StandardToken.balanceOf (StandardTokenMock.sol#167-169) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transfer (StandardTokenMock.sol#13) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 155,
                    "vulnerability_to_line": 160,
                    "vulnerability_code": "  function transfer(address to, uint value) public returns (bool success) {\n\n    balances[msg.sender] = balances[msg.sender].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    Transfer(msg.sender, to, value);\n\n    return true;\n",
                    "message": "StandardToken.transfer (StandardTokenMock.sol#155-160) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 189,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint value) public returns (bool success) {\n\n    uint allowance = allowed[from][msg.sender];\n\n\n\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n\n    // require(value <= allowance);\n\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\n\n\n\n    balances[from] = balances[from].sub(value);\n\n    balances[to] = balances[to].add(value);\n\n    allowed[from][msg.sender] = allowance.sub(value);\n\n    Transfer(from, to, value);\n\n    return true;\n",
                    "message": "StandardToken.transferFrom (StandardTokenMock.sol#177-189) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.transferFrom (StandardTokenMock.sol#14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": 207,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n\n\n\n    // To change the approve amount you first have to reduce the addresses'\n\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n\n    //  already 0 to mitigate the race condition described here:\n\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n\n\n    allowed[msg.sender][spender] = value;\n\n    Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "StandardToken.approve (StandardTokenMock.sol#196-207) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool success);\n",
                    "message": "EIP20Token.approve (StandardTokenMock.sol#15) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": 217,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n\n    return allowed[account][spender];\n",
                    "message": "StandardToken.allowance (StandardTokenMock.sol#215-217) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": "EIP20Token.allowance (StandardTokenMock.sol#16) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 225,
                    "vulnerability_to_line": 230,
                    "vulnerability_code": "  function addApproval(address spender, uint addedValue) public returns (bool success) {\n\n      uint oldValue = allowed[msg.sender][spender];\n\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.addApproval (StandardTokenMock.sol#225-230) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 237,
                    "vulnerability_to_line": 248,
                    "vulnerability_code": "  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n\n\n      uint oldVal = allowed[msg.sender][spender];\n\n\n\n      if (subtractedValue > oldVal) {\n\n          allowed[msg.sender][spender] = 0;\n\n      } else {\n\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n\n      }\n\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n\n      return true;\n",
                    "message": "StandardToken.subApproval (StandardTokenMock.sol#237-248) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 282,
                    "vulnerability_to_line": 284,
                    "vulnerability_code": "  function mint(address receiver, uint amount) public {\n\n    mintInternal(receiver, amount);\n",
                    "message": "StandardTokenMock.mint (StandardTokenMock.sol#282-284) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 289,
                    "vulnerability_to_line": 291,
                    "vulnerability_code": "  function burnTokensMock(address account, uint value) public {\n\n    super.burnTokens(account, value);\n",
                    "message": "StandardTokenMock.burnTokensMock (StandardTokenMock.sol#289-291) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in StandardTokenMock.sol:\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#33): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#87): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#100): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#124): it allows old versions\n\t- pragma solidity^0.4.15 (StandardTokenMock.sol#278): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'StandardToken.total_supply' (StandardTokenMock.sol#141) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) public constant returns (uint256);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address owner, address spender) public constant returns (uint256 remaining);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 57,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 62,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 167,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address account) public constant returns (uint balance) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowance(address account, address spender) public constant returns (uint remaining) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 196,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint value) public returns (bool success) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 278,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 142,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint) private balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping (address => uint)) private allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                }
            ]
        }
    },
    "ico-world-bit/contracts/helpers/MintableTokenMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is Mintable, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 148,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": 44,
                    "vulnerability_code": "  function transferOwnership(address newOwner) onlyOwner public {\n\n    require(newOwner != address(0));\n\n    owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (MintableTokenMock.sol#41-44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": 174,
                    "vulnerability_code": "  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n\n    mintInternal(receiver, amount);\n",
                    "message": "MintableToken.mint (MintableTokenMock.sol#172-174) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": 182,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n\n    mintAgents[addr] = state;\n\n    MintingAgentChanged(addr, state);\n",
                    "message": "MintableToken.setMintAgent (MintableTokenMock.sol#179-182) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) { return total_supply; }\n",
                    "message": "MintableTokenMock.totalSupply (MintableTokenMock.sol#214) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address customer) public constant returns (uint) { return balances[customer]; }\n",
                    "message": "MintableTokenMock.balanceOf (MintableTokenMock.sol#215) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) { revert(); }\n",
                    "message": "MintableTokenMock.transfer (MintableTokenMock.sol#216) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": "Detected issues with version pragma in MintableTokenMock.sol:\n\t- pragma solidity^0.4.15 (MintableTokenMock.sol#3): it allows old versions\n\t- pragma solidity^0.4.15 (MintableTokenMock.sol#50): it allows old versions\n\t- pragma solidity^0.4.15 (MintableTokenMock.sol#104): it allows old versions\n\t- pragma solidity^0.4.15 (MintableTokenMock.sol#128): it allows old versions\n\t- pragma solidity^0.4.15 (MintableTokenMock.sol#199): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function Ownable() internal {\n\n    owner = msg.sender;\n",
                    "message": "Function 'Ownable.Ownable' (MintableTokenMock.sol#23-25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 156,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n\n    require(multisig != address(0));\n\n    // Cannot create a token without supply and no minting\n\n    require(mintable || initialSupply != 0);\n\n    // Create initially all balance on the team multisig\n\n    if (initialSupply > 0)\n\n      mintInternal(multisig, initialSupply);\n\n    // No more new supply allowed after the token creation\n\n    mintingFinished = !mintable;\n",
                    "message": "Function 'MintableToken.MintableToken' (MintableTokenMock.sol#156-165) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function MintableTokenMock(uint initialSupply, address multisig, bool mintable) MintableToken(initialSupply, multisig, mintable) public {}\n",
                    "message": "Function 'MintableTokenMock.MintableTokenMock' (MintableTokenMock.sol#207) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) { revert(); }\n",
                    "message": "Parameter '' of MintableTokenMock.transfer (MintableTokenMock.sol#216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) { revert(); }\n",
                    "message": "Parameter '_scope_0' of MintableTokenMock.transfer (MintableTokenMock.sol#216) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": "Variable 'MintableTokenMock.total_supply' (MintableTokenMock.sol#204) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mul(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function div(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function sub(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function add(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function max256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function min256(uint a, uint b) internal constant returns (uint) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 214,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public constant returns (uint) { return total_supply; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address customer) public constant returns (uint) { return balances[customer]; }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) { revert(); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 216,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address, uint) public returns (bool) { revert(); }\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 179,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.15;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 204,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint private total_supply;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint;\n",
                    "message": null
                }
            ]
        }
    }
}