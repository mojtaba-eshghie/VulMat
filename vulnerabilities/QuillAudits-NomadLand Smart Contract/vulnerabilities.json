{
    "MainToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract MintableToken is StandardToken, Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Pausable is Ownable {\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < addresses.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 346,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public mintingFinished = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bool public paused = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 685,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bool public initialized = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 296,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 298,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 687,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 688,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        init();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 689,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        transferOwnership(TARGET_USER);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 690,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 434,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            release = chains[toKey(_addr, release)];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 445,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _release = chains[toKey(_addr, _release)];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            next = chains[nextKey];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _index + 1; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < addresses.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 433,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            count++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < _index + 1; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < addresses.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_67"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n\n        // WISH masc to increase entropy\n\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\n\n        assembly {\n\n            result := or(result, mul(_addr, 0x10000000000000000))\n\n            result := or(result, and(_release, 0xffffffffffffffff))\n\n        }\n",
                    "message": "FreezableToken.toKey (MainToken.sol#518-525) is declared view but contains assembly code\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": 501,
                    "vulnerability_code": "    function releaseOnce() public {\n\n        bytes32 headKey = toKey(msg.sender, 0);\n\n        uint64 head = chains[headKey];\n\n        require(head != 0);\n\n        require(uint64(block.timestamp) > head);\n\n        bytes32 currentKey = toKey(msg.sender, head);\n\n//SWC-Block values as a proxy for time:L481\n\n        uint64 next = chains[currentKey];\n\n\n\n        uint amount = freezings[currentKey];\n\n        delete freezings[currentKey];\n\n\n\n        balances[msg.sender] = balances[msg.sender].add(amount);\n\n        freezingBalance[msg.sender] = freezingBalance[msg.sender].sub(amount);\n\n\n\n        if (next == 0) {\n\n            delete chains[headKey];\n\n        } else {\n\n            chains[headKey] = next;\n\n            delete chains[currentKey];\n\n        }\n\n        emit Released(msg.sender, amount);\n",
                    "message": "FreezableToken.releaseOnce (MainToken.sol#479-501) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(uint64(block.timestamp) > head) (MainToken.sol#483)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "    function releaseAll() public returns (uint tokens) {\n\n        uint release;\n\n        uint balance;\n\n        (release, balance) = getFreezing(msg.sender, 0);\n\n        while (release != 0 && block.timestamp > release) {\n\n            releaseOnce();\n\n            tokens += balance;\n\n            (release, balance) = getFreezing(msg.sender, 0);\n\n        }\n",
                    "message": "FreezableToken.releaseAll (MainToken.sol#507-516) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- release != 0 && block.timestamp > release (MainToken.sol#511-515)\n"
                },
                {
                    "name": "timestamp",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": 558,
                    "vulnerability_code": "    function freeze(address _to, uint64 _until) internal {\n\n        require(_until > block.timestamp);\n\n        bytes32 key = toKey(_to, _until);\n\n        bytes32 parentKey = toKey(_to, uint64(0));\n\n        uint64 next = chains[parentKey];\n\n\n\n        if (next == 0) {\n\n            chains[parentKey] = _until;\n\n            return;\n\n        }\n\n\n\n        bytes32 nextKey = toKey(_to, next);\n\n        uint parent;\n\n\n\n        while (next != 0 && _until > next) {\n\n            parent = next;\n\n            parentKey = nextKey;\n\n\n\n            next = chains[nextKey];\n\n            nextKey = toKey(_to, next);\n\n        }\n\n\n\n        if (_until == next) {\n\n            return;\n\n        }\n\n\n\n        if (next != 0) {\n\n            chains[key] = next;\n\n        }\n\n\n\n        chains[parentKey] = _until;\n",
                    "message": "FreezableToken.freeze (MainToken.sol#527-558) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool)(_until > block.timestamp) (MainToken.sol#528)\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": 525,
                    "vulnerability_code": "    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n\n        // WISH masc to increase entropy\n\n        result = 0x5749534800000000000000000000000000000000000000000000000000000000;\n\n        assembly {\n\n            result := or(result, mul(_addr, 0x10000000000000000))\n\n            result := or(result, and(_release, 0xffffffffffffffff))\n\n        }\n",
                    "message": "FreezableToken.toKey uses assembly (MainToken.sol#518-525)\n\t- MainToken.sol#521-525\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256);\n",
                    "message": "BEP20Basic.totalSupply (MainToken.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": 106,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return totalSupply_;\n",
                    "message": "BasicToken.totalSupply (MainToken.sol#104-106) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 139,
                    "vulnerability_to_line": 140,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "BEP20.allowance (MainToken.sol#139-140) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 211,
                    "vulnerability_to_line": 220,
                    "vulnerability_code": "  function allowance(\n\n    address _owner,\n\n    address _spender\n\n   )\n\n    public\n\n    view\n\n    returns (uint256)\n\n  {\n\n    return allowed[_owner][_spender];\n",
                    "message": "StandardToken.allowance (MainToken.sol#211-220) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 145,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool);\n",
                    "message": "BEP20.approve (MainToken.sol#145) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": 203,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n\n    allowed[msg.sender][_spender] = _value;\n\n    emit Approval(msg.sender, _spender, _value);\n\n    return true;\n",
                    "message": "StandardToken.approve (MainToken.sol#199-203) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 232,
                    "vulnerability_to_line": 243,
                    "vulnerability_code": "  function increaseApproval(\n\n    address _spender,\n\n    uint _addedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    allowed[msg.sender][_spender] = (\n\n      allowed[msg.sender][_spender].add(_addedValue));\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.increaseApproval (MainToken.sol#232-243) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 255,
                    "vulnerability_to_line": 270,
                    "vulnerability_code": "  function decreaseApproval(\n\n    address _spender,\n\n    uint _subtractedValue\n\n  )\n\n    public\n\n    returns (bool)\n\n  {\n\n    uint oldValue = allowed[msg.sender][_spender];\n\n    if (_subtractedValue > oldValue) {\n\n      allowed[msg.sender][_spender] = 0;\n\n    } else {\n\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n\n    }\n\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n\n    return true;\n",
                    "message": "StandardToken.decreaseApproval (MainToken.sol#255-270) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 314,
                    "vulnerability_code": "  function renounceOwnership() public onlyOwner {\n\n    emit OwnershipRenounced(owner);\n\n    owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (MainToken.sol#311-314) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": 420,
                    "vulnerability_code": "    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n\n        return super.balanceOf(_owner);\n",
                    "message": "FreezableToken.actualBalanceOf (MainToken.sol#418-420) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": 424,
                    "vulnerability_code": "    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\n\n        return freezingBalance[_owner];\n",
                    "message": "FreezableToken.freezingBalanceOf (MainToken.sol#422-424) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": 436,
                    "vulnerability_code": "    function freezingCount(address _addr) public view returns (uint count) {\n\n        uint64 release = chains[toKey(_addr, 0)];\n\n        while (release != 0) {\n\n            count++;\n\n            release = chains[toKey(_addr, release)];\n\n        }\n",
                    "message": "FreezableToken.freezingCount (MainToken.sol#430-436) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 474,
                    "vulnerability_code": "    function freezeTo(address _to, uint _amount, uint64 _until) public {\n\n        require(_to != address(0));\n\n        require(_amount <= balances[msg.sender]);\n\n\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n\n\n\n        bytes32 currentKey = toKey(_to, _until);\n\n        freezings[currentKey] = freezings[currentKey].add(_amount);\n\n        freezingBalance[_to] = freezingBalance[_to].add(_amount);\n\n\n\n        freeze(_to, _until);\n\n        emit Transfer(msg.sender, _to, _amount);\n\n        emit Freezed(_to, _until, _amount);\n",
                    "message": "FreezableToken.freezeTo (MainToken.sol#461-474) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": 516,
                    "vulnerability_code": "    function releaseAll() public returns (uint tokens) {\n\n        uint release;\n\n        uint balance;\n\n        (release, balance) = getFreezing(msg.sender, 0);\n\n        while (release != 0 && block.timestamp > release) {\n\n            releaseOnce();\n\n            tokens += balance;\n\n            (release, balance) = getFreezing(msg.sender, 0);\n\n        }\n",
                    "message": "FreezableToken.releaseAll (MainToken.sol#507-516) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": 576,
                    "vulnerability_code": "  function burn(uint256 _value) public {\n\n    _burn(msg.sender, _value);\n",
                    "message": "BurnableToken.burn (MainToken.sol#574-576) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 630,
                    "vulnerability_to_line": 633,
                    "vulnerability_code": "  function unpause() onlyOwner whenPaused public {\n\n    paused = false;\n\n    emit Unpause();\n",
                    "message": "Pausable.unpause (MainToken.sol#630-633) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": 695,
                    "vulnerability_code": "    function name() public pure returns (string _name) {\n\n        return TOKEN_NAME;\n",
                    "message": "MainToken.name (MainToken.sol#693-695) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": 699,
                    "vulnerability_code": "    function symbol() public pure returns (string _symbol) {\n\n        return TOKEN_SYMBOL;\n",
                    "message": "MainToken.symbol (MainToken.sol#697-699) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 701,
                    "vulnerability_to_line": 703,
                    "vulnerability_code": "    function decimals() public pure returns (uint8 _decimals) {\n\n        return TOKEN_DECIMALS_UINT8;\n",
                    "message": "MainToken.decimals (MainToken.sol#701-703) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": "Detected issues with version pragma in MainToken.sol:\n\t- pragma solidity^0.4.23 (MainToken.sol#22): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address _owner) public view returns (uint256) {\n",
                    "message": "Parameter '_owner' of BasicToken.balanceOf (MainToken.sol#128) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_to' of BasicToken.transfer (MainToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address _to, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of BasicToken.transfer (MainToken.sol#113) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 212,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _owner,\n",
                    "message": "Parameter '_owner' of StandardToken.allowance (MainToken.sol#212) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 213,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _spender\n",
                    "message": "Parameter '_spender' of StandardToken.allowance (MainToken.sol#213) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 172,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _from,\n",
                    "message": "Parameter '_from' of StandardToken.transferFrom (MainToken.sol#172) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _to,\n",
                    "message": "Parameter '_to' of StandardToken.transferFrom (MainToken.sol#173) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 174,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _value\n",
                    "message": "Parameter '_value' of StandardToken.transferFrom (MainToken.sol#174) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_spender' of StandardToken.approve (MainToken.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": "Parameter '_value' of StandardToken.approve (MainToken.sol#199) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 233,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _spender,\n",
                    "message": "Parameter '_spender' of StandardToken.increaseApproval (MainToken.sol#233) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 234,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _addedValue\n",
                    "message": "Parameter '_addedValue' of StandardToken.increaseApproval (MainToken.sol#234) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 256,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _spender,\n",
                    "message": "Parameter '_spender' of StandardToken.decreaseApproval (MainToken.sol#256) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 257,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _subtractedValue\n",
                    "message": "Parameter '_subtractedValue' of StandardToken.decreaseApproval (MainToken.sol#257) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 320,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferOwnership(address _newOwner) public onlyOwner {\n",
                    "message": "Parameter '_newOwner' of Ownable.transferOwnership (MainToken.sol#320) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": 332,
                    "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n\n    require(_newOwner != address(0));\n\n    emit OwnershipTransferred(owner, _newOwner);\n\n    owner = _newOwner;\n",
                    "message": "Function 'Ownable._transferOwnership' (MainToken.sol#328-332) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 328,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _transferOwnership(address _newOwner) internal {\n",
                    "message": "Parameter '_newOwner' of Ownable._transferOwnership (MainToken.sol#328) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 366,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _to,\n",
                    "message": "Parameter '_to' of MintableToken.mint (MainToken.sol#366) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 367,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 _amount\n",
                    "message": "Parameter '_amount' of MintableToken.mint (MainToken.sol#367) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 409,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of FreezableToken.balanceOf (MainToken.sol#409) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 418,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function actualBalanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of FreezableToken.actualBalanceOf (MainToken.sol#418) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 422,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freezingBalanceOf(address _owner) public view returns (uint256 balance) {\n",
                    "message": "Parameter '_owner' of FreezableToken.freezingBalanceOf (MainToken.sol#422) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freezingCount(address _addr) public view returns (uint count) {\n",
                    "message": "Parameter '_addr' of FreezableToken.freezingCount (MainToken.sol#430) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\n",
                    "message": "Parameter '_addr' of FreezableToken.getFreezing (MainToken.sol#443) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getFreezing(address _addr, uint _index) public view returns (uint64 _release, uint _balance) {\n",
                    "message": "Parameter '_index' of FreezableToken.getFreezing (MainToken.sol#443) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freezeTo(address _to, uint _amount, uint64 _until) public {\n",
                    "message": "Parameter '_to' of FreezableToken.freezeTo (MainToken.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freezeTo(address _to, uint _amount, uint64 _until) public {\n",
                    "message": "Parameter '_amount' of FreezableToken.freezeTo (MainToken.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freezeTo(address _to, uint _amount, uint64 _until) public {\n",
                    "message": "Parameter '_until' of FreezableToken.freezeTo (MainToken.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freeze(address _to, uint64 _until) internal {\n",
                    "message": "Parameter '_to' of FreezableToken.freeze (MainToken.sol#527) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freeze(address _to, uint64 _until) internal {\n",
                    "message": "Parameter '_until' of FreezableToken.freeze (MainToken.sol#527) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 574,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function burn(uint256 _value) public {\n",
                    "message": "Parameter '_value' of BurnableToken.burn (MainToken.sol#574) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": 587,
                    "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n\n    require(_value <= balances[_who]);\n\n    // no need to require value <= totalSupply, since that would imply the\n\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n\n\n    balances[_who] = balances[_who].sub(_value);\n\n    totalSupply_ = totalSupply_.sub(_value);\n\n    emit Burn(_who, _value);\n\n    emit Transfer(_who, address(0), _value);\n",
                    "message": "Function 'BurnableToken._burn' (MainToken.sol#578-587) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
                    "message": "Parameter '_who' of BurnableToken._burn (MainToken.sol#578) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 578,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _burn(address _who, uint256 _value) internal {\n",
                    "message": "Parameter '_value' of BurnableToken._burn (MainToken.sol#578) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\n",
                    "message": "Parameter '_to' of FreezableMintableToken.mintAndFreeze (MainToken.sol#647) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\n",
                    "message": "Parameter '_amount' of FreezableMintableToken.mintAndFreeze (MainToken.sol#647) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 647,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mintAndFreeze(address _to, uint _amount, uint64 _until) public onlyOwner canMint returns (bool) {\n",
                    "message": "Parameter '_until' of FreezableMintableToken.mintAndFreeze (MainToken.sol#647) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool _success) {\n",
                    "message": "Parameter '_to' of MainToken.transfer (MainToken.sol#710) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 710,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transfer(address _to, uint256 _value) public returns (bool _success) {\n",
                    "message": "Parameter '_value' of MainToken.transfer (MainToken.sol#710) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n",
                    "message": "Parameter '_from' of MainToken.transferFrom (MainToken.sol#705) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n",
                    "message": "Parameter '_to' of MainToken.transferFrom (MainToken.sol#705) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 705,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {\n",
                    "message": "Parameter '_value' of MainToken.transferFrom (MainToken.sol#705) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 672,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address public constant TARGET_USER = 0x1e57f50778Fc34DAE64D7f16aD120193f8631464;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 725,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[1] memory addresses = [address(0x1e57f50778fc34dae64d7f16ad120193f8631464)];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 313,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 199,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address _spender, uint256 _value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function freezingCount(address _addr) public view returns (uint count) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function releaseAll() public returns (uint tokens) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 729,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        for (uint i = 0; i < addresses.length; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 511,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (release != 0 && block.timestamp > release) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        while (next != 0 && _until > next) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.4.23;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function toKey(address _addr, uint _release) internal pure returns (bytes32 result) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 693,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function name() public pure returns (string _name) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_UPGRADE_TO_050",
                    "vulnerability_from_line": 697,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function symbol() public pure returns (string _symbol) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 521,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 totalSupply_;\n",
                    "message": null
                }
            ]
        }
    }
}