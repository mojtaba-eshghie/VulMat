{
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/mocks/MemberRolesMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    revert(\"Unexpected MemberRolesMock call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in MemberRolesMock.sol:\n\t- pragma solidity^0.5.0 (MemberRolesMock.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": "Parameter '' of MemberRolesMock.memberAtIndex (MemberRolesMock.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": "Parameter '_scope_0' of MemberRolesMock.memberAtIndex (MemberRolesMock.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function membersLength(uint) external pure returns (uint) {\n",
                    "message": "Parameter '' of MemberRolesMock.membersLength (MemberRolesMock.sol#28) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/mocks/ReentrancyExploiter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "array-length-outside-loop",
                    "vulnerability_from_line": 67,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (returndata.length > 0) {\n",
                    "message": "Caching the array length outside a loop saves reading it on each iteration, as long as the array's length is not changed during the loop."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete _fallbackTargets[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete _fallbackValues[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete _fallbackData[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _fallbackTargets[i] = fallbackTargets[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _fallbackValues[i] = fallbackValues[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _fallbackData[i] = fallbackData[i];\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _fallbackTargets.push(fallbackTargets[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _fallbackValues.push(fallbackValues[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "state-variable-read-in-a-loop",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "          _fallbackData.push(fallbackData[i]);\n",
                    "message": "Replace state variable reads and writes within loops with local variable reads and writes."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < maxLength; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "unnecessary-checked-arithmetic-in-loop",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "A lot of times there is no risk that the loop counter can overflow. Using Solidity's unchecked block saves the overflow checks."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fallbackTargets.length == fallbackValues.length, \"Length mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fallbackData.length == fallbackValues.length, \"Length mismatch\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      revert(\"Low-level call failed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < maxLength; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < data.length; i++) {\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function setFallbackParams(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint[] calldata fallbackValues,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes[] calldata fallbackData\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fallbackTargets.length == fallbackValues.length, \"Length mismatch\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fallbackTargets.length == fallbackValues.length, \"Length mismatch\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fallbackData.length == fallbackValues.length, \"Length mismatch\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fallbackData.length == fallbackValues.length, \"Length mismatch\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(fallbackData.length == fallbackValues.length, \"Length mismatch\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint maxLength = fallbackValues.length > _fallbackValues.length\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint minLength = fallbackValues.length < _fallbackValues.length\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint maxStorageIndex = minLength > 0 ? minLength - 1 : 0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < maxLength; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < maxLength; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    for (uint i = 0; i < maxLength; i++) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      if (i > maxStorageIndex) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete _fallbackTargets[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete _fallbackValues[i];\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        delete _fallbackData[i];\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/mocks/TwapOracle/TOMockUniswapPair.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in TOMockUniswapPair.sol:\n\t- pragma solidity^0.5.0 (TOMockUniswapPair.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _price0CumulativeLast,\n",
                    "message": "Parameter '_price0CumulativeLast' of TOMockUniswapPair.setCumulativePrices (TOMockUniswapPair.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _price1CumulativeLast\n",
                    "message": "Parameter '_price1CumulativeLast' of TOMockUniswapPair.setCumulativePrices (TOMockUniswapPair.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint112 _reserve0,\n",
                    "message": "Parameter '_reserve0' of TOMockUniswapPair.setReserves (TOMockUniswapPair.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint112 _reserve1,\n",
                    "message": "Parameter '_reserve1' of TOMockUniswapPair.setReserves (TOMockUniswapPair.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint32 _blockTimestampLast\n",
                    "message": "Parameter '_blockTimestampLast' of TOMockUniswapPair.setReserves (TOMockUniswapPair.sol#33) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReserves() external view returns (\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/mocks/Pool/P1MockMCR.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "    function getMCR() public view returns (uint) {\n\n        return mcr;\n",
                    "message": "P1MockMCR.getMCR (P1MockMCR.sol#23-25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "    function setMCR(uint _mcr) public  {\n\n        mcr = _mcr;\n",
                    "message": "P1MockMCR.setMCR (P1MockMCR.sol#35-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n\n        // no-op\n",
                    "message": "P1MockMCR.updateMCRInternal (P1MockMCR.sol#43-45) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in P1MockMCR.sol:\n\t- pragma solidity^0.5.17 (P1MockMCR.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeMasterAddress(address) external {\n",
                    "message": "Parameter '' of P1MockMCR.changeMasterAddress (P1MockMCR.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMCR(uint _mcr) public  {\n",
                    "message": "Parameter '_mcr' of P1MockMCR.setMCR (P1MockMCR.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMCR(uint) external {\n",
                    "message": "Parameter '' of P1MockMCR.updateMCR (P1MockMCR.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n",
                    "message": "Parameter '' of P1MockMCR.updateMCRInternal (P1MockMCR.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n",
                    "message": "Parameter '_scope_0' of P1MockMCR.updateMCRInternal (P1MockMCR.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/mocks/Pool/P1MockChainlinkAggregator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function setLatestAnswer(uint rate) public {\n\n    latestAnswerRate = rate;\n",
                    "message": "P1MockChainlinkAggregator.setLatestAnswer (P1MockChainlinkAggregator.sol#23-25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "  function latestAnswer() public view returns (int) {\n\n    return int(latestAnswerRate);\n",
                    "message": "P1MockChainlinkAggregator.latestAnswer (P1MockChainlinkAggregator.sol#27-29) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in P1MockChainlinkAggregator.sol:\n\t- pragma solidity^0.5.17 (P1MockChainlinkAggregator.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint latestAnswerRate;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/mocks/Pool/P1MockOldPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in P1MockOldPool.sol:\n\t- pragma solidity^0.5.17 (P1MockOldPool.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/mocks/Claims/CLMockEtherRejecter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    revert('I secretly hate ether');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function() payable external {\n\n    revert('I secretly hate ether');\n",
                    "message": "Contract locking ether found in CLMockEtherRejecter.sol:\n\tContract EtherRejecter has payable functions:\n\t - fallback (CLMockEtherRejecter.sol#21-23)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in CLMockEtherRejecter.sol:\n\t- pragma solidity^0.5.17 (CLMockEtherRejecter.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract EtherRejecter {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function() payable external {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/abstract/Iupgradable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ms.isMember(msg.sender), \"Not member\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(address(ms) == msg.sender, \"Not master\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ms.isPause() == false && ms.isMember(msg.sender) == true);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public owner;\n",
                    "message": "INXMMaster.owner should be constant (Iupgradable.sol#24)\nINXMMaster.pauseTime should be constant (Iupgradable.sol#26)\nINXMMaster.tokenAddress should be constant (Iupgradable.sol#22)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function masterInitialized() public view returns (bool);\n",
                    "message": "INXMMaster.masterInitialized (Iupgradable.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isInternal(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isInternal (Iupgradable.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isPause() public view returns (bool check);\n",
                    "message": "INXMMaster.isPause (Iupgradable.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOwner(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isOwner (Iupgradable.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isMember(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isMember (Iupgradable.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkIsAuthToGoverned(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.checkIsAuthToGoverned (Iupgradable.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePauseTime(uint _time) public;\n",
                    "message": "INXMMaster.updatePauseTime (Iupgradable.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppLocker() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppLocker (Iupgradable.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppToken() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppToken (Iupgradable.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": "INXMMaster.getLatestAddress (Iupgradable.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeDependentContractAddress() public;\n",
                    "message": "Iupgradable.changeDependentContractAddress (Iupgradable.sol#88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "  function changeMasterAddress(address _masterAddress) public {\n\n    if (address(ms) != address(0)) {\n\n      require(address(ms) == msg.sender, \"Not master\");\n\n    }\n\n\n\n    ms = INXMMaster(_masterAddress);\n\n    nxMasterAddress = _masterAddress;\n",
                    "message": "Iupgradable.changeMasterAddress (Iupgradable.sol#94-101) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Iupgradable.sol:\n\t- pragma solidity^0.5.0 (Iupgradable.sol#18): it allows old versions\n\t- pragma solidity^0.5.0 (Iupgradable.sol#53): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeMasterAddress(address _masterAddress) public {\n",
                    "message": "Parameter '_masterAddress' of Iupgradable.changeMasterAddress (Iupgradable.sol#94) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/abstract/MasterAware.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isMember(msg.sender), \"Caller is not a member\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isInternal(msg.sender), \"Caller is not an internal contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(address(master) == msg.sender, \"Not master\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      master.checkIsAuthToGoverned(msg.sender),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      \"Caller is not authorized to govern\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isPause(), \"System is not paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!master.isPause(), \"System is paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isInternal(msg.sender), \"Caller is not an internal contract\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      master.checkIsAuthToGoverned(msg.sender),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      \"Caller is not authorized to govern\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public owner;\n",
                    "message": "INXMMaster.owner should be constant (MasterAware.sol#24)\nINXMMaster.pauseTime should be constant (MasterAware.sol#26)\nINXMMaster.tokenAddress should be constant (MasterAware.sol#22)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function masterInitialized() public view returns (bool);\n",
                    "message": "INXMMaster.masterInitialized (MasterAware.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isInternal(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isInternal (MasterAware.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isPause() public view returns (bool check);\n",
                    "message": "INXMMaster.isPause (MasterAware.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOwner(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isOwner (MasterAware.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isMember(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isMember (MasterAware.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkIsAuthToGoverned(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.checkIsAuthToGoverned (MasterAware.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePauseTime(uint _time) public;\n",
                    "message": "INXMMaster.updatePauseTime (MasterAware.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppLocker() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppLocker (MasterAware.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppToken() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppToken (MasterAware.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": "INXMMaster.getLatestAddress (MasterAware.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function changeMasterAddress(address masterAddress) public onlyMaster {\n\n    master = INXMMaster(masterAddress);\n",
                    "message": "MasterAware.changeMasterAddress (MasterAware.sol#113-115) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in MasterAware.sol:\n\t- pragma solidity^0.5.0 (MasterAware.sol#18): it allows old versions\n\t- pragma solidity^0.5.0 (MasterAware.sol#70): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/abstract/INXMMaster.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public owner;\n",
                    "message": "INXMMaster.owner should be constant (INXMMaster.sol#24)\nINXMMaster.pauseTime should be constant (INXMMaster.sol#26)\nINXMMaster.tokenAddress should be constant (INXMMaster.sol#22)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function masterInitialized() public view returns (bool);\n",
                    "message": "INXMMaster.masterInitialized (INXMMaster.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isInternal(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isInternal (INXMMaster.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isPause() public view returns (bool check);\n",
                    "message": "INXMMaster.isPause (INXMMaster.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOwner(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isOwner (INXMMaster.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isMember(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isMember (INXMMaster.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkIsAuthToGoverned(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.checkIsAuthToGoverned (INXMMaster.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePauseTime(uint _time) public;\n",
                    "message": "INXMMaster.updatePauseTime (INXMMaster.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppLocker() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppLocker (INXMMaster.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppToken() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppToken (INXMMaster.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": "INXMMaster.getLatestAddress (INXMMaster.sol#48) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in INXMMaster.sol:\n\t- pragma solidity^0.5.0 (INXMMaster.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/external/Deployer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "  function deploy(bytes memory data, uint256 salt) public {\n\n    assembly {\n\n      pop(create2(0, add(data, 32), mload(data), salt))\n\n    }\n",
                    "message": "Deployer.deploy uses assembly (Deployer.sol#7-11)\n\t- Deployer.sol#8-10\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "  function deploy(bytes memory data, uint256 salt) public {\n\n    assembly {\n\n      pop(create2(0, add(data, 32), mload(data), salt))\n\n    }\n",
                    "message": "Deployer.deploy (Deployer.sol#7-11) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Deployer.sol:\n\t- pragma solidity^0.5.0 (Deployer.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/external/uniswap/IUniswapV2Router01.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountA, uint amountB, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountA, uint amountB);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 49,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountToken, uint amountETH);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountA, uint amountB);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountToken, uint amountETH);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 72,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 83,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 91,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/external/uniswap/IUniswapV2Factory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IUniswapV2Factory.sol:\n\t- pragma solidity^0.5.0 (IUniswapV2Factory.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allPairs(uint) external view returns (address pair);\n",
                    "message": "Parameter '' of IUniswapV2Factory.allPairs (IUniswapV2Factory.sol#9) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/external/uniswap/IUniswapV2Pair.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReserves() external view returns (uint112, uint112, uint32);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/token/NXMToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _founderAddress, uint _initialSupply) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _mint(_founderAddress, _initialSupply);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_36"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 public decimals = 18;\n",
                    "message": "NXMToken.decimals should be constant (NXMToken.sol#147)\nNXMToken.name should be constant (NXMToken.sol#145)\nNXMToken.symbol should be constant (NXMToken.sol#146)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "OZIERC20.transfer (NXMToken.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": 333,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public canTransfer(to) returns (bool) {\n\n\n\n    require(isLockedForMV[msg.sender] < now); // if not voted under governance\n\n    require(value <= _balances[msg.sender]);\n\n    _transfer(to, value);\n\n    return true;\n",
                    "message": "NXMToken.transfer (NXMToken.sol#327-333) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "NXMToken.approve (NXMToken.sol#207-213) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "OZIERC20.approve (NXMToken.sol#13-14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "OZIERC20.transferFrom (NXMToken.sol#16-17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n  public\n\n  canTransfer(to)\n\n  returns (bool)\n\n  {\n\n    require(isLockedForMV[from] < now); // if not voted under governance\n\n    require(value <= _balances[from]);\n\n    require(value <= _allowed[from][msg.sender]);\n\n    _transferFrom(from, to, value);\n\n    return true;\n",
                    "message": "NXMToken.transferFrom (NXMToken.sol#352-366) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "NXMToken.totalSupply (NXMToken.sol#168-170) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "OZIERC20.totalSupply (NXMToken.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "OZIERC20.balanceOf (NXMToken.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "NXMToken.balanceOf (NXMToken.sol#177-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n  )\n\n  public\n\n  view\n\n  returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "NXMToken.allowance (NXMToken.sol#187-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "OZIERC20.allowance (NXMToken.sol#23-24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 237,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n    _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "NXMToken.increaseAllowance (NXMToken.sol#224-237) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n    _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "NXMToken.decreaseAllowance (NXMToken.sol#248-261) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "  function addToWhiteList(address _member) public onlyOperator returns (bool) {\n\n    whiteListed[_member] = true;\n\n    emit WhiteListed(_member);\n\n    return true;\n",
                    "message": "NXMToken.addToWhiteList (NXMToken.sol#267-271) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function removeFromWhiteList(address _member) public onlyOperator returns (bool) {\n\n    whiteListed[_member] = false;\n\n    emit BlackListed(_member);\n\n    return true;\n",
                    "message": "NXMToken.removeFromWhiteList (NXMToken.sol#277-281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function changeOperator(address _newOperator) public onlyOperator returns (bool) {\n\n    operator = _newOperator;\n\n    return true;\n",
                    "message": "NXMToken.changeOperator (NXMToken.sol#287-290) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "  function burn(uint256 amount) public returns (bool) {\n\n    _burn(msg.sender, amount);\n\n    return true;\n",
                    "message": "NXMToken.burn (NXMToken.sol#297-300) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "  function burnFrom(address from, uint256 value) public returns (bool) {\n\n    _burnFrom(from, value);\n\n    return true;\n",
                    "message": "NXMToken.burnFrom (NXMToken.sol#307-310) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function mint(address account, uint256 amount) public onlyOperator {\n\n    _mint(account, amount);\n",
                    "message": "NXMToken.mint (NXMToken.sol#318-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 344,
                    "vulnerability_code": "  function operatorTransfer(address from, uint256 value) public onlyOperator returns (bool) {\n\n    require(value <= _balances[from]);\n\n    _transferFrom(from, operator, value);\n\n    return true;\n",
                    "message": "NXMToken.operatorTransfer (NXMToken.sol#340-344) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "  function lockForMemberVote(address _of, uint _days) public onlyOperator {\n\n    if (_days.add(now) > isLockedForMV[_of])\n\n      isLockedForMV[_of] = _days.add(now);\n",
                    "message": "NXMToken.lockForMemberVote (NXMToken.sol#372-375) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in NXMToken.sol:\n\t- pragma solidity^0.5.0 (NXMToken.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (NXMToken.sol#41): it allows old versions\n\t- pragma solidity^0.5.0 (NXMToken.sol#125): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _founderAddress, uint _initialSupply) public {\n",
                    "message": "Parameter '_founderAddress' of NXMToken. (NXMToken.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _founderAddress, uint _initialSupply) public {\n",
                    "message": "Parameter '_initialSupply' of NXMToken. (NXMToken.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToWhiteList(address _member) public onlyOperator returns (bool) {\n",
                    "message": "Parameter '_member' of NXMToken.addToWhiteList (NXMToken.sol#267) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeFromWhiteList(address _member) public onlyOperator returns (bool) {\n",
                    "message": "Parameter '_member' of NXMToken.removeFromWhiteList (NXMToken.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOperator(address _newOperator) public onlyOperator returns (bool) {\n",
                    "message": "Parameter '_newOperator' of NXMToken.changeOperator (NXMToken.sol#287) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function lockForMemberVote(address _of, uint _days) public onlyOperator {\n",
                    "message": "Parameter '_of' of NXMToken.lockForMemberVote (NXMToken.sol#372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function lockForMemberVote(address _of, uint _days) public onlyOperator {\n",
                    "message": "Parameter '_days' of NXMToken.lockForMemberVote (NXMToken.sol#372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": 386,
                    "vulnerability_code": "  function _transfer(address to, uint256 value) internal {\n\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(msg.sender, to, value);\n",
                    "message": "Function 'NXMToken._transfer' (NXMToken.sol#382-386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "  function _transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n  internal\n\n  {\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'NXMToken._transferFrom' (NXMToken.sol#394-405) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": 419,
                    "vulnerability_code": "  function _mint(address account, uint256 amount) internal {\n\n    require(account != address(0));\n\n    _totalSupply = _totalSupply.add(amount);\n\n    _balances[account] = _balances[account].add(amount);\n\n    emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'NXMToken._mint' (NXMToken.sol#414-419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function _burn(address account, uint256 amount) internal {\n\n    require(amount <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(amount);\n\n    _balances[account] = _balances[account].sub(amount);\n\n    emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'NXMToken._burn' (NXMToken.sol#427-433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'NXMToken._burnFrom' (NXMToken.sol#442-450) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping(address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/token/external/OZIERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in OZIERC20.sol:\n\t- pragma solidity^0.5.0 (OZIERC20.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/token/external/OZSafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in OZSafeMath.sol:\n\t- pragma solidity^0.5.0 (OZSafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/token/external/LockHandler.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in LockHandler.sol:\n\t- pragma solidity^0.5.0 (LockHandler.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/capital/LegacyMCR.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in LegacyMCR.sol:\n\t- pragma solidity^0.5.0 (LegacyMCR.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _calVtpAndMCRtp(uint poolBalance) external view returns (uint vtp, uint mcrtp);\n",
                    "message": "Function 'LegacyMCR._calVtpAndMCRtp' (LegacyMCR.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _calVtpAndMCRtp(uint poolBalance) external view returns (uint vtp, uint mcrtp);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calVtpAndMCRtp() external view returns (uint vtp, uint mcrtp);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateVtpAndMCRtp(uint poolBalance) external view returns (uint vtp, uint mcrtp);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getThresholdValues(uint vtp, uint vF, uint totalSA, uint minCap) external view returns (uint lowerThreshold, uint upperThreshold);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUintParameters(bytes8 code) external view returns (bytes8 codeVal, uint val);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/capital/LegacyPoolData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in LegacyPoolData.sol:\n\t- pragma solidity^0.5.0 (LegacyPoolData.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": " function changeNotariseAddress(address) external;\n",
                    "message": "Parameter '' of LegacyPoolData.changeNotariseAddress (LegacyPoolData.sol#23) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/governance/external/Governed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ms.getLatestAddress(\"GV\") == msg.sender, \"Not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public masterAddress; // Name of the dApp, needs to be set by contracts inheriting this contract\n",
                    "message": "Governed.masterAddress (Governed.sol#24) is never initialized. It is used in:\n\t- isAuthorizedToGovern (Governed.sol#34-37)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public masterAddress; // Name of the dApp, needs to be set by contracts inheriting this contract\n",
                    "message": "Governed.masterAddress should be constant (Governed.sol#24)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function isAuthorizedToGovern(address _toCheck) public view returns (bool) {\n\n    IMaster ms = IMaster(masterAddress);\n\n    return (ms.getLatestAddress(\"GV\") == _toCheck);\n",
                    "message": "Governed.isAuthorizedToGovern (Governed.sol#34-37) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Governed.sol:\n\t- pragma solidity^0.5.0 (Governed.sol#15): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isAuthorizedToGovern(address _toCheck) public view returns (bool) {\n",
                    "message": "Parameter '_toCheck' of Governed.isAuthorizedToGovern (Governed.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/governance/external/OwnedUpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setUpgradeabilityOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _upgradeTo(_implementation);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation (OwnedUpgradeabilityProxy.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      owner := sload(position)\n\n    }\n",
                    "message": "OwnedUpgradeabilityProxy.proxyOwner (OwnedUpgradeabilityProxy.sol#141-147) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Contract locking ether found in OwnedUpgradeabilityProxy.sol:\n\tContract OwnedUpgradeabilityProxy has payable functions:\n\t - fallback (OwnedUpgradeabilityProxy.sol#17-33)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Proxy.fallback uses assembly (OwnedUpgradeabilityProxy.sol#17-33)\n\t- OwnedUpgradeabilityProxy.sol#22-32\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation uses assembly (OwnedUpgradeabilityProxy.sol#70-76)\n\t- OwnedUpgradeabilityProxy.sol#73-75\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (OwnedUpgradeabilityProxy.sol#82-88)\n\t- OwnedUpgradeabilityProxy.sol#85-87\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      owner := sload(position)\n\n    }\n",
                    "message": "OwnedUpgradeabilityProxy.proxyOwner uses assembly (OwnedUpgradeabilityProxy.sol#141-147)\n\t- OwnedUpgradeabilityProxy.sol#144-146\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "  function _setUpgradeabilityOwner(address _newProxyOwner) internal {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newProxyOwner)\n\n    }\n",
                    "message": "OwnedUpgradeabilityProxy._setUpgradeabilityOwner uses assembly (OwnedUpgradeabilityProxy.sol#170-176)\n\t- OwnedUpgradeabilityProxy.sol#173-175\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 157,
                    "vulnerability_code": "  function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\n\n    require(_newOwner != address(0));\n\n    _setUpgradeabilityOwner(_newOwner);\n\n    emit ProxyOwnershipTransferred(proxyOwner(), _newOwner);\n",
                    "message": "OwnedUpgradeabilityProxy.transferProxyOwnership (OwnedUpgradeabilityProxy.sol#153-157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function upgradeTo(address _implementation) public onlyProxyOwner {\n\n    _upgradeTo(_implementation);\n",
                    "message": "OwnedUpgradeabilityProxy.upgradeTo (OwnedUpgradeabilityProxy.sol#163-165) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in OwnedUpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.0 (OwnedUpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (OwnedUpgradeabilityProxy.sol#44): it allows old versions\n\t- pragma solidity^0.5.0 (OwnedUpgradeabilityProxy.sol#104): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (OwnedUpgradeabilityProxy.sol#82-88) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n\n    address currentImplementation = implementation();\n\n    require(currentImplementation != _newImplementation);\n\n    _setImplementation(_newImplementation);\n\n    emit Upgraded(_newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (OwnedUpgradeabilityProxy.sol#94-99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n",
                    "message": "Parameter '_newImplementation' of UpgradeabilityProxy._upgradeTo (OwnedUpgradeabilityProxy.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Parameter '_implementation' of OwnedUpgradeabilityProxy. (OwnedUpgradeabilityProxy.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\n",
                    "message": "Parameter '_newOwner' of OwnedUpgradeabilityProxy.transferProxyOwnership (OwnedUpgradeabilityProxy.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeTo(address _implementation) public onlyProxyOwner {\n",
                    "message": "Parameter '_implementation' of OwnedUpgradeabilityProxy.upgradeTo (OwnedUpgradeabilityProxy.sol#163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "  function _setUpgradeabilityOwner(address _newProxyOwner) internal {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newProxyOwner)\n\n    }\n",
                    "message": "Function 'OwnedUpgradeabilityProxy._setUpgradeabilityOwner' (OwnedUpgradeabilityProxy.sol#170-176) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant IMPLEMENTATION_POSITION = keccak256(\"org.govblocks.proxy.implementation\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant PROXY_OWNER_POSITION = keccak256(\"org.govblocks.proxy.owner\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/governance/external/Proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Contract locking ether found in Proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (Proxy.sol#17-33)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Proxy.fallback uses assembly (Proxy.sol#17-33)\n\t- Proxy.sol#22-32\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Proxy.sol:\n\t- pragma solidity^0.5.0 (Proxy.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/governance/external/IGovernance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canCloseProposal(uint _proposalId) public view returns (uint closeValue);\n",
                    "message": "IGovernance.canCloseProposal (IGovernance.sol#144) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowedToCatgorize() public view returns (uint roleId);\n",
                    "message": "IGovernance.allowedToCatgorize (IGovernance.sol#146) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IGovernance.sol:\n\t- pragma solidity^0.5.0 (IGovernance.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createProposal(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateProposal(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function submitProposalWithSolution(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createProposalwithSolution(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _categoryId\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalTitle,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _solutionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata _action\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _categoryId,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _solutionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _solutionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata _action\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/governance/external/IProposalCategory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "  function updateCategory(\n\n    uint _categoryId,\n\n    string memory _name,\n\n    uint _memberRoleToVote,\n\n    uint _majorityVotePerc,\n\n    uint _quorumPerc,\n\n    uint[] memory _allowedToCreateProposal,\n\n    uint _closingTime,\n\n    string memory _actionHash,\n\n    address _contractAddress,\n\n    bytes2 _contractName,\n\n    uint[] memory _incentives\n\n  )\n",
                    "message": "IProposalCategory.updateCategory (IProposalCategory.sol#90-103) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IProposalCategory.sol:\n\t- pragma solidity^0.5.0 (IProposalCategory.sol#15): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addCategory(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint[] calldata _allowedToCreateProposal,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _closingTime,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _actionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _actionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _contractAddress,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes2 _contractName,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint[] calldata _incentives\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/governance/external/UpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation (UpgradeabilityProxy.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Contract locking ether found in UpgradeabilityProxy.sol:\n\tContract UpgradeabilityProxy has payable functions:\n\t - fallback (UpgradeabilityProxy.sol#17-33)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Proxy.fallback uses assembly (UpgradeabilityProxy.sol#17-33)\n\t- UpgradeabilityProxy.sol#22-32\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation uses assembly (UpgradeabilityProxy.sol#70-76)\n\t- UpgradeabilityProxy.sol#73-75\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (UpgradeabilityProxy.sol#82-88)\n\t- UpgradeabilityProxy.sol#85-87\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in UpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.0 (UpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (UpgradeabilityProxy.sol#44): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (UpgradeabilityProxy.sol#82-88) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n\n    address currentImplementation = implementation();\n\n    require(currentImplementation != _newImplementation);\n\n    _setImplementation(_newImplementation);\n\n    emit Upgraded(_newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (UpgradeabilityProxy.sol#94-99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n",
                    "message": "Parameter '_newImplementation' of UpgradeabilityProxy._upgradeTo (UpgradeabilityProxy.sol#94) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant IMPLEMENTATION_POSITION = keccak256(\"org.govblocks.proxy.implementation\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/modules/claims/ClaimProofs.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in ClaimProofs.sol:\n\t- pragma solidity^0.5.0 (ClaimProofs.sol#19): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addProof(uint _coverId, string calldata _ipfsHash) external {\n",
                    "message": "Parameter '_coverId' of ClaimProofs.addProof (ClaimProofs.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addProof(uint _coverId, string calldata _ipfsHash) external {\n",
                    "message": "Parameter '_ipfsHash' of ClaimProofs.addProof (ClaimProofs.sol#25) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/interfaces/INXMaster.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) external view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/interfaces/IPooledStaking.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IPooledStaking.sol:\n\t- pragma solidity^0.5.0 (IPooledStaking.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/interfaces/ITwapOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/interfaces/IPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0;\n",
                    "message": "Detected issues with version pragma in IPool.sol:\n\t- pragma solidity>=0.5.0 (IPool.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity >=0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAssetDetails(address _asset) external view returns (\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-d38ab4145a2a3d0b9d2de871ce646cf40b3b210a/contracts/interfaces/IERC20Detailed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IERC20Detailed.sol:\n\t- pragma solidity^0.5.0 (IERC20Detailed.sol#15): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/mocks/MemberRolesMock.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    revert(\"Unexpected MemberRolesMock call\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in MemberRolesMock.sol:\n\t- pragma solidity^0.5.0 (MemberRolesMock.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": "Parameter '' of MemberRolesMock.memberAtIndex (MemberRolesMock.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": "Parameter '_scope_0' of MemberRolesMock.memberAtIndex (MemberRolesMock.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function membersLength(uint) external pure returns (uint) {\n",
                    "message": "Parameter '' of MemberRolesMock.membersLength (MemberRolesMock.sol#28) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function memberAtIndex(uint, uint) external pure returns (address, bool) {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/mocks/TwapOracle/TOMockUniswapPair.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in TOMockUniswapPair.sol:\n\t- pragma solidity^0.5.0 (TOMockUniswapPair.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _price0CumulativeLast,\n",
                    "message": "Parameter '_price0CumulativeLast' of TOMockUniswapPair.setCumulativePrices (TOMockUniswapPair.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _price1CumulativeLast\n",
                    "message": "Parameter '_price1CumulativeLast' of TOMockUniswapPair.setCumulativePrices (TOMockUniswapPair.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint112 _reserve0,\n",
                    "message": "Parameter '_reserve0' of TOMockUniswapPair.setReserves (TOMockUniswapPair.sol#31) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint112 _reserve1,\n",
                    "message": "Parameter '_reserve1' of TOMockUniswapPair.setReserves (TOMockUniswapPair.sol#32) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 33,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint32 _blockTimestampLast\n",
                    "message": "Parameter '_blockTimestampLast' of TOMockUniswapPair.setReserves (TOMockUniswapPair.sol#33) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReserves() external view returns (\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/mocks/Pool/P1MockMCR.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "    function getMCR() public view returns (uint) {\n\n        return mcr;\n",
                    "message": "P1MockMCR.getMCR (P1MockMCR.sol#23-25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "    function setMCR(uint _mcr) public  {\n\n        mcr = _mcr;\n",
                    "message": "P1MockMCR.setMCR (P1MockMCR.sol#35-37) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": 45,
                    "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n\n        // no-op\n",
                    "message": "P1MockMCR.updateMCRInternal (P1MockMCR.sol#43-45) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in P1MockMCR.sol:\n\t- pragma solidity^0.5.17 (P1MockMCR.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function changeMasterAddress(address) external {\n",
                    "message": "Parameter '' of P1MockMCR.changeMasterAddress (P1MockMCR.sol#27) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 35,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setMCR(uint _mcr) public  {\n",
                    "message": "Parameter '_mcr' of P1MockMCR.setMCR (P1MockMCR.sol#35) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMCR(uint) external {\n",
                    "message": "Parameter '' of P1MockMCR.updateMCR (P1MockMCR.sol#39) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n",
                    "message": "Parameter '' of P1MockMCR.updateMCRInternal (P1MockMCR.sol#43) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function updateMCRInternal(uint, bool) public {\n",
                    "message": "Parameter '_scope_0' of P1MockMCR.updateMCRInternal (P1MockMCR.sol#43) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/mocks/Pool/P1MockChainlinkAggregator.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 25,
                    "vulnerability_code": "  function setLatestAnswer(uint rate) public {\n\n    latestAnswerRate = rate;\n",
                    "message": "P1MockChainlinkAggregator.setLatestAnswer (P1MockChainlinkAggregator.sol#23-25) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "  function latestAnswer() public view returns (int) {\n\n    return int(latestAnswerRate);\n",
                    "message": "P1MockChainlinkAggregator.latestAnswer (P1MockChainlinkAggregator.sol#27-29) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in P1MockChainlinkAggregator.sol:\n\t- pragma solidity^0.5.17 (P1MockChainlinkAggregator.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint latestAnswerRate;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/mocks/Pool/P1MockOldPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in P1MockOldPool.sol:\n\t- pragma solidity^0.5.17 (P1MockOldPool.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/mocks/Claims/CLMockEtherRejecter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    revert('I secretly hate ether');\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "  function() payable external {\n\n    revert('I secretly hate ether');\n",
                    "message": "Contract locking ether found in CLMockEtherRejecter.sol:\n\tContract EtherRejecter has payable functions:\n\t - fallback (CLMockEtherRejecter.sol#21-23)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": "Detected issues with version pragma in CLMockEtherRejecter.sol:\n\t- pragma solidity^0.5.17 (CLMockEtherRejecter.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract EtherRejecter {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.17;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function() payable external {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/abstract/Iupgradable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ms.isMember(msg.sender), \"Not member\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(address(ms) == msg.sender, \"Not master\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-multiple-require",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ms.isPause() == false && ms.isMember(msg.sender) == true);\n",
                    "message": "Using multiple require statements is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public owner;\n",
                    "message": "INXMMaster.owner should be constant (Iupgradable.sol#24)\nINXMMaster.pauseTime should be constant (Iupgradable.sol#26)\nINXMMaster.tokenAddress should be constant (Iupgradable.sol#22)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function masterInitialized() public view returns (bool);\n",
                    "message": "INXMMaster.masterInitialized (Iupgradable.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isInternal(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isInternal (Iupgradable.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isPause() public view returns (bool check);\n",
                    "message": "INXMMaster.isPause (Iupgradable.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOwner(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isOwner (Iupgradable.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isMember(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isMember (Iupgradable.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkIsAuthToGoverned(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.checkIsAuthToGoverned (Iupgradable.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePauseTime(uint _time) public;\n",
                    "message": "INXMMaster.updatePauseTime (Iupgradable.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppLocker() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppLocker (Iupgradable.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppToken() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppToken (Iupgradable.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": "INXMMaster.getLatestAddress (Iupgradable.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeDependentContractAddress() public;\n",
                    "message": "Iupgradable.changeDependentContractAddress (Iupgradable.sol#88) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "  function changeMasterAddress(address _masterAddress) public {\n\n    if (address(ms) != address(0)) {\n\n      require(address(ms) == msg.sender, \"Not master\");\n\n    }\n\n\n\n    ms = INXMMaster(_masterAddress);\n\n    nxMasterAddress = _masterAddress;\n",
                    "message": "Iupgradable.changeMasterAddress (Iupgradable.sol#94-101) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Iupgradable.sol:\n\t- pragma solidity^0.5.0 (Iupgradable.sol#18): it allows old versions\n\t- pragma solidity^0.5.0 (Iupgradable.sol#53): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeMasterAddress(address _masterAddress) public {\n",
                    "message": "Parameter '_masterAddress' of Iupgradable.changeMasterAddress (Iupgradable.sol#94) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 53,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/abstract/MasterAware.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isMember(msg.sender), \"Caller is not a member\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isInternal(msg.sender), \"Caller is not an internal contract\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      require(address(master) == msg.sender, \"Not master\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      master.checkIsAuthToGoverned(msg.sender),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      \"Caller is not authorized to govern\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isPause(), \"System is not paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(!master.isPause(), \"System is paused\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(master.isInternal(msg.sender), \"Caller is not an internal contract\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      master.checkIsAuthToGoverned(msg.sender),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      \"Caller is not authorized to govern\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_13"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public owner;\n",
                    "message": "INXMMaster.owner should be constant (MasterAware.sol#24)\nINXMMaster.pauseTime should be constant (MasterAware.sol#26)\nINXMMaster.tokenAddress should be constant (MasterAware.sol#22)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function masterInitialized() public view returns (bool);\n",
                    "message": "INXMMaster.masterInitialized (MasterAware.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isInternal(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isInternal (MasterAware.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isPause() public view returns (bool check);\n",
                    "message": "INXMMaster.isPause (MasterAware.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOwner(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isOwner (MasterAware.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isMember(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isMember (MasterAware.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkIsAuthToGoverned(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.checkIsAuthToGoverned (MasterAware.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePauseTime(uint _time) public;\n",
                    "message": "INXMMaster.updatePauseTime (MasterAware.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppLocker() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppLocker (MasterAware.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppToken() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppToken (MasterAware.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": "INXMMaster.getLatestAddress (MasterAware.sol#48) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 113,
                    "vulnerability_to_line": 115,
                    "vulnerability_code": "  function changeMasterAddress(address masterAddress) public onlyMaster {\n\n    master = INXMMaster(masterAddress);\n",
                    "message": "MasterAware.changeMasterAddress (MasterAware.sol#113-115) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in MasterAware.sol:\n\t- pragma solidity^0.5.0 (MasterAware.sol#18): it allows old versions\n\t- pragma solidity^0.5.0 (MasterAware.sol#70): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/abstract/INXMMaster.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public owner;\n",
                    "message": "INXMMaster.owner should be constant (INXMMaster.sol#24)\nINXMMaster.pauseTime should be constant (INXMMaster.sol#26)\nINXMMaster.tokenAddress should be constant (INXMMaster.sol#22)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function masterInitialized() public view returns (bool);\n",
                    "message": "INXMMaster.masterInitialized (INXMMaster.sol#30) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 32,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isInternal(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isInternal (INXMMaster.sol#32) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isPause() public view returns (bool check);\n",
                    "message": "INXMMaster.isPause (INXMMaster.sol#34) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isOwner(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isOwner (INXMMaster.sol#36) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isMember(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.isMember (INXMMaster.sol#38) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function checkIsAuthToGoverned(address _add) public view returns (bool);\n",
                    "message": "INXMMaster.checkIsAuthToGoverned (INXMMaster.sol#40) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updatePauseTime(uint _time) public;\n",
                    "message": "INXMMaster.updatePauseTime (INXMMaster.sol#42) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppLocker() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppLocker (INXMMaster.sol#44) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function dAppToken() public view returns (address _add);\n",
                    "message": "INXMMaster.dAppToken (INXMMaster.sol#46) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": "INXMMaster.getLatestAddress (INXMMaster.sol#48) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in INXMMaster.sol:\n\t- pragma solidity^0.5.0 (INXMMaster.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 48,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) public view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/external/Deployer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "assembly",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "  function deploy(bytes memory data, uint256 salt) public {\n\n    assembly {\n\n      pop(create2(0, add(data, 32), mload(data), salt))\n\n    }\n",
                    "message": "Deployer.deploy uses assembly (Deployer.sol#7-11)\n\t- Deployer.sol#8-10\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "  function deploy(bytes memory data, uint256 salt) public {\n\n    assembly {\n\n      pop(create2(0, add(data, 32), mload(data), salt))\n\n    }\n",
                    "message": "Deployer.deploy (Deployer.sol#7-11) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Deployer.sol:\n\t- pragma solidity^0.5.0 (Deployer.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/external/uniswap/IUniswapV2Router01.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountA, uint amountB, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 31,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountA, uint amountB);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 50,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountToken, uint amountETH);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 61,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountA, uint amountB);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 71,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint amountToken, uint amountETH);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 81,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 78,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 79,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  ) external returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 96,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 98,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (uint[] memory amounts);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/external/uniswap/IUniswapV2Factory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IUniswapV2Factory.sol:\n\t- pragma solidity^0.5.0 (IUniswapV2Factory.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allPairs(uint) external view returns (address pair);\n",
                    "message": "Parameter '' of IUniswapV2Factory.allPairs (IUniswapV2Factory.sol#9) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/external/uniswap/IUniswapV2Pair.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getReserves() external view returns (uint112, uint112, uint32);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/token/NXMToken.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _founderAddress, uint _initialSupply) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 162,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _mint(_founderAddress, _initialSupply);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_36"
            ],
            "vulnerability_findings": [
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 147,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint8 public decimals = 18;\n",
                    "message": "NXMToken.decimals should be constant (NXMToken.sol#147)\nNXMToken.name should be constant (NXMToken.sol#145)\nNXMToken.symbol should be constant (NXMToken.sol#146)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transfer(address to, uint256 value) external returns (bool);\n",
                    "message": "OZIERC20.transfer (NXMToken.sol#11) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 327,
                    "vulnerability_to_line": 333,
                    "vulnerability_code": "  function transfer(address to, uint256 value) public canTransfer(to) returns (bool) {\n\n\n\n    require(isLockedForMV[msg.sender] < now); // if not voted under governance\n\n    require(value <= _balances[msg.sender]);\n\n    _transfer(to, value);\n\n    return true;\n",
                    "message": "NXMToken.transfer (NXMToken.sol#327-333) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": 213,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = value;\n\n    emit Approval(msg.sender, spender, value);\n\n    return true;\n",
                    "message": "NXMToken.approve (NXMToken.sol#207-213) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": 14,
                    "vulnerability_code": "  function approve(address spender, uint256 value)\n",
                    "message": "OZIERC20.approve (NXMToken.sol#13-14) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 17,
                    "vulnerability_code": "  function transferFrom(address from, address to, uint256 value)\n",
                    "message": "OZIERC20.transferFrom (NXMToken.sol#16-17) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 352,
                    "vulnerability_to_line": 366,
                    "vulnerability_code": "  function transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n  public\n\n  canTransfer(to)\n\n  returns (bool)\n\n  {\n\n    require(isLockedForMV[from] < now); // if not voted under governance\n\n    require(value <= _balances[from]);\n\n    require(value <= _allowed[from][msg.sender]);\n\n    _transferFrom(from, to, value);\n\n    return true;\n",
                    "message": "NXMToken.transferFrom (NXMToken.sol#352-366) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 168,
                    "vulnerability_to_line": 170,
                    "vulnerability_code": "  function totalSupply() public view returns (uint256) {\n\n    return _totalSupply;\n",
                    "message": "NXMToken.totalSupply (NXMToken.sol#168-170) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function totalSupply() external view returns (uint256);\n",
                    "message": "OZIERC20.totalSupply (NXMToken.sol#19) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function balanceOf(address who) external view returns (uint256);\n",
                    "message": "OZIERC20.balanceOf (NXMToken.sol#21) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 177,
                    "vulnerability_to_line": 179,
                    "vulnerability_code": "  function balanceOf(address owner) public view returns (uint256) {\n\n    return _balances[owner];\n",
                    "message": "NXMToken.balanceOf (NXMToken.sol#177-179) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 187,
                    "vulnerability_to_line": 196,
                    "vulnerability_code": "  function allowance(\n\n    address owner,\n\n    address spender\n\n  )\n\n  public\n\n  view\n\n  returns (uint256)\n\n  {\n\n    return _allowed[owner][spender];\n",
                    "message": "NXMToken.allowance (NXMToken.sol#187-196) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": 24,
                    "vulnerability_code": "  function allowance(address owner, address spender)\n",
                    "message": "OZIERC20.allowance (NXMToken.sol#23-24) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 224,
                    "vulnerability_to_line": 237,
                    "vulnerability_code": "  function increaseAllowance(\n\n    address spender,\n\n    uint256 addedValue\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n    _allowed[msg.sender][spender].add(addedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "NXMToken.increaseAllowance (NXMToken.sol#224-237) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 248,
                    "vulnerability_to_line": 261,
                    "vulnerability_code": "  function decreaseAllowance(\n\n    address spender,\n\n    uint256 subtractedValue\n\n  )\n\n  public\n\n  returns (bool)\n\n  {\n\n    require(spender != address(0));\n\n\n\n    _allowed[msg.sender][spender] = (\n\n    _allowed[msg.sender][spender].sub(subtractedValue));\n\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n\n    return true;\n",
                    "message": "NXMToken.decreaseAllowance (NXMToken.sol#248-261) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": 271,
                    "vulnerability_code": "  function addToWhiteList(address _member) public onlyOperator returns (bool) {\n\n    whiteListed[_member] = true;\n\n    emit WhiteListed(_member);\n\n    return true;\n",
                    "message": "NXMToken.addToWhiteList (NXMToken.sol#267-271) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": 281,
                    "vulnerability_code": "  function removeFromWhiteList(address _member) public onlyOperator returns (bool) {\n\n    whiteListed[_member] = false;\n\n    emit BlackListed(_member);\n\n    return true;\n",
                    "message": "NXMToken.removeFromWhiteList (NXMToken.sol#277-281) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": 290,
                    "vulnerability_code": "  function changeOperator(address _newOperator) public onlyOperator returns (bool) {\n\n    operator = _newOperator;\n\n    return true;\n",
                    "message": "NXMToken.changeOperator (NXMToken.sol#287-290) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 297,
                    "vulnerability_to_line": 300,
                    "vulnerability_code": "  function burn(uint256 amount) public returns (bool) {\n\n    _burn(msg.sender, amount);\n\n    return true;\n",
                    "message": "NXMToken.burn (NXMToken.sol#297-300) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 307,
                    "vulnerability_to_line": 310,
                    "vulnerability_code": "  function burnFrom(address from, uint256 value) public returns (bool) {\n\n    _burnFrom(from, value);\n\n    return true;\n",
                    "message": "NXMToken.burnFrom (NXMToken.sol#307-310) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 318,
                    "vulnerability_to_line": 320,
                    "vulnerability_code": "  function mint(address account, uint256 amount) public onlyOperator {\n\n    _mint(account, amount);\n",
                    "message": "NXMToken.mint (NXMToken.sol#318-320) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": 344,
                    "vulnerability_code": "  function operatorTransfer(address from, uint256 value) public onlyOperator returns (bool) {\n\n    require(value <= _balances[from]);\n\n    _transferFrom(from, operator, value);\n\n    return true;\n",
                    "message": "NXMToken.operatorTransfer (NXMToken.sol#340-344) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": 375,
                    "vulnerability_code": "  function lockForMemberVote(address _of, uint _days) public onlyOperator {\n\n    if (_days.add(now) > isLockedForMV[_of])\n\n      isLockedForMV[_of] = _days.add(now);\n",
                    "message": "NXMToken.lockForMemberVote (NXMToken.sol#372-375) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in NXMToken.sol:\n\t- pragma solidity^0.5.0 (NXMToken.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (NXMToken.sol#41): it allows old versions\n\t- pragma solidity^0.5.0 (NXMToken.sol#125): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _founderAddress, uint _initialSupply) public {\n",
                    "message": "Parameter '_founderAddress' of NXMToken. (NXMToken.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 161,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _founderAddress, uint _initialSupply) public {\n",
                    "message": "Parameter '_initialSupply' of NXMToken. (NXMToken.sol#161) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 267,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addToWhiteList(address _member) public onlyOperator returns (bool) {\n",
                    "message": "Parameter '_member' of NXMToken.addToWhiteList (NXMToken.sol#267) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 277,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function removeFromWhiteList(address _member) public onlyOperator returns (bool) {\n",
                    "message": "Parameter '_member' of NXMToken.removeFromWhiteList (NXMToken.sol#277) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 287,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function changeOperator(address _newOperator) public onlyOperator returns (bool) {\n",
                    "message": "Parameter '_newOperator' of NXMToken.changeOperator (NXMToken.sol#287) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function lockForMemberVote(address _of, uint _days) public onlyOperator {\n",
                    "message": "Parameter '_of' of NXMToken.lockForMemberVote (NXMToken.sol#372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function lockForMemberVote(address _of, uint _days) public onlyOperator {\n",
                    "message": "Parameter '_days' of NXMToken.lockForMemberVote (NXMToken.sol#372) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 382,
                    "vulnerability_to_line": 386,
                    "vulnerability_code": "  function _transfer(address to, uint256 value) internal {\n\n    _balances[msg.sender] = _balances[msg.sender].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    emit Transfer(msg.sender, to, value);\n",
                    "message": "Function 'NXMToken._transfer' (NXMToken.sol#382-386) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 394,
                    "vulnerability_to_line": 405,
                    "vulnerability_code": "  function _transferFrom(\n\n    address from,\n\n    address to,\n\n    uint256 value\n\n  )\n\n  internal\n\n  {\n\n    _balances[from] = _balances[from].sub(value);\n\n    _balances[to] = _balances[to].add(value);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n\n    emit Transfer(from, to, value);\n",
                    "message": "Function 'NXMToken._transferFrom' (NXMToken.sol#394-405) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": 419,
                    "vulnerability_code": "  function _mint(address account, uint256 amount) internal {\n\n    require(account != address(0));\n\n    _totalSupply = _totalSupply.add(amount);\n\n    _balances[account] = _balances[account].add(amount);\n\n    emit Transfer(address(0), account, amount);\n",
                    "message": "Function 'NXMToken._mint' (NXMToken.sol#414-419) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": 433,
                    "vulnerability_code": "  function _burn(address account, uint256 amount) internal {\n\n    require(amount <= _balances[account]);\n\n\n\n    _totalSupply = _totalSupply.sub(amount);\n\n    _balances[account] = _balances[account].sub(amount);\n\n    emit Transfer(account, address(0), amount);\n",
                    "message": "Function 'NXMToken._burn' (NXMToken.sol#427-433) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 450,
                    "vulnerability_code": "  function _burnFrom(address account, uint256 value) internal {\n\n    require(value <= _allowed[account][msg.sender]);\n\n\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n\n    // this function needs to emit an event with the updated approval.\n\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n\n      value);\n\n    _burn(account, value);\n",
                    "message": "Function 'NXMToken._burnFrom' (NXMToken.sol#442-450) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 207,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function approve(address spender, uint256 value) public returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 135,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => uint256) private _balances;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 137,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  mapping(address => mapping(address => uint256)) private _allowed;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 143,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  uint256 private _totalSupply;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/token/external/OZIERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in OZIERC20.sol:\n\t- pragma solidity^0.5.0 (OZIERC20.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/token/external/OZSafeMath.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in OZSafeMath.sol:\n\t- pragma solidity^0.5.0 (OZSafeMath.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/token/external/LockHandler.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in LockHandler.sol:\n\t- pragma solidity^0.5.0 (LockHandler.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/capital/LegacyMCR.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in LegacyMCR.sol:\n\t- pragma solidity^0.5.0 (LegacyMCR.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _calVtpAndMCRtp(uint poolBalance) external view returns (uint vtp, uint mcrtp);\n",
                    "message": "Function 'LegacyMCR._calVtpAndMCRtp' (LegacyMCR.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _calVtpAndMCRtp(uint poolBalance) external view returns (uint vtp, uint mcrtp);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calVtpAndMCRtp() external view returns (uint vtp, uint mcrtp);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function calculateVtpAndMCRtp(uint poolBalance) external view returns (uint vtp, uint mcrtp);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getThresholdValues(uint vtp, uint vF, uint totalSA, uint minCap) external view returns (uint lowerThreshold, uint upperThreshold);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getUintParameters(bytes8 code) external view returns (bytes8 codeVal, uint val);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addMCRData(uint mcrP, uint mcrE, uint vF, bytes4[] calldata curr, uint[] calldata _threeDayAvg, uint64 onlyDate) external;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/capital/LegacyPoolData.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in LegacyPoolData.sol:\n\t- pragma solidity^0.5.0 (LegacyPoolData.sol#18): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": " function changeNotariseAddress(address) external;\n",
                    "message": "Parameter '' of LegacyPoolData.changeNotariseAddress (LegacyPoolData.sol#23) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/governance/external/Governed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 29,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    require(ms.getLatestAddress(\"GV\") == msg.sender, \"Not authorized\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "uninitialized-state",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public masterAddress; // Name of the dApp, needs to be set by contracts inheriting this contract\n",
                    "message": "Governed.masterAddress (Governed.sol#24) is never initialized. It is used in:\n\t- isAuthorizedToGovern (Governed.sol#34-37)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  address public masterAddress; // Name of the dApp, needs to be set by contracts inheriting this contract\n",
                    "message": "Governed.masterAddress should be constant (Governed.sol#24)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": 37,
                    "vulnerability_code": "  function isAuthorizedToGovern(address _toCheck) public view returns (bool) {\n\n    IMaster ms = IMaster(masterAddress);\n\n    return (ms.getLatestAddress(\"GV\") == _toCheck);\n",
                    "message": "Governed.isAuthorizedToGovern (Governed.sol#34-37) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Governed.sol:\n\t- pragma solidity^0.5.0 (Governed.sol#15): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 34,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function isAuthorizedToGovern(address _toCheck) public view returns (bool) {\n",
                    "message": "Parameter '_toCheck' of Governed.isAuthorizedToGovern (Governed.sol#34) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/governance/external/OwnedUpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {}\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _setUpgradeabilityOwner(msg.sender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    _upgradeTo(_implementation);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 127,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  }\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_18"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation (OwnedUpgradeabilityProxy.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      owner := sload(position)\n\n    }\n",
                    "message": "OwnedUpgradeabilityProxy.proxyOwner (OwnedUpgradeabilityProxy.sol#141-147) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Contract locking ether found in OwnedUpgradeabilityProxy.sol:\n\tContract OwnedUpgradeabilityProxy has payable functions:\n\t - fallback (OwnedUpgradeabilityProxy.sol#17-33)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Proxy.fallback uses assembly (OwnedUpgradeabilityProxy.sol#17-33)\n\t- OwnedUpgradeabilityProxy.sol#22-32\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation uses assembly (OwnedUpgradeabilityProxy.sol#70-76)\n\t- OwnedUpgradeabilityProxy.sol#73-75\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (OwnedUpgradeabilityProxy.sol#82-88)\n\t- OwnedUpgradeabilityProxy.sol#85-87\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": 147,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      owner := sload(position)\n\n    }\n",
                    "message": "OwnedUpgradeabilityProxy.proxyOwner uses assembly (OwnedUpgradeabilityProxy.sol#141-147)\n\t- OwnedUpgradeabilityProxy.sol#144-146\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "  function _setUpgradeabilityOwner(address _newProxyOwner) internal {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newProxyOwner)\n\n    }\n",
                    "message": "OwnedUpgradeabilityProxy._setUpgradeabilityOwner uses assembly (OwnedUpgradeabilityProxy.sol#170-176)\n\t- OwnedUpgradeabilityProxy.sol#173-175\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": 157,
                    "vulnerability_code": "  function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\n\n    require(_newOwner != address(0));\n\n    _setUpgradeabilityOwner(_newOwner);\n\n    emit ProxyOwnershipTransferred(proxyOwner(), _newOwner);\n",
                    "message": "OwnedUpgradeabilityProxy.transferProxyOwnership (OwnedUpgradeabilityProxy.sol#153-157) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": 165,
                    "vulnerability_code": "  function upgradeTo(address _implementation) public onlyProxyOwner {\n\n    _upgradeTo(_implementation);\n",
                    "message": "OwnedUpgradeabilityProxy.upgradeTo (OwnedUpgradeabilityProxy.sol#163-165) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in OwnedUpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.0 (OwnedUpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (OwnedUpgradeabilityProxy.sol#44): it allows old versions\n\t- pragma solidity^0.5.0 (OwnedUpgradeabilityProxy.sol#104): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (OwnedUpgradeabilityProxy.sol#82-88) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n\n    address currentImplementation = implementation();\n\n    require(currentImplementation != _newImplementation);\n\n    _setImplementation(_newImplementation);\n\n    emit Upgraded(_newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (OwnedUpgradeabilityProxy.sol#94-99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n",
                    "message": "Parameter '_newImplementation' of UpgradeabilityProxy._upgradeTo (OwnedUpgradeabilityProxy.sol#94) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor(address _implementation) public {\n",
                    "message": "Parameter '_implementation' of OwnedUpgradeabilityProxy. (OwnedUpgradeabilityProxy.sol#124) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 153,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\n",
                    "message": "Parameter '_newOwner' of OwnedUpgradeabilityProxy.transferProxyOwnership (OwnedUpgradeabilityProxy.sol#153) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 163,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function upgradeTo(address _implementation) public onlyProxyOwner {\n",
                    "message": "Parameter '_implementation' of OwnedUpgradeabilityProxy.upgradeTo (OwnedUpgradeabilityProxy.sol#163) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 170,
                    "vulnerability_to_line": 176,
                    "vulnerability_code": "  function _setUpgradeabilityOwner(address _newProxyOwner) internal {\n\n    bytes32 position = PROXY_OWNER_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newProxyOwner)\n\n    }\n",
                    "message": "Function 'OwnedUpgradeabilityProxy._setUpgradeabilityOwner' (OwnedUpgradeabilityProxy.sol#170-176) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 104,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant IMPLEMENTATION_POSITION = keccak256(\"org.govblocks.proxy.implementation\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant PROXY_OWNER_POSITION = keccak256(\"org.govblocks.proxy.owner\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 141,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function proxyOwner() public view returns (address owner) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 173,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/governance/external/Proxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Contract locking ether found in Proxy.sol:\n\tContract Proxy has payable functions:\n\t - fallback (Proxy.sol#17-33)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Proxy.fallback uses assembly (Proxy.sol#17-33)\n\t- Proxy.sol#22-32\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in Proxy.sol:\n\t- pragma solidity^0.5.0 (Proxy.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/governance/external/IGovernance.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 144,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function canCloseProposal(uint _proposalId) public view returns (uint closeValue);\n",
                    "message": "IGovernance.canCloseProposal (IGovernance.sol#144) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 146,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function allowedToCatgorize() public view returns (uint roleId);\n",
                    "message": "IGovernance.allowedToCatgorize (IGovernance.sol#146) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IGovernance.sol:\n\t- pragma solidity^0.5.0 (IGovernance.sol#18): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 136,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createProposal(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 84,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function updateProposal(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function submitProposalWithSolution(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function createProposalwithSolution(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 75,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 76,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 77,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _categoryId\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 86,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalTitle,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 88,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _solutionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 106,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata _action\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalSD,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _proposalDescHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _categoryId,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _solutionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 119,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _solutionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes calldata _action\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/governance/external/IProposalCategory.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 103,
                    "vulnerability_code": "  function updateCategory(\n\n    uint _categoryId,\n\n    string memory _name,\n\n    uint _memberRoleToVote,\n\n    uint _majorityVotePerc,\n\n    uint _quorumPerc,\n\n    uint[] memory _allowedToCreateProposal,\n\n    uint _closingTime,\n\n    string memory _actionHash,\n\n    address _contractAddress,\n\n    bytes2 _contractName,\n\n    uint[] memory _incentives\n\n  )\n",
                    "message": "IProposalCategory.updateCategory (IProposalCategory.sol#90-103) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IProposalCategory.sol:\n\t- pragma solidity^0.5.0 (IProposalCategory.sol#15): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 54,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 68,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addCategory(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint[] calldata _allowedToCreateProposal,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint _closingTime,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _actionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string calldata _actionHash,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address _contractAddress,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    bytes2 _contractName,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 46,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint[] calldata _incentives\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/governance/external/UpgradeabilityProxy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 64,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  constructor() public {}\n",
                    "message": "Consider making costructor payable to save gas."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "constant-function",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation (UpgradeabilityProxy.sol#70-76) is declared view but contains assembly code\n"
                },
                {
                    "name": "locked-ether",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Contract locking ether found in UpgradeabilityProxy.sol:\n\tContract UpgradeabilityProxy has payable functions:\n\t - fallback (UpgradeabilityProxy.sol#17-33)\n\tBut does not have a function to withdraw the ether\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "  function() external payable {\n\n    address _impl = implementation();\n\n    require(_impl != address(0));\n\n\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      let ptr := mload(0x40)\n\n      calldatacopy(ptr, 0, calldatasize)\n\n      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n\n      let size := returndatasize\n\n      returndatacopy(ptr, 0, size)\n\n\n\n      switch result\n\n      case 0 {revert(ptr, size)}\n\n      default {return (ptr, size)}\n\n    }\n",
                    "message": "Proxy.fallback uses assembly (UpgradeabilityProxy.sol#17-33)\n\t- UpgradeabilityProxy.sol#22-32\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 76,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      impl := sload(position)\n\n    }\n",
                    "message": "UpgradeabilityProxy.implementation uses assembly (UpgradeabilityProxy.sol#70-76)\n\t- UpgradeabilityProxy.sol#73-75\n"
                },
                {
                    "name": "assembly",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "UpgradeabilityProxy._setImplementation uses assembly (UpgradeabilityProxy.sol#82-88)\n\t- UpgradeabilityProxy.sol#85-87\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in UpgradeabilityProxy.sol:\n\t- pragma solidity^0.5.0 (UpgradeabilityProxy.sol#3): it allows old versions\n\t- pragma solidity^0.5.0 (UpgradeabilityProxy.sol#44): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 82,
                    "vulnerability_to_line": 88,
                    "vulnerability_code": "  function _setImplementation(address _newImplementation) internal {\n\n    bytes32 position = IMPLEMENTATION_POSITION;\n\n    // solhint-disable-next-line no-inline-assembly\n\n    assembly {\n\n      sstore(position, _newImplementation)\n\n    }\n",
                    "message": "Function 'UpgradeabilityProxy._setImplementation' (UpgradeabilityProxy.sol#82-88) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 99,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n\n    address currentImplementation = implementation();\n\n    require(currentImplementation != _newImplementation);\n\n    _setImplementation(_newImplementation);\n\n    emit Upgraded(_newImplementation);\n",
                    "message": "Function 'UpgradeabilityProxy._upgradeTo' (UpgradeabilityProxy.sol#94-99) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function _upgradeTo(address _newImplementation) internal {\n",
                    "message": "Parameter '_newImplementation' of UpgradeabilityProxy._upgradeTo (UpgradeabilityProxy.sol#94) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_LOCKED_MONEY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract Proxy {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 58,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  bytes32 private constant IMPLEMENTATION_POSITION = keccak256(\"org.govblocks.proxy.implementation\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function implementation() public view returns (address impl) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 73,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
                    "vulnerability_from_line": 85,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    assembly {\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/modules/claims/ClaimProofs.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in ClaimProofs.sol:\n\t- pragma solidity^0.5.0 (ClaimProofs.sol#19): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addProof(uint _coverId, string calldata _ipfsHash) external {\n",
                    "message": "Parameter '_coverId' of ClaimProofs.addProof (ClaimProofs.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function addProof(uint _coverId, string calldata _ipfsHash) external {\n",
                    "message": "Parameter '_ipfsHash' of ClaimProofs.addProof (ClaimProofs.sol#25) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/interfaces/INXMaster.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getLatestAddress(bytes2 _contractName) external view returns (address payable contractAddress);\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/interfaces/IPooledStaking.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IPooledStaking.sol:\n\t- pragma solidity^0.5.0 (IPooledStaking.sol#3): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/interfaces/ITwapOracle.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/interfaces/IPool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": false,
            "errors": [
                "EXIT_CODE_255",
                "error parsing results: file could not be opened successfully:\n- method gz: ReadError('empty file')\n- method bz2: ReadError('not a bzip2 file')\n- method xz: ReadError('not an lzma file')\n- method tar: ReadError('empty file')"
            ],
            "vulnerability_findings": []
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.8.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getAssetDetails(address _asset) external view returns (\n",
                    "message": null
                }
            ]
        }
    },
    "smart-contracts-60efdf64f2198050f7e6fcec57548d40e4f8598f/contracts/interfaces/IERC20Detailed.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": "Detected issues with version pragma in IERC20Detailed.sol:\n\t- pragma solidity^0.5.0 (IERC20Detailed.sol#15): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.5.0;\n",
                    "message": null
                }
            ]
        }
    }
}