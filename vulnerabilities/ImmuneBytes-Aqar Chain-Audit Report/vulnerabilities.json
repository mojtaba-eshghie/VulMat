{
    "aq.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "use-ownable2step",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "contract aqarchain is Ownable{\n",
                    "message": "By demanding that the receiver of the owner permissions actively accept via a contract call of its own,  `Ownable2Step` and `Ownable2StepUpgradeable` prevent the contract ownership from accidentally being transferred  to an address that cannot handle it."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 395,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint256 public i=0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint256 claimamount=0;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 411,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bool public seedrun = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 412,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bool public privaterun = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 413,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bool public publicrun = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "init-variables-with-default-value",
                    "vulnerability_from_line": 414,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      bool public claimbool = false;\n",
                    "message": "Uninitialized variables are assigned with the types default value. Explicitly initializing a variable with its default value costs unnecessary gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 302,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor() internal {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 303,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address msgSender = _msgSender();\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 304,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msgSender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 305,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        emit OwnershipTransferred(address(0), msgSender);\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 306,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 425,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      constructor() public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 426,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        pancakerouter1 = IUniswapV2Router01(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 428,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 429,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 319,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            newOwner != address(0),\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Ownable: new owner is the zero address\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount>=100000000000000000000 ,\"Enter amount greater than 100 usd\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedrun = true,\"seed round is not started or over\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"try reducing amount or seed round is finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"the input bnb amount should be greater than hundred\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 467,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedrun = true,\"seed round is not started or over\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"try reducing amount or seed round is finished\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 483,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount>=100000000000000000000,\"Enter amount greter than 100 usd\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 486,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privaterun=true,\"Private sale haven't started yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 497,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"private round is over\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "       require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"the input bnb amount should be greater than hundred usd\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 507,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privaterun=true,\"Private sale haven't started yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 518,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"private round is over\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 523,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "         require(_amount>=100000000000000000000 ,\"Enter amount more than 100 usd\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "         require(publicamount<=1000000000000000000000000,\"public round token sale completed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 527,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "         require(publicrun=true,\"Public sale haven't started yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 538,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"public round is over\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "             msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"the input bnb amount should be greater than hundred and less than sfivethousand\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 548,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(publicrun=true,\"Public sale haven't started yet\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privateamount<=1000000000000000000000000,\"private round token sale completed\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 560,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"private round is over\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 565,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(claimbool = true,\"claiming amount should be true\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 609,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 610,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            getContractTokenBalance(_token) >= value,\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 611,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"the contract doesnt have tokens\"\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 612,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 453,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 475,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 493,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 514,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 534,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-prefix-increment-not-postfix",
                    "vulnerability_from_line": 556,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        i++;\n",
                    "message": "Consider using the prefix increment expression whenever the return value is not needed. The prefix increment expression is cheaper in terms of gas."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 215,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(c / a == b, \"SafeMath: multiplication overflow\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 340,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 341,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            newOwner != address(0),\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 342,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"Ownable: new owner is the zero address\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 343,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount>=100000000000000000000 ,\"Enter amount greater than 100 usd\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedrun = true,\"seed round is not started or over\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 457,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"try reducing amount or seed round is finished\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 463,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 464,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 465,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"the input bnb amount should be greater than hundred\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 466,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 469,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedrun = true,\"seed round is not started or over\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 479,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            revert(\"try reducing amount or seed round is finished\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 484,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 502,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "       require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 503,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "           msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 504,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"the input bnb amount should be greater than hundred usd\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 505,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 508,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 525,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "         require(publicamount<=1000000000000000000000000,\"public round token sale completed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 543,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 544,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "             msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 545,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            \"the input bnb amount should be greater than hundred and less than sfivethousand\"\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 546,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        );\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                },
                {
                    "name": "use-short-revert-string",
                    "vulnerability_from_line": 550,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(privateamount<=1000000000000000000000000,\"private round token sale completed\");\n",
                    "message": "Shortening revert strings to fit in 32 bytes will decrease gas costs for deployment and  gas costs when the revert condition has been met."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_71"
            ],
            "vulnerability_findings": [
                {
                    "name": "arbitrary-send",
                    "vulnerability_from_line": 596,
                    "vulnerability_to_line": 598,
                    "vulnerability_code": "    function adminTransferBnbFund() external onlyOwner {\n\n        msg.sender.transfer(address(this).balance);\n",
                    "message": "aqarchain.adminTransferBnbFund (aq.sol#596-598) sends eth to arbitrary user\n\tDangerous calls:\n\t- msg.sender.transfer(address(this).balance) (aq.sol#597)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 573,
                    "vulnerability_code": "    function claim() external {\n\n        // SWC-Typographical Error: L562\n\n        require(claimbool = true,\"claiming amount should be true\");\n\n       \n\n        claimamount = usermappublic[msg.sender].amount.add(usermapseed[msg.sender].amount).add(usermapprivate[msg.sender].amount);\n\n        token.transfer(msg.sender,claimamount);\n\n        usermappublic[msg.sender].amount=0;\n\n        usermapprivate[msg.sender].amount=0;\n\n        usermapseed[msg.sender].amount=0;\n\n        claimamount=0;\n",
                    "message": "Reentrancy in aqarchain.claim (aq.sol#563-573):\n\tExternal calls:\n\t- token.transfer(msg.sender,claimamount) (aq.sol#568)\n\tState variables written after the call(s):\n\t- claimamount (aq.sol#572)\n\t- usermapprivate (aq.sol#570)\n\t- usermappublic (aq.sol#569)\n\t- usermapseed (aq.sol#571)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": 520,
                    "vulnerability_code": "      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n       require(\n\n           msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred usd\"\n\n        );\n\n        // SWC-Typographical Error: L505\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        \n\n      if(privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserprivate[_id]=amountmaptouserprivate[_id].add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        privateamount=privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.privatebnb (aq.sol#500-520):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred usd) (aq.sol#502-505)\n\t- privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)) <= 12000000000000000000000000 (aq.sol#510-519)\n\t- usermapprivate[msg.sender] = privateUserInfo(_first,_last,_country,usermapprivate[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)),privateprice,_id,BNB) (aq.sol#511)\n\t- amountmaptouserprivate[_id] = amountmaptouserprivate[_id].add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)) (aq.sol#512)\n\t- privateamount = privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)) (aq.sol#513)\n\tState variables written after the call(s):\n\t- privateamount (aq.sol#513)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000,\"Enter amount greter than 100 usd\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        // SWC-Typographical Error: L484\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        \n\n        if(privateamount.add(_amount.mul(privateprice).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(_amount.mul(privateprice).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserprivate[_id]= amountmaptouserprivate[_id].add(_amount.mul(privateprice).div(1000));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        privateamount=privateamount.add(_amount.mul(privateprice).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.privateusdt (aq.sol#482-499):\n\tExternal calls:\n\t- usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#491)\n\tState variables written after the call(s):\n\t- privateamount (aq.sol#492)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": 562,
                    "vulnerability_code": "    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n             msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred and less than sfivethousand\"\n\n        );\n\n        // SWC-Typographical Error: L546\n\n        require(publicrun=true,\"Public sale haven't started yet\");\n\n        // SWC-Requirement Violation: L548\n\n        require(privateamount<=1000000000000000000000000,\"private round token sale completed\");\n\n     \n\n      if(publicamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        publicamount=privateamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.publicbnb (aq.sol#541-562):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred and less than sfivethousand) (aq.sol#543-546)\n\t- publicamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)) <= 1000000000000000000000000 (aq.sol#552-561)\n\t- usermappublic[msg.sender] = publicUserInfo(_first,_last,_country,usermappublic[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)),publicprice,_id,BNB) (aq.sol#553)\n\t- amountmaptouserpublic[_id] = amountmaptouserpublic[_id].add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)) (aq.sol#554)\n\t- publicamount = privateamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)) (aq.sol#555)\n\tState variables written after the call(s):\n\t- publicamount (aq.sol#555)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": 540,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n         require(_amount>=100000000000000000000 ,\"Enter amount more than 100 usd\");\n\n        \n\n         require(publicamount<=1000000000000000000000000,\"public round token sale completed\");\n\n        // SWC-Typographical Error: L525\n\n         require(publicrun=true,\"Public sale haven't started yet\");\n\n        \n\n        if(publicamount.add(_amount.mul(publicprice).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(_amount.mul(publicprice).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"usdt\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(_amount.mul(publicprice).div(10));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        publicamount=publicamount.add(_amount.mul(publicprice).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"public round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.publicusdt (aq.sol#522-540):\n\tExternal calls:\n\t- usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#532)\n\tState variables written after the call(s):\n\t- publicamount (aq.sol#533)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 481,
                    "vulnerability_code": "      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n            msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,\n\n            \"the input bnb amount should be greater than hundred\"\n\n        );\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L467\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n      \n\n       if(seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18))<=7000000000000000000000000){\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapseed[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)),phase:seedprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        seedamount=seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.seedbnb (aq.sol#461-481):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred) (aq.sol#463-466)\n\t- seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)) <= 7000000000000000000000000 (aq.sol#471-480)\n\t- usermapseed[msg.sender] = seedUserInfo(_first,_last,_country,usermapseed[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)),seedprice,_id,BNB) (aq.sol#472)\n\t- amountmaptouserseed[_id] = amountmaptouserseed[_id].add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)) (aq.sol#473)\n\t- seedamount = seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)) (aq.sol#474)\n\tState variables written after the call(s):\n\t- seedamount (aq.sol#474)\n"
                },
                {
                    "name": "reentrancy-no-eth",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000 ,\"Enter amount greater than 100 usd\");\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L444\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n\n\n        if(seedamount.add(_amount.mul(seedprice))<=7000000000000000000000000){\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(_amount.mul(seedprice));\n\n        seedamount=seedamount.add(_amount.mul(seedprice));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.seedusdt (aq.sol#442-459):\n\tExternal calls:\n\t- usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#449)\n\tState variables written after the call(s):\n\t- seedamount (aq.sol#452)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000 ,\"Enter amount greater than 100 usd\");\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L444\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n\n\n        if(seedamount.add(_amount.mul(seedprice))<=7000000000000000000000000){\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(_amount.mul(seedprice));\n\n        seedamount=seedamount.add(_amount.mul(seedprice));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n",
                    "message": "aqarchain.seedusdt (aq.sol#442-459) does not use the value returned by external calls:\n\t-usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#449)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000,\"Enter amount greter than 100 usd\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        // SWC-Typographical Error: L484\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        \n\n        if(privateamount.add(_amount.mul(privateprice).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(_amount.mul(privateprice).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserprivate[_id]= amountmaptouserprivate[_id].add(_amount.mul(privateprice).div(1000));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        privateamount=privateamount.add(_amount.mul(privateprice).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "aqarchain.privateusdt (aq.sol#482-499) does not use the value returned by external calls:\n\t-usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#491)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": 540,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n         require(_amount>=100000000000000000000 ,\"Enter amount more than 100 usd\");\n\n        \n\n         require(publicamount<=1000000000000000000000000,\"public round token sale completed\");\n\n        // SWC-Typographical Error: L525\n\n         require(publicrun=true,\"Public sale haven't started yet\");\n\n        \n\n        if(publicamount.add(_amount.mul(publicprice).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(_amount.mul(publicprice).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"usdt\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(_amount.mul(publicprice).div(10));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        publicamount=publicamount.add(_amount.mul(publicprice).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"public round is over\");\n\n        }\n",
                    "message": "aqarchain.publicusdt (aq.sol#522-540) does not use the value returned by external calls:\n\t-usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#532)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 563,
                    "vulnerability_to_line": 573,
                    "vulnerability_code": "    function claim() external {\n\n        // SWC-Typographical Error: L562\n\n        require(claimbool = true,\"claiming amount should be true\");\n\n       \n\n        claimamount = usermappublic[msg.sender].amount.add(usermapseed[msg.sender].amount).add(usermapprivate[msg.sender].amount);\n\n        token.transfer(msg.sender,claimamount);\n\n        usermappublic[msg.sender].amount=0;\n\n        usermapprivate[msg.sender].amount=0;\n\n        usermapseed[msg.sender].amount=0;\n\n        claimamount=0;\n",
                    "message": "aqarchain.claim (aq.sol#563-573) does not use the value returned by external calls:\n\t-token.transfer(msg.sender,claimamount) (aq.sol#568)\n"
                },
                {
                    "name": "unused-return",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": 616,
                    "vulnerability_code": "    function fundsWithdrawal(IERC20 _token, uint256 value) external onlyOwner {\n\n        require(\n\n            getContractTokenBalance(_token) >= value,\n\n            \"the contract doesnt have tokens\"\n\n        );\n\n        \n\n      _token.transfer(msg.sender,value);\n\n\n",
                    "message": "aqarchain.fundsWithdrawal (aq.sol#608-616) does not use the value returned by external calls:\n\t-_token.transfer(msg.sender,value) (aq.sol#614)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": 520,
                    "vulnerability_code": "      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n       require(\n\n           msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred usd\"\n\n        );\n\n        // SWC-Typographical Error: L505\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        \n\n      if(privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserprivate[_id]=amountmaptouserprivate[_id].add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        privateamount=privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.privatebnb (aq.sol#500-520):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred usd) (aq.sol#502-505)\n\tState variables written after the call(s):\n\t- privaterun (aq.sol#507)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": 520,
                    "vulnerability_code": "      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n       require(\n\n           msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred usd\"\n\n        );\n\n        // SWC-Typographical Error: L505\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        \n\n      if(privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserprivate[_id]=amountmaptouserprivate[_id].add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        privateamount=privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.privatebnb (aq.sol#500-520):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred usd) (aq.sol#502-505)\n\t- privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)) <= 12000000000000000000000000 (aq.sol#510-519)\n\t- usermapprivate[msg.sender] = privateUserInfo(_first,_last,_country,usermapprivate[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)),privateprice,_id,BNB) (aq.sol#511)\n\t- amountmaptouserprivate[_id] = amountmaptouserprivate[_id].add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)) (aq.sol#512)\n\t- privateamount = privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)) (aq.sol#513)\n\tState variables written after the call(s):\n\t- i (aq.sol#514)\n\t- usersarr (aq.sol#515)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": 499,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000,\"Enter amount greter than 100 usd\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        // SWC-Typographical Error: L484\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        \n\n        if(privateamount.add(_amount.mul(privateprice).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(_amount.mul(privateprice).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserprivate[_id]= amountmaptouserprivate[_id].add(_amount.mul(privateprice).div(1000));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        privateamount=privateamount.add(_amount.mul(privateprice).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.privateusdt (aq.sol#482-499):\n\tExternal calls:\n\t- usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#491)\n\tState variables written after the call(s):\n\t- i (aq.sol#493)\n\t- usersarr (aq.sol#494)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": 562,
                    "vulnerability_code": "    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n             msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred and less than sfivethousand\"\n\n        );\n\n        // SWC-Typographical Error: L546\n\n        require(publicrun=true,\"Public sale haven't started yet\");\n\n        // SWC-Requirement Violation: L548\n\n        require(privateamount<=1000000000000000000000000,\"private round token sale completed\");\n\n     \n\n      if(publicamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        publicamount=privateamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.publicbnb (aq.sol#541-562):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred and less than sfivethousand) (aq.sol#543-546)\n\tState variables written after the call(s):\n\t- publicrun (aq.sol#548)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": 562,
                    "vulnerability_code": "    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n             msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred and less than sfivethousand\"\n\n        );\n\n        // SWC-Typographical Error: L546\n\n        require(publicrun=true,\"Public sale haven't started yet\");\n\n        // SWC-Requirement Violation: L548\n\n        require(privateamount<=1000000000000000000000000,\"private round token sale completed\");\n\n     \n\n      if(publicamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        publicamount=privateamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.publicbnb (aq.sol#541-562):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred and less than sfivethousand) (aq.sol#543-546)\n\t- publicamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)) <= 1000000000000000000000000 (aq.sol#552-561)\n\t- usermappublic[msg.sender] = publicUserInfo(_first,_last,_country,usermappublic[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)),publicprice,_id,BNB) (aq.sol#553)\n\t- amountmaptouserpublic[_id] = amountmaptouserpublic[_id].add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)) (aq.sol#554)\n\t- publicamount = privateamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)) (aq.sol#555)\n\tState variables written after the call(s):\n\t- i (aq.sol#556)\n\t- usersarr (aq.sol#557)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": 540,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n         require(_amount>=100000000000000000000 ,\"Enter amount more than 100 usd\");\n\n        \n\n         require(publicamount<=1000000000000000000000000,\"public round token sale completed\");\n\n        // SWC-Typographical Error: L525\n\n         require(publicrun=true,\"Public sale haven't started yet\");\n\n        \n\n        if(publicamount.add(_amount.mul(publicprice).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(_amount.mul(publicprice).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"usdt\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(_amount.mul(publicprice).div(10));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        publicamount=publicamount.add(_amount.mul(publicprice).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"public round is over\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.publicusdt (aq.sol#522-540):\n\tExternal calls:\n\t- usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#532)\n\tState variables written after the call(s):\n\t- i (aq.sol#534)\n\t- usersarr (aq.sol#535)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 481,
                    "vulnerability_code": "      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n            msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,\n\n            \"the input bnb amount should be greater than hundred\"\n\n        );\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L467\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n      \n\n       if(seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18))<=7000000000000000000000000){\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapseed[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)),phase:seedprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        seedamount=seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.seedbnb (aq.sol#461-481):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred) (aq.sol#463-466)\n\tState variables written after the call(s):\n\t- seedrun (aq.sol#469)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": 481,
                    "vulnerability_code": "      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n            msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,\n\n            \"the input bnb amount should be greater than hundred\"\n\n        );\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L467\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n      \n\n       if(seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18))<=7000000000000000000000000){\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapseed[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)),phase:seedprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        seedamount=seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.seedbnb (aq.sol#461-481):\n\tExternal calls:\n\t- require(bool,string)(msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,the input bnb amount should be greater than hundred) (aq.sol#463-466)\n\t- seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)) <= 7000000000000000000000000 (aq.sol#471-480)\n\t- usermapseed[msg.sender] = seedUserInfo(_first,_last,_country,usermapseed[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)),seedprice,_id,BNB) (aq.sol#472)\n\t- amountmaptouserseed[_id] = amountmaptouserseed[_id].add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)) (aq.sol#473)\n\t- seedamount = seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)) (aq.sol#474)\n\tState variables written after the call(s):\n\t- i (aq.sol#475)\n\t- usersarr (aq.sol#476)\n"
                },
                {
                    "name": "reentrancy-benign",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": 459,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000 ,\"Enter amount greater than 100 usd\");\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L444\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n\n\n        if(seedamount.add(_amount.mul(seedprice))<=7000000000000000000000000){\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(_amount.mul(seedprice));\n\n        seedamount=seedamount.add(_amount.mul(seedprice));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n",
                    "message": "Reentrancy in aqarchain.seedusdt (aq.sol#442-459):\n\tExternal calls:\n\t- usdt.transferFrom(msg.sender,address(this),_amount) (aq.sol#449)\n\tState variables written after the call(s):\n\t- amountmaptouserseed (aq.sol#451)\n\t- i (aq.sol#453)\n\t- usermapseed (aq.sol#450)\n\t- usersarr (aq.sol#454)\n"
                },
                {
                    "name": "constable-states",
                    "vulnerability_from_line": 402,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint256 public privateprice = 2857;\n",
                    "message": "aqarchain.privateprice should be constant (aq.sol#402)\naqarchain.publicprice should be constant (aq.sol#403)\naqarchain.seedprice should be constant (aq.sol#401)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 311,
                    "vulnerability_to_line": 313,
                    "vulnerability_code": "    function owner() public view returns (address) {\n\n        return _owner;\n",
                    "message": "Ownable.owner (aq.sol#311-313) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 330,
                    "vulnerability_to_line": 333,
                    "vulnerability_code": "    function renounceOwnership() public virtual onlyOwner {\n\n        emit OwnershipTransferred(_owner, address(0));\n\n        _owner = address(0);\n",
                    "message": "Ownable.renounceOwnership (aq.sol#330-333) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 339,
                    "vulnerability_to_line": 346,
                    "vulnerability_code": "    function transferOwnership(address newOwner) public virtual onlyOwner {\n\n        require(\n\n            newOwner != address(0),\n\n            \"Ownable: new owner is the zero address\"\n\n        );\n\n        emit OwnershipTransferred(_owner, newOwner);\n\n        _owner = newOwner;\n",
                    "message": "Ownable.transferOwnership (aq.sol#339-346) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 592,
                    "vulnerability_to_line": 594,
                    "vulnerability_code": "     function getBnbBalance() public view returns (uint256) {\n\n        return address(this).balance;\n",
                    "message": "aqarchain.getBnbBalance (aq.sol#592-594) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": "Detected issues with version pragma in aq.sol:\n\t- pragma solidity^0.6.0 (aq.sol#3): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function WETH() external pure returns (address);\n",
                    "message": "Function 'IUniswapV2Router01.WETH' (aq.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 281,
                    "vulnerability_to_line": 283,
                    "vulnerability_code": "    function _msgSender() internal virtual view returns (address payable) {\n\n        return msg.sender;\n",
                    "message": "Function 'Context._msgSender' (aq.sol#281-283) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 285,
                    "vulnerability_to_line": 288,
                    "vulnerability_code": "    function _msgData() internal virtual view returns (bytes memory) {\n\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\n        return msg.data;\n",
                    "message": "Function 'Context._msgData' (aq.sol#285-288) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 349,
                    "vulnerability_to_line": 619,
                    "vulnerability_code": "contract aqarchain is Ownable{\n\n     using SafeMath for uint256;\n\n     \n\n     // Info of each user in seed,public and private .\n\n     \n\n    struct seedUserInfo {\n\n        string firstname;\n\n        string lastname;\n\n        string country;\n\n        uint256 amount;    \n\n        uint256 phase; \n\n        string aqarid;\n\n        string modeofpayment;\n\n    }\n\n     struct privateUserInfo {\n\n        string firstname;\n\n        string lastname;\n\n        string country;\n\n        uint256 amount;    \n\n        uint256 phase; \n\n        string aqarid;\n\n        string modeofpayment;\n\n    }\n\n     struct publicUserInfo {\n\n        string firstname;\n\n        string lastname;\n\n        string country;\n\n        uint256 amount;    \n\n        uint256 phase; \n\n        string aqarid;\n\n        string modeofpayment;\n\n    }\n\n    //aqar token address\n\n      IERC20 public token;\n\n      \n\n      //useraddress input toh you will get userinfo\n\n      mapping (address => seedUserInfo) public usermapseed;\n\n      mapping (address => privateUserInfo) public usermapprivate;\n\n      mapping (address => publicUserInfo) public usermappublic;\n\n      \n\n      // aqar id to get amount invested\n\n      mapping (string => uint256) public amountmaptouserseed;\n\n      mapping (string => uint256) public amountmaptouserprivate;\n\n      mapping (string => uint256) public amountmaptouserpublic;\n\n      \n\n      //count of total transactions\n\n      uint256 public i=0;\n\n      \n\n      //claim amount variable \n\n      uint256 claimamount=0;\n\n      \n\n      // prices of various rounds\n\n      uint256 public seedprice = 4;\n\n      uint256 public privateprice = 2857;\n\n      uint256 public publicprice = 22;\n\n      \n\n      //soldout amount\n\n      uint256 public seedamount;\n\n      uint256 public privateamount;\n\n      uint256 public publicamount;\n\n      \n\n      // variables to turn on and off private and public functions\n\n      bool public seedrun = false;\n\n      bool public privaterun = false;\n\n      bool public publicrun = false;\n\n      bool public claimbool = false;\n\n      \n\n      //all addresses\n\n      address[] public usersarr;\n\n      \n\n      // usdt address\n\n      IERC20 private usdt = IERC20(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684);\n\n      \n\n       //router to get bnb price\n\n       IUniswapV2Router01 pancakerouter1;\n\n    \n\n      constructor() public {\n\n        pancakerouter1 = IUniswapV2Router01(\n\n            0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\n\n        );\n\n    }\n\n      address[] private arr = [\n\n        0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd, //WBNB\n\n        0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684 //usdt\n\n    ];\n\n\n\n    function getBnbRate() public view returns (uint256) {\n\n        uint256[] memory amounts = pancakerouter1.getAmountsOut(1e18, arr);\n\n        return amounts[1];\n\n    }\n\n    function settoken(address _token)external onlyOwner{\n\n        token = IERC20(_token);\n\n    }\n\n    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000 ,\"Enter amount greater than 100 usd\");\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L444\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n\n\n        if(seedamount.add(_amount.mul(seedprice))<=7000000000000000000000000){\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(_amount.mul(seedprice));\n\n        seedamount=seedamount.add(_amount.mul(seedprice));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n\n    }\n\n    \n\n      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n            msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000,\n\n            \"the input bnb amount should be greater than hundred\"\n\n        );\n\n        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n\n        // SWC-Typographical Error: L467\n\n        require(seedrun = true,\"seed round is not started or over\");\n\n      \n\n       if(seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18))<=7000000000000000000000000){\n\n        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapseed[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18)),phase:seedprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserseed[_id]=amountmaptouserseed[_id].add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        seedamount=seedamount.add(msg.value.mul(getBnbRate()).mul(seedprice).div(1e18));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"try reducing amount or seed round is finished\");\n\n        }\n\n    }\n\n     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n        require(_amount>=100000000000000000000,\"Enter amount greter than 100 usd\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        // SWC-Typographical Error: L484\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        \n\n        if(privateamount.add(_amount.mul(privateprice).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(_amount.mul(privateprice).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"USDT\"});\n\n        amountmaptouserprivate[_id]= amountmaptouserprivate[_id].add(_amount.mul(privateprice).div(1000));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        privateamount=privateamount.add(_amount.mul(privateprice).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n\n    }\n\n      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n       require(\n\n           msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred usd\"\n\n        );\n\n        // SWC-Typographical Error: L505\n\n        require(privaterun=true,\"Private sale haven't started yet\");\n\n        require(privateamount<=12000000000000000000000000,\"private round token sale completed\");\n\n        \n\n      if(privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000))<=12000000000000000000000000){\n\n        usermapprivate[msg.sender]=privateUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermapprivate[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000)),phase:privateprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserprivate[_id]=amountmaptouserprivate[_id].add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        privateamount=privateamount.add(msg.value.mul(getBnbRate()).mul(privateprice).div(1e18).div(1000));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n\n    }\n\n    \n\n     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n\n         require(_amount>=100000000000000000000 ,\"Enter amount more than 100 usd\");\n\n        \n\n         require(publicamount<=1000000000000000000000000,\"public round token sale completed\");\n\n        // SWC-Typographical Error: L525\n\n         require(publicrun=true,\"Public sale haven't started yet\");\n\n        \n\n        if(publicamount.add(_amount.mul(publicprice).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(_amount.mul(publicprice).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"usdt\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(_amount.mul(publicprice).div(10));\n\n        usdt.transferFrom(msg.sender,address(this), _amount);\n\n        publicamount=publicamount.add(_amount.mul(publicprice).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"public round is over\");\n\n        }\n\n    }\n\n    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n\n        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n\n        require(\n\n             msg.value.mul(getBnbRate()).div(1e18) >= 100000000000000000000 ,\n\n            \"the input bnb amount should be greater than hundred and less than sfivethousand\"\n\n        );\n\n        // SWC-Typographical Error: L546\n\n        require(publicrun=true,\"Public sale haven't started yet\");\n\n        // SWC-Requirement Violation: L548\n\n        require(privateamount<=1000000000000000000000000,\"private round token sale completed\");\n\n     \n\n      if(publicamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10))<=1000000000000000000000000){\n\n        usermappublic[msg.sender]=publicUserInfo({firstname:_first,lastname:_last,country:_country,amount:usermappublic[msg.sender].amount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10)),phase:publicprice,aqarid:_id,modeofpayment:\"BNB\"});\n\n        amountmaptouserpublic[_id]=amountmaptouserpublic[_id].add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        publicamount=privateamount.add(msg.value.mul(getBnbRate()).mul(publicprice).div(1e18).div(10));\n\n        i++;\n\n        usersarr.push(msg.sender);\n\n        }\n\n        else{\n\n            revert(\"private round is over\");\n\n        }\n\n    }\n\n    function claim() external {\n\n        // SWC-Typographical Error: L562\n\n        require(claimbool = true,\"claiming amount should be true\");\n\n       \n\n        claimamount = usermappublic[msg.sender].amount.add(usermapseed[msg.sender].amount).add(usermapprivate[msg.sender].amount);\n\n        token.transfer(msg.sender,claimamount);\n\n        usermappublic[msg.sender].amount=0;\n\n        usermapprivate[msg.sender].amount=0;\n\n        usermapseed[msg.sender].amount=0;\n\n        claimamount=0;\n\n    }\n\n    \n\n    function privatemap(string calldata _first,string calldata _last,string calldata _country,address _address,uint256 _amount,string calldata _aqarid) external onlyOwner{\n\n        usermapseed[_address] = seedUserInfo({firstname:_first,lastname:_last,country:_country,amount:_amount,phase:seedprice,aqarid:_aqarid,modeofpayment:\"private\"});\n\n        amountmaptouserseed[_aqarid] = _amount;\n\n    }\n\n    function toggleclaim() external onlyOwner returns (uint256) {\n\n        claimbool = !claimbool;\n\n    }\n\n    function toggleseed() external onlyOwner returns (uint256) {\n\n        seedrun = !seedrun;\n\n    }\n\n     function toggleprivate() external onlyOwner returns (uint256) {\n\n        privaterun = !privaterun;\n\n    }\n\n      function togglepublic() external onlyOwner returns (uint256) {\n\n        publicrun = !publicrun;\n\n    }\n\n    \n\n     function getBnbBalance() public view returns (uint256) {\n\n        return address(this).balance;\n\n    }\n\n\n\n    function adminTransferBnbFund() external onlyOwner {\n\n        msg.sender.transfer(address(this).balance);\n\n    }\n\n\n\n    function getContractTokenBalance(IERC20 _token)\n\n        public\n\n        view\n\n        returns (uint256)\n\n    {\n\n        return _token.balanceOf(address(this));\n\n    }\n\n\n\n    function fundsWithdrawal(IERC20 _token, uint256 value) external onlyOwner {\n\n        require(\n\n            getContractTokenBalance(_token) >= value,\n\n            \"the contract doesnt have tokens\"\n\n        );\n\n        \n\n      _token.transfer(msg.sender,value);\n\n\n\n    }\n\n    \n\n  \n",
                    "message": "Contract 'aqarchain' (aq.sol#349-619) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 354,
                    "vulnerability_to_line": 362,
                    "vulnerability_code": "    struct seedUserInfo {\n\n        string firstname;\n\n        string lastname;\n\n        string country;\n\n        uint256 amount;    \n\n        uint256 phase; \n\n        string aqarid;\n\n        string modeofpayment;\n",
                    "message": "Struct 'aqarchain.seedUserInfo' (aq.sol#354-362) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 363,
                    "vulnerability_to_line": 371,
                    "vulnerability_code": "     struct privateUserInfo {\n\n        string firstname;\n\n        string lastname;\n\n        string country;\n\n        uint256 amount;    \n\n        uint256 phase; \n\n        string aqarid;\n\n        string modeofpayment;\n",
                    "message": "Struct 'aqarchain.privateUserInfo' (aq.sol#363-371) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 372,
                    "vulnerability_to_line": 380,
                    "vulnerability_code": "     struct publicUserInfo {\n\n        string firstname;\n\n        string lastname;\n\n        string country;\n\n        uint256 amount;    \n\n        uint256 phase; \n\n        string aqarid;\n\n        string modeofpayment;\n",
                    "message": "Struct 'aqarchain.publicUserInfo' (aq.sol#372-380) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function settoken(address _token)external onlyOwner{\n",
                    "message": "Parameter '_token' of aqarchain.settoken (aq.sol#439) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_first' of aqarchain.seedusdt (aq.sol#442) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_last' of aqarchain.seedusdt (aq.sol#442) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_country' of aqarchain.seedusdt (aq.sol#442) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_id' of aqarchain.seedusdt (aq.sol#442) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_amount' of aqarchain.seedusdt (aq.sol#442) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_first' of aqarchain.seedbnb (aq.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_last' of aqarchain.seedbnb (aq.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_country' of aqarchain.seedbnb (aq.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 461,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function seedbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_id' of aqarchain.seedbnb (aq.sol#461) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_first' of aqarchain.privateusdt (aq.sol#482) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_last' of aqarchain.privateusdt (aq.sol#482) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_country' of aqarchain.privateusdt (aq.sol#482) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_id' of aqarchain.privateusdt (aq.sol#482) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 482,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function privateusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_amount' of aqarchain.privateusdt (aq.sol#482) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_first' of aqarchain.privatebnb (aq.sol#500) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_last' of aqarchain.privatebnb (aq.sol#500) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_country' of aqarchain.privatebnb (aq.sol#500) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 500,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      function privatebnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_id' of aqarchain.privatebnb (aq.sol#500) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_first' of aqarchain.publicusdt (aq.sol#522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_last' of aqarchain.publicusdt (aq.sol#522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_country' of aqarchain.publicusdt (aq.sol#522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_id' of aqarchain.publicusdt (aq.sol#522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 522,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     function publicusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": "Parameter '_amount' of aqarchain.publicusdt (aq.sol#522) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_first' of aqarchain.publicbnb (aq.sol#541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_last' of aqarchain.publicbnb (aq.sol#541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_country' of aqarchain.publicbnb (aq.sol#541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 541,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function publicbnb(string calldata _first,string calldata _last,string calldata _country,string calldata _id) external payable {\n",
                    "message": "Parameter '_id' of aqarchain.publicbnb (aq.sol#541) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function privatemap(string calldata _first,string calldata _last,string calldata _country,address _address,uint256 _amount,string calldata _aqarid) external onlyOwner{\n",
                    "message": "Parameter '_first' of aqarchain.privatemap (aq.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function privatemap(string calldata _first,string calldata _last,string calldata _country,address _address,uint256 _amount,string calldata _aqarid) external onlyOwner{\n",
                    "message": "Parameter '_last' of aqarchain.privatemap (aq.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function privatemap(string calldata _first,string calldata _last,string calldata _country,address _address,uint256 _amount,string calldata _aqarid) external onlyOwner{\n",
                    "message": "Parameter '_country' of aqarchain.privatemap (aq.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function privatemap(string calldata _first,string calldata _last,string calldata _country,address _address,uint256 _amount,string calldata _aqarid) external onlyOwner{\n",
                    "message": "Parameter '_address' of aqarchain.privatemap (aq.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function privatemap(string calldata _first,string calldata _last,string calldata _country,address _address,uint256 _amount,string calldata _aqarid) external onlyOwner{\n",
                    "message": "Parameter '_amount' of aqarchain.privatemap (aq.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 575,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function privatemap(string calldata _first,string calldata _last,string calldata _country,address _address,uint256 _amount,string calldata _aqarid) external onlyOwner{\n",
                    "message": "Parameter '_aqarid' of aqarchain.privatemap (aq.sol#575) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 600,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getContractTokenBalance(IERC20 _token)\n",
                    "message": "Parameter '_token' of aqarchain.getContractTokenBalance (aq.sol#600) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 608,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function fundsWithdrawal(IERC20 _token, uint256 value) external onlyOwner {\n",
                    "message": "Parameter '_token' of aqarchain.fundsWithdrawal (aq.sol#608) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      IERC20 private usdt = IERC20(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 427,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 431,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd, //WBNB\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 432,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684 //usdt\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_ADDRESS_HARDCODED",
                    "vulnerability_from_line": 332,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = address(0);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_OVERPOWERED_ROLE",
                    "vulnerability_from_line": 439,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function settoken(address _token)external onlyOwner{\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 3,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 292,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 420,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      IERC20 private usdt = IERC20(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 430,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      address[] private arr = [\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SAFEMATH",
                    "vulnerability_from_line": 350,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "     using SafeMath for uint256;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 amountA, uint256 amountB);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 amountToken, uint256 amountETH);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 amountA, uint256 amountB);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 87,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256 amountToken, uint256 amountETH);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 89,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 97,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapTokensForExactTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 105,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactETHForTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 112,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapTokensForExactETH(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 120,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForETH(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapETHForExactTokens(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 92,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 93,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 95,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 100,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 101,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 102,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 107,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 108,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 110,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external payable returns (uint256[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 116,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 117,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 118,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 123,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 124,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 125,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint256[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address[] calldata path,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        address to,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 132,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 deadline\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 133,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external payable returns (uint256[] memory amounts);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 398,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "      uint256 claimamount=0;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 423,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "       IUniswapV2Router01 pancakerouter1;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 442,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function seedusdt(string calldata _first,string calldata _last,string calldata _country,string calldata _id, uint256 _amount)  external returns (string memory aqarid){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 443,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_amount>=100000000000000000000 ,\"Enter amount greater than 100 usd\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 444,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedamount<=7000000000000000000000000,\"seed round token sale completed\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 446,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(seedrun = true,\"seed round is not started or over\");\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(seedamount.add(_amount.mul(seedprice))<=7000000000000000000000000){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(seedamount.add(_amount.mul(seedprice))<=7000000000000000000000000){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 448,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if(seedamount.add(_amount.mul(seedprice))<=7000000000000000000000000){\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usdt.transferFrom(msg.sender,address(this), _amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usdt.transferFrom(msg.sender,address(this), _amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usdt.transferFrom(msg.sender,address(this), _amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 449,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usdt.transferFrom(msg.sender,address(this), _amount);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 450,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        usermapseed[msg.sender]=seedUserInfo({firstname:_first,lastname:_last,country:_country,amount: usermapseed[msg.sender].amount.add(_amount.mul(seedprice)),phase:seedprice,aqarid:_id,modeofpayment:\"USDT\"});\n",
                    "message": null
                }
            ]
        }
    }
}