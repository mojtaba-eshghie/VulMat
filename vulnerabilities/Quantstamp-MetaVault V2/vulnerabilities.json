{
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Balancer.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Balancer.sol:\n\t- pragma solidity^0.6.2 (Balancer.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/PickleMasterChef.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in PickleMasterChef.sol:\n\t- pragma solidity^0.6.2 (PickleMasterChef.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function userInfo(uint _pid, address _user) external view returns (uint amount, uint rewardDebt);\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Yfii.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_4"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Yfii.sol:\n\t- pragma solidity^0.6.2 (Yfii.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of Yfii.withdraw (Yfii.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stake(uint) external;\n",
                    "message": "Parameter '' of Yfii.stake (Yfii.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of Yfii.balanceOf (Yfii.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/DForce.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_11"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in DForce.sol:\n\t- pragma solidity^0.6.2 (DForce.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 6,
                    "vulnerability_to_line": 12,
                    "vulnerability_code": "interface dRewards {\n\n    function withdraw(uint) external;\n\n    function getReward() external;\n\n    function stake(uint) external;\n\n    function balanceOf(address) external view returns (uint);\n\n    function exit() external;\n",
                    "message": "Contract 'dRewards' (DForce.sol#6-12) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of dRewards.withdraw (DForce.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function stake(uint) external;\n",
                    "message": "Parameter '' of dRewards.stake (DForce.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of dRewards.balanceOf (DForce.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "interface dERC20 {\n\n  function mint(address, uint256) external;\n\n  function redeem(address, uint) external;\n\n  function getTokenBalance(address) external view returns (uint);\n\n  function getExchangeRate() external view returns (uint);\n",
                    "message": "Contract 'dERC20' (DForce.sol#14-19) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address, uint256) external;\n",
                    "message": "Parameter '' of dERC20.mint (DForce.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function mint(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of dERC20.mint (DForce.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function redeem(address, uint) external;\n",
                    "message": "Parameter '' of dERC20.redeem (DForce.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function redeem(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of dERC20.redeem (DForce.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function getTokenBalance(address) external view returns (uint);\n",
                    "message": "Parameter '' of dERC20.getTokenBalance (DForce.sol#17) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Aave.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Aave.sol:\n\t- pragma solidity^0.6.2 (Aave.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 27,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns (\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function repay(address _reserve, uint _amount, address payable _onBehalfOf) external payable;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/PickleJar.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in PickleJar.sol:\n\t- pragma solidity^0.6.2 (PickleJar.sol#5): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Uniswap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Uniswap.sol:\n\t- pragma solidity^0.6.2 (Uniswap.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '' of Uni.swapExactTokensForTokens (Uniswap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_0' of Uni.swapExactTokensForTokens (Uniswap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_1' of Uni.swapExactTokensForTokens (Uniswap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_2' of Uni.swapExactTokensForTokens (Uniswap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n",
                    "message": "Parameter '_scope_3' of Uni.swapExactTokensForTokens (Uniswap.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/MStable.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in MStable.sol:\n\t- pragma solidity^0.6.2 (MStable.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address, uint) external;\n",
                    "message": "Parameter '' of MStable.mint (MStable.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of MStable.mint (MStable.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function redeem(address, uint) external;\n",
                    "message": "Parameter '' of MStable.redeem (MStable.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function redeem(address, uint) external;\n",
                    "message": "Parameter '_scope_0' of MStable.redeem (MStable.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": 16,
                    "vulnerability_code": "interface mSavings {\n\n    function depositSavings(uint) external;\n\n    function creditBalances(address) external view returns (uint);\n\n    function redeem(uint) external;\n\n    function exchangeRate() external view returns (uint);\n",
                    "message": "Contract 'mSavings' (MStable.sol#11-16) is not in CapWords\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function depositSavings(uint) external;\n",
                    "message": "Parameter '' of mSavings.depositSavings (MStable.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function creditBalances(address) external view returns (uint);\n",
                    "message": "Parameter '' of mSavings.creditBalances (MStable.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function redeem(uint) external;\n",
                    "message": "Parameter '' of mSavings.redeem (MStable.sol#14) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Stabilize.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_15"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Stabilize.sol:\n\t- pragma solidity^0.6.2 (Stabilize.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256) external;\n",
                    "message": "Parameter '' of IZPAToken.deposit (Stabilize.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function redeem(uint256) external;\n",
                    "message": "Parameter '' of IZPAToken.redeem (Stabilize.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256, uint256) external;\n",
                    "message": "Parameter '' of IZPAPool.deposit (Stabilize.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint256, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IZPAPool.deposit (Stabilize.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256, uint256) external;\n",
                    "message": "Parameter '' of IZPAPool.withdraw (Stabilize.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IZPAPool.withdraw (Stabilize.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(uint256, uint256) external;\n",
                    "message": "Parameter '' of IZPAPool.exit (Stabilize.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exit(uint256, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IZPAPool.exit (Stabilize.sol#20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getReward(uint256) external;\n",
                    "message": "Parameter '' of IZPAPool.getReward (Stabilize.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rewardEarned(uint256, address) external view returns (uint256);\n",
                    "message": "Parameter '' of IZPAPool.rewardEarned (Stabilize.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 22,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function rewardEarned(uint256, address) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IZPAPool.rewardEarned (Stabilize.sol#22) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 23,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function poolTokenAddress(uint256) external view returns (address);\n",
                    "message": "Parameter '' of IZPAPool.poolTokenAddress (Stabilize.sol#23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function poolBalance(uint256, address) external view returns (uint256);\n",
                    "message": "Parameter '' of IZPAPool.poolBalance (Stabilize.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function poolBalance(uint256, address) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IZPAPool.poolBalance (Stabilize.sol#24) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Converter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Converter.sol:\n\t- pragma solidity^0.6.2 (Converter.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function convert(address) external returns (uint);\n",
                    "message": "Parameter '' of Converter.convert (Converter.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Curve.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_9"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Curve.sol:\n\t- pragma solidity^0.6.2 (Curve.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "  function get_virtual_price() external view returns (uint);\n",
                    "message": "Function 'ICurveFi.get_virtual_price' (Curve.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": 11,
                    "vulnerability_code": "  function add_liquidity(\n\n    uint256[4] calldata amounts,\n\n    uint256 min_mint_amount\n",
                    "message": "Function 'ICurveFi.add_liquidity' (Curve.sol#8-11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 min_mint_amount\n",
                    "message": "Parameter 'min_mint_amount' of ICurveFi.add_liquidity (Curve.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": 15,
                    "vulnerability_code": "  function remove_liquidity_imbalance(\n\n    uint256[4] calldata amounts,\n\n    uint256 max_burn_amount\n",
                    "message": "Function 'ICurveFi.remove_liquidity_imbalance' (Curve.sol#12-15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint256 max_burn_amount\n",
                    "message": "Parameter 'max_burn_amount' of ICurveFi.remove_liquidity_imbalance (Curve.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 19,
                    "vulnerability_code": "  function remove_liquidity(\n\n    uint256 _amount,\n\n    uint256[4] calldata amounts\n",
                    "message": "Function 'ICurveFi.remove_liquidity' (Curve.sol#16-19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_from_amount' of ICurveFi.exchange (Curve.sol#21) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\n",
                    "message": "Parameter '_min_to_amount' of ICurveFi.exchange (Curve.sol#21) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/OneSplitAudit.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_1"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in OneSplitAudit.sol:\n\t- pragma solidity^0.6.2 (OneSplitAudit.sol#4): it allows old versions\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 28,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swap(\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256[] calldata distribution,\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint256 flags\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_VISIBILITY",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        returns(uint256 returnAmount);\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/interfaces/Gauge.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in Gauge.sol:\n\t- pragma solidity^0.6.2 (Gauge.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint) external;\n",
                    "message": "Parameter '' of Gauge.deposit (Gauge.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint);\n",
                    "message": "Parameter '' of Gauge.balanceOf (Gauge.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint) external;\n",
                    "message": "Parameter '' of Gauge.withdraw (Gauge.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint);\n",
                    "message": "Function 'Gauge.claimable_tokens' (Gauge.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function claimable_tokens(address) external view returns (uint);\n",
                    "message": "Parameter '' of Gauge.claimable_tokens (Gauge.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function mint(address) external;\n",
                    "message": "Parameter '' of Mintr.mint (Gauge.sol#14) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/IStableSwap3Pool.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_14"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in IStableSwap3Pool.sol:\n\t- pragma solidity0.6.12 (IStableSwap3Pool.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function get_virtual_price() external view returns (uint);\n",
                    "message": "Function 'IStableSwap3Pool.get_virtual_price' (IStableSwap3Pool.sol#10) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balances(uint) external view returns (uint);\n",
                    "message": "Parameter '' of IStableSwap3Pool.balances (IStableSwap3Pool.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\n",
                    "message": "Function 'IStableSwap3Pool.get_dy' (IStableSwap3Pool.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\n",
                    "message": "Parameter 'min_dy' of IStableSwap3Pool.exchange (IStableSwap3Pool.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\n",
                    "message": "Function 'IStableSwap3Pool.add_liquidity' (IStableSwap3Pool.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\n",
                    "message": "Parameter 'min_mint_amount' of IStableSwap3Pool.add_liquidity (IStableSwap3Pool.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\n",
                    "message": "Function 'IStableSwap3Pool.remove_liquidity' (IStableSwap3Pool.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\n",
                    "message": "Function 'IStableSwap3Pool.remove_liquidity_one_coin' (IStableSwap3Pool.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\n",
                    "message": "Parameter '_token_amount' of IStableSwap3Pool.remove_liquidity_one_coin (IStableSwap3Pool.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\n",
                    "message": "Parameter 'min_amount' of IStableSwap3Pool.remove_liquidity_one_coin (IStableSwap3Pool.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\n",
                    "message": "Function 'IStableSwap3Pool.calc_token_amount' (IStableSwap3Pool.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\n",
                    "message": "Function 'IStableSwap3Pool.calc_withdraw_one_coin' (IStableSwap3Pool.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\n",
                    "message": "Parameter '_token_amount' of IStableSwap3Pool.calc_withdraw_one_coin (IStableSwap3Pool.sol#18) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/IStrategyControllerConverter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_2"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in IStrategyControllerConverter.sol:\n\t- pragma solidity0.6.12 (IStrategyControllerConverter.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function convert(address) external returns (uint256);\n",
                    "message": "Parameter '' of IStrategyControllerConverter.convert (IStrategyControllerConverter.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/ISwap.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_6"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": "Detected issues with version pragma in ISwap.sol:\n\t- pragma solidity^0.6.2 (ISwap.sol#4): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\n",
                    "message": "Parameter '' of ISwap.swapExactTokensForTokens (ISwap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of ISwap.swapExactTokensForTokens (ISwap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\n",
                    "message": "Parameter '_scope_1' of ISwap.swapExactTokensForTokens (ISwap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\n",
                    "message": "Parameter '_scope_2' of ISwap.swapExactTokensForTokens (ISwap.sol#7) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\n",
                    "message": "Parameter '_scope_3' of ISwap.swapExactTokensForTokens (ISwap.sol#7) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_PRAGMAS_VERSION",
                    "vulnerability_from_line": 4,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity ^0.6.2;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/IStrategy.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in IStrategy.sol:\n\t- pragma solidity0.6.12 (IStrategy.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address) external;\n",
                    "message": "Parameter '' of IStrategy.withdraw (IStrategy.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(uint256) external;\n",
                    "message": "Parameter '' of IStrategy.withdraw (IStrategy.sol#16) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/IVaultManager.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in IVaultManager.sol:\n\t- pragma solidity0.6.12 (IVaultManager.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function controllers(address) external view returns (bool);\n",
                    "message": "Parameter '' of IVaultManager.controllers (IVaultManager.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (bool);\n",
                    "message": "Parameter '' of IVaultManager.vaults (IVaultManager.sol#21) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/IConverter.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_7"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in IConverter.sol:\n\t- pragma solidity0.6.12 (IConverter.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": 20,
                    "vulnerability_code": "    function convert_rate(\n\n        address _input,\n\n        address _output,\n\n        uint _inputAmount\n",
                    "message": "Function 'IConverter.convert_rate' (IConverter.sol#16-20) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 21,
                    "vulnerability_to_line": 23,
                    "vulnerability_code": "    function convert_stables(\n\n        uint[3] calldata amounts\n",
                    "message": "Function 'IConverter.convert_stables' (IConverter.sol#21-23) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 24,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function get_dy(int128 i, int128 j, uint dx) external view returns (uint);\n",
                    "message": "Function 'IConverter.get_dy' (IConverter.sol#24) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 25,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function exchange(int128 i, int128 j, uint dx, uint min_dy) external returns (uint dy);\n",
                    "message": "Parameter 'min_dy' of IConverter.exchange (IConverter.sol#25) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 26,
                    "vulnerability_to_line": 29,
                    "vulnerability_code": "    function calc_token_amount(\n\n        uint[3] calldata amounts,\n\n        bool deposit\n",
                    "message": "Function 'IConverter.calc_token_amount' (IConverter.sol#26-29) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 30,
                    "vulnerability_to_line": 33,
                    "vulnerability_code": "    function calc_token_amount_withdraw(\n\n        uint _shares,\n\n        address _output\n",
                    "message": "Function 'IConverter.calc_token_amount_withdraw' (IConverter.sol#30-33) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/IController.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_12"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in IController.sol:\n\t- pragma solidity0.6.12 (IController.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function balanceOf(address) external view returns (uint256);\n",
                    "message": "Parameter '' of IController.balanceOf (IController.sol#8) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint256) external;\n",
                    "message": "Parameter '' of IController.earn (IController.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function earn(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IController.earn (IController.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 11,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function harvestStrategy(address) external;\n",
                    "message": "Parameter '' of IController.harvestStrategy (IController.sol#11) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function strategyTokens(address) external returns (address);\n",
                    "message": "Parameter '' of IController.strategyTokens (IController.sol#12) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 13,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function vaults(address) external view returns (address);\n",
                    "message": "Parameter '' of IController.vaults (IController.sol#13) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function want(address) external view returns (address);\n",
                    "message": "Parameter '' of IController.want (IController.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint256) external;\n",
                    "message": "Parameter '' of IController.withdraw (IController.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 15,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdraw(address, uint256) external;\n",
                    "message": "Parameter '_scope_0' of IController.withdraw (IController.sol#15) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawFee(address, uint256) external view returns (uint256);\n",
                    "message": "Parameter '' of IController.withdrawFee (IController.sol#16) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawFee(address, uint256) external view returns (uint256);\n",
                    "message": "Parameter '_scope_0' of IController.withdrawFee (IController.sol#16) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/IMetaVault.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_5"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 7,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in IMetaVault.sol:\n\t- pragma solidity0.6.12 (IMetaVault.sol#7): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calc_token_amount_deposit(uint[3] calldata amounts) external view returns (uint);\n",
                    "message": "Function 'IMetaVault.calc_token_amount_deposit' (IMetaVault.sol#17) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 18,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\n",
                    "message": "Function 'IMetaVault.calc_token_amount_withdraw' (IMetaVault.sol#18) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function convert_rate(address _input, uint _amount) external view returns (uint);\n",
                    "message": "Function 'IMetaVault.convert_rate' (IMetaVault.sol#19) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function deposit(uint _amount, address _input, uint _min_mint_amount, bool _isStake) external;\n",
                    "message": "Parameter '_min_mint_amount' of IMetaVault.deposit (IMetaVault.sol#20) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/mock/MockERC20.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 36,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    constructor(\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol,\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 40,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    ) public {\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 41,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _name = name;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 42,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _symbol = symbol;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 43,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _decimals = decimals;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 44,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        _owner = msg.sender;\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "non-payable-constructor",
                    "vulnerability_from_line": 45,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    }\n",
                    "message": "Consider making costructor payable to save gas."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 20,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == _owner, \"ERR_NOT_OWNER\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 60,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[src] >= amt, \"!bal\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 115,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(_balance[msg.sender] >= amt, \"!bal\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-custom-error-not-require",
                    "vulnerability_from_line": 126,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"!spender\");\n",
                    "message": "Consider using custom errors as they are more gas efficient while allowing developers  to describe the error in detail using NatSpec."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 128,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        if (msg.sender != src && _allowance[src][msg.sender] != uint256(- 1)) {\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 129,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            _allowance[src][msg.sender] = sub(_allowance[src][msg.sender], amt);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 130,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                },
                {
                    "name": "use-nested-if",
                    "vulnerability_from_line": 131,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        }\n",
                    "message": "Using nested is cheaper than using && multiple check combinations. There are more advantages, such as easier to read code and better coverage reports."
                }
            ]
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_19"
            ],
            "vulnerability_findings": [
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 37,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory name,\n",
                    "message": "MockERC20.constructor.name (local variable @ MockERC20.sol#37) shadows:\n\t- MockERC20.name (function @ MockERC20.sol#47-49)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 38,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        string memory symbol,\n",
                    "message": "MockERC20.constructor.symbol (local variable @ MockERC20.sol#38) shadows:\n\t- MockERC20.symbol (function @ MockERC20.sol#51-53)\n"
                },
                {
                    "name": "shadowing-local",
                    "vulnerability_from_line": 39,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "        uint8 decimals\n",
                    "message": "MockERC20.constructor.decimals (local variable @ MockERC20.sol#39) shadows:\n\t- MockERC20.decimals (function @ MockERC20.sol#55-57)\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 47,
                    "vulnerability_to_line": 49,
                    "vulnerability_code": "    function name() public view returns (string memory) {\n\n        return _name;\n",
                    "message": "MockERC20.name (MockERC20.sol#47-49) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 51,
                    "vulnerability_to_line": 53,
                    "vulnerability_code": "    function symbol() public view returns (string memory) {\n\n        return _symbol;\n",
                    "message": "MockERC20.symbol (MockERC20.sol#51-53) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 55,
                    "vulnerability_to_line": 57,
                    "vulnerability_code": "    function decimals() public view returns (uint8) {\n\n        return _decimals;\n",
                    "message": "MockERC20.decimals (MockERC20.sol#55-57) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 90,
                    "vulnerability_to_line": 92,
                    "vulnerability_code": "    function balanceOf(address whom) public view returns (uint) {\n\n        return _balance[whom];\n",
                    "message": "MockERC20.balanceOf (MockERC20.sol#90-92) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 94,
                    "vulnerability_to_line": 97,
                    "vulnerability_code": "    function faucet(uint256 amt) public returns (bool) {\n\n        _mint(msg.sender, amt);\n\n        return true;\n",
                    "message": "MockERC20.faucet (MockERC20.sol#94-97) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 99,
                    "vulnerability_to_line": 101,
                    "vulnerability_code": "    function totalSupply() public view returns (uint) {\n\n        return _totalSupply;\n",
                    "message": "MockERC20.totalSupply (MockERC20.sol#99-101) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 109,
                    "vulnerability_to_line": 112,
                    "vulnerability_code": "    function mint(address dst, uint256 amt) public _onlyOwner_ returns (bool) {\n\n        _mint(dst, amt);\n\n        return true;\n",
                    "message": "MockERC20.mint (MockERC20.sol#109-112) should be declared external\n"
                },
                {
                    "name": "external-function",
                    "vulnerability_from_line": 114,
                    "vulnerability_to_line": 118,
                    "vulnerability_code": "    function burn(uint amt) public returns (bool) {\n\n        require(_balance[msg.sender] >= amt, \"!bal\");\n\n        _burn(msg.sender, amt);\n\n        return true;\n",
                    "message": "MockERC20.burn (MockERC20.sol#114-118) should be declared external\n"
                },
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in MockERC20.sol:\n\t- pragma solidity0.6.12 (MockERC20.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 59,
                    "vulnerability_to_line": 64,
                    "vulnerability_code": "    function _move(address src, address dst, uint amt) internal {\n\n        require(_balance[src] >= amt, \"!bal\");\n\n        _balance[src] = sub(_balance[src], amt);\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        emit Transfer(src, dst, amt);\n",
                    "message": "Function 'MockERC20._move' (MockERC20.sol#59-64) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 66,
                    "vulnerability_to_line": 68,
                    "vulnerability_code": "    function _push(address to, uint amt) internal {\n\n        _move(address(this), to, amt);\n",
                    "message": "Function 'MockERC20._push' (MockERC20.sol#66-68) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 70,
                    "vulnerability_to_line": 72,
                    "vulnerability_code": "    function _pull(address from, uint amt) internal {\n\n        _move(from, address(this), amt);\n",
                    "message": "Function 'MockERC20._pull' (MockERC20.sol#70-72) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 74,
                    "vulnerability_to_line": 78,
                    "vulnerability_code": "    function _mint(address dst, uint amt) internal {\n\n        _balance[dst] = add(_balance[dst], amt);\n\n        _totalSupply = add(_totalSupply, amt);\n\n        emit Transfer(address(0), dst, amt);\n",
                    "message": "Function 'MockERC20._mint' (MockERC20.sol#74-78) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 80,
                    "vulnerability_to_line": 84,
                    "vulnerability_code": "    function _burn(address dst, uint amt) internal {\n\n        _balance[dst] = sub(_balance[dst], amt);\n\n        _totalSupply = sub(_totalSupply, amt);\n\n        emit Transfer(dst, address(0), amt);\n",
                    "message": "Function 'MockERC20._burn' (MockERC20.sol#80-84) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 14,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint internal _totalSupply;\n",
                    "message": "Variable 'MockERC20._totalSupply' (MockERC20.sol#14) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 19,
                    "vulnerability_to_line": 22,
                    "vulnerability_code": "    modifier _onlyOwner_() {\n\n        require(msg.sender == _owner, \"ERR_NOT_OWNER\");\n\n        _;\n",
                    "message": "Modifier 'MockERC20._onlyOwner_' (MockERC20.sol#19-22) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": [
                {
                    "name": "SOLIDITY_ERC20_APPROVE",
                    "vulnerability_from_line": 103,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function approve(address dst, uint amt) external returns (bool) {\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 8,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _name;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    string private _symbol;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    uint8 private _decimals;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 12,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    address private _owner;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 16,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => uint)                   private _balance;\n",
                    "message": null
                },
                {
                    "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
                    "vulnerability_from_line": 17,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    mapping(address => mapping(address => uint)) private _allowance;\n",
                    "message": null
                }
            ]
        }
    },
    "metavault-3538b8a8c1ea4ec2b68a635c48b938aa1acfbc26/contracts/metavault/controllers/StrategyControllerV1.sol": {
        "semgrep": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        },
        "slither": {
            "successfull_analysis": true,
            "errors": [
                "EXIT_CODE_3"
            ],
            "vulnerability_findings": [
                {
                    "name": "solc-version",
                    "vulnerability_from_line": 5,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "pragma solidity 0.6.12;\n",
                    "message": "Detected issues with version pragma in StrategyControllerV1.sol:\n\t- pragma solidity0.6.12 (StrategyControllerV1.sol#5): it allows old versions\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 9,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function setInvestEnabled(bool) external;\n",
                    "message": "Parameter '' of StrategyControllerV1.setInvestEnabled (StrategyControllerV1.sol#9) is not in mixedCase\n"
                },
                {
                    "name": "naming-convention",
                    "vulnerability_from_line": 10,
                    "vulnerability_to_line": null,
                    "vulnerability_code": "    function withdrawAll(address) external;\n",
                    "message": "Parameter '' of StrategyControllerV1.withdrawAll (StrategyControllerV1.sol#10) is not in mixedCase\n"
                }
            ]
        },
        "smartcheck": {
            "successfull_analysis": true,
            "errors": [],
            "vulnerability_findings": []
        }
    }
}